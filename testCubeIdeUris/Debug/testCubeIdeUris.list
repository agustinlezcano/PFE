
testCubeIdeUris.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011770  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b0c  08011940  08011940  00012940  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801244c  0801244c  00014110  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801244c  0801244c  0001344c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012454  08012454  00014110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08012454  08012454  00013454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801245c  0801245c  0001345c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000110  20000000  08012460  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000db4c  20000110  08012570  00014110  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000dc5c  08012570  00014c5c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00014110  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a71f  00000000  00000000  00014140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ef6  00000000  00000000  0002e85f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001698  00000000  00000000  00032758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001175  00000000  00000000  00033df0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00008b23  00000000  00000000  00034f65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b2bd  00000000  00000000  0003da88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e60c1  00000000  00000000  00058d45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000076  00000000  00000000  0013ee06  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c24  00000000  00000000  0013ee7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00145aa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000110 	.word	0x20000110
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08011928 	.word	0x08011928

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000114 	.word	0x20000114
 800020c:	08011928 	.word	0x08011928

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_ldivmod>:
 80002e0:	b97b      	cbnz	r3, 8000302 <__aeabi_ldivmod+0x22>
 80002e2:	b972      	cbnz	r2, 8000302 <__aeabi_ldivmod+0x22>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bfbe      	ittt	lt
 80002e8:	2000      	movlt	r0, #0
 80002ea:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80002ee:	e006      	blt.n	80002fe <__aeabi_ldivmod+0x1e>
 80002f0:	bf08      	it	eq
 80002f2:	2800      	cmpeq	r0, #0
 80002f4:	bf1c      	itt	ne
 80002f6:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 80002fa:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002fe:	f000 b9d3 	b.w	80006a8 <__aeabi_idiv0>
 8000302:	f1ad 0c08 	sub.w	ip, sp, #8
 8000306:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030a:	2900      	cmp	r1, #0
 800030c:	db09      	blt.n	8000322 <__aeabi_ldivmod+0x42>
 800030e:	2b00      	cmp	r3, #0
 8000310:	db1a      	blt.n	8000348 <__aeabi_ldivmod+0x68>
 8000312:	f000 f84d 	bl	80003b0 <__udivmoddi4>
 8000316:	f8dd e004 	ldr.w	lr, [sp, #4]
 800031a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031e:	b004      	add	sp, #16
 8000320:	4770      	bx	lr
 8000322:	4240      	negs	r0, r0
 8000324:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000328:	2b00      	cmp	r3, #0
 800032a:	db1b      	blt.n	8000364 <__aeabi_ldivmod+0x84>
 800032c:	f000 f840 	bl	80003b0 <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4240      	negs	r0, r0
 800033c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000340:	4252      	negs	r2, r2
 8000342:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000346:	4770      	bx	lr
 8000348:	4252      	negs	r2, r2
 800034a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800034e:	f000 f82f 	bl	80003b0 <__udivmoddi4>
 8000352:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000356:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800035a:	b004      	add	sp, #16
 800035c:	4240      	negs	r0, r0
 800035e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000362:	4770      	bx	lr
 8000364:	4252      	negs	r2, r2
 8000366:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800036a:	f000 f821 	bl	80003b0 <__udivmoddi4>
 800036e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000372:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000376:	b004      	add	sp, #16
 8000378:	4252      	negs	r2, r2
 800037a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037e:	4770      	bx	lr

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000390:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000394:	f000 b988 	b.w	80006a8 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	468e      	mov	lr, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	4688      	mov	r8, r1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14a      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d962      	bls.n	800048c <__udivmoddi4+0xdc>
 80003c6:	fab2 f682 	clz	r6, r2
 80003ca:	b14e      	cbz	r6, 80003e0 <__udivmoddi4+0x30>
 80003cc:	f1c6 0320 	rsb	r3, r6, #32
 80003d0:	fa01 f806 	lsl.w	r8, r1, r6
 80003d4:	fa20 f303 	lsr.w	r3, r0, r3
 80003d8:	40b7      	lsls	r7, r6
 80003da:	ea43 0808 	orr.w	r8, r3, r8
 80003de:	40b4      	lsls	r4, r6
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	fa1f fc87 	uxth.w	ip, r7
 80003e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003ec:	0c23      	lsrs	r3, r4, #16
 80003ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80003f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f6:	fb01 f20c 	mul.w	r2, r1, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0x62>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000404:	f080 80ea 	bcs.w	80005dc <__udivmoddi4+0x22c>
 8000408:	429a      	cmp	r2, r3
 800040a:	f240 80e7 	bls.w	80005dc <__udivmoddi4+0x22c>
 800040e:	3902      	subs	r1, #2
 8000410:	443b      	add	r3, r7
 8000412:	1a9a      	subs	r2, r3, r2
 8000414:	b2a3      	uxth	r3, r4
 8000416:	fbb2 f0fe 	udiv	r0, r2, lr
 800041a:	fb0e 2210 	mls	r2, lr, r0, r2
 800041e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000422:	fb00 fc0c 	mul.w	ip, r0, ip
 8000426:	459c      	cmp	ip, r3
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x8e>
 800042a:	18fb      	adds	r3, r7, r3
 800042c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000430:	f080 80d6 	bcs.w	80005e0 <__udivmoddi4+0x230>
 8000434:	459c      	cmp	ip, r3
 8000436:	f240 80d3 	bls.w	80005e0 <__udivmoddi4+0x230>
 800043a:	443b      	add	r3, r7
 800043c:	3802      	subs	r0, #2
 800043e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000442:	eba3 030c 	sub.w	r3, r3, ip
 8000446:	2100      	movs	r1, #0
 8000448:	b11d      	cbz	r5, 8000452 <__udivmoddi4+0xa2>
 800044a:	40f3      	lsrs	r3, r6
 800044c:	2200      	movs	r2, #0
 800044e:	e9c5 3200 	strd	r3, r2, [r5]
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d905      	bls.n	8000466 <__udivmoddi4+0xb6>
 800045a:	b10d      	cbz	r5, 8000460 <__udivmoddi4+0xb0>
 800045c:	e9c5 0100 	strd	r0, r1, [r5]
 8000460:	2100      	movs	r1, #0
 8000462:	4608      	mov	r0, r1
 8000464:	e7f5      	b.n	8000452 <__udivmoddi4+0xa2>
 8000466:	fab3 f183 	clz	r1, r3
 800046a:	2900      	cmp	r1, #0
 800046c:	d146      	bne.n	80004fc <__udivmoddi4+0x14c>
 800046e:	4573      	cmp	r3, lr
 8000470:	d302      	bcc.n	8000478 <__udivmoddi4+0xc8>
 8000472:	4282      	cmp	r2, r0
 8000474:	f200 8105 	bhi.w	8000682 <__udivmoddi4+0x2d2>
 8000478:	1a84      	subs	r4, r0, r2
 800047a:	eb6e 0203 	sbc.w	r2, lr, r3
 800047e:	2001      	movs	r0, #1
 8000480:	4690      	mov	r8, r2
 8000482:	2d00      	cmp	r5, #0
 8000484:	d0e5      	beq.n	8000452 <__udivmoddi4+0xa2>
 8000486:	e9c5 4800 	strd	r4, r8, [r5]
 800048a:	e7e2      	b.n	8000452 <__udivmoddi4+0xa2>
 800048c:	2a00      	cmp	r2, #0
 800048e:	f000 8090 	beq.w	80005b2 <__udivmoddi4+0x202>
 8000492:	fab2 f682 	clz	r6, r2
 8000496:	2e00      	cmp	r6, #0
 8000498:	f040 80a4 	bne.w	80005e4 <__udivmoddi4+0x234>
 800049c:	1a8a      	subs	r2, r1, r2
 800049e:	0c03      	lsrs	r3, r0, #16
 80004a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a4:	b280      	uxth	r0, r0
 80004a6:	b2bc      	uxth	r4, r7
 80004a8:	2101      	movs	r1, #1
 80004aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80004b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004b6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ba:	429a      	cmp	r2, r3
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x11e>
 80004be:	18fb      	adds	r3, r7, r3
 80004c0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80004c4:	d202      	bcs.n	80004cc <__udivmoddi4+0x11c>
 80004c6:	429a      	cmp	r2, r3
 80004c8:	f200 80e0 	bhi.w	800068c <__udivmoddi4+0x2dc>
 80004cc:	46c4      	mov	ip, r8
 80004ce:	1a9b      	subs	r3, r3, r2
 80004d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004dc:	fb02 f404 	mul.w	r4, r2, r4
 80004e0:	429c      	cmp	r4, r3
 80004e2:	d907      	bls.n	80004f4 <__udivmoddi4+0x144>
 80004e4:	18fb      	adds	r3, r7, r3
 80004e6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80004ea:	d202      	bcs.n	80004f2 <__udivmoddi4+0x142>
 80004ec:	429c      	cmp	r4, r3
 80004ee:	f200 80ca 	bhi.w	8000686 <__udivmoddi4+0x2d6>
 80004f2:	4602      	mov	r2, r0
 80004f4:	1b1b      	subs	r3, r3, r4
 80004f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80004fa:	e7a5      	b.n	8000448 <__udivmoddi4+0x98>
 80004fc:	f1c1 0620 	rsb	r6, r1, #32
 8000500:	408b      	lsls	r3, r1
 8000502:	fa22 f706 	lsr.w	r7, r2, r6
 8000506:	431f      	orrs	r7, r3
 8000508:	fa0e f401 	lsl.w	r4, lr, r1
 800050c:	fa20 f306 	lsr.w	r3, r0, r6
 8000510:	fa2e fe06 	lsr.w	lr, lr, r6
 8000514:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000518:	4323      	orrs	r3, r4
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	fa1f fc87 	uxth.w	ip, r7
 8000522:	fbbe f0f9 	udiv	r0, lr, r9
 8000526:	0c1c      	lsrs	r4, r3, #16
 8000528:	fb09 ee10 	mls	lr, r9, r0, lr
 800052c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000530:	fb00 fe0c 	mul.w	lr, r0, ip
 8000534:	45a6      	cmp	lr, r4
 8000536:	fa02 f201 	lsl.w	r2, r2, r1
 800053a:	d909      	bls.n	8000550 <__udivmoddi4+0x1a0>
 800053c:	193c      	adds	r4, r7, r4
 800053e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000542:	f080 809c 	bcs.w	800067e <__udivmoddi4+0x2ce>
 8000546:	45a6      	cmp	lr, r4
 8000548:	f240 8099 	bls.w	800067e <__udivmoddi4+0x2ce>
 800054c:	3802      	subs	r0, #2
 800054e:	443c      	add	r4, r7
 8000550:	eba4 040e 	sub.w	r4, r4, lr
 8000554:	fa1f fe83 	uxth.w	lr, r3
 8000558:	fbb4 f3f9 	udiv	r3, r4, r9
 800055c:	fb09 4413 	mls	r4, r9, r3, r4
 8000560:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000564:	fb03 fc0c 	mul.w	ip, r3, ip
 8000568:	45a4      	cmp	ip, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x1ce>
 800056c:	193c      	adds	r4, r7, r4
 800056e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000572:	f080 8082 	bcs.w	800067a <__udivmoddi4+0x2ca>
 8000576:	45a4      	cmp	ip, r4
 8000578:	d97f      	bls.n	800067a <__udivmoddi4+0x2ca>
 800057a:	3b02      	subs	r3, #2
 800057c:	443c      	add	r4, r7
 800057e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000582:	eba4 040c 	sub.w	r4, r4, ip
 8000586:	fba0 ec02 	umull	lr, ip, r0, r2
 800058a:	4564      	cmp	r4, ip
 800058c:	4673      	mov	r3, lr
 800058e:	46e1      	mov	r9, ip
 8000590:	d362      	bcc.n	8000658 <__udivmoddi4+0x2a8>
 8000592:	d05f      	beq.n	8000654 <__udivmoddi4+0x2a4>
 8000594:	b15d      	cbz	r5, 80005ae <__udivmoddi4+0x1fe>
 8000596:	ebb8 0203 	subs.w	r2, r8, r3
 800059a:	eb64 0409 	sbc.w	r4, r4, r9
 800059e:	fa04 f606 	lsl.w	r6, r4, r6
 80005a2:	fa22 f301 	lsr.w	r3, r2, r1
 80005a6:	431e      	orrs	r6, r3
 80005a8:	40cc      	lsrs	r4, r1
 80005aa:	e9c5 6400 	strd	r6, r4, [r5]
 80005ae:	2100      	movs	r1, #0
 80005b0:	e74f      	b.n	8000452 <__udivmoddi4+0xa2>
 80005b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005b6:	0c01      	lsrs	r1, r0, #16
 80005b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005bc:	b280      	uxth	r0, r0
 80005be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005c2:	463b      	mov	r3, r7
 80005c4:	4638      	mov	r0, r7
 80005c6:	463c      	mov	r4, r7
 80005c8:	46b8      	mov	r8, r7
 80005ca:	46be      	mov	lr, r7
 80005cc:	2620      	movs	r6, #32
 80005ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80005d2:	eba2 0208 	sub.w	r2, r2, r8
 80005d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005da:	e766      	b.n	80004aa <__udivmoddi4+0xfa>
 80005dc:	4601      	mov	r1, r0
 80005de:	e718      	b.n	8000412 <__udivmoddi4+0x62>
 80005e0:	4610      	mov	r0, r2
 80005e2:	e72c      	b.n	800043e <__udivmoddi4+0x8e>
 80005e4:	f1c6 0220 	rsb	r2, r6, #32
 80005e8:	fa2e f302 	lsr.w	r3, lr, r2
 80005ec:	40b7      	lsls	r7, r6
 80005ee:	40b1      	lsls	r1, r6
 80005f0:	fa20 f202 	lsr.w	r2, r0, r2
 80005f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005f8:	430a      	orrs	r2, r1
 80005fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80005fe:	b2bc      	uxth	r4, r7
 8000600:	fb0e 3318 	mls	r3, lr, r8, r3
 8000604:	0c11      	lsrs	r1, r2, #16
 8000606:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800060a:	fb08 f904 	mul.w	r9, r8, r4
 800060e:	40b0      	lsls	r0, r6
 8000610:	4589      	cmp	r9, r1
 8000612:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000616:	b280      	uxth	r0, r0
 8000618:	d93e      	bls.n	8000698 <__udivmoddi4+0x2e8>
 800061a:	1879      	adds	r1, r7, r1
 800061c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000620:	d201      	bcs.n	8000626 <__udivmoddi4+0x276>
 8000622:	4589      	cmp	r9, r1
 8000624:	d81f      	bhi.n	8000666 <__udivmoddi4+0x2b6>
 8000626:	eba1 0109 	sub.w	r1, r1, r9
 800062a:	fbb1 f9fe 	udiv	r9, r1, lr
 800062e:	fb09 f804 	mul.w	r8, r9, r4
 8000632:	fb0e 1119 	mls	r1, lr, r9, r1
 8000636:	b292      	uxth	r2, r2
 8000638:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800063c:	4542      	cmp	r2, r8
 800063e:	d229      	bcs.n	8000694 <__udivmoddi4+0x2e4>
 8000640:	18ba      	adds	r2, r7, r2
 8000642:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000646:	d2c4      	bcs.n	80005d2 <__udivmoddi4+0x222>
 8000648:	4542      	cmp	r2, r8
 800064a:	d2c2      	bcs.n	80005d2 <__udivmoddi4+0x222>
 800064c:	f1a9 0102 	sub.w	r1, r9, #2
 8000650:	443a      	add	r2, r7
 8000652:	e7be      	b.n	80005d2 <__udivmoddi4+0x222>
 8000654:	45f0      	cmp	r8, lr
 8000656:	d29d      	bcs.n	8000594 <__udivmoddi4+0x1e4>
 8000658:	ebbe 0302 	subs.w	r3, lr, r2
 800065c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000660:	3801      	subs	r0, #1
 8000662:	46e1      	mov	r9, ip
 8000664:	e796      	b.n	8000594 <__udivmoddi4+0x1e4>
 8000666:	eba7 0909 	sub.w	r9, r7, r9
 800066a:	4449      	add	r1, r9
 800066c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000670:	fbb1 f9fe 	udiv	r9, r1, lr
 8000674:	fb09 f804 	mul.w	r8, r9, r4
 8000678:	e7db      	b.n	8000632 <__udivmoddi4+0x282>
 800067a:	4673      	mov	r3, lr
 800067c:	e77f      	b.n	800057e <__udivmoddi4+0x1ce>
 800067e:	4650      	mov	r0, sl
 8000680:	e766      	b.n	8000550 <__udivmoddi4+0x1a0>
 8000682:	4608      	mov	r0, r1
 8000684:	e6fd      	b.n	8000482 <__udivmoddi4+0xd2>
 8000686:	443b      	add	r3, r7
 8000688:	3a02      	subs	r2, #2
 800068a:	e733      	b.n	80004f4 <__udivmoddi4+0x144>
 800068c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000690:	443b      	add	r3, r7
 8000692:	e71c      	b.n	80004ce <__udivmoddi4+0x11e>
 8000694:	4649      	mov	r1, r9
 8000696:	e79c      	b.n	80005d2 <__udivmoddi4+0x222>
 8000698:	eba1 0109 	sub.w	r1, r1, r9
 800069c:	46c4      	mov	ip, r8
 800069e:	fbb1 f9fe 	udiv	r9, r1, lr
 80006a2:	fb09 f804 	mul.w	r8, r9, r4
 80006a6:	e7c4      	b.n	8000632 <__udivmoddi4+0x282>

080006a8 <__aeabi_idiv0>:
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b08a      	sub	sp, #40	@ 0x28
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80006b4:	2300      	movs	r3, #0
 80006b6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80006b8:	f005 fc62 	bl	8005f80 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80006bc:	4b5a      	ldr	r3, [pc, #360]	@ (8000828 <pvPortMallocMicroROS+0x17c>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d101      	bne.n	80006c8 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 80006c4:	f000 f986 	bl	80009d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80006c8:	4b58      	ldr	r3, [pc, #352]	@ (800082c <pvPortMallocMicroROS+0x180>)
 80006ca:	681a      	ldr	r2, [r3, #0]
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	4013      	ands	r3, r2
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	f040 8090 	bne.w	80007f6 <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d01e      	beq.n	800071a <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80006dc:	2208      	movs	r2, #8
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	4413      	add	r3, r2
 80006e2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	f003 0307 	and.w	r3, r3, #7
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d015      	beq.n	800071a <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	f023 0307 	bic.w	r3, r3, #7
 80006f4:	3308      	adds	r3, #8
 80006f6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	f003 0307 	and.w	r3, r3, #7
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d00b      	beq.n	800071a <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000702:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000706:	f383 8811 	msr	BASEPRI, r3
 800070a:	f3bf 8f6f 	isb	sy
 800070e:	f3bf 8f4f 	dsb	sy
 8000712:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000714:	bf00      	nop
 8000716:	bf00      	nop
 8000718:	e7fd      	b.n	8000716 <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	2b00      	cmp	r3, #0
 800071e:	d06a      	beq.n	80007f6 <pvPortMallocMicroROS+0x14a>
 8000720:	4b43      	ldr	r3, [pc, #268]	@ (8000830 <pvPortMallocMicroROS+0x184>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	687a      	ldr	r2, [r7, #4]
 8000726:	429a      	cmp	r2, r3
 8000728:	d865      	bhi.n	80007f6 <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800072a:	4b42      	ldr	r3, [pc, #264]	@ (8000834 <pvPortMallocMicroROS+0x188>)
 800072c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800072e:	4b41      	ldr	r3, [pc, #260]	@ (8000834 <pvPortMallocMicroROS+0x188>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000734:	e004      	b.n	8000740 <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 8000736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000738:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800073a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000742:	685b      	ldr	r3, [r3, #4]
 8000744:	687a      	ldr	r2, [r7, #4]
 8000746:	429a      	cmp	r2, r3
 8000748:	d903      	bls.n	8000752 <pvPortMallocMicroROS+0xa6>
 800074a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	2b00      	cmp	r3, #0
 8000750:	d1f1      	bne.n	8000736 <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8000752:	4b35      	ldr	r3, [pc, #212]	@ (8000828 <pvPortMallocMicroROS+0x17c>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000758:	429a      	cmp	r2, r3
 800075a:	d04c      	beq.n	80007f6 <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800075c:	6a3b      	ldr	r3, [r7, #32]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	2208      	movs	r2, #8
 8000762:	4413      	add	r3, r2
 8000764:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000768:	681a      	ldr	r2, [r3, #0]
 800076a:	6a3b      	ldr	r3, [r7, #32]
 800076c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800076e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000770:	685a      	ldr	r2, [r3, #4]
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	1ad2      	subs	r2, r2, r3
 8000776:	2308      	movs	r3, #8
 8000778:	005b      	lsls	r3, r3, #1
 800077a:	429a      	cmp	r2, r3
 800077c:	d920      	bls.n	80007c0 <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800077e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	4413      	add	r3, r2
 8000784:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000786:	69bb      	ldr	r3, [r7, #24]
 8000788:	f003 0307 	and.w	r3, r3, #7
 800078c:	2b00      	cmp	r3, #0
 800078e:	d00b      	beq.n	80007a8 <pvPortMallocMicroROS+0xfc>
	__asm volatile
 8000790:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000794:	f383 8811 	msr	BASEPRI, r3
 8000798:	f3bf 8f6f 	isb	sy
 800079c:	f3bf 8f4f 	dsb	sy
 80007a0:	613b      	str	r3, [r7, #16]
}
 80007a2:	bf00      	nop
 80007a4:	bf00      	nop
 80007a6:	e7fd      	b.n	80007a4 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80007a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007aa:	685a      	ldr	r2, [r3, #4]
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	1ad2      	subs	r2, r2, r3
 80007b0:	69bb      	ldr	r3, [r7, #24]
 80007b2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80007b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007b6:	687a      	ldr	r2, [r7, #4]
 80007b8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80007ba:	69b8      	ldr	r0, [r7, #24]
 80007bc:	f000 f96c 	bl	8000a98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80007c0:	4b1b      	ldr	r3, [pc, #108]	@ (8000830 <pvPortMallocMicroROS+0x184>)
 80007c2:	681a      	ldr	r2, [r3, #0]
 80007c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007c6:	685b      	ldr	r3, [r3, #4]
 80007c8:	1ad3      	subs	r3, r2, r3
 80007ca:	4a19      	ldr	r2, [pc, #100]	@ (8000830 <pvPortMallocMicroROS+0x184>)
 80007cc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80007ce:	4b18      	ldr	r3, [pc, #96]	@ (8000830 <pvPortMallocMicroROS+0x184>)
 80007d0:	681a      	ldr	r2, [r3, #0]
 80007d2:	4b19      	ldr	r3, [pc, #100]	@ (8000838 <pvPortMallocMicroROS+0x18c>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	429a      	cmp	r2, r3
 80007d8:	d203      	bcs.n	80007e2 <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80007da:	4b15      	ldr	r3, [pc, #84]	@ (8000830 <pvPortMallocMicroROS+0x184>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	4a16      	ldr	r2, [pc, #88]	@ (8000838 <pvPortMallocMicroROS+0x18c>)
 80007e0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80007e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007e4:	685a      	ldr	r2, [r3, #4]
 80007e6:	4b11      	ldr	r3, [pc, #68]	@ (800082c <pvPortMallocMicroROS+0x180>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	431a      	orrs	r2, r3
 80007ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007ee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80007f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007f2:	2200      	movs	r2, #0
 80007f4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80007f6:	f005 fbd1 	bl	8005f9c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80007fa:	69fb      	ldr	r3, [r7, #28]
 80007fc:	f003 0307 	and.w	r3, r3, #7
 8000800:	2b00      	cmp	r3, #0
 8000802:	d00b      	beq.n	800081c <pvPortMallocMicroROS+0x170>
	__asm volatile
 8000804:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000808:	f383 8811 	msr	BASEPRI, r3
 800080c:	f3bf 8f6f 	isb	sy
 8000810:	f3bf 8f4f 	dsb	sy
 8000814:	60fb      	str	r3, [r7, #12]
}
 8000816:	bf00      	nop
 8000818:	bf00      	nop
 800081a:	e7fd      	b.n	8000818 <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 800081c:	69fb      	ldr	r3, [r7, #28]
}
 800081e:	4618      	mov	r0, r3
 8000820:	3728      	adds	r7, #40	@ 0x28
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	20003d34 	.word	0x20003d34
 800082c:	20003d40 	.word	0x20003d40
 8000830:	20003d38 	.word	0x20003d38
 8000834:	20003d2c 	.word	0x20003d2c
 8000838:	20003d3c 	.word	0x20003d3c

0800083c <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b086      	sub	sp, #24
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d04a      	beq.n	80008e4 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800084e:	2308      	movs	r3, #8
 8000850:	425b      	negs	r3, r3
 8000852:	697a      	ldr	r2, [r7, #20]
 8000854:	4413      	add	r3, r2
 8000856:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8000858:	697b      	ldr	r3, [r7, #20]
 800085a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800085c:	693b      	ldr	r3, [r7, #16]
 800085e:	685a      	ldr	r2, [r3, #4]
 8000860:	4b22      	ldr	r3, [pc, #136]	@ (80008ec <vPortFreeMicroROS+0xb0>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4013      	ands	r3, r2
 8000866:	2b00      	cmp	r3, #0
 8000868:	d10b      	bne.n	8000882 <vPortFreeMicroROS+0x46>
	__asm volatile
 800086a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800086e:	f383 8811 	msr	BASEPRI, r3
 8000872:	f3bf 8f6f 	isb	sy
 8000876:	f3bf 8f4f 	dsb	sy
 800087a:	60fb      	str	r3, [r7, #12]
}
 800087c:	bf00      	nop
 800087e:	bf00      	nop
 8000880:	e7fd      	b.n	800087e <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8000882:	693b      	ldr	r3, [r7, #16]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	2b00      	cmp	r3, #0
 8000888:	d00b      	beq.n	80008a2 <vPortFreeMicroROS+0x66>
	__asm volatile
 800088a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800088e:	f383 8811 	msr	BASEPRI, r3
 8000892:	f3bf 8f6f 	isb	sy
 8000896:	f3bf 8f4f 	dsb	sy
 800089a:	60bb      	str	r3, [r7, #8]
}
 800089c:	bf00      	nop
 800089e:	bf00      	nop
 80008a0:	e7fd      	b.n	800089e <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80008a2:	693b      	ldr	r3, [r7, #16]
 80008a4:	685a      	ldr	r2, [r3, #4]
 80008a6:	4b11      	ldr	r3, [pc, #68]	@ (80008ec <vPortFreeMicroROS+0xb0>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	4013      	ands	r3, r2
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d019      	beq.n	80008e4 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80008b0:	693b      	ldr	r3, [r7, #16]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d115      	bne.n	80008e4 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80008b8:	693b      	ldr	r3, [r7, #16]
 80008ba:	685a      	ldr	r2, [r3, #4]
 80008bc:	4b0b      	ldr	r3, [pc, #44]	@ (80008ec <vPortFreeMicroROS+0xb0>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	43db      	mvns	r3, r3
 80008c2:	401a      	ands	r2, r3
 80008c4:	693b      	ldr	r3, [r7, #16]
 80008c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80008c8:	f005 fb5a 	bl	8005f80 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80008cc:	693b      	ldr	r3, [r7, #16]
 80008ce:	685a      	ldr	r2, [r3, #4]
 80008d0:	4b07      	ldr	r3, [pc, #28]	@ (80008f0 <vPortFreeMicroROS+0xb4>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4413      	add	r3, r2
 80008d6:	4a06      	ldr	r2, [pc, #24]	@ (80008f0 <vPortFreeMicroROS+0xb4>)
 80008d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80008da:	6938      	ldr	r0, [r7, #16]
 80008dc:	f000 f8dc 	bl	8000a98 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80008e0:	f005 fb5c 	bl	8005f9c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80008e4:	bf00      	nop
 80008e6:	3718      	adds	r7, #24
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	20003d40 	.word	0x20003d40
 80008f0:	20003d38 	.word	0x20003d38

080008f4 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 80008f4:	b480      	push	{r7}
 80008f6:	b087      	sub	sp, #28
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8000900:	2308      	movs	r3, #8
 8000902:	425b      	negs	r3, r3
 8000904:	697a      	ldr	r2, [r7, #20]
 8000906:	4413      	add	r3, r2
 8000908:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 800090a:	697b      	ldr	r3, [r7, #20]
 800090c:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 800090e:	693b      	ldr	r3, [r7, #16]
 8000910:	685a      	ldr	r2, [r3, #4]
 8000912:	4b06      	ldr	r3, [pc, #24]	@ (800092c <getBlockSize+0x38>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	43db      	mvns	r3, r3
 8000918:	4013      	ands	r3, r2
 800091a:	60fb      	str	r3, [r7, #12]

	return count;
 800091c:	68fb      	ldr	r3, [r7, #12]
}
 800091e:	4618      	mov	r0, r3
 8000920:	371c      	adds	r7, #28
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	20003d40 	.word	0x20003d40

08000930 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b084      	sub	sp, #16
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
 8000938:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 800093a:	f005 fb21 	bl	8005f80 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 800093e:	6838      	ldr	r0, [r7, #0]
 8000940:	f7ff feb4 	bl	80006ac <pvPortMallocMicroROS>
 8000944:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8000946:	68bb      	ldr	r3, [r7, #8]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d017      	beq.n	800097c <pvPortReallocMicroROS+0x4c>
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	2b00      	cmp	r3, #0
 8000950:	d014      	beq.n	800097c <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8000952:	6878      	ldr	r0, [r7, #4]
 8000954:	f7ff ffce 	bl	80008f4 <getBlockSize>
 8000958:	4603      	mov	r3, r0
 800095a:	2208      	movs	r2, #8
 800095c:	1a9b      	subs	r3, r3, r2
 800095e:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8000960:	683a      	ldr	r2, [r7, #0]
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	429a      	cmp	r2, r3
 8000966:	d201      	bcs.n	800096c <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 800096c:	68fa      	ldr	r2, [r7, #12]
 800096e:	6879      	ldr	r1, [r7, #4]
 8000970:	68b8      	ldr	r0, [r7, #8]
 8000972:	f010 f8ec 	bl	8010b4e <memcpy>

		vPortFreeMicroROS(pv);
 8000976:	6878      	ldr	r0, [r7, #4]
 8000978:	f7ff ff60 	bl	800083c <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 800097c:	f005 fb0e 	bl	8005f9c <xTaskResumeAll>

	return newmem;
 8000980:	68bb      	ldr	r3, [r7, #8]
}
 8000982:	4618      	mov	r0, r3
 8000984:	3710      	adds	r7, #16
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}

0800098a <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 800098a:	b580      	push	{r7, lr}
 800098c:	b086      	sub	sp, #24
 800098e:	af00      	add	r7, sp, #0
 8000990:	6078      	str	r0, [r7, #4]
 8000992:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000994:	f005 faf4 	bl	8005f80 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	687a      	ldr	r2, [r7, #4]
 800099c:	fb02 f303 	mul.w	r3, r2, r3
 80009a0:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 80009a2:	6978      	ldr	r0, [r7, #20]
 80009a4:	f7ff fe82 	bl	80006ac <pvPortMallocMicroROS>
 80009a8:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	613b      	str	r3, [r7, #16]

  	while(count--)
 80009ae:	e004      	b.n	80009ba <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 80009b0:	693b      	ldr	r3, [r7, #16]
 80009b2:	1c5a      	adds	r2, r3, #1
 80009b4:	613a      	str	r2, [r7, #16]
 80009b6:	2200      	movs	r2, #0
 80009b8:	701a      	strb	r2, [r3, #0]
  	while(count--)
 80009ba:	697b      	ldr	r3, [r7, #20]
 80009bc:	1e5a      	subs	r2, r3, #1
 80009be:	617a      	str	r2, [r7, #20]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d1f5      	bne.n	80009b0 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 80009c4:	f005 faea 	bl	8005f9c <xTaskResumeAll>
  	return mem;
 80009c8:	68fb      	ldr	r3, [r7, #12]
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	3718      	adds	r7, #24
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
	...

080009d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80009d4:	b480      	push	{r7}
 80009d6:	b085      	sub	sp, #20
 80009d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80009da:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80009de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80009e0:	4b27      	ldr	r3, [pc, #156]	@ (8000a80 <prvHeapInit+0xac>)
 80009e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	f003 0307 	and.w	r3, r3, #7
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d00c      	beq.n	8000a08 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	3307      	adds	r3, #7
 80009f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	f023 0307 	bic.w	r3, r3, #7
 80009fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80009fc:	68ba      	ldr	r2, [r7, #8]
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	1ad3      	subs	r3, r2, r3
 8000a02:	4a1f      	ldr	r2, [pc, #124]	@ (8000a80 <prvHeapInit+0xac>)
 8000a04:	4413      	add	r3, r2
 8000a06:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000a0c:	4a1d      	ldr	r2, [pc, #116]	@ (8000a84 <prvHeapInit+0xb0>)
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8000a12:	4b1c      	ldr	r3, [pc, #112]	@ (8000a84 <prvHeapInit+0xb0>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	68ba      	ldr	r2, [r7, #8]
 8000a1c:	4413      	add	r3, r2
 8000a1e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8000a20:	2208      	movs	r2, #8
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	1a9b      	subs	r3, r3, r2
 8000a26:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	f023 0307 	bic.w	r3, r3, #7
 8000a2e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	4a15      	ldr	r2, [pc, #84]	@ (8000a88 <prvHeapInit+0xb4>)
 8000a34:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8000a36:	4b14      	ldr	r3, [pc, #80]	@ (8000a88 <prvHeapInit+0xb4>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8000a3e:	4b12      	ldr	r3, [pc, #72]	@ (8000a88 <prvHeapInit+0xb4>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	2200      	movs	r2, #0
 8000a44:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	68fa      	ldr	r2, [r7, #12]
 8000a4e:	1ad2      	subs	r2, r2, r3
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8000a54:	4b0c      	ldr	r3, [pc, #48]	@ (8000a88 <prvHeapInit+0xb4>)
 8000a56:	681a      	ldr	r2, [r3, #0]
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	685b      	ldr	r3, [r3, #4]
 8000a60:	4a0a      	ldr	r2, [pc, #40]	@ (8000a8c <prvHeapInit+0xb8>)
 8000a62:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	685b      	ldr	r3, [r3, #4]
 8000a68:	4a09      	ldr	r2, [pc, #36]	@ (8000a90 <prvHeapInit+0xbc>)
 8000a6a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000a6c:	4b09      	ldr	r3, [pc, #36]	@ (8000a94 <prvHeapInit+0xc0>)
 8000a6e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8000a72:	601a      	str	r2, [r3, #0]
}
 8000a74:	bf00      	nop
 8000a76:	3714      	adds	r7, #20
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr
 8000a80:	2000012c 	.word	0x2000012c
 8000a84:	20003d2c 	.word	0x20003d2c
 8000a88:	20003d34 	.word	0x20003d34
 8000a8c:	20003d3c 	.word	0x20003d3c
 8000a90:	20003d38 	.word	0x20003d38
 8000a94:	20003d40 	.word	0x20003d40

08000a98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b085      	sub	sp, #20
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000aa0:	4b28      	ldr	r3, [pc, #160]	@ (8000b44 <prvInsertBlockIntoFreeList+0xac>)
 8000aa2:	60fb      	str	r3, [r7, #12]
 8000aa4:	e002      	b.n	8000aac <prvInsertBlockIntoFreeList+0x14>
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	60fb      	str	r3, [r7, #12]
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	687a      	ldr	r2, [r7, #4]
 8000ab2:	429a      	cmp	r2, r3
 8000ab4:	d8f7      	bhi.n	8000aa6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	685b      	ldr	r3, [r3, #4]
 8000abe:	68ba      	ldr	r2, [r7, #8]
 8000ac0:	4413      	add	r3, r2
 8000ac2:	687a      	ldr	r2, [r7, #4]
 8000ac4:	429a      	cmp	r2, r3
 8000ac6:	d108      	bne.n	8000ada <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	685a      	ldr	r2, [r3, #4]
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	685b      	ldr	r3, [r3, #4]
 8000ad0:	441a      	add	r2, r3
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	685b      	ldr	r3, [r3, #4]
 8000ae2:	68ba      	ldr	r2, [r7, #8]
 8000ae4:	441a      	add	r2, r3
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	429a      	cmp	r2, r3
 8000aec:	d118      	bne.n	8000b20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	681a      	ldr	r2, [r3, #0]
 8000af2:	4b15      	ldr	r3, [pc, #84]	@ (8000b48 <prvInsertBlockIntoFreeList+0xb0>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	429a      	cmp	r2, r3
 8000af8:	d00d      	beq.n	8000b16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	685a      	ldr	r2, [r3, #4]
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	685b      	ldr	r3, [r3, #4]
 8000b04:	441a      	add	r2, r3
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	681a      	ldr	r2, [r3, #0]
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	e008      	b.n	8000b28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000b16:	4b0c      	ldr	r3, [pc, #48]	@ (8000b48 <prvInsertBlockIntoFreeList+0xb0>)
 8000b18:	681a      	ldr	r2, [r3, #0]
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	601a      	str	r2, [r3, #0]
 8000b1e:	e003      	b.n	8000b28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	681a      	ldr	r2, [r3, #0]
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000b28:	68fa      	ldr	r2, [r7, #12]
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	429a      	cmp	r2, r3
 8000b2e:	d002      	beq.n	8000b36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	687a      	ldr	r2, [r7, #4]
 8000b34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000b36:	bf00      	nop
 8000b38:	3714      	adds	r7, #20
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	20003d2c 	.word	0x20003d2c
 8000b48:	20003d34 	.word	0x20003d34

08000b4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b50:	f000 fe9c 	bl	800188c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b54:	f000 f81a 	bl	8000b8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b58:	f000 f8d8 	bl	8000d0c <MX_GPIO_Init>
  MX_DMA_Init();
 8000b5c:	f000 f8ae 	bl	8000cbc <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000b60:	f000 f882 	bl	8000c68 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000b64:	f004 f8ee 	bl	8004d44 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000b68:	4a05      	ldr	r2, [pc, #20]	@ (8000b80 <main+0x34>)
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	4805      	ldr	r0, [pc, #20]	@ (8000b84 <main+0x38>)
 8000b6e:	f004 f933 	bl	8004dd8 <osThreadNew>
 8000b72:	4603      	mov	r3, r0
 8000b74:	4a04      	ldr	r2, [pc, #16]	@ (8000b88 <main+0x3c>)
 8000b76:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000b78:	f004 f908 	bl	8004d8c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b7c:	bf00      	nop
 8000b7e:	e7fd      	b.n	8000b7c <main+0x30>
 8000b80:	080119d8 	.word	0x080119d8
 8000b84:	08000de9 	.word	0x08000de9
 8000b88:	20003e4c 	.word	0x20003e4c

08000b8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b094      	sub	sp, #80	@ 0x50
 8000b90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b92:	f107 031c 	add.w	r3, r7, #28
 8000b96:	2234      	movs	r2, #52	@ 0x34
 8000b98:	2100      	movs	r1, #0
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f00f ff0e 	bl	80109bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ba0:	f107 0308 	add.w	r3, r7, #8
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]
 8000ba8:	605a      	str	r2, [r3, #4]
 8000baa:	609a      	str	r2, [r3, #8]
 8000bac:	60da      	str	r2, [r3, #12]
 8000bae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	607b      	str	r3, [r7, #4]
 8000bb4:	4b2a      	ldr	r3, [pc, #168]	@ (8000c60 <SystemClock_Config+0xd4>)
 8000bb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bb8:	4a29      	ldr	r2, [pc, #164]	@ (8000c60 <SystemClock_Config+0xd4>)
 8000bba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bbe:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bc0:	4b27      	ldr	r3, [pc, #156]	@ (8000c60 <SystemClock_Config+0xd4>)
 8000bc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bc4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bc8:	607b      	str	r3, [r7, #4]
 8000bca:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000bcc:	2300      	movs	r3, #0
 8000bce:	603b      	str	r3, [r7, #0]
 8000bd0:	4b24      	ldr	r3, [pc, #144]	@ (8000c64 <SystemClock_Config+0xd8>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000bd8:	4a22      	ldr	r2, [pc, #136]	@ (8000c64 <SystemClock_Config+0xd8>)
 8000bda:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bde:	6013      	str	r3, [r2, #0]
 8000be0:	4b20      	ldr	r3, [pc, #128]	@ (8000c64 <SystemClock_Config+0xd8>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000be8:	603b      	str	r3, [r7, #0]
 8000bea:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bec:	2302      	movs	r3, #2
 8000bee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bf4:	2310      	movs	r3, #16
 8000bf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000c00:	2310      	movs	r3, #16
 8000c02:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000c04:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000c08:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000c0a:	2304      	movs	r3, #4
 8000c0c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000c0e:	2302      	movs	r3, #2
 8000c10:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c12:	2302      	movs	r3, #2
 8000c14:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c16:	f107 031c 	add.w	r3, r7, #28
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f002 f886 	bl	8002d2c <HAL_RCC_OscConfig>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000c26:	f000 f97b 	bl	8000f20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c2a:	230f      	movs	r3, #15
 8000c2c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c32:	2300      	movs	r3, #0
 8000c34:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c36:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c3a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c40:	f107 0308 	add.w	r3, r7, #8
 8000c44:	2102      	movs	r1, #2
 8000c46:	4618      	mov	r0, r3
 8000c48:	f001 fcf4 	bl	8002634 <HAL_RCC_ClockConfig>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000c52:	f000 f965 	bl	8000f20 <Error_Handler>
  }
}
 8000c56:	bf00      	nop
 8000c58:	3750      	adds	r7, #80	@ 0x50
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	40023800 	.word	0x40023800
 8000c64:	40007000 	.word	0x40007000

08000c68 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c6c:	4b11      	ldr	r3, [pc, #68]	@ (8000cb4 <MX_USART2_UART_Init+0x4c>)
 8000c6e:	4a12      	ldr	r2, [pc, #72]	@ (8000cb8 <MX_USART2_UART_Init+0x50>)
 8000c70:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c72:	4b10      	ldr	r3, [pc, #64]	@ (8000cb4 <MX_USART2_UART_Init+0x4c>)
 8000c74:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c78:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c7a:	4b0e      	ldr	r3, [pc, #56]	@ (8000cb4 <MX_USART2_UART_Init+0x4c>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c80:	4b0c      	ldr	r3, [pc, #48]	@ (8000cb4 <MX_USART2_UART_Init+0x4c>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c86:	4b0b      	ldr	r3, [pc, #44]	@ (8000cb4 <MX_USART2_UART_Init+0x4c>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c8c:	4b09      	ldr	r3, [pc, #36]	@ (8000cb4 <MX_USART2_UART_Init+0x4c>)
 8000c8e:	220c      	movs	r2, #12
 8000c90:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c92:	4b08      	ldr	r3, [pc, #32]	@ (8000cb4 <MX_USART2_UART_Init+0x4c>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c98:	4b06      	ldr	r3, [pc, #24]	@ (8000cb4 <MX_USART2_UART_Init+0x4c>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c9e:	4805      	ldr	r0, [pc, #20]	@ (8000cb4 <MX_USART2_UART_Init+0x4c>)
 8000ca0:	f002 fd7e 	bl	80037a0 <HAL_UART_Init>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000caa:	f000 f939 	bl	8000f20 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cae:	bf00      	nop
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	20003d44 	.word	0x20003d44
 8000cb8:	40004400 	.word	0x40004400

08000cbc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	607b      	str	r3, [r7, #4]
 8000cc6:	4b10      	ldr	r3, [pc, #64]	@ (8000d08 <MX_DMA_Init+0x4c>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cca:	4a0f      	ldr	r2, [pc, #60]	@ (8000d08 <MX_DMA_Init+0x4c>)
 8000ccc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000cd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cd2:	4b0d      	ldr	r3, [pc, #52]	@ (8000d08 <MX_DMA_Init+0x4c>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cd6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000cda:	607b      	str	r3, [r7, #4]
 8000cdc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000cde:	2200      	movs	r2, #0
 8000ce0:	2105      	movs	r1, #5
 8000ce2:	2010      	movs	r0, #16
 8000ce4:	f000 fecc 	bl	8001a80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000ce8:	2010      	movs	r0, #16
 8000cea:	f000 fee5 	bl	8001ab8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8000cee:	2200      	movs	r2, #0
 8000cf0:	2105      	movs	r1, #5
 8000cf2:	2011      	movs	r0, #17
 8000cf4:	f000 fec4 	bl	8001a80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000cf8:	2011      	movs	r0, #17
 8000cfa:	f000 fedd 	bl	8001ab8 <HAL_NVIC_EnableIRQ>

}
 8000cfe:	bf00      	nop
 8000d00:	3708      	adds	r7, #8
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	40023800 	.word	0x40023800

08000d0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b08a      	sub	sp, #40	@ 0x28
 8000d10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d12:	f107 0314 	add.w	r3, r7, #20
 8000d16:	2200      	movs	r2, #0
 8000d18:	601a      	str	r2, [r3, #0]
 8000d1a:	605a      	str	r2, [r3, #4]
 8000d1c:	609a      	str	r2, [r3, #8]
 8000d1e:	60da      	str	r2, [r3, #12]
 8000d20:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d22:	2300      	movs	r3, #0
 8000d24:	613b      	str	r3, [r7, #16]
 8000d26:	4b2d      	ldr	r3, [pc, #180]	@ (8000ddc <MX_GPIO_Init+0xd0>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d2a:	4a2c      	ldr	r2, [pc, #176]	@ (8000ddc <MX_GPIO_Init+0xd0>)
 8000d2c:	f043 0304 	orr.w	r3, r3, #4
 8000d30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d32:	4b2a      	ldr	r3, [pc, #168]	@ (8000ddc <MX_GPIO_Init+0xd0>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d36:	f003 0304 	and.w	r3, r3, #4
 8000d3a:	613b      	str	r3, [r7, #16]
 8000d3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d3e:	2300      	movs	r3, #0
 8000d40:	60fb      	str	r3, [r7, #12]
 8000d42:	4b26      	ldr	r3, [pc, #152]	@ (8000ddc <MX_GPIO_Init+0xd0>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d46:	4a25      	ldr	r2, [pc, #148]	@ (8000ddc <MX_GPIO_Init+0xd0>)
 8000d48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d4e:	4b23      	ldr	r3, [pc, #140]	@ (8000ddc <MX_GPIO_Init+0xd0>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d56:	60fb      	str	r3, [r7, #12]
 8000d58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	60bb      	str	r3, [r7, #8]
 8000d5e:	4b1f      	ldr	r3, [pc, #124]	@ (8000ddc <MX_GPIO_Init+0xd0>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d62:	4a1e      	ldr	r2, [pc, #120]	@ (8000ddc <MX_GPIO_Init+0xd0>)
 8000d64:	f043 0301 	orr.w	r3, r3, #1
 8000d68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d6a:	4b1c      	ldr	r3, [pc, #112]	@ (8000ddc <MX_GPIO_Init+0xd0>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d6e:	f003 0301 	and.w	r3, r3, #1
 8000d72:	60bb      	str	r3, [r7, #8]
 8000d74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d76:	2300      	movs	r3, #0
 8000d78:	607b      	str	r3, [r7, #4]
 8000d7a:	4b18      	ldr	r3, [pc, #96]	@ (8000ddc <MX_GPIO_Init+0xd0>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d7e:	4a17      	ldr	r2, [pc, #92]	@ (8000ddc <MX_GPIO_Init+0xd0>)
 8000d80:	f043 0302 	orr.w	r3, r3, #2
 8000d84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d86:	4b15      	ldr	r3, [pc, #84]	@ (8000ddc <MX_GPIO_Init+0xd0>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d8a:	f003 0302 	and.w	r3, r3, #2
 8000d8e:	607b      	str	r3, [r7, #4]
 8000d90:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d92:	2200      	movs	r2, #0
 8000d94:	2120      	movs	r1, #32
 8000d96:	4812      	ldr	r0, [pc, #72]	@ (8000de0 <MX_GPIO_Init+0xd4>)
 8000d98:	f001 fc32 	bl	8002600 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d9c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000da0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000da2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000da6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da8:	2300      	movs	r3, #0
 8000daa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000dac:	f107 0314 	add.w	r3, r7, #20
 8000db0:	4619      	mov	r1, r3
 8000db2:	480c      	ldr	r0, [pc, #48]	@ (8000de4 <MX_GPIO_Init+0xd8>)
 8000db4:	f001 fa90 	bl	80022d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000db8:	2320      	movs	r3, #32
 8000dba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000dc8:	f107 0314 	add.w	r3, r7, #20
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4804      	ldr	r0, [pc, #16]	@ (8000de0 <MX_GPIO_Init+0xd4>)
 8000dd0:	f001 fa82 	bl	80022d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000dd4:	bf00      	nop
 8000dd6:	3728      	adds	r7, #40	@ 0x28
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	40023800 	.word	0x40023800
 8000de0:	40020000 	.word	0x40020000
 8000de4:	40020800 	.word	0x40020800

08000de8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000de8:	b5b0      	push	{r4, r5, r7, lr}
 8000dea:	b0a6      	sub	sp, #152	@ 0x98
 8000dec:	af02      	add	r7, sp, #8
 8000dee:	61f8      	str	r0, [r7, #28]
  /* USER CODE BEGIN 5 */
	// micro-ROS configuration

	  rmw_uros_set_custom_transport(
 8000df0:	4b34      	ldr	r3, [pc, #208]	@ (8000ec4 <StartDefaultTask+0xdc>)
 8000df2:	9301      	str	r3, [sp, #4]
 8000df4:	4b34      	ldr	r3, [pc, #208]	@ (8000ec8 <StartDefaultTask+0xe0>)
 8000df6:	9300      	str	r3, [sp, #0]
 8000df8:	4b34      	ldr	r3, [pc, #208]	@ (8000ecc <StartDefaultTask+0xe4>)
 8000dfa:	4a35      	ldr	r2, [pc, #212]	@ (8000ed0 <StartDefaultTask+0xe8>)
 8000dfc:	4935      	ldr	r1, [pc, #212]	@ (8000ed4 <StartDefaultTask+0xec>)
 8000dfe:	2001      	movs	r0, #1
 8000e00:	f006 ff7a 	bl	8007cf8 <rmw_uros_set_custom_transport>
	    cubemx_transport_open,
	    cubemx_transport_close,
	    cubemx_transport_write,
	    cubemx_transport_read);

	  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8000e04:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f006 fef5 	bl	8007bf8 <rcutils_get_zero_initialized_allocator>
	  freeRTOS_allocator.allocate = microros_allocate;
 8000e0e:	4b32      	ldr	r3, [pc, #200]	@ (8000ed8 <StartDefaultTask+0xf0>)
 8000e10:	67bb      	str	r3, [r7, #120]	@ 0x78
	  freeRTOS_allocator.deallocate = microros_deallocate;
 8000e12:	4b32      	ldr	r3, [pc, #200]	@ (8000edc <StartDefaultTask+0xf4>)
 8000e14:	67fb      	str	r3, [r7, #124]	@ 0x7c
	  freeRTOS_allocator.reallocate = microros_reallocate;
 8000e16:	4b32      	ldr	r3, [pc, #200]	@ (8000ee0 <StartDefaultTask+0xf8>)
 8000e18:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
	  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8000e1c:	4b31      	ldr	r3, [pc, #196]	@ (8000ee4 <StartDefaultTask+0xfc>)
 8000e1e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

	  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8000e22:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8000e26:	4618      	mov	r0, r3
 8000e28:	f006 fef4 	bl	8007c14 <rcutils_set_default_allocator>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	f083 0301 	eor.w	r3, r3, #1
 8000e32:	b2db      	uxtb	r3, r3
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d004      	beq.n	8000e42 <StartDefaultTask+0x5a>
	      printf("Error on default allocators (line %d)\n", __LINE__);
 8000e38:	f44f 71ab 	mov.w	r1, #342	@ 0x156
 8000e3c:	482a      	ldr	r0, [pc, #168]	@ (8000ee8 <StartDefaultTask+0x100>)
 8000e3e:	f00f fcf5 	bl	801082c <iprintf>
	  std_msgs__msg__Int32 msg;
	  rclc_support_t support;
	  rcl_allocator_t allocator;
	  rcl_node_t node;

	  allocator = rcl_get_default_allocator();
 8000e42:	463b      	mov	r3, r7
 8000e44:	4618      	mov	r0, r3
 8000e46:	f006 ff03 	bl	8007c50 <rcutils_get_default_allocator>
 8000e4a:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8000e4e:	463d      	mov	r5, r7
 8000e50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e54:	682b      	ldr	r3, [r5, #0]
 8000e56:	6023      	str	r3, [r4, #0]

	  //create init_options
	  rclc_support_init(&support, 0, NULL, &allocator);
 8000e58:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e5c:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 8000e60:	2200      	movs	r2, #0
 8000e62:	2100      	movs	r1, #0
 8000e64:	f006 fe06 	bl	8007a74 <rclc_support_init>

	  // create node
	  rclc_node_init_default(&node, "cubemx_node", "", &support);
 8000e68:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000e6c:	f107 0020 	add.w	r0, r7, #32
 8000e70:	4a1e      	ldr	r2, [pc, #120]	@ (8000eec <StartDefaultTask+0x104>)
 8000e72:	491f      	ldr	r1, [pc, #124]	@ (8000ef0 <StartDefaultTask+0x108>)
 8000e74:	f006 fe48 	bl	8007b08 <rclc_node_init_default>

	  // create publisher
	  rclc_publisher_init_default(
 8000e78:	f007 fbc4 	bl	8008604 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8000e7c:	4602      	mov	r2, r0
 8000e7e:	f107 0120 	add.w	r1, r7, #32
 8000e82:	f107 0074 	add.w	r0, r7, #116	@ 0x74
 8000e86:	4b1b      	ldr	r3, [pc, #108]	@ (8000ef4 <StartDefaultTask+0x10c>)
 8000e88:	f006 fe7a 	bl	8007b80 <rclc_publisher_init_default>
	    &publisher,
	    &node,
	    ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
	    "cubemx_publisher");

	  msg.data = 0;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	673b      	str	r3, [r7, #112]	@ 0x70

	  for(;;)
	  {
	    rcl_ret_t ret = rcl_publish(&publisher, &msg, NULL);
 8000e90:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 8000e94:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000e98:	2200      	movs	r2, #0
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f006 fdc6 	bl	8007a2c <rcl_publish>
 8000ea0:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
	    if (ret != RCL_RET_OK)
 8000ea4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d004      	beq.n	8000eb6 <StartDefaultTask+0xce>
	    {
	      printf("Error publishing (line %d)\n", __LINE__);
 8000eac:	f240 1177 	movw	r1, #375	@ 0x177
 8000eb0:	4811      	ldr	r0, [pc, #68]	@ (8000ef8 <StartDefaultTask+0x110>)
 8000eb2:	f00f fcbb 	bl	801082c <iprintf>
	    }

	    msg.data++;
 8000eb6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000eb8:	3301      	adds	r3, #1
 8000eba:	673b      	str	r3, [r7, #112]	@ 0x70
	    osDelay(1);
 8000ebc:	2001      	movs	r0, #1
 8000ebe:	f004 f81d 	bl	8004efc <osDelay>
	  {
 8000ec2:	e7e5      	b.n	8000e90 <StartDefaultTask+0xa8>
 8000ec4:	08001791 	.word	0x08001791
 8000ec8:	08001729 	.word	0x08001729
 8000ecc:	08001709 	.word	0x08001709
 8000ed0:	080016dd 	.word	0x080016dd
 8000ed4:	20003d44 	.word	0x20003d44
 8000ed8:	08000f2d 	.word	0x08000f2d
 8000edc:	08000f71 	.word	0x08000f71
 8000ee0:	08000fa9 	.word	0x08000fa9
 8000ee4:	08001015 	.word	0x08001015
 8000ee8:	0801194c 	.word	0x0801194c
 8000eec:	08011974 	.word	0x08011974
 8000ef0:	08011978 	.word	0x08011978
 8000ef4:	08011984 	.word	0x08011984
 8000ef8:	08011998 	.word	0x08011998

08000efc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a04      	ldr	r2, [pc, #16]	@ (8000f1c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d101      	bne.n	8000f12 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000f0e:	f000 fcdf 	bl	80018d0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f12:	bf00      	nop
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	40010000 	.word	0x40010000

08000f20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f24:	b672      	cpsid	i
}
 8000f26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f28:	bf00      	nop
 8000f2a:	e7fd      	b.n	8000f28 <Error_Handler+0x8>

08000f2c <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
 8000f34:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8000f36:	4b0c      	ldr	r3, [pc, #48]	@ (8000f68 <microros_allocate+0x3c>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	461a      	mov	r2, r3
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	4413      	add	r3, r2
 8000f40:	461a      	mov	r2, r3
 8000f42:	4b09      	ldr	r3, [pc, #36]	@ (8000f68 <microros_allocate+0x3c>)
 8000f44:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8000f46:	4b09      	ldr	r3, [pc, #36]	@ (8000f6c <microros_allocate+0x40>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	4413      	add	r3, r2
 8000f50:	461a      	mov	r2, r3
 8000f52:	4b06      	ldr	r3, [pc, #24]	@ (8000f6c <microros_allocate+0x40>)
 8000f54:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8000f56:	6878      	ldr	r0, [r7, #4]
 8000f58:	f7ff fba8 	bl	80006ac <pvPortMallocMicroROS>
 8000f5c:	4603      	mov	r3, r0
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	20003e50 	.word	0x20003e50
 8000f6c:	20003e54 	.word	0x20003e54

08000f70 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
 8000f78:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d00c      	beq.n	8000f9a <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8000f80:	6878      	ldr	r0, [r7, #4]
 8000f82:	f7ff fcb7 	bl	80008f4 <getBlockSize>
 8000f86:	4603      	mov	r3, r0
 8000f88:	4a06      	ldr	r2, [pc, #24]	@ (8000fa4 <microros_deallocate+0x34>)
 8000f8a:	6812      	ldr	r2, [r2, #0]
 8000f8c:	1ad3      	subs	r3, r2, r3
 8000f8e:	461a      	mov	r2, r3
 8000f90:	4b04      	ldr	r3, [pc, #16]	@ (8000fa4 <microros_deallocate+0x34>)
 8000f92:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8000f94:	6878      	ldr	r0, [r7, #4]
 8000f96:	f7ff fc51 	bl	800083c <vPortFreeMicroROS>
  }
}
 8000f9a:	bf00      	nop
 8000f9c:	3708      	adds	r7, #8
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	20003e54 	.word	0x20003e54

08000fa8 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	60f8      	str	r0, [r7, #12]
 8000fb0:	60b9      	str	r1, [r7, #8]
 8000fb2:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8000fb4:	4b15      	ldr	r3, [pc, #84]	@ (800100c <microros_reallocate+0x64>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	461a      	mov	r2, r3
 8000fba:	68bb      	ldr	r3, [r7, #8]
 8000fbc:	4413      	add	r3, r2
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	4b12      	ldr	r3, [pc, #72]	@ (800100c <microros_reallocate+0x64>)
 8000fc2:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8000fc4:	4b12      	ldr	r3, [pc, #72]	@ (8001010 <microros_reallocate+0x68>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	461a      	mov	r2, r3
 8000fca:	68bb      	ldr	r3, [r7, #8]
 8000fcc:	4413      	add	r3, r2
 8000fce:	461a      	mov	r2, r3
 8000fd0:	4b0f      	ldr	r3, [pc, #60]	@ (8001010 <microros_reallocate+0x68>)
 8000fd2:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d104      	bne.n	8000fe4 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8000fda:	68b8      	ldr	r0, [r7, #8]
 8000fdc:	f7ff fb66 	bl	80006ac <pvPortMallocMicroROS>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	e00e      	b.n	8001002 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8000fe4:	68f8      	ldr	r0, [r7, #12]
 8000fe6:	f7ff fc85 	bl	80008f4 <getBlockSize>
 8000fea:	4603      	mov	r3, r0
 8000fec:	4a08      	ldr	r2, [pc, #32]	@ (8001010 <microros_reallocate+0x68>)
 8000fee:	6812      	ldr	r2, [r2, #0]
 8000ff0:	1ad3      	subs	r3, r2, r3
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	4b06      	ldr	r3, [pc, #24]	@ (8001010 <microros_reallocate+0x68>)
 8000ff6:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8000ff8:	68b9      	ldr	r1, [r7, #8]
 8000ffa:	68f8      	ldr	r0, [r7, #12]
 8000ffc:	f7ff fc98 	bl	8000930 <pvPortReallocMicroROS>
 8001000:	4603      	mov	r3, r0
  }
}
 8001002:	4618      	mov	r0, r3
 8001004:	3710      	adds	r7, #16
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	20003e50 	.word	0x20003e50
 8001010:	20003e54 	.word	0x20003e54

08001014 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	60f8      	str	r0, [r7, #12]
 800101c:	60b9      	str	r1, [r7, #8]
 800101e:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	68ba      	ldr	r2, [r7, #8]
 8001024:	fb02 f303 	mul.w	r3, r2, r3
 8001028:	4a0c      	ldr	r2, [pc, #48]	@ (800105c <microros_zero_allocate+0x48>)
 800102a:	6812      	ldr	r2, [r2, #0]
 800102c:	4413      	add	r3, r2
 800102e:	461a      	mov	r2, r3
 8001030:	4b0a      	ldr	r3, [pc, #40]	@ (800105c <microros_zero_allocate+0x48>)
 8001032:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	68ba      	ldr	r2, [r7, #8]
 8001038:	fb02 f303 	mul.w	r3, r2, r3
 800103c:	4a08      	ldr	r2, [pc, #32]	@ (8001060 <microros_zero_allocate+0x4c>)
 800103e:	6812      	ldr	r2, [r2, #0]
 8001040:	4413      	add	r3, r2
 8001042:	461a      	mov	r2, r3
 8001044:	4b06      	ldr	r3, [pc, #24]	@ (8001060 <microros_zero_allocate+0x4c>)
 8001046:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8001048:	68b9      	ldr	r1, [r7, #8]
 800104a:	68f8      	ldr	r0, [r7, #12]
 800104c:	f7ff fc9d 	bl	800098a <pvPortCallocMicroROS>
 8001050:	4603      	mov	r3, r0
 8001052:	4618      	mov	r0, r3
 8001054:	3710      	adds	r7, #16
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	20003e50 	.word	0x20003e50
 8001060:	20003e54 	.word	0x20003e54
 8001064:	00000000 	.word	0x00000000

08001068 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8001068:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800106c:	b086      	sub	sp, #24
 800106e:	af00      	add	r7, sp, #0
 8001070:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001074:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8001076:	2300      	movs	r3, #0
 8001078:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 800107a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800107e:	a320      	add	r3, pc, #128	@ (adr r3, 8001100 <UTILS_NanosecondsToTimespec+0x98>)
 8001080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001084:	f7ff f92c 	bl	80002e0 <__aeabi_ldivmod>
 8001088:	4602      	mov	r2, r0
 800108a:	460b      	mov	r3, r1
 800108c:	6879      	ldr	r1, [r7, #4]
 800108e:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8001092:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001096:	a31a      	add	r3, pc, #104	@ (adr r3, 8001100 <UTILS_NanosecondsToTimespec+0x98>)
 8001098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800109c:	f7ff f920 	bl	80002e0 <__aeabi_ldivmod>
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	689b      	ldr	r3, [r3, #8]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	da20      	bge.n	80010ee <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	689b      	ldr	r3, [r3, #8]
 80010b0:	4a11      	ldr	r2, [pc, #68]	@ (80010f8 <UTILS_NanosecondsToTimespec+0x90>)
 80010b2:	fb82 1203 	smull	r1, r2, r2, r3
 80010b6:	1712      	asrs	r2, r2, #28
 80010b8:	17db      	asrs	r3, r3, #31
 80010ba:	1ad3      	subs	r3, r2, r3
 80010bc:	3301      	adds	r3, #1
 80010be:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010c6:	6979      	ldr	r1, [r7, #20]
 80010c8:	17c8      	asrs	r0, r1, #31
 80010ca:	460c      	mov	r4, r1
 80010cc:	4605      	mov	r5, r0
 80010ce:	ebb2 0804 	subs.w	r8, r2, r4
 80010d2:	eb63 0905 	sbc.w	r9, r3, r5
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	689a      	ldr	r2, [r3, #8]
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	4906      	ldr	r1, [pc, #24]	@ (80010fc <UTILS_NanosecondsToTimespec+0x94>)
 80010e4:	fb01 f303 	mul.w	r3, r1, r3
 80010e8:	441a      	add	r2, r3
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	609a      	str	r2, [r3, #8]
    }
}
 80010ee:	bf00      	nop
 80010f0:	3718      	adds	r7, #24
 80010f2:	46bd      	mov	sp, r7
 80010f4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80010f8:	44b82fa1 	.word	0x44b82fa1
 80010fc:	3b9aca00 	.word	0x3b9aca00
 8001100:	3b9aca00 	.word	0x3b9aca00
 8001104:	00000000 	.word	0x00000000

08001108 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8001108:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800110c:	b08e      	sub	sp, #56	@ 0x38
 800110e:	af00      	add	r7, sp, #0
 8001110:	6278      	str	r0, [r7, #36]	@ 0x24
 8001112:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 8001114:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8001118:	2300      	movs	r3, #0
 800111a:	6013      	str	r3, [r2, #0]
 800111c:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 800111e:	f04f 0200 	mov.w	r2, #0
 8001122:	f04f 0300 	mov.w	r3, #0
 8001126:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 800112a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800112e:	4618      	mov	r0, r3
 8001130:	f005 f9b0 	bl	8006494 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8001134:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001136:	17da      	asrs	r2, r3, #31
 8001138:	61bb      	str	r3, [r7, #24]
 800113a:	61fa      	str	r2, [r7, #28]
 800113c:	f04f 0200 	mov.w	r2, #0
 8001140:	f04f 0300 	mov.w	r3, #0
 8001144:	69b9      	ldr	r1, [r7, #24]
 8001146:	000b      	movs	r3, r1
 8001148:	2200      	movs	r2, #0
 800114a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 800114e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001150:	2200      	movs	r2, #0
 8001152:	461c      	mov	r4, r3
 8001154:	4615      	mov	r5, r2
 8001156:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800115a:	1911      	adds	r1, r2, r4
 800115c:	60b9      	str	r1, [r7, #8]
 800115e:	416b      	adcs	r3, r5
 8001160:	60fb      	str	r3, [r7, #12]
 8001162:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001166:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 800116a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800116e:	4602      	mov	r2, r0
 8001170:	460b      	mov	r3, r1
 8001172:	f04f 0400 	mov.w	r4, #0
 8001176:	f04f 0500 	mov.w	r5, #0
 800117a:	015d      	lsls	r5, r3, #5
 800117c:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8001180:	0154      	lsls	r4, r2, #5
 8001182:	4622      	mov	r2, r4
 8001184:	462b      	mov	r3, r5
 8001186:	ebb2 0800 	subs.w	r8, r2, r0
 800118a:	eb63 0901 	sbc.w	r9, r3, r1
 800118e:	f04f 0200 	mov.w	r2, #0
 8001192:	f04f 0300 	mov.w	r3, #0
 8001196:	ea4f 2349 	mov.w	r3, r9, lsl #9
 800119a:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 800119e:	ea4f 2248 	mov.w	r2, r8, lsl #9
 80011a2:	4690      	mov	r8, r2
 80011a4:	4699      	mov	r9, r3
 80011a6:	eb18 0a00 	adds.w	sl, r8, r0
 80011aa:	eb49 0b01 	adc.w	fp, r9, r1
 80011ae:	f04f 0200 	mov.w	r2, #0
 80011b2:	f04f 0300 	mov.w	r3, #0
 80011b6:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80011ba:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80011be:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80011c2:	ebb2 040a 	subs.w	r4, r2, sl
 80011c6:	603c      	str	r4, [r7, #0]
 80011c8:	eb63 030b 	sbc.w	r3, r3, fp
 80011cc:	607b      	str	r3, [r7, #4]
 80011ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80011d2:	4623      	mov	r3, r4
 80011d4:	181b      	adds	r3, r3, r0
 80011d6:	613b      	str	r3, [r7, #16]
 80011d8:	462b      	mov	r3, r5
 80011da:	eb41 0303 	adc.w	r3, r1, r3
 80011de:	617b      	str	r3, [r7, #20]
 80011e0:	6a3a      	ldr	r2, [r7, #32]
 80011e2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80011e6:	f7ff ff3f 	bl	8001068 <UTILS_NanosecondsToTimespec>

    return 0;
 80011ea:	2300      	movs	r3, #0
 80011ec:	4618      	mov	r0, r3
 80011ee:	3738      	adds	r7, #56	@ 0x38
 80011f0:	46bd      	mov	sp, r7
 80011f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080011f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	607b      	str	r3, [r7, #4]
 8001202:	4b12      	ldr	r3, [pc, #72]	@ (800124c <HAL_MspInit+0x54>)
 8001204:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001206:	4a11      	ldr	r2, [pc, #68]	@ (800124c <HAL_MspInit+0x54>)
 8001208:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800120c:	6453      	str	r3, [r2, #68]	@ 0x44
 800120e:	4b0f      	ldr	r3, [pc, #60]	@ (800124c <HAL_MspInit+0x54>)
 8001210:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001212:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001216:	607b      	str	r3, [r7, #4]
 8001218:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800121a:	2300      	movs	r3, #0
 800121c:	603b      	str	r3, [r7, #0]
 800121e:	4b0b      	ldr	r3, [pc, #44]	@ (800124c <HAL_MspInit+0x54>)
 8001220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001222:	4a0a      	ldr	r2, [pc, #40]	@ (800124c <HAL_MspInit+0x54>)
 8001224:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001228:	6413      	str	r3, [r2, #64]	@ 0x40
 800122a:	4b08      	ldr	r3, [pc, #32]	@ (800124c <HAL_MspInit+0x54>)
 800122c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800122e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001232:	603b      	str	r3, [r7, #0]
 8001234:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001236:	2200      	movs	r2, #0
 8001238:	210f      	movs	r1, #15
 800123a:	f06f 0001 	mvn.w	r0, #1
 800123e:	f000 fc1f 	bl	8001a80 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001242:	bf00      	nop
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40023800 	.word	0x40023800

08001250 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b08a      	sub	sp, #40	@ 0x28
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001258:	f107 0314 	add.w	r3, r7, #20
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	605a      	str	r2, [r3, #4]
 8001262:	609a      	str	r2, [r3, #8]
 8001264:	60da      	str	r2, [r3, #12]
 8001266:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a4d      	ldr	r2, [pc, #308]	@ (80013a4 <HAL_UART_MspInit+0x154>)
 800126e:	4293      	cmp	r3, r2
 8001270:	f040 8093 	bne.w	800139a <HAL_UART_MspInit+0x14a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001274:	2300      	movs	r3, #0
 8001276:	613b      	str	r3, [r7, #16]
 8001278:	4b4b      	ldr	r3, [pc, #300]	@ (80013a8 <HAL_UART_MspInit+0x158>)
 800127a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800127c:	4a4a      	ldr	r2, [pc, #296]	@ (80013a8 <HAL_UART_MspInit+0x158>)
 800127e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001282:	6413      	str	r3, [r2, #64]	@ 0x40
 8001284:	4b48      	ldr	r3, [pc, #288]	@ (80013a8 <HAL_UART_MspInit+0x158>)
 8001286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001288:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800128c:	613b      	str	r3, [r7, #16]
 800128e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001290:	2300      	movs	r3, #0
 8001292:	60fb      	str	r3, [r7, #12]
 8001294:	4b44      	ldr	r3, [pc, #272]	@ (80013a8 <HAL_UART_MspInit+0x158>)
 8001296:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001298:	4a43      	ldr	r2, [pc, #268]	@ (80013a8 <HAL_UART_MspInit+0x158>)
 800129a:	f043 0301 	orr.w	r3, r3, #1
 800129e:	6313      	str	r3, [r2, #48]	@ 0x30
 80012a0:	4b41      	ldr	r3, [pc, #260]	@ (80013a8 <HAL_UART_MspInit+0x158>)
 80012a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a4:	f003 0301 	and.w	r3, r3, #1
 80012a8:	60fb      	str	r3, [r7, #12]
 80012aa:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80012ac:	230c      	movs	r3, #12
 80012ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b0:	2302      	movs	r3, #2
 80012b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b8:	2303      	movs	r3, #3
 80012ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012bc:	2307      	movs	r3, #7
 80012be:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c0:	f107 0314 	add.w	r3, r7, #20
 80012c4:	4619      	mov	r1, r3
 80012c6:	4839      	ldr	r0, [pc, #228]	@ (80013ac <HAL_UART_MspInit+0x15c>)
 80012c8:	f001 f806 	bl	80022d8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80012cc:	4b38      	ldr	r3, [pc, #224]	@ (80013b0 <HAL_UART_MspInit+0x160>)
 80012ce:	4a39      	ldr	r2, [pc, #228]	@ (80013b4 <HAL_UART_MspInit+0x164>)
 80012d0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80012d2:	4b37      	ldr	r3, [pc, #220]	@ (80013b0 <HAL_UART_MspInit+0x160>)
 80012d4:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80012d8:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012da:	4b35      	ldr	r3, [pc, #212]	@ (80013b0 <HAL_UART_MspInit+0x160>)
 80012dc:	2200      	movs	r2, #0
 80012de:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012e0:	4b33      	ldr	r3, [pc, #204]	@ (80013b0 <HAL_UART_MspInit+0x160>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80012e6:	4b32      	ldr	r3, [pc, #200]	@ (80013b0 <HAL_UART_MspInit+0x160>)
 80012e8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80012ec:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012ee:	4b30      	ldr	r3, [pc, #192]	@ (80013b0 <HAL_UART_MspInit+0x160>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012f4:	4b2e      	ldr	r3, [pc, #184]	@ (80013b0 <HAL_UART_MspInit+0x160>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80012fa:	4b2d      	ldr	r3, [pc, #180]	@ (80013b0 <HAL_UART_MspInit+0x160>)
 80012fc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001300:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001302:	4b2b      	ldr	r3, [pc, #172]	@ (80013b0 <HAL_UART_MspInit+0x160>)
 8001304:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001308:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800130a:	4b29      	ldr	r3, [pc, #164]	@ (80013b0 <HAL_UART_MspInit+0x160>)
 800130c:	2200      	movs	r2, #0
 800130e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001310:	4827      	ldr	r0, [pc, #156]	@ (80013b0 <HAL_UART_MspInit+0x160>)
 8001312:	f000 fbdf 	bl	8001ad4 <HAL_DMA_Init>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 800131c:	f7ff fe00 	bl	8000f20 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	4a23      	ldr	r2, [pc, #140]	@ (80013b0 <HAL_UART_MspInit+0x160>)
 8001324:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001326:	4a22      	ldr	r2, [pc, #136]	@ (80013b0 <HAL_UART_MspInit+0x160>)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800132c:	4b22      	ldr	r3, [pc, #136]	@ (80013b8 <HAL_UART_MspInit+0x168>)
 800132e:	4a23      	ldr	r2, [pc, #140]	@ (80013bc <HAL_UART_MspInit+0x16c>)
 8001330:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001332:	4b21      	ldr	r3, [pc, #132]	@ (80013b8 <HAL_UART_MspInit+0x168>)
 8001334:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001338:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800133a:	4b1f      	ldr	r3, [pc, #124]	@ (80013b8 <HAL_UART_MspInit+0x168>)
 800133c:	2240      	movs	r2, #64	@ 0x40
 800133e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001340:	4b1d      	ldr	r3, [pc, #116]	@ (80013b8 <HAL_UART_MspInit+0x168>)
 8001342:	2200      	movs	r2, #0
 8001344:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001346:	4b1c      	ldr	r3, [pc, #112]	@ (80013b8 <HAL_UART_MspInit+0x168>)
 8001348:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800134c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800134e:	4b1a      	ldr	r3, [pc, #104]	@ (80013b8 <HAL_UART_MspInit+0x168>)
 8001350:	2200      	movs	r2, #0
 8001352:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001354:	4b18      	ldr	r3, [pc, #96]	@ (80013b8 <HAL_UART_MspInit+0x168>)
 8001356:	2200      	movs	r2, #0
 8001358:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800135a:	4b17      	ldr	r3, [pc, #92]	@ (80013b8 <HAL_UART_MspInit+0x168>)
 800135c:	2200      	movs	r2, #0
 800135e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001360:	4b15      	ldr	r3, [pc, #84]	@ (80013b8 <HAL_UART_MspInit+0x168>)
 8001362:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001366:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001368:	4b13      	ldr	r3, [pc, #76]	@ (80013b8 <HAL_UART_MspInit+0x168>)
 800136a:	2200      	movs	r2, #0
 800136c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800136e:	4812      	ldr	r0, [pc, #72]	@ (80013b8 <HAL_UART_MspInit+0x168>)
 8001370:	f000 fbb0 	bl	8001ad4 <HAL_DMA_Init>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 800137a:	f7ff fdd1 	bl	8000f20 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4a0d      	ldr	r2, [pc, #52]	@ (80013b8 <HAL_UART_MspInit+0x168>)
 8001382:	639a      	str	r2, [r3, #56]	@ 0x38
 8001384:	4a0c      	ldr	r2, [pc, #48]	@ (80013b8 <HAL_UART_MspInit+0x168>)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800138a:	2200      	movs	r2, #0
 800138c:	2105      	movs	r1, #5
 800138e:	2026      	movs	r0, #38	@ 0x26
 8001390:	f000 fb76 	bl	8001a80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001394:	2026      	movs	r0, #38	@ 0x26
 8001396:	f000 fb8f 	bl	8001ab8 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800139a:	bf00      	nop
 800139c:	3728      	adds	r7, #40	@ 0x28
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	40004400 	.word	0x40004400
 80013a8:	40023800 	.word	0x40023800
 80013ac:	40020000 	.word	0x40020000
 80013b0:	20003d8c 	.word	0x20003d8c
 80013b4:	40026088 	.word	0x40026088
 80013b8:	20003dec 	.word	0x20003dec
 80013bc:	400260a0 	.word	0x400260a0

080013c0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b08c      	sub	sp, #48	@ 0x30
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80013c8:	2300      	movs	r3, #0
 80013ca:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80013cc:	2300      	movs	r3, #0
 80013ce:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80013d0:	2300      	movs	r3, #0
 80013d2:	60bb      	str	r3, [r7, #8]
 80013d4:	4b2e      	ldr	r3, [pc, #184]	@ (8001490 <HAL_InitTick+0xd0>)
 80013d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013d8:	4a2d      	ldr	r2, [pc, #180]	@ (8001490 <HAL_InitTick+0xd0>)
 80013da:	f043 0301 	orr.w	r3, r3, #1
 80013de:	6453      	str	r3, [r2, #68]	@ 0x44
 80013e0:	4b2b      	ldr	r3, [pc, #172]	@ (8001490 <HAL_InitTick+0xd0>)
 80013e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013e4:	f003 0301 	and.w	r3, r3, #1
 80013e8:	60bb      	str	r3, [r7, #8]
 80013ea:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80013ec:	f107 020c 	add.w	r2, r7, #12
 80013f0:	f107 0310 	add.w	r3, r7, #16
 80013f4:	4611      	mov	r1, r2
 80013f6:	4618      	mov	r0, r3
 80013f8:	f001 fa36 	bl	8002868 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80013fc:	f001 fa20 	bl	8002840 <HAL_RCC_GetPCLK2Freq>
 8001400:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001402:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001404:	4a23      	ldr	r2, [pc, #140]	@ (8001494 <HAL_InitTick+0xd4>)
 8001406:	fba2 2303 	umull	r2, r3, r2, r3
 800140a:	0c9b      	lsrs	r3, r3, #18
 800140c:	3b01      	subs	r3, #1
 800140e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001410:	4b21      	ldr	r3, [pc, #132]	@ (8001498 <HAL_InitTick+0xd8>)
 8001412:	4a22      	ldr	r2, [pc, #136]	@ (800149c <HAL_InitTick+0xdc>)
 8001414:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001416:	4b20      	ldr	r3, [pc, #128]	@ (8001498 <HAL_InitTick+0xd8>)
 8001418:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800141c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800141e:	4a1e      	ldr	r2, [pc, #120]	@ (8001498 <HAL_InitTick+0xd8>)
 8001420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001422:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001424:	4b1c      	ldr	r3, [pc, #112]	@ (8001498 <HAL_InitTick+0xd8>)
 8001426:	2200      	movs	r2, #0
 8001428:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800142a:	4b1b      	ldr	r3, [pc, #108]	@ (8001498 <HAL_InitTick+0xd8>)
 800142c:	2200      	movs	r2, #0
 800142e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001430:	4b19      	ldr	r3, [pc, #100]	@ (8001498 <HAL_InitTick+0xd8>)
 8001432:	2200      	movs	r2, #0
 8001434:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001436:	4818      	ldr	r0, [pc, #96]	@ (8001498 <HAL_InitTick+0xd8>)
 8001438:	f001 ff16 	bl	8003268 <HAL_TIM_Base_Init>
 800143c:	4603      	mov	r3, r0
 800143e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001442:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001446:	2b00      	cmp	r3, #0
 8001448:	d11b      	bne.n	8001482 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800144a:	4813      	ldr	r0, [pc, #76]	@ (8001498 <HAL_InitTick+0xd8>)
 800144c:	f001 ff66 	bl	800331c <HAL_TIM_Base_Start_IT>
 8001450:	4603      	mov	r3, r0
 8001452:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001456:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800145a:	2b00      	cmp	r3, #0
 800145c:	d111      	bne.n	8001482 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800145e:	2019      	movs	r0, #25
 8001460:	f000 fb2a 	bl	8001ab8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2b0f      	cmp	r3, #15
 8001468:	d808      	bhi.n	800147c <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800146a:	2200      	movs	r2, #0
 800146c:	6879      	ldr	r1, [r7, #4]
 800146e:	2019      	movs	r0, #25
 8001470:	f000 fb06 	bl	8001a80 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001474:	4a0a      	ldr	r2, [pc, #40]	@ (80014a0 <HAL_InitTick+0xe0>)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6013      	str	r3, [r2, #0]
 800147a:	e002      	b.n	8001482 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 800147c:	2301      	movs	r3, #1
 800147e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001482:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001486:	4618      	mov	r0, r3
 8001488:	3730      	adds	r7, #48	@ 0x30
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	40023800 	.word	0x40023800
 8001494:	431bde83 	.word	0x431bde83
 8001498:	20003e58 	.word	0x20003e58
 800149c:	40010000 	.word	0x40010000
 80014a0:	20000008 	.word	0x20000008

080014a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014a8:	bf00      	nop
 80014aa:	e7fd      	b.n	80014a8 <NMI_Handler+0x4>

080014ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014b0:	bf00      	nop
 80014b2:	e7fd      	b.n	80014b0 <HardFault_Handler+0x4>

080014b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014b8:	bf00      	nop
 80014ba:	e7fd      	b.n	80014b8 <MemManage_Handler+0x4>

080014bc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014c0:	bf00      	nop
 80014c2:	e7fd      	b.n	80014c0 <BusFault_Handler+0x4>

080014c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014c8:	bf00      	nop
 80014ca:	e7fd      	b.n	80014c8 <UsageFault_Handler+0x4>

080014cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014d0:	bf00      	nop
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
	...

080014dc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80014e0:	4802      	ldr	r0, [pc, #8]	@ (80014ec <DMA1_Stream5_IRQHandler+0x10>)
 80014e2:	f000 fc8f 	bl	8001e04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80014e6:	bf00      	nop
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	20003d8c 	.word	0x20003d8c

080014f0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80014f4:	4802      	ldr	r0, [pc, #8]	@ (8001500 <DMA1_Stream6_IRQHandler+0x10>)
 80014f6:	f000 fc85 	bl	8001e04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80014fa:	bf00      	nop
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	20003dec 	.word	0x20003dec

08001504 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001508:	4802      	ldr	r0, [pc, #8]	@ (8001514 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800150a:	f001 ff77 	bl	80033fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800150e:	bf00      	nop
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	20003e58 	.word	0x20003e58

08001518 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800151c:	4802      	ldr	r0, [pc, #8]	@ (8001528 <USART2_IRQHandler+0x10>)
 800151e:	f002 faaf 	bl	8003a80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001522:	bf00      	nop
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	20003d44 	.word	0x20003d44

0800152c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  return 1;
 8001530:	2301      	movs	r3, #1
}
 8001532:	4618      	mov	r0, r3
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr

0800153c <_kill>:

int _kill(int pid, int sig)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001546:	f00f facd 	bl	8010ae4 <__errno>
 800154a:	4603      	mov	r3, r0
 800154c:	2216      	movs	r2, #22
 800154e:	601a      	str	r2, [r3, #0]
  return -1;
 8001550:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001554:	4618      	mov	r0, r3
 8001556:	3708      	adds	r7, #8
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}

0800155c <_exit>:

void _exit (int status)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001564:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	f7ff ffe7 	bl	800153c <_kill>
  while (1) {}    /* Make sure we hang here */
 800156e:	bf00      	nop
 8001570:	e7fd      	b.n	800156e <_exit+0x12>

08001572 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001572:	b580      	push	{r7, lr}
 8001574:	b086      	sub	sp, #24
 8001576:	af00      	add	r7, sp, #0
 8001578:	60f8      	str	r0, [r7, #12]
 800157a:	60b9      	str	r1, [r7, #8]
 800157c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800157e:	2300      	movs	r3, #0
 8001580:	617b      	str	r3, [r7, #20]
 8001582:	e00a      	b.n	800159a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001584:	f3af 8000 	nop.w
 8001588:	4601      	mov	r1, r0
 800158a:	68bb      	ldr	r3, [r7, #8]
 800158c:	1c5a      	adds	r2, r3, #1
 800158e:	60ba      	str	r2, [r7, #8]
 8001590:	b2ca      	uxtb	r2, r1
 8001592:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	3301      	adds	r3, #1
 8001598:	617b      	str	r3, [r7, #20]
 800159a:	697a      	ldr	r2, [r7, #20]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	429a      	cmp	r2, r3
 80015a0:	dbf0      	blt.n	8001584 <_read+0x12>
  }

  return len;
 80015a2:	687b      	ldr	r3, [r7, #4]
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3718      	adds	r7, #24
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}

080015ac <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b086      	sub	sp, #24
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	60f8      	str	r0, [r7, #12]
 80015b4:	60b9      	str	r1, [r7, #8]
 80015b6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015b8:	2300      	movs	r3, #0
 80015ba:	617b      	str	r3, [r7, #20]
 80015bc:	e009      	b.n	80015d2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80015be:	68bb      	ldr	r3, [r7, #8]
 80015c0:	1c5a      	adds	r2, r3, #1
 80015c2:	60ba      	str	r2, [r7, #8]
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	4618      	mov	r0, r3
 80015c8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	3301      	adds	r3, #1
 80015d0:	617b      	str	r3, [r7, #20]
 80015d2:	697a      	ldr	r2, [r7, #20]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	429a      	cmp	r2, r3
 80015d8:	dbf1      	blt.n	80015be <_write+0x12>
  }
  return len;
 80015da:	687b      	ldr	r3, [r7, #4]
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3718      	adds	r7, #24
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}

080015e4 <_close>:

int _close(int file)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80015ec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	370c      	adds	r7, #12
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr

080015fc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800160c:	605a      	str	r2, [r3, #4]
  return 0;
 800160e:	2300      	movs	r3, #0
}
 8001610:	4618      	mov	r0, r3
 8001612:	370c      	adds	r7, #12
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr

0800161c <_isatty>:

int _isatty(int file)
{
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001624:	2301      	movs	r3, #1
}
 8001626:	4618      	mov	r0, r3
 8001628:	370c      	adds	r7, #12
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr

08001632 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001632:	b480      	push	{r7}
 8001634:	b085      	sub	sp, #20
 8001636:	af00      	add	r7, sp, #0
 8001638:	60f8      	str	r0, [r7, #12]
 800163a:	60b9      	str	r1, [r7, #8]
 800163c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800163e:	2300      	movs	r3, #0
}
 8001640:	4618      	mov	r0, r3
 8001642:	3714      	adds	r7, #20
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr

0800164c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b086      	sub	sp, #24
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001654:	4a14      	ldr	r2, [pc, #80]	@ (80016a8 <_sbrk+0x5c>)
 8001656:	4b15      	ldr	r3, [pc, #84]	@ (80016ac <_sbrk+0x60>)
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001660:	4b13      	ldr	r3, [pc, #76]	@ (80016b0 <_sbrk+0x64>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d102      	bne.n	800166e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001668:	4b11      	ldr	r3, [pc, #68]	@ (80016b0 <_sbrk+0x64>)
 800166a:	4a12      	ldr	r2, [pc, #72]	@ (80016b4 <_sbrk+0x68>)
 800166c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800166e:	4b10      	ldr	r3, [pc, #64]	@ (80016b0 <_sbrk+0x64>)
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4413      	add	r3, r2
 8001676:	693a      	ldr	r2, [r7, #16]
 8001678:	429a      	cmp	r2, r3
 800167a:	d207      	bcs.n	800168c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800167c:	f00f fa32 	bl	8010ae4 <__errno>
 8001680:	4603      	mov	r3, r0
 8001682:	220c      	movs	r2, #12
 8001684:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001686:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800168a:	e009      	b.n	80016a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800168c:	4b08      	ldr	r3, [pc, #32]	@ (80016b0 <_sbrk+0x64>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001692:	4b07      	ldr	r3, [pc, #28]	@ (80016b0 <_sbrk+0x64>)
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4413      	add	r3, r2
 800169a:	4a05      	ldr	r2, [pc, #20]	@ (80016b0 <_sbrk+0x64>)
 800169c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800169e:	68fb      	ldr	r3, [r7, #12]
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3718      	adds	r7, #24
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	20020000 	.word	0x20020000
 80016ac:	00000400 	.word	0x00000400
 80016b0:	20003ea4 	.word	0x20003ea4
 80016b4:	2000dc60 	.word	0x2000dc60

080016b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016bc:	4b06      	ldr	r3, [pc, #24]	@ (80016d8 <SystemInit+0x20>)
 80016be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016c2:	4a05      	ldr	r2, [pc, #20]	@ (80016d8 <SystemInit+0x20>)
 80016c4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016cc:	bf00      	nop
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	e000ed00 	.word	0xe000ed00

080016dc <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80016ea:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 80016ec:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80016f0:	4904      	ldr	r1, [pc, #16]	@ (8001704 <cubemx_transport_open+0x28>)
 80016f2:	68f8      	ldr	r0, [r7, #12]
 80016f4:	f002 f920 	bl	8003938 <HAL_UART_Receive_DMA>
    return true;
 80016f8:	2301      	movs	r3, #1
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3710      	adds	r7, #16
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	20003ea8 	.word	0x20003ea8

08001708 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8001716:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8001718:	68f8      	ldr	r0, [r7, #12]
 800171a:	f002 f932 	bl	8003982 <HAL_UART_DMAStop>
    return true;
 800171e:	2301      	movs	r3, #1
}
 8001720:	4618      	mov	r0, r3
 8001722:	3710      	adds	r7, #16
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}

08001728 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8001728:	b580      	push	{r7, lr}
 800172a:	b086      	sub	sp, #24
 800172c:	af00      	add	r7, sp, #0
 800172e:	60f8      	str	r0, [r7, #12]
 8001730:	60b9      	str	r1, [r7, #8]
 8001732:	607a      	str	r2, [r7, #4]
 8001734:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 800173c:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001744:	b2db      	uxtb	r3, r3
 8001746:	2b20      	cmp	r3, #32
 8001748:	d11c      	bne.n	8001784 <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	b29b      	uxth	r3, r3
 800174e:	461a      	mov	r2, r3
 8001750:	68b9      	ldr	r1, [r7, #8]
 8001752:	6978      	ldr	r0, [r7, #20]
 8001754:	f002 f874 	bl	8003840 <HAL_UART_Transmit_DMA>
 8001758:	4603      	mov	r3, r0
 800175a:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 800175c:	e002      	b.n	8001764 <cubemx_transport_write+0x3c>
            osDelay(1);
 800175e:	2001      	movs	r0, #1
 8001760:	f003 fbcc 	bl	8004efc <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001764:	7cfb      	ldrb	r3, [r7, #19]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d105      	bne.n	8001776 <cubemx_transport_write+0x4e>
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001770:	b2db      	uxtb	r3, r3
 8001772:	2b20      	cmp	r3, #32
 8001774:	d1f3      	bne.n	800175e <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 8001776:	7cfb      	ldrb	r3, [r7, #19]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d101      	bne.n	8001780 <cubemx_transport_write+0x58>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	e002      	b.n	8001786 <cubemx_transport_write+0x5e>
 8001780:	2300      	movs	r3, #0
 8001782:	e000      	b.n	8001786 <cubemx_transport_write+0x5e>
    }else{
        return 0;
 8001784:	2300      	movs	r3, #0
    }
}
 8001786:	4618      	mov	r0, r3
 8001788:	3718      	adds	r7, #24
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
	...

08001790 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8001790:	b580      	push	{r7, lr}
 8001792:	b088      	sub	sp, #32
 8001794:	af00      	add	r7, sp, #0
 8001796:	60f8      	str	r0, [r7, #12]
 8001798:	60b9      	str	r1, [r7, #8]
 800179a:	607a      	str	r2, [r7, #4]
 800179c:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80017a4:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 80017a6:	2300      	movs	r3, #0
 80017a8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 80017aa:	b672      	cpsid	i
}
 80017ac:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 80017ba:	4a1c      	ldr	r2, [pc, #112]	@ (800182c <cubemx_transport_read+0x9c>)
 80017bc:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80017be:	b662      	cpsie	i
}
 80017c0:	bf00      	nop
        __enable_irq();
        ms_used++;
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	3301      	adds	r3, #1
 80017c6:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 80017c8:	2001      	movs	r0, #1
 80017ca:	f003 fb97 	bl	8004efc <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 80017ce:	4b18      	ldr	r3, [pc, #96]	@ (8001830 <cubemx_transport_read+0xa0>)
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	4b16      	ldr	r3, [pc, #88]	@ (800182c <cubemx_transport_read+0x9c>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	429a      	cmp	r2, r3
 80017d8:	d103      	bne.n	80017e2 <cubemx_transport_read+0x52>
 80017da:	69fa      	ldr	r2, [r7, #28]
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	429a      	cmp	r2, r3
 80017e0:	dbe3      	blt.n	80017aa <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 80017e2:	2300      	movs	r3, #0
 80017e4:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80017e6:	e011      	b.n	800180c <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 80017e8:	4b11      	ldr	r3, [pc, #68]	@ (8001830 <cubemx_transport_read+0xa0>)
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	68b9      	ldr	r1, [r7, #8]
 80017ee:	69bb      	ldr	r3, [r7, #24]
 80017f0:	440b      	add	r3, r1
 80017f2:	4910      	ldr	r1, [pc, #64]	@ (8001834 <cubemx_transport_read+0xa4>)
 80017f4:	5c8a      	ldrb	r2, [r1, r2]
 80017f6:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 80017f8:	4b0d      	ldr	r3, [pc, #52]	@ (8001830 <cubemx_transport_read+0xa0>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	3301      	adds	r3, #1
 80017fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001802:	4a0b      	ldr	r2, [pc, #44]	@ (8001830 <cubemx_transport_read+0xa0>)
 8001804:	6013      	str	r3, [r2, #0]
        wrote++;
 8001806:	69bb      	ldr	r3, [r7, #24]
 8001808:	3301      	adds	r3, #1
 800180a:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 800180c:	4b08      	ldr	r3, [pc, #32]	@ (8001830 <cubemx_transport_read+0xa0>)
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	4b06      	ldr	r3, [pc, #24]	@ (800182c <cubemx_transport_read+0x9c>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	429a      	cmp	r2, r3
 8001816:	d003      	beq.n	8001820 <cubemx_transport_read+0x90>
 8001818:	69ba      	ldr	r2, [r7, #24]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	429a      	cmp	r2, r3
 800181e:	d3e3      	bcc.n	80017e8 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 8001820:	69bb      	ldr	r3, [r7, #24]
}
 8001822:	4618      	mov	r0, r3
 8001824:	3720      	adds	r7, #32
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	200046ac 	.word	0x200046ac
 8001830:	200046a8 	.word	0x200046a8
 8001834:	20003ea8 	.word	0x20003ea8

08001838 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001838:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001870 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800183c:	f7ff ff3c 	bl	80016b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001840:	480c      	ldr	r0, [pc, #48]	@ (8001874 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001842:	490d      	ldr	r1, [pc, #52]	@ (8001878 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001844:	4a0d      	ldr	r2, [pc, #52]	@ (800187c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001846:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001848:	e002      	b.n	8001850 <LoopCopyDataInit>

0800184a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800184a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800184c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800184e:	3304      	adds	r3, #4

08001850 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001850:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001852:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001854:	d3f9      	bcc.n	800184a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001856:	4a0a      	ldr	r2, [pc, #40]	@ (8001880 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001858:	4c0a      	ldr	r4, [pc, #40]	@ (8001884 <LoopFillZerobss+0x22>)
  movs r3, #0
 800185a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800185c:	e001      	b.n	8001862 <LoopFillZerobss>

0800185e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800185e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001860:	3204      	adds	r2, #4

08001862 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001862:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001864:	d3fb      	bcc.n	800185e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001866:	f00f f943 	bl	8010af0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800186a:	f7ff f96f 	bl	8000b4c <main>
  bx  lr    
 800186e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001870:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001874:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001878:	20000110 	.word	0x20000110
  ldr r2, =_sidata
 800187c:	08012460 	.word	0x08012460
  ldr r2, =_sbss
 8001880:	20000110 	.word	0x20000110
  ldr r4, =_ebss
 8001884:	2000dc5c 	.word	0x2000dc5c

08001888 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001888:	e7fe      	b.n	8001888 <ADC_IRQHandler>
	...

0800188c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001890:	4b0e      	ldr	r3, [pc, #56]	@ (80018cc <HAL_Init+0x40>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a0d      	ldr	r2, [pc, #52]	@ (80018cc <HAL_Init+0x40>)
 8001896:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800189a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800189c:	4b0b      	ldr	r3, [pc, #44]	@ (80018cc <HAL_Init+0x40>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a0a      	ldr	r2, [pc, #40]	@ (80018cc <HAL_Init+0x40>)
 80018a2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80018a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018a8:	4b08      	ldr	r3, [pc, #32]	@ (80018cc <HAL_Init+0x40>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a07      	ldr	r2, [pc, #28]	@ (80018cc <HAL_Init+0x40>)
 80018ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018b4:	2003      	movs	r0, #3
 80018b6:	f000 f8d8 	bl	8001a6a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018ba:	200f      	movs	r0, #15
 80018bc:	f7ff fd80 	bl	80013c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018c0:	f7ff fc9a 	bl	80011f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018c4:	2300      	movs	r3, #0
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	40023c00 	.word	0x40023c00

080018d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018d4:	4b06      	ldr	r3, [pc, #24]	@ (80018f0 <HAL_IncTick+0x20>)
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	461a      	mov	r2, r3
 80018da:	4b06      	ldr	r3, [pc, #24]	@ (80018f4 <HAL_IncTick+0x24>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4413      	add	r3, r2
 80018e0:	4a04      	ldr	r2, [pc, #16]	@ (80018f4 <HAL_IncTick+0x24>)
 80018e2:	6013      	str	r3, [r2, #0]
}
 80018e4:	bf00      	nop
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	2000000c 	.word	0x2000000c
 80018f4:	200046b0 	.word	0x200046b0

080018f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  return uwTick;
 80018fc:	4b03      	ldr	r3, [pc, #12]	@ (800190c <HAL_GetTick+0x14>)
 80018fe:	681b      	ldr	r3, [r3, #0]
}
 8001900:	4618      	mov	r0, r3
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	200046b0 	.word	0x200046b0

08001910 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001910:	b480      	push	{r7}
 8001912:	b085      	sub	sp, #20
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	f003 0307 	and.w	r3, r3, #7
 800191e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001920:	4b0c      	ldr	r3, [pc, #48]	@ (8001954 <__NVIC_SetPriorityGrouping+0x44>)
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001926:	68ba      	ldr	r2, [r7, #8]
 8001928:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800192c:	4013      	ands	r3, r2
 800192e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001938:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800193c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001940:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001942:	4a04      	ldr	r2, [pc, #16]	@ (8001954 <__NVIC_SetPriorityGrouping+0x44>)
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	60d3      	str	r3, [r2, #12]
}
 8001948:	bf00      	nop
 800194a:	3714      	adds	r7, #20
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr
 8001954:	e000ed00 	.word	0xe000ed00

08001958 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800195c:	4b04      	ldr	r3, [pc, #16]	@ (8001970 <__NVIC_GetPriorityGrouping+0x18>)
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	0a1b      	lsrs	r3, r3, #8
 8001962:	f003 0307 	and.w	r3, r3, #7
}
 8001966:	4618      	mov	r0, r3
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr
 8001970:	e000ed00 	.word	0xe000ed00

08001974 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	4603      	mov	r3, r0
 800197c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800197e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001982:	2b00      	cmp	r3, #0
 8001984:	db0b      	blt.n	800199e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001986:	79fb      	ldrb	r3, [r7, #7]
 8001988:	f003 021f 	and.w	r2, r3, #31
 800198c:	4907      	ldr	r1, [pc, #28]	@ (80019ac <__NVIC_EnableIRQ+0x38>)
 800198e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001992:	095b      	lsrs	r3, r3, #5
 8001994:	2001      	movs	r0, #1
 8001996:	fa00 f202 	lsl.w	r2, r0, r2
 800199a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800199e:	bf00      	nop
 80019a0:	370c      	adds	r7, #12
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	e000e100 	.word	0xe000e100

080019b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	4603      	mov	r3, r0
 80019b8:	6039      	str	r1, [r7, #0]
 80019ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	db0a      	blt.n	80019da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	b2da      	uxtb	r2, r3
 80019c8:	490c      	ldr	r1, [pc, #48]	@ (80019fc <__NVIC_SetPriority+0x4c>)
 80019ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ce:	0112      	lsls	r2, r2, #4
 80019d0:	b2d2      	uxtb	r2, r2
 80019d2:	440b      	add	r3, r1
 80019d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019d8:	e00a      	b.n	80019f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	b2da      	uxtb	r2, r3
 80019de:	4908      	ldr	r1, [pc, #32]	@ (8001a00 <__NVIC_SetPriority+0x50>)
 80019e0:	79fb      	ldrb	r3, [r7, #7]
 80019e2:	f003 030f 	and.w	r3, r3, #15
 80019e6:	3b04      	subs	r3, #4
 80019e8:	0112      	lsls	r2, r2, #4
 80019ea:	b2d2      	uxtb	r2, r2
 80019ec:	440b      	add	r3, r1
 80019ee:	761a      	strb	r2, [r3, #24]
}
 80019f0:	bf00      	nop
 80019f2:	370c      	adds	r7, #12
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr
 80019fc:	e000e100 	.word	0xe000e100
 8001a00:	e000ed00 	.word	0xe000ed00

08001a04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b089      	sub	sp, #36	@ 0x24
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	60f8      	str	r0, [r7, #12]
 8001a0c:	60b9      	str	r1, [r7, #8]
 8001a0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	f003 0307 	and.w	r3, r3, #7
 8001a16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	f1c3 0307 	rsb	r3, r3, #7
 8001a1e:	2b04      	cmp	r3, #4
 8001a20:	bf28      	it	cs
 8001a22:	2304      	movcs	r3, #4
 8001a24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	3304      	adds	r3, #4
 8001a2a:	2b06      	cmp	r3, #6
 8001a2c:	d902      	bls.n	8001a34 <NVIC_EncodePriority+0x30>
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	3b03      	subs	r3, #3
 8001a32:	e000      	b.n	8001a36 <NVIC_EncodePriority+0x32>
 8001a34:	2300      	movs	r3, #0
 8001a36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a38:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a42:	43da      	mvns	r2, r3
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	401a      	ands	r2, r3
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a4c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	fa01 f303 	lsl.w	r3, r1, r3
 8001a56:	43d9      	mvns	r1, r3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a5c:	4313      	orrs	r3, r2
         );
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3724      	adds	r7, #36	@ 0x24
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr

08001a6a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a6a:	b580      	push	{r7, lr}
 8001a6c:	b082      	sub	sp, #8
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f7ff ff4c 	bl	8001910 <__NVIC_SetPriorityGrouping>
}
 8001a78:	bf00      	nop
 8001a7a:	3708      	adds	r7, #8
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b086      	sub	sp, #24
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	4603      	mov	r3, r0
 8001a88:	60b9      	str	r1, [r7, #8]
 8001a8a:	607a      	str	r2, [r7, #4]
 8001a8c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a92:	f7ff ff61 	bl	8001958 <__NVIC_GetPriorityGrouping>
 8001a96:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a98:	687a      	ldr	r2, [r7, #4]
 8001a9a:	68b9      	ldr	r1, [r7, #8]
 8001a9c:	6978      	ldr	r0, [r7, #20]
 8001a9e:	f7ff ffb1 	bl	8001a04 <NVIC_EncodePriority>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aa8:	4611      	mov	r1, r2
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7ff ff80 	bl	80019b0 <__NVIC_SetPriority>
}
 8001ab0:	bf00      	nop
 8001ab2:	3718      	adds	r7, #24
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}

08001ab8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	4603      	mov	r3, r0
 8001ac0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f7ff ff54 	bl	8001974 <__NVIC_EnableIRQ>
}
 8001acc:	bf00      	nop
 8001ace:	3708      	adds	r7, #8
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}

08001ad4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b086      	sub	sp, #24
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001adc:	2300      	movs	r3, #0
 8001ade:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001ae0:	f7ff ff0a 	bl	80018f8 <HAL_GetTick>
 8001ae4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d101      	bne.n	8001af0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e099      	b.n	8001c24 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2202      	movs	r2, #2
 8001af4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2200      	movs	r2, #0
 8001afc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f022 0201 	bic.w	r2, r2, #1
 8001b0e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b10:	e00f      	b.n	8001b32 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b12:	f7ff fef1 	bl	80018f8 <HAL_GetTick>
 8001b16:	4602      	mov	r2, r0
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	2b05      	cmp	r3, #5
 8001b1e:	d908      	bls.n	8001b32 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2220      	movs	r2, #32
 8001b24:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2203      	movs	r2, #3
 8001b2a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	e078      	b.n	8001c24 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 0301 	and.w	r3, r3, #1
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d1e8      	bne.n	8001b12 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001b48:	697a      	ldr	r2, [r7, #20]
 8001b4a:	4b38      	ldr	r3, [pc, #224]	@ (8001c2c <HAL_DMA_Init+0x158>)
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	685a      	ldr	r2, [r3, #4]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	691b      	ldr	r3, [r3, #16]
 8001b64:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	699b      	ldr	r3, [r3, #24]
 8001b70:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b76:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6a1b      	ldr	r3, [r3, #32]
 8001b7c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b7e:	697a      	ldr	r2, [r7, #20]
 8001b80:	4313      	orrs	r3, r2
 8001b82:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b88:	2b04      	cmp	r3, #4
 8001b8a:	d107      	bne.n	8001b9c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b94:	4313      	orrs	r3, r2
 8001b96:	697a      	ldr	r2, [r7, #20]
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	697a      	ldr	r2, [r7, #20]
 8001ba2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	695b      	ldr	r3, [r3, #20]
 8001baa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	f023 0307 	bic.w	r3, r3, #7
 8001bb2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bb8:	697a      	ldr	r2, [r7, #20]
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bc2:	2b04      	cmp	r3, #4
 8001bc4:	d117      	bne.n	8001bf6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bca:	697a      	ldr	r2, [r7, #20]
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d00e      	beq.n	8001bf6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	f000 fb01 	bl	80021e0 <DMA_CheckFifoParam>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d008      	beq.n	8001bf6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2240      	movs	r2, #64	@ 0x40
 8001be8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2201      	movs	r2, #1
 8001bee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e016      	b.n	8001c24 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	697a      	ldr	r2, [r7, #20]
 8001bfc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f000 fab8 	bl	8002174 <DMA_CalcBaseAndBitshift>
 8001c04:	4603      	mov	r3, r0
 8001c06:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c0c:	223f      	movs	r2, #63	@ 0x3f
 8001c0e:	409a      	lsls	r2, r3
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2200      	movs	r2, #0
 8001c18:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001c22:	2300      	movs	r3, #0
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3718      	adds	r7, #24
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	f010803f 	.word	0xf010803f

08001c30 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b086      	sub	sp, #24
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	60f8      	str	r0, [r7, #12]
 8001c38:	60b9      	str	r1, [r7, #8]
 8001c3a:	607a      	str	r2, [r7, #4]
 8001c3c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c46:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d101      	bne.n	8001c56 <HAL_DMA_Start_IT+0x26>
 8001c52:	2302      	movs	r3, #2
 8001c54:	e040      	b.n	8001cd8 <HAL_DMA_Start_IT+0xa8>
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	2201      	movs	r2, #1
 8001c5a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d12f      	bne.n	8001cca <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	2202      	movs	r2, #2
 8001c6e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	2200      	movs	r2, #0
 8001c76:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	687a      	ldr	r2, [r7, #4]
 8001c7c:	68b9      	ldr	r1, [r7, #8]
 8001c7e:	68f8      	ldr	r0, [r7, #12]
 8001c80:	f000 fa4a 	bl	8002118 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c88:	223f      	movs	r2, #63	@ 0x3f
 8001c8a:	409a      	lsls	r2, r3
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f042 0216 	orr.w	r2, r2, #22
 8001c9e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d007      	beq.n	8001cb8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f042 0208 	orr.w	r2, r2, #8
 8001cb6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f042 0201 	orr.w	r2, r2, #1
 8001cc6:	601a      	str	r2, [r3, #0]
 8001cc8:	e005      	b.n	8001cd6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001cd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3718      	adds	r7, #24
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cec:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001cee:	f7ff fe03 	bl	80018f8 <HAL_GetTick>
 8001cf2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	2b02      	cmp	r3, #2
 8001cfe:	d008      	beq.n	8001d12 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2280      	movs	r2, #128	@ 0x80
 8001d04:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e052      	b.n	8001db8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f022 0216 	bic.w	r2, r2, #22
 8001d20:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	695a      	ldr	r2, [r3, #20]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001d30:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d103      	bne.n	8001d42 <HAL_DMA_Abort+0x62>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d007      	beq.n	8001d52 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f022 0208 	bic.w	r2, r2, #8
 8001d50:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f022 0201 	bic.w	r2, r2, #1
 8001d60:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d62:	e013      	b.n	8001d8c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d64:	f7ff fdc8 	bl	80018f8 <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	2b05      	cmp	r3, #5
 8001d70:	d90c      	bls.n	8001d8c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2220      	movs	r2, #32
 8001d76:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2203      	movs	r2, #3
 8001d7c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2200      	movs	r2, #0
 8001d84:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001d88:	2303      	movs	r3, #3
 8001d8a:	e015      	b.n	8001db8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 0301 	and.w	r3, r3, #1
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d1e4      	bne.n	8001d64 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d9e:	223f      	movs	r2, #63	@ 0x3f
 8001da0:	409a      	lsls	r2, r3
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2201      	movs	r2, #1
 8001daa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2200      	movs	r2, #0
 8001db2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001db6:	2300      	movs	r3, #0
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3710      	adds	r7, #16
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}

08001dc0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	d004      	beq.n	8001dde <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2280      	movs	r2, #128	@ 0x80
 8001dd8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e00c      	b.n	8001df8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2205      	movs	r2, #5
 8001de2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f022 0201 	bic.w	r2, r2, #1
 8001df4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001df6:	2300      	movs	r3, #0
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	370c      	adds	r7, #12
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr

08001e04 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b086      	sub	sp, #24
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001e10:	4b8e      	ldr	r3, [pc, #568]	@ (800204c <HAL_DMA_IRQHandler+0x248>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a8e      	ldr	r2, [pc, #568]	@ (8002050 <HAL_DMA_IRQHandler+0x24c>)
 8001e16:	fba2 2303 	umull	r2, r3, r2, r3
 8001e1a:	0a9b      	lsrs	r3, r3, #10
 8001e1c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e22:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e2e:	2208      	movs	r2, #8
 8001e30:	409a      	lsls	r2, r3
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	4013      	ands	r3, r2
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d01a      	beq.n	8001e70 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 0304 	and.w	r3, r3, #4
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d013      	beq.n	8001e70 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f022 0204 	bic.w	r2, r2, #4
 8001e56:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e5c:	2208      	movs	r2, #8
 8001e5e:	409a      	lsls	r2, r3
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e68:	f043 0201 	orr.w	r2, r3, #1
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e74:	2201      	movs	r2, #1
 8001e76:	409a      	lsls	r2, r3
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d012      	beq.n	8001ea6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	695b      	ldr	r3, [r3, #20]
 8001e86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d00b      	beq.n	8001ea6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e92:	2201      	movs	r2, #1
 8001e94:	409a      	lsls	r2, r3
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e9e:	f043 0202 	orr.w	r2, r3, #2
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001eaa:	2204      	movs	r2, #4
 8001eac:	409a      	lsls	r2, r3
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d012      	beq.n	8001edc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0302 	and.w	r3, r3, #2
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d00b      	beq.n	8001edc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ec8:	2204      	movs	r2, #4
 8001eca:	409a      	lsls	r2, r3
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ed4:	f043 0204 	orr.w	r2, r3, #4
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ee0:	2210      	movs	r2, #16
 8001ee2:	409a      	lsls	r2, r3
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d043      	beq.n	8001f74 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0308 	and.w	r3, r3, #8
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d03c      	beq.n	8001f74 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001efe:	2210      	movs	r2, #16
 8001f00:	409a      	lsls	r2, r3
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d018      	beq.n	8001f46 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d108      	bne.n	8001f34 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d024      	beq.n	8001f74 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	4798      	blx	r3
 8001f32:	e01f      	b.n	8001f74 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d01b      	beq.n	8001f74 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	4798      	blx	r3
 8001f44:	e016      	b.n	8001f74 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d107      	bne.n	8001f64 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f022 0208 	bic.w	r2, r2, #8
 8001f62:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d003      	beq.n	8001f74 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f78:	2220      	movs	r2, #32
 8001f7a:	409a      	lsls	r2, r3
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	4013      	ands	r3, r2
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	f000 808f 	beq.w	80020a4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 0310 	and.w	r3, r3, #16
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	f000 8087 	beq.w	80020a4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f9a:	2220      	movs	r2, #32
 8001f9c:	409a      	lsls	r2, r3
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	2b05      	cmp	r3, #5
 8001fac:	d136      	bne.n	800201c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f022 0216 	bic.w	r2, r2, #22
 8001fbc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	695a      	ldr	r2, [r3, #20]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001fcc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d103      	bne.n	8001fde <HAL_DMA_IRQHandler+0x1da>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d007      	beq.n	8001fee <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f022 0208 	bic.w	r2, r2, #8
 8001fec:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ff2:	223f      	movs	r2, #63	@ 0x3f
 8001ff4:	409a      	lsls	r2, r3
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2200      	movs	r2, #0
 8002006:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800200e:	2b00      	cmp	r3, #0
 8002010:	d07e      	beq.n	8002110 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	4798      	blx	r3
        }
        return;
 800201a:	e079      	b.n	8002110 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d01d      	beq.n	8002066 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002034:	2b00      	cmp	r3, #0
 8002036:	d10d      	bne.n	8002054 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800203c:	2b00      	cmp	r3, #0
 800203e:	d031      	beq.n	80020a4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	4798      	blx	r3
 8002048:	e02c      	b.n	80020a4 <HAL_DMA_IRQHandler+0x2a0>
 800204a:	bf00      	nop
 800204c:	20000004 	.word	0x20000004
 8002050:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002058:	2b00      	cmp	r3, #0
 800205a:	d023      	beq.n	80020a4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	4798      	blx	r3
 8002064:	e01e      	b.n	80020a4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002070:	2b00      	cmp	r3, #0
 8002072:	d10f      	bne.n	8002094 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f022 0210 	bic.w	r2, r2, #16
 8002082:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2201      	movs	r2, #1
 8002088:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2200      	movs	r2, #0
 8002090:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002098:	2b00      	cmp	r3, #0
 800209a:	d003      	beq.n	80020a4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d032      	beq.n	8002112 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020b0:	f003 0301 	and.w	r3, r3, #1
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d022      	beq.n	80020fe <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2205      	movs	r2, #5
 80020bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f022 0201 	bic.w	r2, r2, #1
 80020ce:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	3301      	adds	r3, #1
 80020d4:	60bb      	str	r3, [r7, #8]
 80020d6:	697a      	ldr	r2, [r7, #20]
 80020d8:	429a      	cmp	r2, r3
 80020da:	d307      	bcc.n	80020ec <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0301 	and.w	r3, r3, #1
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d1f2      	bne.n	80020d0 <HAL_DMA_IRQHandler+0x2cc>
 80020ea:	e000      	b.n	80020ee <HAL_DMA_IRQHandler+0x2ea>
          break;
 80020ec:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2201      	movs	r2, #1
 80020f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2200      	movs	r2, #0
 80020fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002102:	2b00      	cmp	r3, #0
 8002104:	d005      	beq.n	8002112 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	4798      	blx	r3
 800210e:	e000      	b.n	8002112 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002110:	bf00      	nop
    }
  }
}
 8002112:	3718      	adds	r7, #24
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}

08002118 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002118:	b480      	push	{r7}
 800211a:	b085      	sub	sp, #20
 800211c:	af00      	add	r7, sp, #0
 800211e:	60f8      	str	r0, [r7, #12]
 8002120:	60b9      	str	r1, [r7, #8]
 8002122:	607a      	str	r2, [r7, #4]
 8002124:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002134:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	683a      	ldr	r2, [r7, #0]
 800213c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	2b40      	cmp	r3, #64	@ 0x40
 8002144:	d108      	bne.n	8002158 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	68ba      	ldr	r2, [r7, #8]
 8002154:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002156:	e007      	b.n	8002168 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	68ba      	ldr	r2, [r7, #8]
 800215e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	687a      	ldr	r2, [r7, #4]
 8002166:	60da      	str	r2, [r3, #12]
}
 8002168:	bf00      	nop
 800216a:	3714      	adds	r7, #20
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr

08002174 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002174:	b480      	push	{r7}
 8002176:	b085      	sub	sp, #20
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	b2db      	uxtb	r3, r3
 8002182:	3b10      	subs	r3, #16
 8002184:	4a14      	ldr	r2, [pc, #80]	@ (80021d8 <DMA_CalcBaseAndBitshift+0x64>)
 8002186:	fba2 2303 	umull	r2, r3, r2, r3
 800218a:	091b      	lsrs	r3, r3, #4
 800218c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800218e:	4a13      	ldr	r2, [pc, #76]	@ (80021dc <DMA_CalcBaseAndBitshift+0x68>)
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	4413      	add	r3, r2
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	461a      	mov	r2, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2b03      	cmp	r3, #3
 80021a0:	d909      	bls.n	80021b6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80021aa:	f023 0303 	bic.w	r3, r3, #3
 80021ae:	1d1a      	adds	r2, r3, #4
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	659a      	str	r2, [r3, #88]	@ 0x58
 80021b4:	e007      	b.n	80021c6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80021be:	f023 0303 	bic.w	r3, r3, #3
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3714      	adds	r7, #20
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop
 80021d8:	aaaaaaab 	.word	0xaaaaaaab
 80021dc:	08011a14 	.word	0x08011a14

080021e0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b085      	sub	sp, #20
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021e8:	2300      	movs	r3, #0
 80021ea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021f0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	699b      	ldr	r3, [r3, #24]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d11f      	bne.n	800223a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	2b03      	cmp	r3, #3
 80021fe:	d856      	bhi.n	80022ae <DMA_CheckFifoParam+0xce>
 8002200:	a201      	add	r2, pc, #4	@ (adr r2, 8002208 <DMA_CheckFifoParam+0x28>)
 8002202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002206:	bf00      	nop
 8002208:	08002219 	.word	0x08002219
 800220c:	0800222b 	.word	0x0800222b
 8002210:	08002219 	.word	0x08002219
 8002214:	080022af 	.word	0x080022af
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800221c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002220:	2b00      	cmp	r3, #0
 8002222:	d046      	beq.n	80022b2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002228:	e043      	b.n	80022b2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800222e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002232:	d140      	bne.n	80022b6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002238:	e03d      	b.n	80022b6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	699b      	ldr	r3, [r3, #24]
 800223e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002242:	d121      	bne.n	8002288 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	2b03      	cmp	r3, #3
 8002248:	d837      	bhi.n	80022ba <DMA_CheckFifoParam+0xda>
 800224a:	a201      	add	r2, pc, #4	@ (adr r2, 8002250 <DMA_CheckFifoParam+0x70>)
 800224c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002250:	08002261 	.word	0x08002261
 8002254:	08002267 	.word	0x08002267
 8002258:	08002261 	.word	0x08002261
 800225c:	08002279 	.word	0x08002279
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	73fb      	strb	r3, [r7, #15]
      break;
 8002264:	e030      	b.n	80022c8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800226a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d025      	beq.n	80022be <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002276:	e022      	b.n	80022be <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800227c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002280:	d11f      	bne.n	80022c2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002286:	e01c      	b.n	80022c2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	2b02      	cmp	r3, #2
 800228c:	d903      	bls.n	8002296 <DMA_CheckFifoParam+0xb6>
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	2b03      	cmp	r3, #3
 8002292:	d003      	beq.n	800229c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002294:	e018      	b.n	80022c8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	73fb      	strb	r3, [r7, #15]
      break;
 800229a:	e015      	b.n	80022c8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022a0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d00e      	beq.n	80022c6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	73fb      	strb	r3, [r7, #15]
      break;
 80022ac:	e00b      	b.n	80022c6 <DMA_CheckFifoParam+0xe6>
      break;
 80022ae:	bf00      	nop
 80022b0:	e00a      	b.n	80022c8 <DMA_CheckFifoParam+0xe8>
      break;
 80022b2:	bf00      	nop
 80022b4:	e008      	b.n	80022c8 <DMA_CheckFifoParam+0xe8>
      break;
 80022b6:	bf00      	nop
 80022b8:	e006      	b.n	80022c8 <DMA_CheckFifoParam+0xe8>
      break;
 80022ba:	bf00      	nop
 80022bc:	e004      	b.n	80022c8 <DMA_CheckFifoParam+0xe8>
      break;
 80022be:	bf00      	nop
 80022c0:	e002      	b.n	80022c8 <DMA_CheckFifoParam+0xe8>
      break;   
 80022c2:	bf00      	nop
 80022c4:	e000      	b.n	80022c8 <DMA_CheckFifoParam+0xe8>
      break;
 80022c6:	bf00      	nop
    }
  } 
  
  return status; 
 80022c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3714      	adds	r7, #20
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop

080022d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022d8:	b480      	push	{r7}
 80022da:	b089      	sub	sp, #36	@ 0x24
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022e2:	2300      	movs	r3, #0
 80022e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022e6:	2300      	movs	r3, #0
 80022e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022ea:	2300      	movs	r3, #0
 80022ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022ee:	2300      	movs	r3, #0
 80022f0:	61fb      	str	r3, [r7, #28]
 80022f2:	e165      	b.n	80025c0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022f4:	2201      	movs	r2, #1
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	fa02 f303 	lsl.w	r3, r2, r3
 80022fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	697a      	ldr	r2, [r7, #20]
 8002304:	4013      	ands	r3, r2
 8002306:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002308:	693a      	ldr	r2, [r7, #16]
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	429a      	cmp	r2, r3
 800230e:	f040 8154 	bne.w	80025ba <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	f003 0303 	and.w	r3, r3, #3
 800231a:	2b01      	cmp	r3, #1
 800231c:	d005      	beq.n	800232a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002326:	2b02      	cmp	r3, #2
 8002328:	d130      	bne.n	800238c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	005b      	lsls	r3, r3, #1
 8002334:	2203      	movs	r2, #3
 8002336:	fa02 f303 	lsl.w	r3, r2, r3
 800233a:	43db      	mvns	r3, r3
 800233c:	69ba      	ldr	r2, [r7, #24]
 800233e:	4013      	ands	r3, r2
 8002340:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	68da      	ldr	r2, [r3, #12]
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	005b      	lsls	r3, r3, #1
 800234a:	fa02 f303 	lsl.w	r3, r2, r3
 800234e:	69ba      	ldr	r2, [r7, #24]
 8002350:	4313      	orrs	r3, r2
 8002352:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	69ba      	ldr	r2, [r7, #24]
 8002358:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002360:	2201      	movs	r2, #1
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	fa02 f303 	lsl.w	r3, r2, r3
 8002368:	43db      	mvns	r3, r3
 800236a:	69ba      	ldr	r2, [r7, #24]
 800236c:	4013      	ands	r3, r2
 800236e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	091b      	lsrs	r3, r3, #4
 8002376:	f003 0201 	and.w	r2, r3, #1
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	fa02 f303 	lsl.w	r3, r2, r3
 8002380:	69ba      	ldr	r2, [r7, #24]
 8002382:	4313      	orrs	r3, r2
 8002384:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f003 0303 	and.w	r3, r3, #3
 8002394:	2b03      	cmp	r3, #3
 8002396:	d017      	beq.n	80023c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	005b      	lsls	r3, r3, #1
 80023a2:	2203      	movs	r2, #3
 80023a4:	fa02 f303 	lsl.w	r3, r2, r3
 80023a8:	43db      	mvns	r3, r3
 80023aa:	69ba      	ldr	r2, [r7, #24]
 80023ac:	4013      	ands	r3, r2
 80023ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	689a      	ldr	r2, [r3, #8]
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	005b      	lsls	r3, r3, #1
 80023b8:	fa02 f303 	lsl.w	r3, r2, r3
 80023bc:	69ba      	ldr	r2, [r7, #24]
 80023be:	4313      	orrs	r3, r2
 80023c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	69ba      	ldr	r2, [r7, #24]
 80023c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f003 0303 	and.w	r3, r3, #3
 80023d0:	2b02      	cmp	r3, #2
 80023d2:	d123      	bne.n	800241c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	08da      	lsrs	r2, r3, #3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	3208      	adds	r2, #8
 80023dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	f003 0307 	and.w	r3, r3, #7
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	220f      	movs	r2, #15
 80023ec:	fa02 f303 	lsl.w	r3, r2, r3
 80023f0:	43db      	mvns	r3, r3
 80023f2:	69ba      	ldr	r2, [r7, #24]
 80023f4:	4013      	ands	r3, r2
 80023f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	691a      	ldr	r2, [r3, #16]
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	f003 0307 	and.w	r3, r3, #7
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	fa02 f303 	lsl.w	r3, r2, r3
 8002408:	69ba      	ldr	r2, [r7, #24]
 800240a:	4313      	orrs	r3, r2
 800240c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	08da      	lsrs	r2, r3, #3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	3208      	adds	r2, #8
 8002416:	69b9      	ldr	r1, [r7, #24]
 8002418:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	005b      	lsls	r3, r3, #1
 8002426:	2203      	movs	r2, #3
 8002428:	fa02 f303 	lsl.w	r3, r2, r3
 800242c:	43db      	mvns	r3, r3
 800242e:	69ba      	ldr	r2, [r7, #24]
 8002430:	4013      	ands	r3, r2
 8002432:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f003 0203 	and.w	r2, r3, #3
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	005b      	lsls	r3, r3, #1
 8002440:	fa02 f303 	lsl.w	r3, r2, r3
 8002444:	69ba      	ldr	r2, [r7, #24]
 8002446:	4313      	orrs	r3, r2
 8002448:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	69ba      	ldr	r2, [r7, #24]
 800244e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002458:	2b00      	cmp	r3, #0
 800245a:	f000 80ae 	beq.w	80025ba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800245e:	2300      	movs	r3, #0
 8002460:	60fb      	str	r3, [r7, #12]
 8002462:	4b5d      	ldr	r3, [pc, #372]	@ (80025d8 <HAL_GPIO_Init+0x300>)
 8002464:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002466:	4a5c      	ldr	r2, [pc, #368]	@ (80025d8 <HAL_GPIO_Init+0x300>)
 8002468:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800246c:	6453      	str	r3, [r2, #68]	@ 0x44
 800246e:	4b5a      	ldr	r3, [pc, #360]	@ (80025d8 <HAL_GPIO_Init+0x300>)
 8002470:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002472:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002476:	60fb      	str	r3, [r7, #12]
 8002478:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800247a:	4a58      	ldr	r2, [pc, #352]	@ (80025dc <HAL_GPIO_Init+0x304>)
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	089b      	lsrs	r3, r3, #2
 8002480:	3302      	adds	r3, #2
 8002482:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002486:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	f003 0303 	and.w	r3, r3, #3
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	220f      	movs	r2, #15
 8002492:	fa02 f303 	lsl.w	r3, r2, r3
 8002496:	43db      	mvns	r3, r3
 8002498:	69ba      	ldr	r2, [r7, #24]
 800249a:	4013      	ands	r3, r2
 800249c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4a4f      	ldr	r2, [pc, #316]	@ (80025e0 <HAL_GPIO_Init+0x308>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d025      	beq.n	80024f2 <HAL_GPIO_Init+0x21a>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4a4e      	ldr	r2, [pc, #312]	@ (80025e4 <HAL_GPIO_Init+0x30c>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d01f      	beq.n	80024ee <HAL_GPIO_Init+0x216>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4a4d      	ldr	r2, [pc, #308]	@ (80025e8 <HAL_GPIO_Init+0x310>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d019      	beq.n	80024ea <HAL_GPIO_Init+0x212>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4a4c      	ldr	r2, [pc, #304]	@ (80025ec <HAL_GPIO_Init+0x314>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d013      	beq.n	80024e6 <HAL_GPIO_Init+0x20e>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4a4b      	ldr	r2, [pc, #300]	@ (80025f0 <HAL_GPIO_Init+0x318>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d00d      	beq.n	80024e2 <HAL_GPIO_Init+0x20a>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4a4a      	ldr	r2, [pc, #296]	@ (80025f4 <HAL_GPIO_Init+0x31c>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d007      	beq.n	80024de <HAL_GPIO_Init+0x206>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4a49      	ldr	r2, [pc, #292]	@ (80025f8 <HAL_GPIO_Init+0x320>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d101      	bne.n	80024da <HAL_GPIO_Init+0x202>
 80024d6:	2306      	movs	r3, #6
 80024d8:	e00c      	b.n	80024f4 <HAL_GPIO_Init+0x21c>
 80024da:	2307      	movs	r3, #7
 80024dc:	e00a      	b.n	80024f4 <HAL_GPIO_Init+0x21c>
 80024de:	2305      	movs	r3, #5
 80024e0:	e008      	b.n	80024f4 <HAL_GPIO_Init+0x21c>
 80024e2:	2304      	movs	r3, #4
 80024e4:	e006      	b.n	80024f4 <HAL_GPIO_Init+0x21c>
 80024e6:	2303      	movs	r3, #3
 80024e8:	e004      	b.n	80024f4 <HAL_GPIO_Init+0x21c>
 80024ea:	2302      	movs	r3, #2
 80024ec:	e002      	b.n	80024f4 <HAL_GPIO_Init+0x21c>
 80024ee:	2301      	movs	r3, #1
 80024f0:	e000      	b.n	80024f4 <HAL_GPIO_Init+0x21c>
 80024f2:	2300      	movs	r3, #0
 80024f4:	69fa      	ldr	r2, [r7, #28]
 80024f6:	f002 0203 	and.w	r2, r2, #3
 80024fa:	0092      	lsls	r2, r2, #2
 80024fc:	4093      	lsls	r3, r2
 80024fe:	69ba      	ldr	r2, [r7, #24]
 8002500:	4313      	orrs	r3, r2
 8002502:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002504:	4935      	ldr	r1, [pc, #212]	@ (80025dc <HAL_GPIO_Init+0x304>)
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	089b      	lsrs	r3, r3, #2
 800250a:	3302      	adds	r3, #2
 800250c:	69ba      	ldr	r2, [r7, #24]
 800250e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002512:	4b3a      	ldr	r3, [pc, #232]	@ (80025fc <HAL_GPIO_Init+0x324>)
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	43db      	mvns	r3, r3
 800251c:	69ba      	ldr	r2, [r7, #24]
 800251e:	4013      	ands	r3, r2
 8002520:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d003      	beq.n	8002536 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800252e:	69ba      	ldr	r2, [r7, #24]
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	4313      	orrs	r3, r2
 8002534:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002536:	4a31      	ldr	r2, [pc, #196]	@ (80025fc <HAL_GPIO_Init+0x324>)
 8002538:	69bb      	ldr	r3, [r7, #24]
 800253a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800253c:	4b2f      	ldr	r3, [pc, #188]	@ (80025fc <HAL_GPIO_Init+0x324>)
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	43db      	mvns	r3, r3
 8002546:	69ba      	ldr	r2, [r7, #24]
 8002548:	4013      	ands	r3, r2
 800254a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002554:	2b00      	cmp	r3, #0
 8002556:	d003      	beq.n	8002560 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002558:	69ba      	ldr	r2, [r7, #24]
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	4313      	orrs	r3, r2
 800255e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002560:	4a26      	ldr	r2, [pc, #152]	@ (80025fc <HAL_GPIO_Init+0x324>)
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002566:	4b25      	ldr	r3, [pc, #148]	@ (80025fc <HAL_GPIO_Init+0x324>)
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	43db      	mvns	r3, r3
 8002570:	69ba      	ldr	r2, [r7, #24]
 8002572:	4013      	ands	r3, r2
 8002574:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d003      	beq.n	800258a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002582:	69ba      	ldr	r2, [r7, #24]
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	4313      	orrs	r3, r2
 8002588:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800258a:	4a1c      	ldr	r2, [pc, #112]	@ (80025fc <HAL_GPIO_Init+0x324>)
 800258c:	69bb      	ldr	r3, [r7, #24]
 800258e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002590:	4b1a      	ldr	r3, [pc, #104]	@ (80025fc <HAL_GPIO_Init+0x324>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	43db      	mvns	r3, r3
 800259a:	69ba      	ldr	r2, [r7, #24]
 800259c:	4013      	ands	r3, r2
 800259e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d003      	beq.n	80025b4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80025ac:	69ba      	ldr	r2, [r7, #24]
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	4313      	orrs	r3, r2
 80025b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025b4:	4a11      	ldr	r2, [pc, #68]	@ (80025fc <HAL_GPIO_Init+0x324>)
 80025b6:	69bb      	ldr	r3, [r7, #24]
 80025b8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	3301      	adds	r3, #1
 80025be:	61fb      	str	r3, [r7, #28]
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	2b0f      	cmp	r3, #15
 80025c4:	f67f ae96 	bls.w	80022f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025c8:	bf00      	nop
 80025ca:	bf00      	nop
 80025cc:	3724      	adds	r7, #36	@ 0x24
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr
 80025d6:	bf00      	nop
 80025d8:	40023800 	.word	0x40023800
 80025dc:	40013800 	.word	0x40013800
 80025e0:	40020000 	.word	0x40020000
 80025e4:	40020400 	.word	0x40020400
 80025e8:	40020800 	.word	0x40020800
 80025ec:	40020c00 	.word	0x40020c00
 80025f0:	40021000 	.word	0x40021000
 80025f4:	40021400 	.word	0x40021400
 80025f8:	40021800 	.word	0x40021800
 80025fc:	40013c00 	.word	0x40013c00

08002600 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	460b      	mov	r3, r1
 800260a:	807b      	strh	r3, [r7, #2]
 800260c:	4613      	mov	r3, r2
 800260e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002610:	787b      	ldrb	r3, [r7, #1]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d003      	beq.n	800261e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002616:	887a      	ldrh	r2, [r7, #2]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800261c:	e003      	b.n	8002626 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800261e:	887b      	ldrh	r3, [r7, #2]
 8002620:	041a      	lsls	r2, r3, #16
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	619a      	str	r2, [r3, #24]
}
 8002626:	bf00      	nop
 8002628:	370c      	adds	r7, #12
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr
	...

08002634 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b084      	sub	sp, #16
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d101      	bne.n	8002648 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e0cc      	b.n	80027e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002648:	4b68      	ldr	r3, [pc, #416]	@ (80027ec <HAL_RCC_ClockConfig+0x1b8>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 030f 	and.w	r3, r3, #15
 8002650:	683a      	ldr	r2, [r7, #0]
 8002652:	429a      	cmp	r2, r3
 8002654:	d90c      	bls.n	8002670 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002656:	4b65      	ldr	r3, [pc, #404]	@ (80027ec <HAL_RCC_ClockConfig+0x1b8>)
 8002658:	683a      	ldr	r2, [r7, #0]
 800265a:	b2d2      	uxtb	r2, r2
 800265c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800265e:	4b63      	ldr	r3, [pc, #396]	@ (80027ec <HAL_RCC_ClockConfig+0x1b8>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 030f 	and.w	r3, r3, #15
 8002666:	683a      	ldr	r2, [r7, #0]
 8002668:	429a      	cmp	r2, r3
 800266a:	d001      	beq.n	8002670 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e0b8      	b.n	80027e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0302 	and.w	r3, r3, #2
 8002678:	2b00      	cmp	r3, #0
 800267a:	d020      	beq.n	80026be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0304 	and.w	r3, r3, #4
 8002684:	2b00      	cmp	r3, #0
 8002686:	d005      	beq.n	8002694 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002688:	4b59      	ldr	r3, [pc, #356]	@ (80027f0 <HAL_RCC_ClockConfig+0x1bc>)
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	4a58      	ldr	r2, [pc, #352]	@ (80027f0 <HAL_RCC_ClockConfig+0x1bc>)
 800268e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002692:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0308 	and.w	r3, r3, #8
 800269c:	2b00      	cmp	r3, #0
 800269e:	d005      	beq.n	80026ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026a0:	4b53      	ldr	r3, [pc, #332]	@ (80027f0 <HAL_RCC_ClockConfig+0x1bc>)
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	4a52      	ldr	r2, [pc, #328]	@ (80027f0 <HAL_RCC_ClockConfig+0x1bc>)
 80026a6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80026aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026ac:	4b50      	ldr	r3, [pc, #320]	@ (80027f0 <HAL_RCC_ClockConfig+0x1bc>)
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	494d      	ldr	r1, [pc, #308]	@ (80027f0 <HAL_RCC_ClockConfig+0x1bc>)
 80026ba:	4313      	orrs	r3, r2
 80026bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0301 	and.w	r3, r3, #1
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d044      	beq.n	8002754 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d107      	bne.n	80026e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026d2:	4b47      	ldr	r3, [pc, #284]	@ (80027f0 <HAL_RCC_ClockConfig+0x1bc>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d119      	bne.n	8002712 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e07f      	b.n	80027e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d003      	beq.n	80026f2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026ee:	2b03      	cmp	r3, #3
 80026f0:	d107      	bne.n	8002702 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026f2:	4b3f      	ldr	r3, [pc, #252]	@ (80027f0 <HAL_RCC_ClockConfig+0x1bc>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d109      	bne.n	8002712 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e06f      	b.n	80027e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002702:	4b3b      	ldr	r3, [pc, #236]	@ (80027f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0302 	and.w	r3, r3, #2
 800270a:	2b00      	cmp	r3, #0
 800270c:	d101      	bne.n	8002712 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e067      	b.n	80027e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002712:	4b37      	ldr	r3, [pc, #220]	@ (80027f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	f023 0203 	bic.w	r2, r3, #3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	4934      	ldr	r1, [pc, #208]	@ (80027f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002720:	4313      	orrs	r3, r2
 8002722:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002724:	f7ff f8e8 	bl	80018f8 <HAL_GetTick>
 8002728:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800272a:	e00a      	b.n	8002742 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800272c:	f7ff f8e4 	bl	80018f8 <HAL_GetTick>
 8002730:	4602      	mov	r2, r0
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	f241 3288 	movw	r2, #5000	@ 0x1388
 800273a:	4293      	cmp	r3, r2
 800273c:	d901      	bls.n	8002742 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e04f      	b.n	80027e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002742:	4b2b      	ldr	r3, [pc, #172]	@ (80027f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	f003 020c 	and.w	r2, r3, #12
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	429a      	cmp	r2, r3
 8002752:	d1eb      	bne.n	800272c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002754:	4b25      	ldr	r3, [pc, #148]	@ (80027ec <HAL_RCC_ClockConfig+0x1b8>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 030f 	and.w	r3, r3, #15
 800275c:	683a      	ldr	r2, [r7, #0]
 800275e:	429a      	cmp	r2, r3
 8002760:	d20c      	bcs.n	800277c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002762:	4b22      	ldr	r3, [pc, #136]	@ (80027ec <HAL_RCC_ClockConfig+0x1b8>)
 8002764:	683a      	ldr	r2, [r7, #0]
 8002766:	b2d2      	uxtb	r2, r2
 8002768:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800276a:	4b20      	ldr	r3, [pc, #128]	@ (80027ec <HAL_RCC_ClockConfig+0x1b8>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 030f 	and.w	r3, r3, #15
 8002772:	683a      	ldr	r2, [r7, #0]
 8002774:	429a      	cmp	r2, r3
 8002776:	d001      	beq.n	800277c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	e032      	b.n	80027e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0304 	and.w	r3, r3, #4
 8002784:	2b00      	cmp	r3, #0
 8002786:	d008      	beq.n	800279a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002788:	4b19      	ldr	r3, [pc, #100]	@ (80027f0 <HAL_RCC_ClockConfig+0x1bc>)
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	4916      	ldr	r1, [pc, #88]	@ (80027f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002796:	4313      	orrs	r3, r2
 8002798:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0308 	and.w	r3, r3, #8
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d009      	beq.n	80027ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027a6:	4b12      	ldr	r3, [pc, #72]	@ (80027f0 <HAL_RCC_ClockConfig+0x1bc>)
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	691b      	ldr	r3, [r3, #16]
 80027b2:	00db      	lsls	r3, r3, #3
 80027b4:	490e      	ldr	r1, [pc, #56]	@ (80027f0 <HAL_RCC_ClockConfig+0x1bc>)
 80027b6:	4313      	orrs	r3, r2
 80027b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80027ba:	f000 f887 	bl	80028cc <HAL_RCC_GetSysClockFreq>
 80027be:	4602      	mov	r2, r0
 80027c0:	4b0b      	ldr	r3, [pc, #44]	@ (80027f0 <HAL_RCC_ClockConfig+0x1bc>)
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	091b      	lsrs	r3, r3, #4
 80027c6:	f003 030f 	and.w	r3, r3, #15
 80027ca:	490a      	ldr	r1, [pc, #40]	@ (80027f4 <HAL_RCC_ClockConfig+0x1c0>)
 80027cc:	5ccb      	ldrb	r3, [r1, r3]
 80027ce:	fa22 f303 	lsr.w	r3, r2, r3
 80027d2:	4a09      	ldr	r2, [pc, #36]	@ (80027f8 <HAL_RCC_ClockConfig+0x1c4>)
 80027d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80027d6:	4b09      	ldr	r3, [pc, #36]	@ (80027fc <HAL_RCC_ClockConfig+0x1c8>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4618      	mov	r0, r3
 80027dc:	f7fe fdf0 	bl	80013c0 <HAL_InitTick>

  return HAL_OK;
 80027e0:	2300      	movs	r3, #0
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3710      	adds	r7, #16
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	40023c00 	.word	0x40023c00
 80027f0:	40023800 	.word	0x40023800
 80027f4:	080119fc 	.word	0x080119fc
 80027f8:	20000004 	.word	0x20000004
 80027fc:	20000008 	.word	0x20000008

08002800 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002800:	b480      	push	{r7}
 8002802:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002804:	4b03      	ldr	r3, [pc, #12]	@ (8002814 <HAL_RCC_GetHCLKFreq+0x14>)
 8002806:	681b      	ldr	r3, [r3, #0]
}
 8002808:	4618      	mov	r0, r3
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr
 8002812:	bf00      	nop
 8002814:	20000004 	.word	0x20000004

08002818 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800281c:	f7ff fff0 	bl	8002800 <HAL_RCC_GetHCLKFreq>
 8002820:	4602      	mov	r2, r0
 8002822:	4b05      	ldr	r3, [pc, #20]	@ (8002838 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	0a9b      	lsrs	r3, r3, #10
 8002828:	f003 0307 	and.w	r3, r3, #7
 800282c:	4903      	ldr	r1, [pc, #12]	@ (800283c <HAL_RCC_GetPCLK1Freq+0x24>)
 800282e:	5ccb      	ldrb	r3, [r1, r3]
 8002830:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002834:	4618      	mov	r0, r3
 8002836:	bd80      	pop	{r7, pc}
 8002838:	40023800 	.word	0x40023800
 800283c:	08011a0c 	.word	0x08011a0c

08002840 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002844:	f7ff ffdc 	bl	8002800 <HAL_RCC_GetHCLKFreq>
 8002848:	4602      	mov	r2, r0
 800284a:	4b05      	ldr	r3, [pc, #20]	@ (8002860 <HAL_RCC_GetPCLK2Freq+0x20>)
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	0b5b      	lsrs	r3, r3, #13
 8002850:	f003 0307 	and.w	r3, r3, #7
 8002854:	4903      	ldr	r1, [pc, #12]	@ (8002864 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002856:	5ccb      	ldrb	r3, [r1, r3]
 8002858:	fa22 f303 	lsr.w	r3, r2, r3
}
 800285c:	4618      	mov	r0, r3
 800285e:	bd80      	pop	{r7, pc}
 8002860:	40023800 	.word	0x40023800
 8002864:	08011a0c 	.word	0x08011a0c

08002868 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	220f      	movs	r2, #15
 8002876:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002878:	4b12      	ldr	r3, [pc, #72]	@ (80028c4 <HAL_RCC_GetClockConfig+0x5c>)
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	f003 0203 	and.w	r2, r3, #3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002884:	4b0f      	ldr	r3, [pc, #60]	@ (80028c4 <HAL_RCC_GetClockConfig+0x5c>)
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002890:	4b0c      	ldr	r3, [pc, #48]	@ (80028c4 <HAL_RCC_GetClockConfig+0x5c>)
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800289c:	4b09      	ldr	r3, [pc, #36]	@ (80028c4 <HAL_RCC_GetClockConfig+0x5c>)
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	08db      	lsrs	r3, r3, #3
 80028a2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80028aa:	4b07      	ldr	r3, [pc, #28]	@ (80028c8 <HAL_RCC_GetClockConfig+0x60>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 020f 	and.w	r2, r3, #15
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	601a      	str	r2, [r3, #0]
}
 80028b6:	bf00      	nop
 80028b8:	370c      	adds	r7, #12
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr
 80028c2:	bf00      	nop
 80028c4:	40023800 	.word	0x40023800
 80028c8:	40023c00 	.word	0x40023c00

080028cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028d0:	b0ae      	sub	sp, #184	@ 0xb8
 80028d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80028d4:	2300      	movs	r3, #0
 80028d6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80028da:	2300      	movs	r3, #0
 80028dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80028e0:	2300      	movs	r3, #0
 80028e2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80028e6:	2300      	movs	r3, #0
 80028e8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80028ec:	2300      	movs	r3, #0
 80028ee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028f2:	4bcb      	ldr	r3, [pc, #812]	@ (8002c20 <HAL_RCC_GetSysClockFreq+0x354>)
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	f003 030c 	and.w	r3, r3, #12
 80028fa:	2b0c      	cmp	r3, #12
 80028fc:	f200 8206 	bhi.w	8002d0c <HAL_RCC_GetSysClockFreq+0x440>
 8002900:	a201      	add	r2, pc, #4	@ (adr r2, 8002908 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002906:	bf00      	nop
 8002908:	0800293d 	.word	0x0800293d
 800290c:	08002d0d 	.word	0x08002d0d
 8002910:	08002d0d 	.word	0x08002d0d
 8002914:	08002d0d 	.word	0x08002d0d
 8002918:	08002945 	.word	0x08002945
 800291c:	08002d0d 	.word	0x08002d0d
 8002920:	08002d0d 	.word	0x08002d0d
 8002924:	08002d0d 	.word	0x08002d0d
 8002928:	0800294d 	.word	0x0800294d
 800292c:	08002d0d 	.word	0x08002d0d
 8002930:	08002d0d 	.word	0x08002d0d
 8002934:	08002d0d 	.word	0x08002d0d
 8002938:	08002b3d 	.word	0x08002b3d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800293c:	4bb9      	ldr	r3, [pc, #740]	@ (8002c24 <HAL_RCC_GetSysClockFreq+0x358>)
 800293e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002942:	e1e7      	b.n	8002d14 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002944:	4bb8      	ldr	r3, [pc, #736]	@ (8002c28 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002946:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800294a:	e1e3      	b.n	8002d14 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800294c:	4bb4      	ldr	r3, [pc, #720]	@ (8002c20 <HAL_RCC_GetSysClockFreq+0x354>)
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002954:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002958:	4bb1      	ldr	r3, [pc, #708]	@ (8002c20 <HAL_RCC_GetSysClockFreq+0x354>)
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002960:	2b00      	cmp	r3, #0
 8002962:	d071      	beq.n	8002a48 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002964:	4bae      	ldr	r3, [pc, #696]	@ (8002c20 <HAL_RCC_GetSysClockFreq+0x354>)
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	099b      	lsrs	r3, r3, #6
 800296a:	2200      	movs	r2, #0
 800296c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002970:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002974:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002978:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800297c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002980:	2300      	movs	r3, #0
 8002982:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002986:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800298a:	4622      	mov	r2, r4
 800298c:	462b      	mov	r3, r5
 800298e:	f04f 0000 	mov.w	r0, #0
 8002992:	f04f 0100 	mov.w	r1, #0
 8002996:	0159      	lsls	r1, r3, #5
 8002998:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800299c:	0150      	lsls	r0, r2, #5
 800299e:	4602      	mov	r2, r0
 80029a0:	460b      	mov	r3, r1
 80029a2:	4621      	mov	r1, r4
 80029a4:	1a51      	subs	r1, r2, r1
 80029a6:	6439      	str	r1, [r7, #64]	@ 0x40
 80029a8:	4629      	mov	r1, r5
 80029aa:	eb63 0301 	sbc.w	r3, r3, r1
 80029ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80029b0:	f04f 0200 	mov.w	r2, #0
 80029b4:	f04f 0300 	mov.w	r3, #0
 80029b8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80029bc:	4649      	mov	r1, r9
 80029be:	018b      	lsls	r3, r1, #6
 80029c0:	4641      	mov	r1, r8
 80029c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80029c6:	4641      	mov	r1, r8
 80029c8:	018a      	lsls	r2, r1, #6
 80029ca:	4641      	mov	r1, r8
 80029cc:	1a51      	subs	r1, r2, r1
 80029ce:	63b9      	str	r1, [r7, #56]	@ 0x38
 80029d0:	4649      	mov	r1, r9
 80029d2:	eb63 0301 	sbc.w	r3, r3, r1
 80029d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80029d8:	f04f 0200 	mov.w	r2, #0
 80029dc:	f04f 0300 	mov.w	r3, #0
 80029e0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80029e4:	4649      	mov	r1, r9
 80029e6:	00cb      	lsls	r3, r1, #3
 80029e8:	4641      	mov	r1, r8
 80029ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80029ee:	4641      	mov	r1, r8
 80029f0:	00ca      	lsls	r2, r1, #3
 80029f2:	4610      	mov	r0, r2
 80029f4:	4619      	mov	r1, r3
 80029f6:	4603      	mov	r3, r0
 80029f8:	4622      	mov	r2, r4
 80029fa:	189b      	adds	r3, r3, r2
 80029fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80029fe:	462b      	mov	r3, r5
 8002a00:	460a      	mov	r2, r1
 8002a02:	eb42 0303 	adc.w	r3, r2, r3
 8002a06:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a08:	f04f 0200 	mov.w	r2, #0
 8002a0c:	f04f 0300 	mov.w	r3, #0
 8002a10:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002a14:	4629      	mov	r1, r5
 8002a16:	024b      	lsls	r3, r1, #9
 8002a18:	4621      	mov	r1, r4
 8002a1a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002a1e:	4621      	mov	r1, r4
 8002a20:	024a      	lsls	r2, r1, #9
 8002a22:	4610      	mov	r0, r2
 8002a24:	4619      	mov	r1, r3
 8002a26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002a30:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002a34:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002a38:	f7fd fca2 	bl	8000380 <__aeabi_uldivmod>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	460b      	mov	r3, r1
 8002a40:	4613      	mov	r3, r2
 8002a42:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002a46:	e067      	b.n	8002b18 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a48:	4b75      	ldr	r3, [pc, #468]	@ (8002c20 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	099b      	lsrs	r3, r3, #6
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002a54:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002a58:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002a5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a60:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002a62:	2300      	movs	r3, #0
 8002a64:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002a66:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002a6a:	4622      	mov	r2, r4
 8002a6c:	462b      	mov	r3, r5
 8002a6e:	f04f 0000 	mov.w	r0, #0
 8002a72:	f04f 0100 	mov.w	r1, #0
 8002a76:	0159      	lsls	r1, r3, #5
 8002a78:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a7c:	0150      	lsls	r0, r2, #5
 8002a7e:	4602      	mov	r2, r0
 8002a80:	460b      	mov	r3, r1
 8002a82:	4621      	mov	r1, r4
 8002a84:	1a51      	subs	r1, r2, r1
 8002a86:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002a88:	4629      	mov	r1, r5
 8002a8a:	eb63 0301 	sbc.w	r3, r3, r1
 8002a8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a90:	f04f 0200 	mov.w	r2, #0
 8002a94:	f04f 0300 	mov.w	r3, #0
 8002a98:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002a9c:	4649      	mov	r1, r9
 8002a9e:	018b      	lsls	r3, r1, #6
 8002aa0:	4641      	mov	r1, r8
 8002aa2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002aa6:	4641      	mov	r1, r8
 8002aa8:	018a      	lsls	r2, r1, #6
 8002aaa:	4641      	mov	r1, r8
 8002aac:	ebb2 0a01 	subs.w	sl, r2, r1
 8002ab0:	4649      	mov	r1, r9
 8002ab2:	eb63 0b01 	sbc.w	fp, r3, r1
 8002ab6:	f04f 0200 	mov.w	r2, #0
 8002aba:	f04f 0300 	mov.w	r3, #0
 8002abe:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002ac2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002ac6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002aca:	4692      	mov	sl, r2
 8002acc:	469b      	mov	fp, r3
 8002ace:	4623      	mov	r3, r4
 8002ad0:	eb1a 0303 	adds.w	r3, sl, r3
 8002ad4:	623b      	str	r3, [r7, #32]
 8002ad6:	462b      	mov	r3, r5
 8002ad8:	eb4b 0303 	adc.w	r3, fp, r3
 8002adc:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ade:	f04f 0200 	mov.w	r2, #0
 8002ae2:	f04f 0300 	mov.w	r3, #0
 8002ae6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002aea:	4629      	mov	r1, r5
 8002aec:	028b      	lsls	r3, r1, #10
 8002aee:	4621      	mov	r1, r4
 8002af0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002af4:	4621      	mov	r1, r4
 8002af6:	028a      	lsls	r2, r1, #10
 8002af8:	4610      	mov	r0, r2
 8002afa:	4619      	mov	r1, r3
 8002afc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002b00:	2200      	movs	r2, #0
 8002b02:	673b      	str	r3, [r7, #112]	@ 0x70
 8002b04:	677a      	str	r2, [r7, #116]	@ 0x74
 8002b06:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002b0a:	f7fd fc39 	bl	8000380 <__aeabi_uldivmod>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	460b      	mov	r3, r1
 8002b12:	4613      	mov	r3, r2
 8002b14:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002b18:	4b41      	ldr	r3, [pc, #260]	@ (8002c20 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	0c1b      	lsrs	r3, r3, #16
 8002b1e:	f003 0303 	and.w	r3, r3, #3
 8002b22:	3301      	adds	r3, #1
 8002b24:	005b      	lsls	r3, r3, #1
 8002b26:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8002b2a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002b2e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002b32:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b36:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002b3a:	e0eb      	b.n	8002d14 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b3c:	4b38      	ldr	r3, [pc, #224]	@ (8002c20 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002b44:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b48:	4b35      	ldr	r3, [pc, #212]	@ (8002c20 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d06b      	beq.n	8002c2c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b54:	4b32      	ldr	r3, [pc, #200]	@ (8002c20 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	099b      	lsrs	r3, r3, #6
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002b5e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002b60:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002b62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b66:	663b      	str	r3, [r7, #96]	@ 0x60
 8002b68:	2300      	movs	r3, #0
 8002b6a:	667b      	str	r3, [r7, #100]	@ 0x64
 8002b6c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002b70:	4622      	mov	r2, r4
 8002b72:	462b      	mov	r3, r5
 8002b74:	f04f 0000 	mov.w	r0, #0
 8002b78:	f04f 0100 	mov.w	r1, #0
 8002b7c:	0159      	lsls	r1, r3, #5
 8002b7e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b82:	0150      	lsls	r0, r2, #5
 8002b84:	4602      	mov	r2, r0
 8002b86:	460b      	mov	r3, r1
 8002b88:	4621      	mov	r1, r4
 8002b8a:	1a51      	subs	r1, r2, r1
 8002b8c:	61b9      	str	r1, [r7, #24]
 8002b8e:	4629      	mov	r1, r5
 8002b90:	eb63 0301 	sbc.w	r3, r3, r1
 8002b94:	61fb      	str	r3, [r7, #28]
 8002b96:	f04f 0200 	mov.w	r2, #0
 8002b9a:	f04f 0300 	mov.w	r3, #0
 8002b9e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002ba2:	4659      	mov	r1, fp
 8002ba4:	018b      	lsls	r3, r1, #6
 8002ba6:	4651      	mov	r1, sl
 8002ba8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002bac:	4651      	mov	r1, sl
 8002bae:	018a      	lsls	r2, r1, #6
 8002bb0:	4651      	mov	r1, sl
 8002bb2:	ebb2 0801 	subs.w	r8, r2, r1
 8002bb6:	4659      	mov	r1, fp
 8002bb8:	eb63 0901 	sbc.w	r9, r3, r1
 8002bbc:	f04f 0200 	mov.w	r2, #0
 8002bc0:	f04f 0300 	mov.w	r3, #0
 8002bc4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002bc8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002bcc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002bd0:	4690      	mov	r8, r2
 8002bd2:	4699      	mov	r9, r3
 8002bd4:	4623      	mov	r3, r4
 8002bd6:	eb18 0303 	adds.w	r3, r8, r3
 8002bda:	613b      	str	r3, [r7, #16]
 8002bdc:	462b      	mov	r3, r5
 8002bde:	eb49 0303 	adc.w	r3, r9, r3
 8002be2:	617b      	str	r3, [r7, #20]
 8002be4:	f04f 0200 	mov.w	r2, #0
 8002be8:	f04f 0300 	mov.w	r3, #0
 8002bec:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002bf0:	4629      	mov	r1, r5
 8002bf2:	024b      	lsls	r3, r1, #9
 8002bf4:	4621      	mov	r1, r4
 8002bf6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002bfa:	4621      	mov	r1, r4
 8002bfc:	024a      	lsls	r2, r1, #9
 8002bfe:	4610      	mov	r0, r2
 8002c00:	4619      	mov	r1, r3
 8002c02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002c06:	2200      	movs	r2, #0
 8002c08:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002c0a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002c0c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002c10:	f7fd fbb6 	bl	8000380 <__aeabi_uldivmod>
 8002c14:	4602      	mov	r2, r0
 8002c16:	460b      	mov	r3, r1
 8002c18:	4613      	mov	r3, r2
 8002c1a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002c1e:	e065      	b.n	8002cec <HAL_RCC_GetSysClockFreq+0x420>
 8002c20:	40023800 	.word	0x40023800
 8002c24:	00f42400 	.word	0x00f42400
 8002c28:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c2c:	4b3d      	ldr	r3, [pc, #244]	@ (8002d24 <HAL_RCC_GetSysClockFreq+0x458>)
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	099b      	lsrs	r3, r3, #6
 8002c32:	2200      	movs	r2, #0
 8002c34:	4618      	mov	r0, r3
 8002c36:	4611      	mov	r1, r2
 8002c38:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002c3c:	653b      	str	r3, [r7, #80]	@ 0x50
 8002c3e:	2300      	movs	r3, #0
 8002c40:	657b      	str	r3, [r7, #84]	@ 0x54
 8002c42:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002c46:	4642      	mov	r2, r8
 8002c48:	464b      	mov	r3, r9
 8002c4a:	f04f 0000 	mov.w	r0, #0
 8002c4e:	f04f 0100 	mov.w	r1, #0
 8002c52:	0159      	lsls	r1, r3, #5
 8002c54:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c58:	0150      	lsls	r0, r2, #5
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	460b      	mov	r3, r1
 8002c5e:	4641      	mov	r1, r8
 8002c60:	1a51      	subs	r1, r2, r1
 8002c62:	60b9      	str	r1, [r7, #8]
 8002c64:	4649      	mov	r1, r9
 8002c66:	eb63 0301 	sbc.w	r3, r3, r1
 8002c6a:	60fb      	str	r3, [r7, #12]
 8002c6c:	f04f 0200 	mov.w	r2, #0
 8002c70:	f04f 0300 	mov.w	r3, #0
 8002c74:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002c78:	4659      	mov	r1, fp
 8002c7a:	018b      	lsls	r3, r1, #6
 8002c7c:	4651      	mov	r1, sl
 8002c7e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c82:	4651      	mov	r1, sl
 8002c84:	018a      	lsls	r2, r1, #6
 8002c86:	4651      	mov	r1, sl
 8002c88:	1a54      	subs	r4, r2, r1
 8002c8a:	4659      	mov	r1, fp
 8002c8c:	eb63 0501 	sbc.w	r5, r3, r1
 8002c90:	f04f 0200 	mov.w	r2, #0
 8002c94:	f04f 0300 	mov.w	r3, #0
 8002c98:	00eb      	lsls	r3, r5, #3
 8002c9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c9e:	00e2      	lsls	r2, r4, #3
 8002ca0:	4614      	mov	r4, r2
 8002ca2:	461d      	mov	r5, r3
 8002ca4:	4643      	mov	r3, r8
 8002ca6:	18e3      	adds	r3, r4, r3
 8002ca8:	603b      	str	r3, [r7, #0]
 8002caa:	464b      	mov	r3, r9
 8002cac:	eb45 0303 	adc.w	r3, r5, r3
 8002cb0:	607b      	str	r3, [r7, #4]
 8002cb2:	f04f 0200 	mov.w	r2, #0
 8002cb6:	f04f 0300 	mov.w	r3, #0
 8002cba:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002cbe:	4629      	mov	r1, r5
 8002cc0:	028b      	lsls	r3, r1, #10
 8002cc2:	4621      	mov	r1, r4
 8002cc4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002cc8:	4621      	mov	r1, r4
 8002cca:	028a      	lsls	r2, r1, #10
 8002ccc:	4610      	mov	r0, r2
 8002cce:	4619      	mov	r1, r3
 8002cd0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002cd8:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002cda:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002cde:	f7fd fb4f 	bl	8000380 <__aeabi_uldivmod>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	460b      	mov	r3, r1
 8002ce6:	4613      	mov	r3, r2
 8002ce8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002cec:	4b0d      	ldr	r3, [pc, #52]	@ (8002d24 <HAL_RCC_GetSysClockFreq+0x458>)
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	0f1b      	lsrs	r3, r3, #28
 8002cf2:	f003 0307 	and.w	r3, r3, #7
 8002cf6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8002cfa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002cfe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002d02:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d06:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002d0a:	e003      	b.n	8002d14 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d0c:	4b06      	ldr	r3, [pc, #24]	@ (8002d28 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002d0e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002d12:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d14:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	37b8      	adds	r7, #184	@ 0xb8
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d22:	bf00      	nop
 8002d24:	40023800 	.word	0x40023800
 8002d28:	00f42400 	.word	0x00f42400

08002d2c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b086      	sub	sp, #24
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d101      	bne.n	8002d3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e28d      	b.n	800325a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 0301 	and.w	r3, r3, #1
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	f000 8083 	beq.w	8002e52 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002d4c:	4b94      	ldr	r3, [pc, #592]	@ (8002fa0 <HAL_RCC_OscConfig+0x274>)
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	f003 030c 	and.w	r3, r3, #12
 8002d54:	2b04      	cmp	r3, #4
 8002d56:	d019      	beq.n	8002d8c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002d58:	4b91      	ldr	r3, [pc, #580]	@ (8002fa0 <HAL_RCC_OscConfig+0x274>)
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	f003 030c 	and.w	r3, r3, #12
        || \
 8002d60:	2b08      	cmp	r3, #8
 8002d62:	d106      	bne.n	8002d72 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002d64:	4b8e      	ldr	r3, [pc, #568]	@ (8002fa0 <HAL_RCC_OscConfig+0x274>)
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d6c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d70:	d00c      	beq.n	8002d8c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d72:	4b8b      	ldr	r3, [pc, #556]	@ (8002fa0 <HAL_RCC_OscConfig+0x274>)
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002d7a:	2b0c      	cmp	r3, #12
 8002d7c:	d112      	bne.n	8002da4 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d7e:	4b88      	ldr	r3, [pc, #544]	@ (8002fa0 <HAL_RCC_OscConfig+0x274>)
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d86:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d8a:	d10b      	bne.n	8002da4 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d8c:	4b84      	ldr	r3, [pc, #528]	@ (8002fa0 <HAL_RCC_OscConfig+0x274>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d05b      	beq.n	8002e50 <HAL_RCC_OscConfig+0x124>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d157      	bne.n	8002e50 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e25a      	b.n	800325a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002dac:	d106      	bne.n	8002dbc <HAL_RCC_OscConfig+0x90>
 8002dae:	4b7c      	ldr	r3, [pc, #496]	@ (8002fa0 <HAL_RCC_OscConfig+0x274>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a7b      	ldr	r2, [pc, #492]	@ (8002fa0 <HAL_RCC_OscConfig+0x274>)
 8002db4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002db8:	6013      	str	r3, [r2, #0]
 8002dba:	e01d      	b.n	8002df8 <HAL_RCC_OscConfig+0xcc>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002dc4:	d10c      	bne.n	8002de0 <HAL_RCC_OscConfig+0xb4>
 8002dc6:	4b76      	ldr	r3, [pc, #472]	@ (8002fa0 <HAL_RCC_OscConfig+0x274>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a75      	ldr	r2, [pc, #468]	@ (8002fa0 <HAL_RCC_OscConfig+0x274>)
 8002dcc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002dd0:	6013      	str	r3, [r2, #0]
 8002dd2:	4b73      	ldr	r3, [pc, #460]	@ (8002fa0 <HAL_RCC_OscConfig+0x274>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a72      	ldr	r2, [pc, #456]	@ (8002fa0 <HAL_RCC_OscConfig+0x274>)
 8002dd8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ddc:	6013      	str	r3, [r2, #0]
 8002dde:	e00b      	b.n	8002df8 <HAL_RCC_OscConfig+0xcc>
 8002de0:	4b6f      	ldr	r3, [pc, #444]	@ (8002fa0 <HAL_RCC_OscConfig+0x274>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a6e      	ldr	r2, [pc, #440]	@ (8002fa0 <HAL_RCC_OscConfig+0x274>)
 8002de6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002dea:	6013      	str	r3, [r2, #0]
 8002dec:	4b6c      	ldr	r3, [pc, #432]	@ (8002fa0 <HAL_RCC_OscConfig+0x274>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a6b      	ldr	r2, [pc, #428]	@ (8002fa0 <HAL_RCC_OscConfig+0x274>)
 8002df2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002df6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d013      	beq.n	8002e28 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e00:	f7fe fd7a 	bl	80018f8 <HAL_GetTick>
 8002e04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e06:	e008      	b.n	8002e1a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e08:	f7fe fd76 	bl	80018f8 <HAL_GetTick>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	2b64      	cmp	r3, #100	@ 0x64
 8002e14:	d901      	bls.n	8002e1a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002e16:	2303      	movs	r3, #3
 8002e18:	e21f      	b.n	800325a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e1a:	4b61      	ldr	r3, [pc, #388]	@ (8002fa0 <HAL_RCC_OscConfig+0x274>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d0f0      	beq.n	8002e08 <HAL_RCC_OscConfig+0xdc>
 8002e26:	e014      	b.n	8002e52 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e28:	f7fe fd66 	bl	80018f8 <HAL_GetTick>
 8002e2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e2e:	e008      	b.n	8002e42 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e30:	f7fe fd62 	bl	80018f8 <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	2b64      	cmp	r3, #100	@ 0x64
 8002e3c:	d901      	bls.n	8002e42 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e20b      	b.n	800325a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e42:	4b57      	ldr	r3, [pc, #348]	@ (8002fa0 <HAL_RCC_OscConfig+0x274>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d1f0      	bne.n	8002e30 <HAL_RCC_OscConfig+0x104>
 8002e4e:	e000      	b.n	8002e52 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0302 	and.w	r3, r3, #2
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d06f      	beq.n	8002f3e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002e5e:	4b50      	ldr	r3, [pc, #320]	@ (8002fa0 <HAL_RCC_OscConfig+0x274>)
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	f003 030c 	and.w	r3, r3, #12
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d017      	beq.n	8002e9a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002e6a:	4b4d      	ldr	r3, [pc, #308]	@ (8002fa0 <HAL_RCC_OscConfig+0x274>)
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	f003 030c 	and.w	r3, r3, #12
        || \
 8002e72:	2b08      	cmp	r3, #8
 8002e74:	d105      	bne.n	8002e82 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002e76:	4b4a      	ldr	r3, [pc, #296]	@ (8002fa0 <HAL_RCC_OscConfig+0x274>)
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d00b      	beq.n	8002e9a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e82:	4b47      	ldr	r3, [pc, #284]	@ (8002fa0 <HAL_RCC_OscConfig+0x274>)
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002e8a:	2b0c      	cmp	r3, #12
 8002e8c:	d11c      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e8e:	4b44      	ldr	r3, [pc, #272]	@ (8002fa0 <HAL_RCC_OscConfig+0x274>)
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d116      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e9a:	4b41      	ldr	r3, [pc, #260]	@ (8002fa0 <HAL_RCC_OscConfig+0x274>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0302 	and.w	r3, r3, #2
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d005      	beq.n	8002eb2 <HAL_RCC_OscConfig+0x186>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	68db      	ldr	r3, [r3, #12]
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d001      	beq.n	8002eb2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e1d3      	b.n	800325a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eb2:	4b3b      	ldr	r3, [pc, #236]	@ (8002fa0 <HAL_RCC_OscConfig+0x274>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	691b      	ldr	r3, [r3, #16]
 8002ebe:	00db      	lsls	r3, r3, #3
 8002ec0:	4937      	ldr	r1, [pc, #220]	@ (8002fa0 <HAL_RCC_OscConfig+0x274>)
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ec6:	e03a      	b.n	8002f3e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d020      	beq.n	8002f12 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ed0:	4b34      	ldr	r3, [pc, #208]	@ (8002fa4 <HAL_RCC_OscConfig+0x278>)
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ed6:	f7fe fd0f 	bl	80018f8 <HAL_GetTick>
 8002eda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002edc:	e008      	b.n	8002ef0 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ede:	f7fe fd0b 	bl	80018f8 <HAL_GetTick>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	1ad3      	subs	r3, r2, r3
 8002ee8:	2b02      	cmp	r3, #2
 8002eea:	d901      	bls.n	8002ef0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002eec:	2303      	movs	r3, #3
 8002eee:	e1b4      	b.n	800325a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ef0:	4b2b      	ldr	r3, [pc, #172]	@ (8002fa0 <HAL_RCC_OscConfig+0x274>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0302 	and.w	r3, r3, #2
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d0f0      	beq.n	8002ede <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002efc:	4b28      	ldr	r3, [pc, #160]	@ (8002fa0 <HAL_RCC_OscConfig+0x274>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	691b      	ldr	r3, [r3, #16]
 8002f08:	00db      	lsls	r3, r3, #3
 8002f0a:	4925      	ldr	r1, [pc, #148]	@ (8002fa0 <HAL_RCC_OscConfig+0x274>)
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	600b      	str	r3, [r1, #0]
 8002f10:	e015      	b.n	8002f3e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f12:	4b24      	ldr	r3, [pc, #144]	@ (8002fa4 <HAL_RCC_OscConfig+0x278>)
 8002f14:	2200      	movs	r2, #0
 8002f16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f18:	f7fe fcee 	bl	80018f8 <HAL_GetTick>
 8002f1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f1e:	e008      	b.n	8002f32 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f20:	f7fe fcea 	bl	80018f8 <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	d901      	bls.n	8002f32 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e193      	b.n	800325a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f32:	4b1b      	ldr	r3, [pc, #108]	@ (8002fa0 <HAL_RCC_OscConfig+0x274>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0302 	and.w	r3, r3, #2
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d1f0      	bne.n	8002f20 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0308 	and.w	r3, r3, #8
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d036      	beq.n	8002fb8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	695b      	ldr	r3, [r3, #20]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d016      	beq.n	8002f80 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f52:	4b15      	ldr	r3, [pc, #84]	@ (8002fa8 <HAL_RCC_OscConfig+0x27c>)
 8002f54:	2201      	movs	r2, #1
 8002f56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f58:	f7fe fcce 	bl	80018f8 <HAL_GetTick>
 8002f5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f5e:	e008      	b.n	8002f72 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f60:	f7fe fcca 	bl	80018f8 <HAL_GetTick>
 8002f64:	4602      	mov	r2, r0
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d901      	bls.n	8002f72 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e173      	b.n	800325a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f72:	4b0b      	ldr	r3, [pc, #44]	@ (8002fa0 <HAL_RCC_OscConfig+0x274>)
 8002f74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f76:	f003 0302 	and.w	r3, r3, #2
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d0f0      	beq.n	8002f60 <HAL_RCC_OscConfig+0x234>
 8002f7e:	e01b      	b.n	8002fb8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f80:	4b09      	ldr	r3, [pc, #36]	@ (8002fa8 <HAL_RCC_OscConfig+0x27c>)
 8002f82:	2200      	movs	r2, #0
 8002f84:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f86:	f7fe fcb7 	bl	80018f8 <HAL_GetTick>
 8002f8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f8c:	e00e      	b.n	8002fac <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f8e:	f7fe fcb3 	bl	80018f8 <HAL_GetTick>
 8002f92:	4602      	mov	r2, r0
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	2b02      	cmp	r3, #2
 8002f9a:	d907      	bls.n	8002fac <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	e15c      	b.n	800325a <HAL_RCC_OscConfig+0x52e>
 8002fa0:	40023800 	.word	0x40023800
 8002fa4:	42470000 	.word	0x42470000
 8002fa8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fac:	4b8a      	ldr	r3, [pc, #552]	@ (80031d8 <HAL_RCC_OscConfig+0x4ac>)
 8002fae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fb0:	f003 0302 	and.w	r3, r3, #2
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d1ea      	bne.n	8002f8e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0304 	and.w	r3, r3, #4
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	f000 8097 	beq.w	80030f4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fca:	4b83      	ldr	r3, [pc, #524]	@ (80031d8 <HAL_RCC_OscConfig+0x4ac>)
 8002fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d10f      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	60bb      	str	r3, [r7, #8]
 8002fda:	4b7f      	ldr	r3, [pc, #508]	@ (80031d8 <HAL_RCC_OscConfig+0x4ac>)
 8002fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fde:	4a7e      	ldr	r2, [pc, #504]	@ (80031d8 <HAL_RCC_OscConfig+0x4ac>)
 8002fe0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002fe4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002fe6:	4b7c      	ldr	r3, [pc, #496]	@ (80031d8 <HAL_RCC_OscConfig+0x4ac>)
 8002fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fee:	60bb      	str	r3, [r7, #8]
 8002ff0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ff6:	4b79      	ldr	r3, [pc, #484]	@ (80031dc <HAL_RCC_OscConfig+0x4b0>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d118      	bne.n	8003034 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003002:	4b76      	ldr	r3, [pc, #472]	@ (80031dc <HAL_RCC_OscConfig+0x4b0>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a75      	ldr	r2, [pc, #468]	@ (80031dc <HAL_RCC_OscConfig+0x4b0>)
 8003008:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800300c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800300e:	f7fe fc73 	bl	80018f8 <HAL_GetTick>
 8003012:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003014:	e008      	b.n	8003028 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003016:	f7fe fc6f 	bl	80018f8 <HAL_GetTick>
 800301a:	4602      	mov	r2, r0
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	2b02      	cmp	r3, #2
 8003022:	d901      	bls.n	8003028 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003024:	2303      	movs	r3, #3
 8003026:	e118      	b.n	800325a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003028:	4b6c      	ldr	r3, [pc, #432]	@ (80031dc <HAL_RCC_OscConfig+0x4b0>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003030:	2b00      	cmp	r3, #0
 8003032:	d0f0      	beq.n	8003016 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	2b01      	cmp	r3, #1
 800303a:	d106      	bne.n	800304a <HAL_RCC_OscConfig+0x31e>
 800303c:	4b66      	ldr	r3, [pc, #408]	@ (80031d8 <HAL_RCC_OscConfig+0x4ac>)
 800303e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003040:	4a65      	ldr	r2, [pc, #404]	@ (80031d8 <HAL_RCC_OscConfig+0x4ac>)
 8003042:	f043 0301 	orr.w	r3, r3, #1
 8003046:	6713      	str	r3, [r2, #112]	@ 0x70
 8003048:	e01c      	b.n	8003084 <HAL_RCC_OscConfig+0x358>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	2b05      	cmp	r3, #5
 8003050:	d10c      	bne.n	800306c <HAL_RCC_OscConfig+0x340>
 8003052:	4b61      	ldr	r3, [pc, #388]	@ (80031d8 <HAL_RCC_OscConfig+0x4ac>)
 8003054:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003056:	4a60      	ldr	r2, [pc, #384]	@ (80031d8 <HAL_RCC_OscConfig+0x4ac>)
 8003058:	f043 0304 	orr.w	r3, r3, #4
 800305c:	6713      	str	r3, [r2, #112]	@ 0x70
 800305e:	4b5e      	ldr	r3, [pc, #376]	@ (80031d8 <HAL_RCC_OscConfig+0x4ac>)
 8003060:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003062:	4a5d      	ldr	r2, [pc, #372]	@ (80031d8 <HAL_RCC_OscConfig+0x4ac>)
 8003064:	f043 0301 	orr.w	r3, r3, #1
 8003068:	6713      	str	r3, [r2, #112]	@ 0x70
 800306a:	e00b      	b.n	8003084 <HAL_RCC_OscConfig+0x358>
 800306c:	4b5a      	ldr	r3, [pc, #360]	@ (80031d8 <HAL_RCC_OscConfig+0x4ac>)
 800306e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003070:	4a59      	ldr	r2, [pc, #356]	@ (80031d8 <HAL_RCC_OscConfig+0x4ac>)
 8003072:	f023 0301 	bic.w	r3, r3, #1
 8003076:	6713      	str	r3, [r2, #112]	@ 0x70
 8003078:	4b57      	ldr	r3, [pc, #348]	@ (80031d8 <HAL_RCC_OscConfig+0x4ac>)
 800307a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800307c:	4a56      	ldr	r2, [pc, #344]	@ (80031d8 <HAL_RCC_OscConfig+0x4ac>)
 800307e:	f023 0304 	bic.w	r3, r3, #4
 8003082:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d015      	beq.n	80030b8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800308c:	f7fe fc34 	bl	80018f8 <HAL_GetTick>
 8003090:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003092:	e00a      	b.n	80030aa <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003094:	f7fe fc30 	bl	80018f8 <HAL_GetTick>
 8003098:	4602      	mov	r2, r0
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d901      	bls.n	80030aa <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80030a6:	2303      	movs	r3, #3
 80030a8:	e0d7      	b.n	800325a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030aa:	4b4b      	ldr	r3, [pc, #300]	@ (80031d8 <HAL_RCC_OscConfig+0x4ac>)
 80030ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030ae:	f003 0302 	and.w	r3, r3, #2
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d0ee      	beq.n	8003094 <HAL_RCC_OscConfig+0x368>
 80030b6:	e014      	b.n	80030e2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030b8:	f7fe fc1e 	bl	80018f8 <HAL_GetTick>
 80030bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030be:	e00a      	b.n	80030d6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030c0:	f7fe fc1a 	bl	80018f8 <HAL_GetTick>
 80030c4:	4602      	mov	r2, r0
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d901      	bls.n	80030d6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e0c1      	b.n	800325a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030d6:	4b40      	ldr	r3, [pc, #256]	@ (80031d8 <HAL_RCC_OscConfig+0x4ac>)
 80030d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030da:	f003 0302 	and.w	r3, r3, #2
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d1ee      	bne.n	80030c0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80030e2:	7dfb      	ldrb	r3, [r7, #23]
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d105      	bne.n	80030f4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030e8:	4b3b      	ldr	r3, [pc, #236]	@ (80031d8 <HAL_RCC_OscConfig+0x4ac>)
 80030ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ec:	4a3a      	ldr	r2, [pc, #232]	@ (80031d8 <HAL_RCC_OscConfig+0x4ac>)
 80030ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80030f2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	699b      	ldr	r3, [r3, #24]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	f000 80ad 	beq.w	8003258 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80030fe:	4b36      	ldr	r3, [pc, #216]	@ (80031d8 <HAL_RCC_OscConfig+0x4ac>)
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	f003 030c 	and.w	r3, r3, #12
 8003106:	2b08      	cmp	r3, #8
 8003108:	d060      	beq.n	80031cc <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	699b      	ldr	r3, [r3, #24]
 800310e:	2b02      	cmp	r3, #2
 8003110:	d145      	bne.n	800319e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003112:	4b33      	ldr	r3, [pc, #204]	@ (80031e0 <HAL_RCC_OscConfig+0x4b4>)
 8003114:	2200      	movs	r2, #0
 8003116:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003118:	f7fe fbee 	bl	80018f8 <HAL_GetTick>
 800311c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800311e:	e008      	b.n	8003132 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003120:	f7fe fbea 	bl	80018f8 <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	2b02      	cmp	r3, #2
 800312c:	d901      	bls.n	8003132 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e093      	b.n	800325a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003132:	4b29      	ldr	r3, [pc, #164]	@ (80031d8 <HAL_RCC_OscConfig+0x4ac>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d1f0      	bne.n	8003120 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	69da      	ldr	r2, [r3, #28]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6a1b      	ldr	r3, [r3, #32]
 8003146:	431a      	orrs	r2, r3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800314c:	019b      	lsls	r3, r3, #6
 800314e:	431a      	orrs	r2, r3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003154:	085b      	lsrs	r3, r3, #1
 8003156:	3b01      	subs	r3, #1
 8003158:	041b      	lsls	r3, r3, #16
 800315a:	431a      	orrs	r2, r3
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003160:	061b      	lsls	r3, r3, #24
 8003162:	431a      	orrs	r2, r3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003168:	071b      	lsls	r3, r3, #28
 800316a:	491b      	ldr	r1, [pc, #108]	@ (80031d8 <HAL_RCC_OscConfig+0x4ac>)
 800316c:	4313      	orrs	r3, r2
 800316e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003170:	4b1b      	ldr	r3, [pc, #108]	@ (80031e0 <HAL_RCC_OscConfig+0x4b4>)
 8003172:	2201      	movs	r2, #1
 8003174:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003176:	f7fe fbbf 	bl	80018f8 <HAL_GetTick>
 800317a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800317c:	e008      	b.n	8003190 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800317e:	f7fe fbbb 	bl	80018f8 <HAL_GetTick>
 8003182:	4602      	mov	r2, r0
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	2b02      	cmp	r3, #2
 800318a:	d901      	bls.n	8003190 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800318c:	2303      	movs	r3, #3
 800318e:	e064      	b.n	800325a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003190:	4b11      	ldr	r3, [pc, #68]	@ (80031d8 <HAL_RCC_OscConfig+0x4ac>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003198:	2b00      	cmp	r3, #0
 800319a:	d0f0      	beq.n	800317e <HAL_RCC_OscConfig+0x452>
 800319c:	e05c      	b.n	8003258 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800319e:	4b10      	ldr	r3, [pc, #64]	@ (80031e0 <HAL_RCC_OscConfig+0x4b4>)
 80031a0:	2200      	movs	r2, #0
 80031a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031a4:	f7fe fba8 	bl	80018f8 <HAL_GetTick>
 80031a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031aa:	e008      	b.n	80031be <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031ac:	f7fe fba4 	bl	80018f8 <HAL_GetTick>
 80031b0:	4602      	mov	r2, r0
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d901      	bls.n	80031be <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e04d      	b.n	800325a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031be:	4b06      	ldr	r3, [pc, #24]	@ (80031d8 <HAL_RCC_OscConfig+0x4ac>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d1f0      	bne.n	80031ac <HAL_RCC_OscConfig+0x480>
 80031ca:	e045      	b.n	8003258 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	699b      	ldr	r3, [r3, #24]
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d107      	bne.n	80031e4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e040      	b.n	800325a <HAL_RCC_OscConfig+0x52e>
 80031d8:	40023800 	.word	0x40023800
 80031dc:	40007000 	.word	0x40007000
 80031e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80031e4:	4b1f      	ldr	r3, [pc, #124]	@ (8003264 <HAL_RCC_OscConfig+0x538>)
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	699b      	ldr	r3, [r3, #24]
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d030      	beq.n	8003254 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d129      	bne.n	8003254 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800320a:	429a      	cmp	r2, r3
 800320c:	d122      	bne.n	8003254 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800320e:	68fa      	ldr	r2, [r7, #12]
 8003210:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003214:	4013      	ands	r3, r2
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800321a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800321c:	4293      	cmp	r3, r2
 800321e:	d119      	bne.n	8003254 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800322a:	085b      	lsrs	r3, r3, #1
 800322c:	3b01      	subs	r3, #1
 800322e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003230:	429a      	cmp	r2, r3
 8003232:	d10f      	bne.n	8003254 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800323e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003240:	429a      	cmp	r2, r3
 8003242:	d107      	bne.n	8003254 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800324e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003250:	429a      	cmp	r2, r3
 8003252:	d001      	beq.n	8003258 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e000      	b.n	800325a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003258:	2300      	movs	r3, #0
}
 800325a:	4618      	mov	r0, r3
 800325c:	3718      	adds	r7, #24
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	40023800 	.word	0x40023800

08003268 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d101      	bne.n	800327a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e041      	b.n	80032fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003280:	b2db      	uxtb	r3, r3
 8003282:	2b00      	cmp	r3, #0
 8003284:	d106      	bne.n	8003294 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2200      	movs	r2, #0
 800328a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f000 f839 	bl	8003306 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2202      	movs	r2, #2
 8003298:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	3304      	adds	r3, #4
 80032a4:	4619      	mov	r1, r3
 80032a6:	4610      	mov	r0, r2
 80032a8:	f000 f9c0 	bl	800362c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2201      	movs	r2, #1
 80032b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2201      	movs	r2, #1
 80032b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2201      	movs	r2, #1
 80032c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2201      	movs	r2, #1
 80032c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2201      	movs	r2, #1
 80032d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2201      	movs	r2, #1
 80032d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2201      	movs	r2, #1
 80032e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2201      	movs	r2, #1
 80032e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2201      	movs	r2, #1
 80032f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2201      	movs	r2, #1
 80032f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80032fc:	2300      	movs	r3, #0
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3708      	adds	r7, #8
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}

08003306 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003306:	b480      	push	{r7}
 8003308:	b083      	sub	sp, #12
 800330a:	af00      	add	r7, sp, #0
 800330c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800330e:	bf00      	nop
 8003310:	370c      	adds	r7, #12
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr
	...

0800331c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800331c:	b480      	push	{r7}
 800331e:	b085      	sub	sp, #20
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800332a:	b2db      	uxtb	r3, r3
 800332c:	2b01      	cmp	r3, #1
 800332e:	d001      	beq.n	8003334 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e04e      	b.n	80033d2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2202      	movs	r2, #2
 8003338:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	68da      	ldr	r2, [r3, #12]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f042 0201 	orr.w	r2, r2, #1
 800334a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a23      	ldr	r2, [pc, #140]	@ (80033e0 <HAL_TIM_Base_Start_IT+0xc4>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d022      	beq.n	800339c <HAL_TIM_Base_Start_IT+0x80>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800335e:	d01d      	beq.n	800339c <HAL_TIM_Base_Start_IT+0x80>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a1f      	ldr	r2, [pc, #124]	@ (80033e4 <HAL_TIM_Base_Start_IT+0xc8>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d018      	beq.n	800339c <HAL_TIM_Base_Start_IT+0x80>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a1e      	ldr	r2, [pc, #120]	@ (80033e8 <HAL_TIM_Base_Start_IT+0xcc>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d013      	beq.n	800339c <HAL_TIM_Base_Start_IT+0x80>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a1c      	ldr	r2, [pc, #112]	@ (80033ec <HAL_TIM_Base_Start_IT+0xd0>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d00e      	beq.n	800339c <HAL_TIM_Base_Start_IT+0x80>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a1b      	ldr	r2, [pc, #108]	@ (80033f0 <HAL_TIM_Base_Start_IT+0xd4>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d009      	beq.n	800339c <HAL_TIM_Base_Start_IT+0x80>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a19      	ldr	r2, [pc, #100]	@ (80033f4 <HAL_TIM_Base_Start_IT+0xd8>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d004      	beq.n	800339c <HAL_TIM_Base_Start_IT+0x80>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a18      	ldr	r2, [pc, #96]	@ (80033f8 <HAL_TIM_Base_Start_IT+0xdc>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d111      	bne.n	80033c0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	f003 0307 	and.w	r3, r3, #7
 80033a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2b06      	cmp	r3, #6
 80033ac:	d010      	beq.n	80033d0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f042 0201 	orr.w	r2, r2, #1
 80033bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033be:	e007      	b.n	80033d0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f042 0201 	orr.w	r2, r2, #1
 80033ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80033d0:	2300      	movs	r3, #0
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3714      	adds	r7, #20
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr
 80033de:	bf00      	nop
 80033e0:	40010000 	.word	0x40010000
 80033e4:	40000400 	.word	0x40000400
 80033e8:	40000800 	.word	0x40000800
 80033ec:	40000c00 	.word	0x40000c00
 80033f0:	40010400 	.word	0x40010400
 80033f4:	40014000 	.word	0x40014000
 80033f8:	40001800 	.word	0x40001800

080033fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b084      	sub	sp, #16
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	68db      	ldr	r3, [r3, #12]
 800340a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	691b      	ldr	r3, [r3, #16]
 8003412:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	f003 0302 	and.w	r3, r3, #2
 800341a:	2b00      	cmp	r3, #0
 800341c:	d020      	beq.n	8003460 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	f003 0302 	and.w	r3, r3, #2
 8003424:	2b00      	cmp	r3, #0
 8003426:	d01b      	beq.n	8003460 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f06f 0202 	mvn.w	r2, #2
 8003430:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2201      	movs	r2, #1
 8003436:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	699b      	ldr	r3, [r3, #24]
 800343e:	f003 0303 	and.w	r3, r3, #3
 8003442:	2b00      	cmp	r3, #0
 8003444:	d003      	beq.n	800344e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f000 f8d2 	bl	80035f0 <HAL_TIM_IC_CaptureCallback>
 800344c:	e005      	b.n	800345a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f000 f8c4 	bl	80035dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f000 f8d5 	bl	8003604 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	f003 0304 	and.w	r3, r3, #4
 8003466:	2b00      	cmp	r3, #0
 8003468:	d020      	beq.n	80034ac <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	f003 0304 	and.w	r3, r3, #4
 8003470:	2b00      	cmp	r3, #0
 8003472:	d01b      	beq.n	80034ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f06f 0204 	mvn.w	r2, #4
 800347c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2202      	movs	r2, #2
 8003482:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	699b      	ldr	r3, [r3, #24]
 800348a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800348e:	2b00      	cmp	r3, #0
 8003490:	d003      	beq.n	800349a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f000 f8ac 	bl	80035f0 <HAL_TIM_IC_CaptureCallback>
 8003498:	e005      	b.n	80034a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f000 f89e 	bl	80035dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f000 f8af 	bl	8003604 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	f003 0308 	and.w	r3, r3, #8
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d020      	beq.n	80034f8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	f003 0308 	and.w	r3, r3, #8
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d01b      	beq.n	80034f8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f06f 0208 	mvn.w	r2, #8
 80034c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2204      	movs	r2, #4
 80034ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	69db      	ldr	r3, [r3, #28]
 80034d6:	f003 0303 	and.w	r3, r3, #3
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d003      	beq.n	80034e6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f000 f886 	bl	80035f0 <HAL_TIM_IC_CaptureCallback>
 80034e4:	e005      	b.n	80034f2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f000 f878 	bl	80035dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f000 f889 	bl	8003604 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	f003 0310 	and.w	r3, r3, #16
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d020      	beq.n	8003544 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	f003 0310 	and.w	r3, r3, #16
 8003508:	2b00      	cmp	r3, #0
 800350a:	d01b      	beq.n	8003544 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f06f 0210 	mvn.w	r2, #16
 8003514:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2208      	movs	r2, #8
 800351a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	69db      	ldr	r3, [r3, #28]
 8003522:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003526:	2b00      	cmp	r3, #0
 8003528:	d003      	beq.n	8003532 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f000 f860 	bl	80035f0 <HAL_TIM_IC_CaptureCallback>
 8003530:	e005      	b.n	800353e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f000 f852 	bl	80035dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f000 f863 	bl	8003604 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	f003 0301 	and.w	r3, r3, #1
 800354a:	2b00      	cmp	r3, #0
 800354c:	d00c      	beq.n	8003568 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	f003 0301 	and.w	r3, r3, #1
 8003554:	2b00      	cmp	r3, #0
 8003556:	d007      	beq.n	8003568 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f06f 0201 	mvn.w	r2, #1
 8003560:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f7fd fcca 	bl	8000efc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800356e:	2b00      	cmp	r3, #0
 8003570:	d00c      	beq.n	800358c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003578:	2b00      	cmp	r3, #0
 800357a:	d007      	beq.n	800358c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003584:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f000 f900 	bl	800378c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003592:	2b00      	cmp	r3, #0
 8003594:	d00c      	beq.n	80035b0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800359c:	2b00      	cmp	r3, #0
 800359e:	d007      	beq.n	80035b0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80035a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f000 f834 	bl	8003618 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	f003 0320 	and.w	r3, r3, #32
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d00c      	beq.n	80035d4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	f003 0320 	and.w	r3, r3, #32
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d007      	beq.n	80035d4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f06f 0220 	mvn.w	r2, #32
 80035cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f000 f8d2 	bl	8003778 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80035d4:	bf00      	nop
 80035d6:	3710      	adds	r7, #16
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}

080035dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80035dc:	b480      	push	{r7}
 80035de:	b083      	sub	sp, #12
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80035e4:	bf00      	nop
 80035e6:	370c      	adds	r7, #12
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr

080035f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b083      	sub	sp, #12
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80035f8:	bf00      	nop
 80035fa:	370c      	adds	r7, #12
 80035fc:	46bd      	mov	sp, r7
 80035fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003602:	4770      	bx	lr

08003604 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003604:	b480      	push	{r7}
 8003606:	b083      	sub	sp, #12
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800360c:	bf00      	nop
 800360e:	370c      	adds	r7, #12
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr

08003618 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003618:	b480      	push	{r7}
 800361a:	b083      	sub	sp, #12
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003620:	bf00      	nop
 8003622:	370c      	adds	r7, #12
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr

0800362c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800362c:	b480      	push	{r7}
 800362e:	b085      	sub	sp, #20
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	4a43      	ldr	r2, [pc, #268]	@ (800374c <TIM_Base_SetConfig+0x120>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d013      	beq.n	800366c <TIM_Base_SetConfig+0x40>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800364a:	d00f      	beq.n	800366c <TIM_Base_SetConfig+0x40>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	4a40      	ldr	r2, [pc, #256]	@ (8003750 <TIM_Base_SetConfig+0x124>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d00b      	beq.n	800366c <TIM_Base_SetConfig+0x40>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	4a3f      	ldr	r2, [pc, #252]	@ (8003754 <TIM_Base_SetConfig+0x128>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d007      	beq.n	800366c <TIM_Base_SetConfig+0x40>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	4a3e      	ldr	r2, [pc, #248]	@ (8003758 <TIM_Base_SetConfig+0x12c>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d003      	beq.n	800366c <TIM_Base_SetConfig+0x40>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	4a3d      	ldr	r2, [pc, #244]	@ (800375c <TIM_Base_SetConfig+0x130>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d108      	bne.n	800367e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003672:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	68fa      	ldr	r2, [r7, #12]
 800367a:	4313      	orrs	r3, r2
 800367c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4a32      	ldr	r2, [pc, #200]	@ (800374c <TIM_Base_SetConfig+0x120>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d02b      	beq.n	80036de <TIM_Base_SetConfig+0xb2>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800368c:	d027      	beq.n	80036de <TIM_Base_SetConfig+0xb2>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4a2f      	ldr	r2, [pc, #188]	@ (8003750 <TIM_Base_SetConfig+0x124>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d023      	beq.n	80036de <TIM_Base_SetConfig+0xb2>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4a2e      	ldr	r2, [pc, #184]	@ (8003754 <TIM_Base_SetConfig+0x128>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d01f      	beq.n	80036de <TIM_Base_SetConfig+0xb2>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	4a2d      	ldr	r2, [pc, #180]	@ (8003758 <TIM_Base_SetConfig+0x12c>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d01b      	beq.n	80036de <TIM_Base_SetConfig+0xb2>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	4a2c      	ldr	r2, [pc, #176]	@ (800375c <TIM_Base_SetConfig+0x130>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d017      	beq.n	80036de <TIM_Base_SetConfig+0xb2>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	4a2b      	ldr	r2, [pc, #172]	@ (8003760 <TIM_Base_SetConfig+0x134>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d013      	beq.n	80036de <TIM_Base_SetConfig+0xb2>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	4a2a      	ldr	r2, [pc, #168]	@ (8003764 <TIM_Base_SetConfig+0x138>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d00f      	beq.n	80036de <TIM_Base_SetConfig+0xb2>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4a29      	ldr	r2, [pc, #164]	@ (8003768 <TIM_Base_SetConfig+0x13c>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d00b      	beq.n	80036de <TIM_Base_SetConfig+0xb2>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	4a28      	ldr	r2, [pc, #160]	@ (800376c <TIM_Base_SetConfig+0x140>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d007      	beq.n	80036de <TIM_Base_SetConfig+0xb2>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4a27      	ldr	r2, [pc, #156]	@ (8003770 <TIM_Base_SetConfig+0x144>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d003      	beq.n	80036de <TIM_Base_SetConfig+0xb2>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4a26      	ldr	r2, [pc, #152]	@ (8003774 <TIM_Base_SetConfig+0x148>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d108      	bne.n	80036f0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80036e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	68fa      	ldr	r2, [r7, #12]
 80036ec:	4313      	orrs	r3, r2
 80036ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	695b      	ldr	r3, [r3, #20]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	689a      	ldr	r2, [r3, #8]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4a0e      	ldr	r2, [pc, #56]	@ (800374c <TIM_Base_SetConfig+0x120>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d003      	beq.n	800371e <TIM_Base_SetConfig+0xf2>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4a10      	ldr	r2, [pc, #64]	@ (800375c <TIM_Base_SetConfig+0x130>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d103      	bne.n	8003726 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	691a      	ldr	r2, [r3, #16]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f043 0204 	orr.w	r2, r3, #4
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2201      	movs	r2, #1
 8003736:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	68fa      	ldr	r2, [r7, #12]
 800373c:	601a      	str	r2, [r3, #0]
}
 800373e:	bf00      	nop
 8003740:	3714      	adds	r7, #20
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr
 800374a:	bf00      	nop
 800374c:	40010000 	.word	0x40010000
 8003750:	40000400 	.word	0x40000400
 8003754:	40000800 	.word	0x40000800
 8003758:	40000c00 	.word	0x40000c00
 800375c:	40010400 	.word	0x40010400
 8003760:	40014000 	.word	0x40014000
 8003764:	40014400 	.word	0x40014400
 8003768:	40014800 	.word	0x40014800
 800376c:	40001800 	.word	0x40001800
 8003770:	40001c00 	.word	0x40001c00
 8003774:	40002000 	.word	0x40002000

08003778 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003778:	b480      	push	{r7}
 800377a:	b083      	sub	sp, #12
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003780:	bf00      	nop
 8003782:	370c      	adds	r7, #12
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr

0800378c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003794:	bf00      	nop
 8003796:	370c      	adds	r7, #12
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr

080037a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b082      	sub	sp, #8
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d101      	bne.n	80037b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e042      	b.n	8003838 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d106      	bne.n	80037cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f7fd fd42 	bl	8001250 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2224      	movs	r2, #36	@ 0x24
 80037d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	68da      	ldr	r2, [r3, #12]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80037e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f000 fff5 	bl	80047d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	691a      	ldr	r2, [r3, #16]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80037f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	695a      	ldr	r2, [r3, #20]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003808:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	68da      	ldr	r2, [r3, #12]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003818:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2220      	movs	r2, #32
 8003824:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2220      	movs	r2, #32
 800382c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003836:	2300      	movs	r3, #0
}
 8003838:	4618      	mov	r0, r3
 800383a:	3708      	adds	r7, #8
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}

08003840 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b08c      	sub	sp, #48	@ 0x30
 8003844:	af00      	add	r7, sp, #0
 8003846:	60f8      	str	r0, [r7, #12]
 8003848:	60b9      	str	r1, [r7, #8]
 800384a:	4613      	mov	r3, r2
 800384c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003854:	b2db      	uxtb	r3, r3
 8003856:	2b20      	cmp	r3, #32
 8003858:	d162      	bne.n	8003920 <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d002      	beq.n	8003866 <HAL_UART_Transmit_DMA+0x26>
 8003860:	88fb      	ldrh	r3, [r7, #6]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d101      	bne.n	800386a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e05b      	b.n	8003922 <HAL_UART_Transmit_DMA+0xe2>
    }

    huart->pTxBuffPtr = pData;
 800386a:	68ba      	ldr	r2, [r7, #8]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	88fa      	ldrh	r2, [r7, #6]
 8003874:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	88fa      	ldrh	r2, [r7, #6]
 800387a:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2200      	movs	r2, #0
 8003880:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2221      	movs	r2, #33	@ 0x21
 8003886:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800388e:	4a27      	ldr	r2, [pc, #156]	@ (800392c <HAL_UART_Transmit_DMA+0xec>)
 8003890:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003896:	4a26      	ldr	r2, [pc, #152]	@ (8003930 <HAL_UART_Transmit_DMA+0xf0>)
 8003898:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800389e:	4a25      	ldr	r2, [pc, #148]	@ (8003934 <HAL_UART_Transmit_DMA+0xf4>)
 80038a0:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038a6:	2200      	movs	r2, #0
 80038a8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80038aa:	f107 0308 	add.w	r3, r7, #8
 80038ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size) != HAL_OK)
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80038b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038b6:	6819      	ldr	r1, [r3, #0]
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	3304      	adds	r3, #4
 80038be:	461a      	mov	r2, r3
 80038c0:	88fb      	ldrh	r3, [r7, #6]
 80038c2:	f7fe f9b5 	bl	8001c30 <HAL_DMA_Start_IT>
 80038c6:	4603      	mov	r3, r0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d008      	beq.n	80038de <HAL_UART_Transmit_DMA+0x9e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2210      	movs	r2, #16
 80038d0:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2220      	movs	r2, #32
 80038d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e021      	b.n	8003922 <HAL_UART_Transmit_DMA+0xe2>
    }
    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80038e6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	3314      	adds	r3, #20
 80038ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038f0:	69bb      	ldr	r3, [r7, #24]
 80038f2:	e853 3f00 	ldrex	r3, [r3]
 80038f6:	617b      	str	r3, [r7, #20]
   return(result);
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80038fe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	3314      	adds	r3, #20
 8003906:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003908:	627a      	str	r2, [r7, #36]	@ 0x24
 800390a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800390c:	6a39      	ldr	r1, [r7, #32]
 800390e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003910:	e841 2300 	strex	r3, r2, [r1]
 8003914:	61fb      	str	r3, [r7, #28]
   return(result);
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d1e5      	bne.n	80038e8 <HAL_UART_Transmit_DMA+0xa8>

    return HAL_OK;
 800391c:	2300      	movs	r3, #0
 800391e:	e000      	b.n	8003922 <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 8003920:	2302      	movs	r3, #2
  }
}
 8003922:	4618      	mov	r0, r3
 8003924:	3730      	adds	r7, #48	@ 0x30
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	08004051 	.word	0x08004051
 8003930:	080040eb 	.word	0x080040eb
 8003934:	0800426f 	.word	0x0800426f

08003938 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b084      	sub	sp, #16
 800393c:	af00      	add	r7, sp, #0
 800393e:	60f8      	str	r0, [r7, #12]
 8003940:	60b9      	str	r1, [r7, #8]
 8003942:	4613      	mov	r3, r2
 8003944:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800394c:	b2db      	uxtb	r3, r3
 800394e:	2b20      	cmp	r3, #32
 8003950:	d112      	bne.n	8003978 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d002      	beq.n	800395e <HAL_UART_Receive_DMA+0x26>
 8003958:	88fb      	ldrh	r3, [r7, #6]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d101      	bne.n	8003962 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e00b      	b.n	800397a <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2200      	movs	r2, #0
 8003966:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003968:	88fb      	ldrh	r3, [r7, #6]
 800396a:	461a      	mov	r2, r3
 800396c:	68b9      	ldr	r1, [r7, #8]
 800396e:	68f8      	ldr	r0, [r7, #12]
 8003970:	f000 fcc8 	bl	8004304 <UART_Start_Receive_DMA>
 8003974:	4603      	mov	r3, r0
 8003976:	e000      	b.n	800397a <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003978:	2302      	movs	r3, #2
  }
}
 800397a:	4618      	mov	r0, r3
 800397c:	3710      	adds	r7, #16
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}

08003982 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8003982:	b580      	push	{r7, lr}
 8003984:	b090      	sub	sp, #64	@ 0x40
 8003986:	af00      	add	r7, sp, #0
 8003988:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800398a:	2300      	movs	r3, #0
 800398c:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	695b      	ldr	r3, [r3, #20]
 8003994:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003998:	2b80      	cmp	r3, #128	@ 0x80
 800399a:	bf0c      	ite	eq
 800399c:	2301      	moveq	r3, #1
 800399e:	2300      	movne	r3, #0
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	2b21      	cmp	r3, #33	@ 0x21
 80039ae:	d128      	bne.n	8003a02 <HAL_UART_DMAStop+0x80>
 80039b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d025      	beq.n	8003a02 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	3314      	adds	r3, #20
 80039bc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039c0:	e853 3f00 	ldrex	r3, [r3]
 80039c4:	623b      	str	r3, [r7, #32]
   return(result);
 80039c6:	6a3b      	ldr	r3, [r7, #32]
 80039c8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80039cc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	3314      	adds	r3, #20
 80039d4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80039d6:	633a      	str	r2, [r7, #48]	@ 0x30
 80039d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80039dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80039de:	e841 2300 	strex	r3, r2, [r1]
 80039e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80039e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d1e5      	bne.n	80039b6 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d004      	beq.n	80039fc <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039f6:	4618      	mov	r0, r3
 80039f8:	f7fe f972 	bl	8001ce0 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f000 fd27 	bl	8004450 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	695b      	ldr	r3, [r3, #20]
 8003a08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a0c:	2b40      	cmp	r3, #64	@ 0x40
 8003a0e:	bf0c      	ite	eq
 8003a10:	2301      	moveq	r3, #1
 8003a12:	2300      	movne	r3, #0
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	2b22      	cmp	r3, #34	@ 0x22
 8003a22:	d128      	bne.n	8003a76 <HAL_UART_DMAStop+0xf4>
 8003a24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d025      	beq.n	8003a76 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	3314      	adds	r3, #20
 8003a30:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	e853 3f00 	ldrex	r3, [r3]
 8003a38:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a40:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	3314      	adds	r3, #20
 8003a48:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003a4a:	61fa      	str	r2, [r7, #28]
 8003a4c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a4e:	69b9      	ldr	r1, [r7, #24]
 8003a50:	69fa      	ldr	r2, [r7, #28]
 8003a52:	e841 2300 	strex	r3, r2, [r1]
 8003a56:	617b      	str	r3, [r7, #20]
   return(result);
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d1e5      	bne.n	8003a2a <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d004      	beq.n	8003a70 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f7fe f938 	bl	8001ce0 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	f000 fd15 	bl	80044a0 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8003a76:	2300      	movs	r3, #0
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3740      	adds	r7, #64	@ 0x40
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}

08003a80 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b0ba      	sub	sp, #232	@ 0xe8
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	695b      	ldr	r3, [r3, #20]
 8003aa2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003aac:	2300      	movs	r3, #0
 8003aae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003ab2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ab6:	f003 030f 	and.w	r3, r3, #15
 8003aba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003abe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d10f      	bne.n	8003ae6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ac6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003aca:	f003 0320 	and.w	r3, r3, #32
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d009      	beq.n	8003ae6 <HAL_UART_IRQHandler+0x66>
 8003ad2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ad6:	f003 0320 	and.w	r3, r3, #32
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d003      	beq.n	8003ae6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f000 fdba 	bl	8004658 <UART_Receive_IT>
      return;
 8003ae4:	e273      	b.n	8003fce <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003ae6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	f000 80de 	beq.w	8003cac <HAL_UART_IRQHandler+0x22c>
 8003af0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003af4:	f003 0301 	and.w	r3, r3, #1
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d106      	bne.n	8003b0a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003afc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b00:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	f000 80d1 	beq.w	8003cac <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003b0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b0e:	f003 0301 	and.w	r3, r3, #1
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d00b      	beq.n	8003b2e <HAL_UART_IRQHandler+0xae>
 8003b16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d005      	beq.n	8003b2e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b26:	f043 0201 	orr.w	r2, r3, #1
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b32:	f003 0304 	and.w	r3, r3, #4
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d00b      	beq.n	8003b52 <HAL_UART_IRQHandler+0xd2>
 8003b3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b3e:	f003 0301 	and.w	r3, r3, #1
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d005      	beq.n	8003b52 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b4a:	f043 0202 	orr.w	r2, r3, #2
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b56:	f003 0302 	and.w	r3, r3, #2
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d00b      	beq.n	8003b76 <HAL_UART_IRQHandler+0xf6>
 8003b5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b62:	f003 0301 	and.w	r3, r3, #1
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d005      	beq.n	8003b76 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b6e:	f043 0204 	orr.w	r2, r3, #4
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003b76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b7a:	f003 0308 	and.w	r3, r3, #8
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d011      	beq.n	8003ba6 <HAL_UART_IRQHandler+0x126>
 8003b82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b86:	f003 0320 	and.w	r3, r3, #32
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d105      	bne.n	8003b9a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003b8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b92:	f003 0301 	and.w	r3, r3, #1
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d005      	beq.n	8003ba6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b9e:	f043 0208 	orr.w	r2, r3, #8
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	f000 820a 	beq.w	8003fc4 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003bb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bb4:	f003 0320 	and.w	r3, r3, #32
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d008      	beq.n	8003bce <HAL_UART_IRQHandler+0x14e>
 8003bbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003bc0:	f003 0320 	and.w	r3, r3, #32
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d002      	beq.n	8003bce <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f000 fd45 	bl	8004658 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	695b      	ldr	r3, [r3, #20]
 8003bd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bd8:	2b40      	cmp	r3, #64	@ 0x40
 8003bda:	bf0c      	ite	eq
 8003bdc:	2301      	moveq	r3, #1
 8003bde:	2300      	movne	r3, #0
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bea:	f003 0308 	and.w	r3, r3, #8
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d103      	bne.n	8003bfa <HAL_UART_IRQHandler+0x17a>
 8003bf2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d04f      	beq.n	8003c9a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f000 fc50 	bl	80044a0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	695b      	ldr	r3, [r3, #20]
 8003c06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c0a:	2b40      	cmp	r3, #64	@ 0x40
 8003c0c:	d141      	bne.n	8003c92 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	3314      	adds	r3, #20
 8003c14:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c18:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003c1c:	e853 3f00 	ldrex	r3, [r3]
 8003c20:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003c24:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003c28:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c2c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	3314      	adds	r3, #20
 8003c36:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003c3a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003c3e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c42:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003c46:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003c4a:	e841 2300 	strex	r3, r2, [r1]
 8003c4e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003c52:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d1d9      	bne.n	8003c0e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d013      	beq.n	8003c8a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c66:	4a8a      	ldr	r2, [pc, #552]	@ (8003e90 <HAL_UART_IRQHandler+0x410>)
 8003c68:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f7fe f8a6 	bl	8001dc0 <HAL_DMA_Abort_IT>
 8003c74:	4603      	mov	r3, r0
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d016      	beq.n	8003ca8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003c84:	4610      	mov	r0, r2
 8003c86:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c88:	e00e      	b.n	8003ca8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f000 f9ca 	bl	8004024 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c90:	e00a      	b.n	8003ca8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f000 f9c6 	bl	8004024 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c98:	e006      	b.n	8003ca8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f000 f9c2 	bl	8004024 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003ca6:	e18d      	b.n	8003fc4 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ca8:	bf00      	nop
    return;
 8003caa:	e18b      	b.n	8003fc4 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	f040 8167 	bne.w	8003f84 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003cb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cba:	f003 0310 	and.w	r3, r3, #16
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	f000 8160 	beq.w	8003f84 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8003cc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003cc8:	f003 0310 	and.w	r3, r3, #16
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	f000 8159 	beq.w	8003f84 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	60bb      	str	r3, [r7, #8]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	60bb      	str	r3, [r7, #8]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	60bb      	str	r3, [r7, #8]
 8003ce6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	695b      	ldr	r3, [r3, #20]
 8003cee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cf2:	2b40      	cmp	r3, #64	@ 0x40
 8003cf4:	f040 80ce 	bne.w	8003e94 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003d04:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	f000 80a9 	beq.w	8003e60 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003d12:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003d16:	429a      	cmp	r2, r3
 8003d18:	f080 80a2 	bcs.w	8003e60 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003d22:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d28:	69db      	ldr	r3, [r3, #28]
 8003d2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d2e:	f000 8088 	beq.w	8003e42 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	330c      	adds	r3, #12
 8003d38:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d3c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003d40:	e853 3f00 	ldrex	r3, [r3]
 8003d44:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003d48:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003d4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d50:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	330c      	adds	r3, #12
 8003d5a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003d5e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003d62:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d66:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003d6a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003d6e:	e841 2300 	strex	r3, r2, [r1]
 8003d72:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003d76:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d1d9      	bne.n	8003d32 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	3314      	adds	r3, #20
 8003d84:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d86:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003d88:	e853 3f00 	ldrex	r3, [r3]
 8003d8c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003d8e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003d90:	f023 0301 	bic.w	r3, r3, #1
 8003d94:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	3314      	adds	r3, #20
 8003d9e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003da2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003da6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003da8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003daa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003dae:	e841 2300 	strex	r3, r2, [r1]
 8003db2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003db4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d1e1      	bne.n	8003d7e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	3314      	adds	r3, #20
 8003dc0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dc2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003dc4:	e853 3f00 	ldrex	r3, [r3]
 8003dc8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003dca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003dcc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003dd0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	3314      	adds	r3, #20
 8003dda:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003dde:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003de0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003de2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003de4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003de6:	e841 2300 	strex	r3, r2, [r1]
 8003dea:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003dec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d1e3      	bne.n	8003dba <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2220      	movs	r2, #32
 8003df6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	330c      	adds	r3, #12
 8003e06:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e0a:	e853 3f00 	ldrex	r3, [r3]
 8003e0e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003e10:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003e12:	f023 0310 	bic.w	r3, r3, #16
 8003e16:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	330c      	adds	r3, #12
 8003e20:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003e24:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003e26:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e28:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003e2a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003e2c:	e841 2300 	strex	r3, r2, [r1]
 8003e30:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003e32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d1e3      	bne.n	8003e00 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f7fd ff4f 	bl	8001ce0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2202      	movs	r2, #2
 8003e46:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003e50:	b29b      	uxth	r3, r3
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	b29b      	uxth	r3, r3
 8003e56:	4619      	mov	r1, r3
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	f000 f8ed 	bl	8004038 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8003e5e:	e0b3      	b.n	8003fc8 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003e64:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	f040 80ad 	bne.w	8003fc8 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e72:	69db      	ldr	r3, [r3, #28]
 8003e74:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e78:	f040 80a6 	bne.w	8003fc8 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2202      	movs	r2, #2
 8003e80:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003e86:	4619      	mov	r1, r3
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	f000 f8d5 	bl	8004038 <HAL_UARTEx_RxEventCallback>
      return;
 8003e8e:	e09b      	b.n	8003fc8 <HAL_UART_IRQHandler+0x548>
 8003e90:	08004567 	.word	0x08004567
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	1ad3      	subs	r3, r2, r3
 8003ea0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003ea8:	b29b      	uxth	r3, r3
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	f000 808e 	beq.w	8003fcc <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8003eb0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	f000 8089 	beq.w	8003fcc <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	330c      	adds	r3, #12
 8003ec0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ec2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ec4:	e853 3f00 	ldrex	r3, [r3]
 8003ec8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003eca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ecc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003ed0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	330c      	adds	r3, #12
 8003eda:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003ede:	647a      	str	r2, [r7, #68]	@ 0x44
 8003ee0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ee2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003ee4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003ee6:	e841 2300 	strex	r3, r2, [r1]
 8003eea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003eec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d1e3      	bne.n	8003eba <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	3314      	adds	r3, #20
 8003ef8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003efc:	e853 3f00 	ldrex	r3, [r3]
 8003f00:	623b      	str	r3, [r7, #32]
   return(result);
 8003f02:	6a3b      	ldr	r3, [r7, #32]
 8003f04:	f023 0301 	bic.w	r3, r3, #1
 8003f08:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	3314      	adds	r3, #20
 8003f12:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003f16:	633a      	str	r2, [r7, #48]	@ 0x30
 8003f18:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f1a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003f1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f1e:	e841 2300 	strex	r3, r2, [r1]
 8003f22:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003f24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d1e3      	bne.n	8003ef2 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2220      	movs	r2, #32
 8003f2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	330c      	adds	r3, #12
 8003f3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	e853 3f00 	ldrex	r3, [r3]
 8003f46:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f023 0310 	bic.w	r3, r3, #16
 8003f4e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	330c      	adds	r3, #12
 8003f58:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003f5c:	61fa      	str	r2, [r7, #28]
 8003f5e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f60:	69b9      	ldr	r1, [r7, #24]
 8003f62:	69fa      	ldr	r2, [r7, #28]
 8003f64:	e841 2300 	strex	r3, r2, [r1]
 8003f68:	617b      	str	r3, [r7, #20]
   return(result);
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d1e3      	bne.n	8003f38 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2202      	movs	r2, #2
 8003f74:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003f76:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003f7a:	4619      	mov	r1, r3
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	f000 f85b 	bl	8004038 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003f82:	e023      	b.n	8003fcc <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003f84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d009      	beq.n	8003fa4 <HAL_UART_IRQHandler+0x524>
 8003f90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d003      	beq.n	8003fa4 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f000 faf3 	bl	8004588 <UART_Transmit_IT>
    return;
 8003fa2:	e014      	b.n	8003fce <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003fa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fa8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d00e      	beq.n	8003fce <HAL_UART_IRQHandler+0x54e>
 8003fb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d008      	beq.n	8003fce <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8003fbc:	6878      	ldr	r0, [r7, #4]
 8003fbe:	f000 fb33 	bl	8004628 <UART_EndTransmit_IT>
    return;
 8003fc2:	e004      	b.n	8003fce <HAL_UART_IRQHandler+0x54e>
    return;
 8003fc4:	bf00      	nop
 8003fc6:	e002      	b.n	8003fce <HAL_UART_IRQHandler+0x54e>
      return;
 8003fc8:	bf00      	nop
 8003fca:	e000      	b.n	8003fce <HAL_UART_IRQHandler+0x54e>
      return;
 8003fcc:	bf00      	nop
  }
}
 8003fce:	37e8      	adds	r7, #232	@ 0xe8
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}

08003fd4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b083      	sub	sp, #12
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003fdc:	bf00      	nop
 8003fde:	370c      	adds	r7, #12
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr

08003fe8 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b083      	sub	sp, #12
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003ff0:	bf00      	nop
 8003ff2:	370c      	adds	r7, #12
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr

08003ffc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b083      	sub	sp, #12
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004004:	bf00      	nop
 8004006:	370c      	adds	r7, #12
 8004008:	46bd      	mov	sp, r7
 800400a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400e:	4770      	bx	lr

08004010 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004010:	b480      	push	{r7}
 8004012:	b083      	sub	sp, #12
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004018:	bf00      	nop
 800401a:	370c      	adds	r7, #12
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr

08004024 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004024:	b480      	push	{r7}
 8004026:	b083      	sub	sp, #12
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800402c:	bf00      	nop
 800402e:	370c      	adds	r7, #12
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr

08004038 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004038:	b480      	push	{r7}
 800403a:	b083      	sub	sp, #12
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	460b      	mov	r3, r1
 8004042:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004044:	bf00      	nop
 8004046:	370c      	adds	r7, #12
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr

08004050 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b090      	sub	sp, #64	@ 0x40
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800405c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004068:	2b00      	cmp	r3, #0
 800406a:	d137      	bne.n	80040dc <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800406c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800406e:	2200      	movs	r2, #0
 8004070:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004072:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	3314      	adds	r3, #20
 8004078:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800407a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800407c:	e853 3f00 	ldrex	r3, [r3]
 8004080:	623b      	str	r3, [r7, #32]
   return(result);
 8004082:	6a3b      	ldr	r3, [r7, #32]
 8004084:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004088:	63bb      	str	r3, [r7, #56]	@ 0x38
 800408a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	3314      	adds	r3, #20
 8004090:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004092:	633a      	str	r2, [r7, #48]	@ 0x30
 8004094:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004096:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004098:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800409a:	e841 2300 	strex	r3, r2, [r1]
 800409e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80040a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d1e5      	bne.n	8004072 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80040a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	330c      	adds	r3, #12
 80040ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	e853 3f00 	ldrex	r3, [r3]
 80040b4:	60fb      	str	r3, [r7, #12]
   return(result);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80040bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80040be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	330c      	adds	r3, #12
 80040c4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80040c6:	61fa      	str	r2, [r7, #28]
 80040c8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ca:	69b9      	ldr	r1, [r7, #24]
 80040cc:	69fa      	ldr	r2, [r7, #28]
 80040ce:	e841 2300 	strex	r3, r2, [r1]
 80040d2:	617b      	str	r3, [r7, #20]
   return(result);
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d1e5      	bne.n	80040a6 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80040da:	e002      	b.n	80040e2 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80040dc:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80040de:	f7ff ff79 	bl	8003fd4 <HAL_UART_TxCpltCallback>
}
 80040e2:	bf00      	nop
 80040e4:	3740      	adds	r7, #64	@ 0x40
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}

080040ea <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80040ea:	b580      	push	{r7, lr}
 80040ec:	b084      	sub	sp, #16
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040f6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80040f8:	68f8      	ldr	r0, [r7, #12]
 80040fa:	f7ff ff75 	bl	8003fe8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040fe:	bf00      	nop
 8004100:	3710      	adds	r7, #16
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}

08004106 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004106:	b580      	push	{r7, lr}
 8004108:	b09c      	sub	sp, #112	@ 0x70
 800410a:	af00      	add	r7, sp, #0
 800410c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004112:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800411e:	2b00      	cmp	r3, #0
 8004120:	d172      	bne.n	8004208 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004122:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004124:	2200      	movs	r2, #0
 8004126:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004128:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	330c      	adds	r3, #12
 800412e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004130:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004132:	e853 3f00 	ldrex	r3, [r3]
 8004136:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004138:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800413a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800413e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004140:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	330c      	adds	r3, #12
 8004146:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004148:	65ba      	str	r2, [r7, #88]	@ 0x58
 800414a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800414c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800414e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004150:	e841 2300 	strex	r3, r2, [r1]
 8004154:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004156:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004158:	2b00      	cmp	r3, #0
 800415a:	d1e5      	bne.n	8004128 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800415c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	3314      	adds	r3, #20
 8004162:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004164:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004166:	e853 3f00 	ldrex	r3, [r3]
 800416a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800416c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800416e:	f023 0301 	bic.w	r3, r3, #1
 8004172:	667b      	str	r3, [r7, #100]	@ 0x64
 8004174:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	3314      	adds	r3, #20
 800417a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800417c:	647a      	str	r2, [r7, #68]	@ 0x44
 800417e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004180:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004182:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004184:	e841 2300 	strex	r3, r2, [r1]
 8004188:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800418a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800418c:	2b00      	cmp	r3, #0
 800418e:	d1e5      	bne.n	800415c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004190:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	3314      	adds	r3, #20
 8004196:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800419a:	e853 3f00 	ldrex	r3, [r3]
 800419e:	623b      	str	r3, [r7, #32]
   return(result);
 80041a0:	6a3b      	ldr	r3, [r7, #32]
 80041a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80041a6:	663b      	str	r3, [r7, #96]	@ 0x60
 80041a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	3314      	adds	r3, #20
 80041ae:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80041b0:	633a      	str	r2, [r7, #48]	@ 0x30
 80041b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041b4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80041b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80041b8:	e841 2300 	strex	r3, r2, [r1]
 80041bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80041be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d1e5      	bne.n	8004190 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80041c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80041c6:	2220      	movs	r2, #32
 80041c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80041ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d119      	bne.n	8004208 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	330c      	adds	r3, #12
 80041da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	e853 3f00 	ldrex	r3, [r3]
 80041e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f023 0310 	bic.w	r3, r3, #16
 80041ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80041ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	330c      	adds	r3, #12
 80041f2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80041f4:	61fa      	str	r2, [r7, #28]
 80041f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f8:	69b9      	ldr	r1, [r7, #24]
 80041fa:	69fa      	ldr	r2, [r7, #28]
 80041fc:	e841 2300 	strex	r3, r2, [r1]
 8004200:	617b      	str	r3, [r7, #20]
   return(result);
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d1e5      	bne.n	80041d4 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004208:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800420a:	2200      	movs	r2, #0
 800420c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800420e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004212:	2b01      	cmp	r3, #1
 8004214:	d106      	bne.n	8004224 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004216:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004218:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800421a:	4619      	mov	r1, r3
 800421c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800421e:	f7ff ff0b 	bl	8004038 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004222:	e002      	b.n	800422a <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8004224:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004226:	f7ff fee9 	bl	8003ffc <HAL_UART_RxCpltCallback>
}
 800422a:	bf00      	nop
 800422c:	3770      	adds	r7, #112	@ 0x70
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}

08004232 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004232:	b580      	push	{r7, lr}
 8004234:	b084      	sub	sp, #16
 8004236:	af00      	add	r7, sp, #0
 8004238:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800423e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2201      	movs	r2, #1
 8004244:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800424a:	2b01      	cmp	r3, #1
 800424c:	d108      	bne.n	8004260 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004252:	085b      	lsrs	r3, r3, #1
 8004254:	b29b      	uxth	r3, r3
 8004256:	4619      	mov	r1, r3
 8004258:	68f8      	ldr	r0, [r7, #12]
 800425a:	f7ff feed 	bl	8004038 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800425e:	e002      	b.n	8004266 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8004260:	68f8      	ldr	r0, [r7, #12]
 8004262:	f7ff fed5 	bl	8004010 <HAL_UART_RxHalfCpltCallback>
}
 8004266:	bf00      	nop
 8004268:	3710      	adds	r7, #16
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}

0800426e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800426e:	b580      	push	{r7, lr}
 8004270:	b084      	sub	sp, #16
 8004272:	af00      	add	r7, sp, #0
 8004274:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004276:	2300      	movs	r3, #0
 8004278:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800427e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	695b      	ldr	r3, [r3, #20]
 8004286:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800428a:	2b80      	cmp	r3, #128	@ 0x80
 800428c:	bf0c      	ite	eq
 800428e:	2301      	moveq	r3, #1
 8004290:	2300      	movne	r3, #0
 8004292:	b2db      	uxtb	r3, r3
 8004294:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800429c:	b2db      	uxtb	r3, r3
 800429e:	2b21      	cmp	r3, #33	@ 0x21
 80042a0:	d108      	bne.n	80042b4 <UART_DMAError+0x46>
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d005      	beq.n	80042b4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	2200      	movs	r2, #0
 80042ac:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80042ae:	68b8      	ldr	r0, [r7, #8]
 80042b0:	f000 f8ce 	bl	8004450 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	695b      	ldr	r3, [r3, #20]
 80042ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042be:	2b40      	cmp	r3, #64	@ 0x40
 80042c0:	bf0c      	ite	eq
 80042c2:	2301      	moveq	r3, #1
 80042c4:	2300      	movne	r3, #0
 80042c6:	b2db      	uxtb	r3, r3
 80042c8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	2b22      	cmp	r3, #34	@ 0x22
 80042d4:	d108      	bne.n	80042e8 <UART_DMAError+0x7a>
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d005      	beq.n	80042e8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	2200      	movs	r2, #0
 80042e0:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80042e2:	68b8      	ldr	r0, [r7, #8]
 80042e4:	f000 f8dc 	bl	80044a0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042ec:	f043 0210 	orr.w	r2, r3, #16
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80042f4:	68b8      	ldr	r0, [r7, #8]
 80042f6:	f7ff fe95 	bl	8004024 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042fa:	bf00      	nop
 80042fc:	3710      	adds	r7, #16
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}
	...

08004304 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b098      	sub	sp, #96	@ 0x60
 8004308:	af00      	add	r7, sp, #0
 800430a:	60f8      	str	r0, [r7, #12]
 800430c:	60b9      	str	r1, [r7, #8]
 800430e:	4613      	mov	r3, r2
 8004310:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004312:	68ba      	ldr	r2, [r7, #8]
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	88fa      	ldrh	r2, [r7, #6]
 800431c:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2200      	movs	r2, #0
 8004322:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2222      	movs	r2, #34	@ 0x22
 8004328:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004330:	4a44      	ldr	r2, [pc, #272]	@ (8004444 <UART_Start_Receive_DMA+0x140>)
 8004332:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004338:	4a43      	ldr	r2, [pc, #268]	@ (8004448 <UART_Start_Receive_DMA+0x144>)
 800433a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004340:	4a42      	ldr	r2, [pc, #264]	@ (800444c <UART_Start_Receive_DMA+0x148>)
 8004342:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004348:	2200      	movs	r2, #0
 800434a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800434c:	f107 0308 	add.w	r3, r7, #8
 8004350:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	3304      	adds	r3, #4
 800435c:	4619      	mov	r1, r3
 800435e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	88fb      	ldrh	r3, [r7, #6]
 8004364:	f7fd fc64 	bl	8001c30 <HAL_DMA_Start_IT>
 8004368:	4603      	mov	r3, r0
 800436a:	2b00      	cmp	r3, #0
 800436c:	d008      	beq.n	8004380 <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2210      	movs	r2, #16
 8004372:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2220      	movs	r2, #32
 8004378:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	e05d      	b.n	800443c <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004380:	2300      	movs	r3, #0
 8004382:	613b      	str	r3, [r7, #16]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	613b      	str	r3, [r7, #16]
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	613b      	str	r3, [r7, #16]
 8004394:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	691b      	ldr	r3, [r3, #16]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d019      	beq.n	80043d2 <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	330c      	adds	r3, #12
 80043a4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80043a8:	e853 3f00 	ldrex	r3, [r3]
 80043ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80043ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043b4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	330c      	adds	r3, #12
 80043bc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80043be:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80043c0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043c2:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80043c4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80043c6:	e841 2300 	strex	r3, r2, [r1]
 80043ca:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80043cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d1e5      	bne.n	800439e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	3314      	adds	r3, #20
 80043d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043dc:	e853 3f00 	ldrex	r3, [r3]
 80043e0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80043e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043e4:	f043 0301 	orr.w	r3, r3, #1
 80043e8:	657b      	str	r3, [r7, #84]	@ 0x54
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	3314      	adds	r3, #20
 80043f0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80043f2:	63ba      	str	r2, [r7, #56]	@ 0x38
 80043f4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043f6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80043f8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80043fa:	e841 2300 	strex	r3, r2, [r1]
 80043fe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004402:	2b00      	cmp	r3, #0
 8004404:	d1e5      	bne.n	80043d2 <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	3314      	adds	r3, #20
 800440c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800440e:	69bb      	ldr	r3, [r7, #24]
 8004410:	e853 3f00 	ldrex	r3, [r3]
 8004414:	617b      	str	r3, [r7, #20]
   return(result);
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800441c:	653b      	str	r3, [r7, #80]	@ 0x50
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	3314      	adds	r3, #20
 8004424:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004426:	627a      	str	r2, [r7, #36]	@ 0x24
 8004428:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800442a:	6a39      	ldr	r1, [r7, #32]
 800442c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800442e:	e841 2300 	strex	r3, r2, [r1]
 8004432:	61fb      	str	r3, [r7, #28]
   return(result);
 8004434:	69fb      	ldr	r3, [r7, #28]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d1e5      	bne.n	8004406 <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 800443a:	2300      	movs	r3, #0
}
 800443c:	4618      	mov	r0, r3
 800443e:	3760      	adds	r7, #96	@ 0x60
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}
 8004444:	08004107 	.word	0x08004107
 8004448:	08004233 	.word	0x08004233
 800444c:	0800426f 	.word	0x0800426f

08004450 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004450:	b480      	push	{r7}
 8004452:	b089      	sub	sp, #36	@ 0x24
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	330c      	adds	r3, #12
 800445e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	e853 3f00 	ldrex	r3, [r3]
 8004466:	60bb      	str	r3, [r7, #8]
   return(result);
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800446e:	61fb      	str	r3, [r7, #28]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	330c      	adds	r3, #12
 8004476:	69fa      	ldr	r2, [r7, #28]
 8004478:	61ba      	str	r2, [r7, #24]
 800447a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800447c:	6979      	ldr	r1, [r7, #20]
 800447e:	69ba      	ldr	r2, [r7, #24]
 8004480:	e841 2300 	strex	r3, r2, [r1]
 8004484:	613b      	str	r3, [r7, #16]
   return(result);
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d1e5      	bne.n	8004458 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2220      	movs	r2, #32
 8004490:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8004494:	bf00      	nop
 8004496:	3724      	adds	r7, #36	@ 0x24
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr

080044a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b095      	sub	sp, #84	@ 0x54
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	330c      	adds	r3, #12
 80044ae:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044b2:	e853 3f00 	ldrex	r3, [r3]
 80044b6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80044b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044ba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80044be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	330c      	adds	r3, #12
 80044c6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80044c8:	643a      	str	r2, [r7, #64]	@ 0x40
 80044ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044cc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80044ce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80044d0:	e841 2300 	strex	r3, r2, [r1]
 80044d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80044d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d1e5      	bne.n	80044a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	3314      	adds	r3, #20
 80044e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044e4:	6a3b      	ldr	r3, [r7, #32]
 80044e6:	e853 3f00 	ldrex	r3, [r3]
 80044ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80044ec:	69fb      	ldr	r3, [r7, #28]
 80044ee:	f023 0301 	bic.w	r3, r3, #1
 80044f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	3314      	adds	r3, #20
 80044fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80044fc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80044fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004500:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004502:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004504:	e841 2300 	strex	r3, r2, [r1]
 8004508:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800450a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800450c:	2b00      	cmp	r3, #0
 800450e:	d1e5      	bne.n	80044dc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004514:	2b01      	cmp	r3, #1
 8004516:	d119      	bne.n	800454c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	330c      	adds	r3, #12
 800451e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	e853 3f00 	ldrex	r3, [r3]
 8004526:	60bb      	str	r3, [r7, #8]
   return(result);
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	f023 0310 	bic.w	r3, r3, #16
 800452e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	330c      	adds	r3, #12
 8004536:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004538:	61ba      	str	r2, [r7, #24]
 800453a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800453c:	6979      	ldr	r1, [r7, #20]
 800453e:	69ba      	ldr	r2, [r7, #24]
 8004540:	e841 2300 	strex	r3, r2, [r1]
 8004544:	613b      	str	r3, [r7, #16]
   return(result);
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d1e5      	bne.n	8004518 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2220      	movs	r2, #32
 8004550:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2200      	movs	r2, #0
 8004558:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800455a:	bf00      	nop
 800455c:	3754      	adds	r7, #84	@ 0x54
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr

08004566 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004566:	b580      	push	{r7, lr}
 8004568:	b084      	sub	sp, #16
 800456a:	af00      	add	r7, sp, #0
 800456c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004572:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2200      	movs	r2, #0
 8004578:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800457a:	68f8      	ldr	r0, [r7, #12]
 800457c:	f7ff fd52 	bl	8004024 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004580:	bf00      	nop
 8004582:	3710      	adds	r7, #16
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}

08004588 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004588:	b480      	push	{r7}
 800458a:	b085      	sub	sp, #20
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004596:	b2db      	uxtb	r3, r3
 8004598:	2b21      	cmp	r3, #33	@ 0x21
 800459a:	d13e      	bne.n	800461a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045a4:	d114      	bne.n	80045d0 <UART_Transmit_IT+0x48>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	691b      	ldr	r3, [r3, #16]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d110      	bne.n	80045d0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a1b      	ldr	r3, [r3, #32]
 80045b2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	881b      	ldrh	r3, [r3, #0]
 80045b8:	461a      	mov	r2, r3
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045c2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6a1b      	ldr	r3, [r3, #32]
 80045c8:	1c9a      	adds	r2, r3, #2
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	621a      	str	r2, [r3, #32]
 80045ce:	e008      	b.n	80045e2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6a1b      	ldr	r3, [r3, #32]
 80045d4:	1c59      	adds	r1, r3, #1
 80045d6:	687a      	ldr	r2, [r7, #4]
 80045d8:	6211      	str	r1, [r2, #32]
 80045da:	781a      	ldrb	r2, [r3, #0]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80045e6:	b29b      	uxth	r3, r3
 80045e8:	3b01      	subs	r3, #1
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	687a      	ldr	r2, [r7, #4]
 80045ee:	4619      	mov	r1, r3
 80045f0:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d10f      	bne.n	8004616 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	68da      	ldr	r2, [r3, #12]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004604:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	68da      	ldr	r2, [r3, #12]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004614:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004616:	2300      	movs	r3, #0
 8004618:	e000      	b.n	800461c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800461a:	2302      	movs	r3, #2
  }
}
 800461c:	4618      	mov	r0, r3
 800461e:	3714      	adds	r7, #20
 8004620:	46bd      	mov	sp, r7
 8004622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004626:	4770      	bx	lr

08004628 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b082      	sub	sp, #8
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	68da      	ldr	r2, [r3, #12]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800463e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2220      	movs	r2, #32
 8004644:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	f7ff fcc3 	bl	8003fd4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800464e:	2300      	movs	r3, #0
}
 8004650:	4618      	mov	r0, r3
 8004652:	3708      	adds	r7, #8
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}

08004658 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b08c      	sub	sp, #48	@ 0x30
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8004660:	2300      	movs	r3, #0
 8004662:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8004664:	2300      	movs	r3, #0
 8004666:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800466e:	b2db      	uxtb	r3, r3
 8004670:	2b22      	cmp	r3, #34	@ 0x22
 8004672:	f040 80aa 	bne.w	80047ca <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800467e:	d115      	bne.n	80046ac <UART_Receive_IT+0x54>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	691b      	ldr	r3, [r3, #16]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d111      	bne.n	80046ac <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800468c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	b29b      	uxth	r3, r3
 8004696:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800469a:	b29a      	uxth	r2, r3
 800469c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800469e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046a4:	1c9a      	adds	r2, r3, #2
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	629a      	str	r2, [r3, #40]	@ 0x28
 80046aa:	e024      	b.n	80046f6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046ba:	d007      	beq.n	80046cc <UART_Receive_IT+0x74>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d10a      	bne.n	80046da <UART_Receive_IT+0x82>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	691b      	ldr	r3, [r3, #16]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d106      	bne.n	80046da <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	b2da      	uxtb	r2, r3
 80046d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046d6:	701a      	strb	r2, [r3, #0]
 80046d8:	e008      	b.n	80046ec <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	b2db      	uxtb	r3, r3
 80046e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80046e6:	b2da      	uxtb	r2, r3
 80046e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046ea:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046f0:	1c5a      	adds	r2, r3, #1
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80046fa:	b29b      	uxth	r3, r3
 80046fc:	3b01      	subs	r3, #1
 80046fe:	b29b      	uxth	r3, r3
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	4619      	mov	r1, r3
 8004704:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004706:	2b00      	cmp	r3, #0
 8004708:	d15d      	bne.n	80047c6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	68da      	ldr	r2, [r3, #12]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f022 0220 	bic.w	r2, r2, #32
 8004718:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	68da      	ldr	r2, [r3, #12]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004728:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	695a      	ldr	r2, [r3, #20]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f022 0201 	bic.w	r2, r2, #1
 8004738:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2220      	movs	r2, #32
 800473e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2200      	movs	r2, #0
 8004746:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800474c:	2b01      	cmp	r3, #1
 800474e:	d135      	bne.n	80047bc <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	330c      	adds	r3, #12
 800475c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	e853 3f00 	ldrex	r3, [r3]
 8004764:	613b      	str	r3, [r7, #16]
   return(result);
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	f023 0310 	bic.w	r3, r3, #16
 800476c:	627b      	str	r3, [r7, #36]	@ 0x24
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	330c      	adds	r3, #12
 8004774:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004776:	623a      	str	r2, [r7, #32]
 8004778:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800477a:	69f9      	ldr	r1, [r7, #28]
 800477c:	6a3a      	ldr	r2, [r7, #32]
 800477e:	e841 2300 	strex	r3, r2, [r1]
 8004782:	61bb      	str	r3, [r7, #24]
   return(result);
 8004784:	69bb      	ldr	r3, [r7, #24]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d1e5      	bne.n	8004756 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f003 0310 	and.w	r3, r3, #16
 8004794:	2b10      	cmp	r3, #16
 8004796:	d10a      	bne.n	80047ae <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004798:	2300      	movs	r3, #0
 800479a:	60fb      	str	r3, [r7, #12]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	60fb      	str	r3, [r7, #12]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	60fb      	str	r3, [r7, #12]
 80047ac:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80047b2:	4619      	mov	r1, r3
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	f7ff fc3f 	bl	8004038 <HAL_UARTEx_RxEventCallback>
 80047ba:	e002      	b.n	80047c2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80047bc:	6878      	ldr	r0, [r7, #4]
 80047be:	f7ff fc1d 	bl	8003ffc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80047c2:	2300      	movs	r3, #0
 80047c4:	e002      	b.n	80047cc <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80047c6:	2300      	movs	r3, #0
 80047c8:	e000      	b.n	80047cc <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80047ca:	2302      	movs	r3, #2
  }
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	3730      	adds	r7, #48	@ 0x30
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}

080047d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047d8:	b0c0      	sub	sp, #256	@ 0x100
 80047da:	af00      	add	r7, sp, #0
 80047dc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	691b      	ldr	r3, [r3, #16]
 80047e8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80047ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047f0:	68d9      	ldr	r1, [r3, #12]
 80047f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	ea40 0301 	orr.w	r3, r0, r1
 80047fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80047fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004802:	689a      	ldr	r2, [r3, #8]
 8004804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004808:	691b      	ldr	r3, [r3, #16]
 800480a:	431a      	orrs	r2, r3
 800480c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004810:	695b      	ldr	r3, [r3, #20]
 8004812:	431a      	orrs	r2, r3
 8004814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004818:	69db      	ldr	r3, [r3, #28]
 800481a:	4313      	orrs	r3, r2
 800481c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	68db      	ldr	r3, [r3, #12]
 8004828:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800482c:	f021 010c 	bic.w	r1, r1, #12
 8004830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800483a:	430b      	orrs	r3, r1
 800483c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800483e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	695b      	ldr	r3, [r3, #20]
 8004846:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800484a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800484e:	6999      	ldr	r1, [r3, #24]
 8004850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	ea40 0301 	orr.w	r3, r0, r1
 800485a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800485c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	4b8f      	ldr	r3, [pc, #572]	@ (8004aa0 <UART_SetConfig+0x2cc>)
 8004864:	429a      	cmp	r2, r3
 8004866:	d005      	beq.n	8004874 <UART_SetConfig+0xa0>
 8004868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	4b8d      	ldr	r3, [pc, #564]	@ (8004aa4 <UART_SetConfig+0x2d0>)
 8004870:	429a      	cmp	r2, r3
 8004872:	d104      	bne.n	800487e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004874:	f7fd ffe4 	bl	8002840 <HAL_RCC_GetPCLK2Freq>
 8004878:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800487c:	e003      	b.n	8004886 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800487e:	f7fd ffcb 	bl	8002818 <HAL_RCC_GetPCLK1Freq>
 8004882:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004886:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800488a:	69db      	ldr	r3, [r3, #28]
 800488c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004890:	f040 810c 	bne.w	8004aac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004894:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004898:	2200      	movs	r2, #0
 800489a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800489e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80048a2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80048a6:	4622      	mov	r2, r4
 80048a8:	462b      	mov	r3, r5
 80048aa:	1891      	adds	r1, r2, r2
 80048ac:	65b9      	str	r1, [r7, #88]	@ 0x58
 80048ae:	415b      	adcs	r3, r3
 80048b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80048b2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80048b6:	4621      	mov	r1, r4
 80048b8:	eb12 0801 	adds.w	r8, r2, r1
 80048bc:	4629      	mov	r1, r5
 80048be:	eb43 0901 	adc.w	r9, r3, r1
 80048c2:	f04f 0200 	mov.w	r2, #0
 80048c6:	f04f 0300 	mov.w	r3, #0
 80048ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80048ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80048d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80048d6:	4690      	mov	r8, r2
 80048d8:	4699      	mov	r9, r3
 80048da:	4623      	mov	r3, r4
 80048dc:	eb18 0303 	adds.w	r3, r8, r3
 80048e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80048e4:	462b      	mov	r3, r5
 80048e6:	eb49 0303 	adc.w	r3, r9, r3
 80048ea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80048ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	2200      	movs	r2, #0
 80048f6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80048fa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80048fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004902:	460b      	mov	r3, r1
 8004904:	18db      	adds	r3, r3, r3
 8004906:	653b      	str	r3, [r7, #80]	@ 0x50
 8004908:	4613      	mov	r3, r2
 800490a:	eb42 0303 	adc.w	r3, r2, r3
 800490e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004910:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004914:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004918:	f7fb fd32 	bl	8000380 <__aeabi_uldivmod>
 800491c:	4602      	mov	r2, r0
 800491e:	460b      	mov	r3, r1
 8004920:	4b61      	ldr	r3, [pc, #388]	@ (8004aa8 <UART_SetConfig+0x2d4>)
 8004922:	fba3 2302 	umull	r2, r3, r3, r2
 8004926:	095b      	lsrs	r3, r3, #5
 8004928:	011c      	lsls	r4, r3, #4
 800492a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800492e:	2200      	movs	r2, #0
 8004930:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004934:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004938:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800493c:	4642      	mov	r2, r8
 800493e:	464b      	mov	r3, r9
 8004940:	1891      	adds	r1, r2, r2
 8004942:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004944:	415b      	adcs	r3, r3
 8004946:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004948:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800494c:	4641      	mov	r1, r8
 800494e:	eb12 0a01 	adds.w	sl, r2, r1
 8004952:	4649      	mov	r1, r9
 8004954:	eb43 0b01 	adc.w	fp, r3, r1
 8004958:	f04f 0200 	mov.w	r2, #0
 800495c:	f04f 0300 	mov.w	r3, #0
 8004960:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004964:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004968:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800496c:	4692      	mov	sl, r2
 800496e:	469b      	mov	fp, r3
 8004970:	4643      	mov	r3, r8
 8004972:	eb1a 0303 	adds.w	r3, sl, r3
 8004976:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800497a:	464b      	mov	r3, r9
 800497c:	eb4b 0303 	adc.w	r3, fp, r3
 8004980:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	2200      	movs	r2, #0
 800498c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004990:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004994:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004998:	460b      	mov	r3, r1
 800499a:	18db      	adds	r3, r3, r3
 800499c:	643b      	str	r3, [r7, #64]	@ 0x40
 800499e:	4613      	mov	r3, r2
 80049a0:	eb42 0303 	adc.w	r3, r2, r3
 80049a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80049a6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80049aa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80049ae:	f7fb fce7 	bl	8000380 <__aeabi_uldivmod>
 80049b2:	4602      	mov	r2, r0
 80049b4:	460b      	mov	r3, r1
 80049b6:	4611      	mov	r1, r2
 80049b8:	4b3b      	ldr	r3, [pc, #236]	@ (8004aa8 <UART_SetConfig+0x2d4>)
 80049ba:	fba3 2301 	umull	r2, r3, r3, r1
 80049be:	095b      	lsrs	r3, r3, #5
 80049c0:	2264      	movs	r2, #100	@ 0x64
 80049c2:	fb02 f303 	mul.w	r3, r2, r3
 80049c6:	1acb      	subs	r3, r1, r3
 80049c8:	00db      	lsls	r3, r3, #3
 80049ca:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80049ce:	4b36      	ldr	r3, [pc, #216]	@ (8004aa8 <UART_SetConfig+0x2d4>)
 80049d0:	fba3 2302 	umull	r2, r3, r3, r2
 80049d4:	095b      	lsrs	r3, r3, #5
 80049d6:	005b      	lsls	r3, r3, #1
 80049d8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80049dc:	441c      	add	r4, r3
 80049de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80049e2:	2200      	movs	r2, #0
 80049e4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80049e8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80049ec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80049f0:	4642      	mov	r2, r8
 80049f2:	464b      	mov	r3, r9
 80049f4:	1891      	adds	r1, r2, r2
 80049f6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80049f8:	415b      	adcs	r3, r3
 80049fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80049fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004a00:	4641      	mov	r1, r8
 8004a02:	1851      	adds	r1, r2, r1
 8004a04:	6339      	str	r1, [r7, #48]	@ 0x30
 8004a06:	4649      	mov	r1, r9
 8004a08:	414b      	adcs	r3, r1
 8004a0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a0c:	f04f 0200 	mov.w	r2, #0
 8004a10:	f04f 0300 	mov.w	r3, #0
 8004a14:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004a18:	4659      	mov	r1, fp
 8004a1a:	00cb      	lsls	r3, r1, #3
 8004a1c:	4651      	mov	r1, sl
 8004a1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a22:	4651      	mov	r1, sl
 8004a24:	00ca      	lsls	r2, r1, #3
 8004a26:	4610      	mov	r0, r2
 8004a28:	4619      	mov	r1, r3
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	4642      	mov	r2, r8
 8004a2e:	189b      	adds	r3, r3, r2
 8004a30:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004a34:	464b      	mov	r3, r9
 8004a36:	460a      	mov	r2, r1
 8004a38:	eb42 0303 	adc.w	r3, r2, r3
 8004a3c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004a40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	2200      	movs	r2, #0
 8004a48:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004a4c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004a50:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004a54:	460b      	mov	r3, r1
 8004a56:	18db      	adds	r3, r3, r3
 8004a58:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004a5a:	4613      	mov	r3, r2
 8004a5c:	eb42 0303 	adc.w	r3, r2, r3
 8004a60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a62:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004a66:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004a6a:	f7fb fc89 	bl	8000380 <__aeabi_uldivmod>
 8004a6e:	4602      	mov	r2, r0
 8004a70:	460b      	mov	r3, r1
 8004a72:	4b0d      	ldr	r3, [pc, #52]	@ (8004aa8 <UART_SetConfig+0x2d4>)
 8004a74:	fba3 1302 	umull	r1, r3, r3, r2
 8004a78:	095b      	lsrs	r3, r3, #5
 8004a7a:	2164      	movs	r1, #100	@ 0x64
 8004a7c:	fb01 f303 	mul.w	r3, r1, r3
 8004a80:	1ad3      	subs	r3, r2, r3
 8004a82:	00db      	lsls	r3, r3, #3
 8004a84:	3332      	adds	r3, #50	@ 0x32
 8004a86:	4a08      	ldr	r2, [pc, #32]	@ (8004aa8 <UART_SetConfig+0x2d4>)
 8004a88:	fba2 2303 	umull	r2, r3, r2, r3
 8004a8c:	095b      	lsrs	r3, r3, #5
 8004a8e:	f003 0207 	and.w	r2, r3, #7
 8004a92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4422      	add	r2, r4
 8004a9a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004a9c:	e106      	b.n	8004cac <UART_SetConfig+0x4d8>
 8004a9e:	bf00      	nop
 8004aa0:	40011000 	.word	0x40011000
 8004aa4:	40011400 	.word	0x40011400
 8004aa8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004aac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004ab6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004aba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004abe:	4642      	mov	r2, r8
 8004ac0:	464b      	mov	r3, r9
 8004ac2:	1891      	adds	r1, r2, r2
 8004ac4:	6239      	str	r1, [r7, #32]
 8004ac6:	415b      	adcs	r3, r3
 8004ac8:	627b      	str	r3, [r7, #36]	@ 0x24
 8004aca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004ace:	4641      	mov	r1, r8
 8004ad0:	1854      	adds	r4, r2, r1
 8004ad2:	4649      	mov	r1, r9
 8004ad4:	eb43 0501 	adc.w	r5, r3, r1
 8004ad8:	f04f 0200 	mov.w	r2, #0
 8004adc:	f04f 0300 	mov.w	r3, #0
 8004ae0:	00eb      	lsls	r3, r5, #3
 8004ae2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ae6:	00e2      	lsls	r2, r4, #3
 8004ae8:	4614      	mov	r4, r2
 8004aea:	461d      	mov	r5, r3
 8004aec:	4643      	mov	r3, r8
 8004aee:	18e3      	adds	r3, r4, r3
 8004af0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004af4:	464b      	mov	r3, r9
 8004af6:	eb45 0303 	adc.w	r3, r5, r3
 8004afa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004afe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	2200      	movs	r2, #0
 8004b06:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004b0a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004b0e:	f04f 0200 	mov.w	r2, #0
 8004b12:	f04f 0300 	mov.w	r3, #0
 8004b16:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004b1a:	4629      	mov	r1, r5
 8004b1c:	008b      	lsls	r3, r1, #2
 8004b1e:	4621      	mov	r1, r4
 8004b20:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b24:	4621      	mov	r1, r4
 8004b26:	008a      	lsls	r2, r1, #2
 8004b28:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004b2c:	f7fb fc28 	bl	8000380 <__aeabi_uldivmod>
 8004b30:	4602      	mov	r2, r0
 8004b32:	460b      	mov	r3, r1
 8004b34:	4b60      	ldr	r3, [pc, #384]	@ (8004cb8 <UART_SetConfig+0x4e4>)
 8004b36:	fba3 2302 	umull	r2, r3, r3, r2
 8004b3a:	095b      	lsrs	r3, r3, #5
 8004b3c:	011c      	lsls	r4, r3, #4
 8004b3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b42:	2200      	movs	r2, #0
 8004b44:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004b48:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004b4c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004b50:	4642      	mov	r2, r8
 8004b52:	464b      	mov	r3, r9
 8004b54:	1891      	adds	r1, r2, r2
 8004b56:	61b9      	str	r1, [r7, #24]
 8004b58:	415b      	adcs	r3, r3
 8004b5a:	61fb      	str	r3, [r7, #28]
 8004b5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b60:	4641      	mov	r1, r8
 8004b62:	1851      	adds	r1, r2, r1
 8004b64:	6139      	str	r1, [r7, #16]
 8004b66:	4649      	mov	r1, r9
 8004b68:	414b      	adcs	r3, r1
 8004b6a:	617b      	str	r3, [r7, #20]
 8004b6c:	f04f 0200 	mov.w	r2, #0
 8004b70:	f04f 0300 	mov.w	r3, #0
 8004b74:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b78:	4659      	mov	r1, fp
 8004b7a:	00cb      	lsls	r3, r1, #3
 8004b7c:	4651      	mov	r1, sl
 8004b7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b82:	4651      	mov	r1, sl
 8004b84:	00ca      	lsls	r2, r1, #3
 8004b86:	4610      	mov	r0, r2
 8004b88:	4619      	mov	r1, r3
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	4642      	mov	r2, r8
 8004b8e:	189b      	adds	r3, r3, r2
 8004b90:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004b94:	464b      	mov	r3, r9
 8004b96:	460a      	mov	r2, r1
 8004b98:	eb42 0303 	adc.w	r3, r2, r3
 8004b9c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004baa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004bac:	f04f 0200 	mov.w	r2, #0
 8004bb0:	f04f 0300 	mov.w	r3, #0
 8004bb4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004bb8:	4649      	mov	r1, r9
 8004bba:	008b      	lsls	r3, r1, #2
 8004bbc:	4641      	mov	r1, r8
 8004bbe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004bc2:	4641      	mov	r1, r8
 8004bc4:	008a      	lsls	r2, r1, #2
 8004bc6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004bca:	f7fb fbd9 	bl	8000380 <__aeabi_uldivmod>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	460b      	mov	r3, r1
 8004bd2:	4611      	mov	r1, r2
 8004bd4:	4b38      	ldr	r3, [pc, #224]	@ (8004cb8 <UART_SetConfig+0x4e4>)
 8004bd6:	fba3 2301 	umull	r2, r3, r3, r1
 8004bda:	095b      	lsrs	r3, r3, #5
 8004bdc:	2264      	movs	r2, #100	@ 0x64
 8004bde:	fb02 f303 	mul.w	r3, r2, r3
 8004be2:	1acb      	subs	r3, r1, r3
 8004be4:	011b      	lsls	r3, r3, #4
 8004be6:	3332      	adds	r3, #50	@ 0x32
 8004be8:	4a33      	ldr	r2, [pc, #204]	@ (8004cb8 <UART_SetConfig+0x4e4>)
 8004bea:	fba2 2303 	umull	r2, r3, r2, r3
 8004bee:	095b      	lsrs	r3, r3, #5
 8004bf0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004bf4:	441c      	add	r4, r3
 8004bf6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	673b      	str	r3, [r7, #112]	@ 0x70
 8004bfe:	677a      	str	r2, [r7, #116]	@ 0x74
 8004c00:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004c04:	4642      	mov	r2, r8
 8004c06:	464b      	mov	r3, r9
 8004c08:	1891      	adds	r1, r2, r2
 8004c0a:	60b9      	str	r1, [r7, #8]
 8004c0c:	415b      	adcs	r3, r3
 8004c0e:	60fb      	str	r3, [r7, #12]
 8004c10:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004c14:	4641      	mov	r1, r8
 8004c16:	1851      	adds	r1, r2, r1
 8004c18:	6039      	str	r1, [r7, #0]
 8004c1a:	4649      	mov	r1, r9
 8004c1c:	414b      	adcs	r3, r1
 8004c1e:	607b      	str	r3, [r7, #4]
 8004c20:	f04f 0200 	mov.w	r2, #0
 8004c24:	f04f 0300 	mov.w	r3, #0
 8004c28:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004c2c:	4659      	mov	r1, fp
 8004c2e:	00cb      	lsls	r3, r1, #3
 8004c30:	4651      	mov	r1, sl
 8004c32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c36:	4651      	mov	r1, sl
 8004c38:	00ca      	lsls	r2, r1, #3
 8004c3a:	4610      	mov	r0, r2
 8004c3c:	4619      	mov	r1, r3
 8004c3e:	4603      	mov	r3, r0
 8004c40:	4642      	mov	r2, r8
 8004c42:	189b      	adds	r3, r3, r2
 8004c44:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004c46:	464b      	mov	r3, r9
 8004c48:	460a      	mov	r2, r1
 8004c4a:	eb42 0303 	adc.w	r3, r2, r3
 8004c4e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	2200      	movs	r2, #0
 8004c58:	663b      	str	r3, [r7, #96]	@ 0x60
 8004c5a:	667a      	str	r2, [r7, #100]	@ 0x64
 8004c5c:	f04f 0200 	mov.w	r2, #0
 8004c60:	f04f 0300 	mov.w	r3, #0
 8004c64:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004c68:	4649      	mov	r1, r9
 8004c6a:	008b      	lsls	r3, r1, #2
 8004c6c:	4641      	mov	r1, r8
 8004c6e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c72:	4641      	mov	r1, r8
 8004c74:	008a      	lsls	r2, r1, #2
 8004c76:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004c7a:	f7fb fb81 	bl	8000380 <__aeabi_uldivmod>
 8004c7e:	4602      	mov	r2, r0
 8004c80:	460b      	mov	r3, r1
 8004c82:	4b0d      	ldr	r3, [pc, #52]	@ (8004cb8 <UART_SetConfig+0x4e4>)
 8004c84:	fba3 1302 	umull	r1, r3, r3, r2
 8004c88:	095b      	lsrs	r3, r3, #5
 8004c8a:	2164      	movs	r1, #100	@ 0x64
 8004c8c:	fb01 f303 	mul.w	r3, r1, r3
 8004c90:	1ad3      	subs	r3, r2, r3
 8004c92:	011b      	lsls	r3, r3, #4
 8004c94:	3332      	adds	r3, #50	@ 0x32
 8004c96:	4a08      	ldr	r2, [pc, #32]	@ (8004cb8 <UART_SetConfig+0x4e4>)
 8004c98:	fba2 2303 	umull	r2, r3, r2, r3
 8004c9c:	095b      	lsrs	r3, r3, #5
 8004c9e:	f003 020f 	and.w	r2, r3, #15
 8004ca2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4422      	add	r2, r4
 8004caa:	609a      	str	r2, [r3, #8]
}
 8004cac:	bf00      	nop
 8004cae:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004cb8:	51eb851f 	.word	0x51eb851f

08004cbc <__NVIC_SetPriority>:
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b083      	sub	sp, #12
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	6039      	str	r1, [r7, #0]
 8004cc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004cc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	db0a      	blt.n	8004ce6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	b2da      	uxtb	r2, r3
 8004cd4:	490c      	ldr	r1, [pc, #48]	@ (8004d08 <__NVIC_SetPriority+0x4c>)
 8004cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cda:	0112      	lsls	r2, r2, #4
 8004cdc:	b2d2      	uxtb	r2, r2
 8004cde:	440b      	add	r3, r1
 8004ce0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004ce4:	e00a      	b.n	8004cfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	b2da      	uxtb	r2, r3
 8004cea:	4908      	ldr	r1, [pc, #32]	@ (8004d0c <__NVIC_SetPriority+0x50>)
 8004cec:	79fb      	ldrb	r3, [r7, #7]
 8004cee:	f003 030f 	and.w	r3, r3, #15
 8004cf2:	3b04      	subs	r3, #4
 8004cf4:	0112      	lsls	r2, r2, #4
 8004cf6:	b2d2      	uxtb	r2, r2
 8004cf8:	440b      	add	r3, r1
 8004cfa:	761a      	strb	r2, [r3, #24]
}
 8004cfc:	bf00      	nop
 8004cfe:	370c      	adds	r7, #12
 8004d00:	46bd      	mov	sp, r7
 8004d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d06:	4770      	bx	lr
 8004d08:	e000e100 	.word	0xe000e100
 8004d0c:	e000ed00 	.word	0xe000ed00

08004d10 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004d10:	b580      	push	{r7, lr}
 8004d12:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004d14:	4b05      	ldr	r3, [pc, #20]	@ (8004d2c <SysTick_Handler+0x1c>)
 8004d16:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004d18:	f001 fd40 	bl	800679c <xTaskGetSchedulerState>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d001      	beq.n	8004d26 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004d22:	f002 fb39 	bl	8007398 <xPortSysTickHandler>
  }
}
 8004d26:	bf00      	nop
 8004d28:	bd80      	pop	{r7, pc}
 8004d2a:	bf00      	nop
 8004d2c:	e000e010 	.word	0xe000e010

08004d30 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004d30:	b580      	push	{r7, lr}
 8004d32:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004d34:	2100      	movs	r1, #0
 8004d36:	f06f 0004 	mvn.w	r0, #4
 8004d3a:	f7ff ffbf 	bl	8004cbc <__NVIC_SetPriority>
#endif
}
 8004d3e:	bf00      	nop
 8004d40:	bd80      	pop	{r7, pc}
	...

08004d44 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004d44:	b480      	push	{r7}
 8004d46:	b083      	sub	sp, #12
 8004d48:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d4a:	f3ef 8305 	mrs	r3, IPSR
 8004d4e:	603b      	str	r3, [r7, #0]
  return(result);
 8004d50:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d003      	beq.n	8004d5e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004d56:	f06f 0305 	mvn.w	r3, #5
 8004d5a:	607b      	str	r3, [r7, #4]
 8004d5c:	e00c      	b.n	8004d78 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004d5e:	4b0a      	ldr	r3, [pc, #40]	@ (8004d88 <osKernelInitialize+0x44>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d105      	bne.n	8004d72 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004d66:	4b08      	ldr	r3, [pc, #32]	@ (8004d88 <osKernelInitialize+0x44>)
 8004d68:	2201      	movs	r2, #1
 8004d6a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	607b      	str	r3, [r7, #4]
 8004d70:	e002      	b.n	8004d78 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004d72:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004d76:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004d78:	687b      	ldr	r3, [r7, #4]
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	370c      	adds	r7, #12
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d84:	4770      	bx	lr
 8004d86:	bf00      	nop
 8004d88:	200046b4 	.word	0x200046b4

08004d8c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b082      	sub	sp, #8
 8004d90:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d92:	f3ef 8305 	mrs	r3, IPSR
 8004d96:	603b      	str	r3, [r7, #0]
  return(result);
 8004d98:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d003      	beq.n	8004da6 <osKernelStart+0x1a>
    stat = osErrorISR;
 8004d9e:	f06f 0305 	mvn.w	r3, #5
 8004da2:	607b      	str	r3, [r7, #4]
 8004da4:	e010      	b.n	8004dc8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004da6:	4b0b      	ldr	r3, [pc, #44]	@ (8004dd4 <osKernelStart+0x48>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	d109      	bne.n	8004dc2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004dae:	f7ff ffbf 	bl	8004d30 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004db2:	4b08      	ldr	r3, [pc, #32]	@ (8004dd4 <osKernelStart+0x48>)
 8004db4:	2202      	movs	r2, #2
 8004db6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004db8:	f001 f87a 	bl	8005eb0 <vTaskStartScheduler>
      stat = osOK;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	607b      	str	r3, [r7, #4]
 8004dc0:	e002      	b.n	8004dc8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004dc2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004dc6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004dc8:	687b      	ldr	r3, [r7, #4]
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3708      	adds	r7, #8
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}
 8004dd2:	bf00      	nop
 8004dd4:	200046b4 	.word	0x200046b4

08004dd8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b08e      	sub	sp, #56	@ 0x38
 8004ddc:	af04      	add	r7, sp, #16
 8004dde:	60f8      	str	r0, [r7, #12]
 8004de0:	60b9      	str	r1, [r7, #8]
 8004de2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004de4:	2300      	movs	r3, #0
 8004de6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004de8:	f3ef 8305 	mrs	r3, IPSR
 8004dec:	617b      	str	r3, [r7, #20]
  return(result);
 8004dee:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d17e      	bne.n	8004ef2 <osThreadNew+0x11a>
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d07b      	beq.n	8004ef2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004dfa:	2380      	movs	r3, #128	@ 0x80
 8004dfc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004dfe:	2318      	movs	r3, #24
 8004e00:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004e02:	2300      	movs	r3, #0
 8004e04:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8004e06:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004e0a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d045      	beq.n	8004e9e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d002      	beq.n	8004e20 <osThreadNew+0x48>
        name = attr->name;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	699b      	ldr	r3, [r3, #24]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d002      	beq.n	8004e2e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	699b      	ldr	r3, [r3, #24]
 8004e2c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004e2e:	69fb      	ldr	r3, [r7, #28]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d008      	beq.n	8004e46 <osThreadNew+0x6e>
 8004e34:	69fb      	ldr	r3, [r7, #28]
 8004e36:	2b38      	cmp	r3, #56	@ 0x38
 8004e38:	d805      	bhi.n	8004e46 <osThreadNew+0x6e>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	f003 0301 	and.w	r3, r3, #1
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d001      	beq.n	8004e4a <osThreadNew+0x72>
        return (NULL);
 8004e46:	2300      	movs	r3, #0
 8004e48:	e054      	b.n	8004ef4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	695b      	ldr	r3, [r3, #20]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d003      	beq.n	8004e5a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	695b      	ldr	r3, [r3, #20]
 8004e56:	089b      	lsrs	r3, r3, #2
 8004e58:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d00e      	beq.n	8004e80 <osThreadNew+0xa8>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	68db      	ldr	r3, [r3, #12]
 8004e66:	2b5b      	cmp	r3, #91	@ 0x5b
 8004e68:	d90a      	bls.n	8004e80 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d006      	beq.n	8004e80 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	695b      	ldr	r3, [r3, #20]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d002      	beq.n	8004e80 <osThreadNew+0xa8>
        mem = 1;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	61bb      	str	r3, [r7, #24]
 8004e7e:	e010      	b.n	8004ea2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d10c      	bne.n	8004ea2 <osThreadNew+0xca>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	68db      	ldr	r3, [r3, #12]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d108      	bne.n	8004ea2 <osThreadNew+0xca>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	691b      	ldr	r3, [r3, #16]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d104      	bne.n	8004ea2 <osThreadNew+0xca>
          mem = 0;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	61bb      	str	r3, [r7, #24]
 8004e9c:	e001      	b.n	8004ea2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004ea2:	69bb      	ldr	r3, [r7, #24]
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d110      	bne.n	8004eca <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004eac:	687a      	ldr	r2, [r7, #4]
 8004eae:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004eb0:	9202      	str	r2, [sp, #8]
 8004eb2:	9301      	str	r3, [sp, #4]
 8004eb4:	69fb      	ldr	r3, [r7, #28]
 8004eb6:	9300      	str	r3, [sp, #0]
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	6a3a      	ldr	r2, [r7, #32]
 8004ebc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004ebe:	68f8      	ldr	r0, [r7, #12]
 8004ec0:	f000 fe1a 	bl	8005af8 <xTaskCreateStatic>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	613b      	str	r3, [r7, #16]
 8004ec8:	e013      	b.n	8004ef2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004eca:	69bb      	ldr	r3, [r7, #24]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d110      	bne.n	8004ef2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004ed0:	6a3b      	ldr	r3, [r7, #32]
 8004ed2:	b29a      	uxth	r2, r3
 8004ed4:	f107 0310 	add.w	r3, r7, #16
 8004ed8:	9301      	str	r3, [sp, #4]
 8004eda:	69fb      	ldr	r3, [r7, #28]
 8004edc:	9300      	str	r3, [sp, #0]
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004ee2:	68f8      	ldr	r0, [r7, #12]
 8004ee4:	f000 fe68 	bl	8005bb8 <xTaskCreate>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d001      	beq.n	8004ef2 <osThreadNew+0x11a>
            hTask = NULL;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004ef2:	693b      	ldr	r3, [r7, #16]
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3728      	adds	r7, #40	@ 0x28
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}

08004efc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b084      	sub	sp, #16
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f04:	f3ef 8305 	mrs	r3, IPSR
 8004f08:	60bb      	str	r3, [r7, #8]
  return(result);
 8004f0a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d003      	beq.n	8004f18 <osDelay+0x1c>
    stat = osErrorISR;
 8004f10:	f06f 0305 	mvn.w	r3, #5
 8004f14:	60fb      	str	r3, [r7, #12]
 8004f16:	e007      	b.n	8004f28 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d002      	beq.n	8004f28 <osDelay+0x2c>
      vTaskDelay(ticks);
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f000 ff8e 	bl	8005e44 <vTaskDelay>
    }
  }

  return (stat);
 8004f28:	68fb      	ldr	r3, [r7, #12]
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3710      	adds	r7, #16
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}
	...

08004f34 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004f34:	b480      	push	{r7}
 8004f36:	b085      	sub	sp, #20
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	60f8      	str	r0, [r7, #12]
 8004f3c:	60b9      	str	r1, [r7, #8]
 8004f3e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	4a07      	ldr	r2, [pc, #28]	@ (8004f60 <vApplicationGetIdleTaskMemory+0x2c>)
 8004f44:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	4a06      	ldr	r2, [pc, #24]	@ (8004f64 <vApplicationGetIdleTaskMemory+0x30>)
 8004f4a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2280      	movs	r2, #128	@ 0x80
 8004f50:	601a      	str	r2, [r3, #0]
}
 8004f52:	bf00      	nop
 8004f54:	3714      	adds	r7, #20
 8004f56:	46bd      	mov	sp, r7
 8004f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5c:	4770      	bx	lr
 8004f5e:	bf00      	nop
 8004f60:	200046b8 	.word	0x200046b8
 8004f64:	20004714 	.word	0x20004714

08004f68 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004f68:	b480      	push	{r7}
 8004f6a:	b085      	sub	sp, #20
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	60f8      	str	r0, [r7, #12]
 8004f70:	60b9      	str	r1, [r7, #8]
 8004f72:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	4a07      	ldr	r2, [pc, #28]	@ (8004f94 <vApplicationGetTimerTaskMemory+0x2c>)
 8004f78:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	4a06      	ldr	r2, [pc, #24]	@ (8004f98 <vApplicationGetTimerTaskMemory+0x30>)
 8004f7e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004f86:	601a      	str	r2, [r3, #0]
}
 8004f88:	bf00      	nop
 8004f8a:	3714      	adds	r7, #20
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr
 8004f94:	20004914 	.word	0x20004914
 8004f98:	20004970 	.word	0x20004970

08004f9c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b083      	sub	sp, #12
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	f103 0208 	add.w	r2, r3, #8
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004fb4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	f103 0208 	add.w	r2, r3, #8
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	f103 0208 	add.w	r2, r3, #8
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004fd0:	bf00      	nop
 8004fd2:	370c      	adds	r7, #12
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fda:	4770      	bx	lr

08004fdc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b083      	sub	sp, #12
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004fea:	bf00      	nop
 8004fec:	370c      	adds	r7, #12
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff4:	4770      	bx	lr

08004ff6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004ff6:	b480      	push	{r7}
 8004ff8:	b085      	sub	sp, #20
 8004ffa:	af00      	add	r7, sp, #0
 8004ffc:	6078      	str	r0, [r7, #4]
 8004ffe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	68fa      	ldr	r2, [r7, #12]
 800500a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	689a      	ldr	r2, [r3, #8]
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	683a      	ldr	r2, [r7, #0]
 800501a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	683a      	ldr	r2, [r7, #0]
 8005020:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	687a      	ldr	r2, [r7, #4]
 8005026:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	1c5a      	adds	r2, r3, #1
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	601a      	str	r2, [r3, #0]
}
 8005032:	bf00      	nop
 8005034:	3714      	adds	r7, #20
 8005036:	46bd      	mov	sp, r7
 8005038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503c:	4770      	bx	lr

0800503e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800503e:	b480      	push	{r7}
 8005040:	b085      	sub	sp, #20
 8005042:	af00      	add	r7, sp, #0
 8005044:	6078      	str	r0, [r7, #4]
 8005046:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005054:	d103      	bne.n	800505e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	691b      	ldr	r3, [r3, #16]
 800505a:	60fb      	str	r3, [r7, #12]
 800505c:	e00c      	b.n	8005078 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	3308      	adds	r3, #8
 8005062:	60fb      	str	r3, [r7, #12]
 8005064:	e002      	b.n	800506c <vListInsert+0x2e>
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	60fb      	str	r3, [r7, #12]
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	68ba      	ldr	r2, [r7, #8]
 8005074:	429a      	cmp	r2, r3
 8005076:	d2f6      	bcs.n	8005066 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	685a      	ldr	r2, [r3, #4]
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	683a      	ldr	r2, [r7, #0]
 8005086:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	68fa      	ldr	r2, [r7, #12]
 800508c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	683a      	ldr	r2, [r7, #0]
 8005092:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	687a      	ldr	r2, [r7, #4]
 8005098:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	1c5a      	adds	r2, r3, #1
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	601a      	str	r2, [r3, #0]
}
 80050a4:	bf00      	nop
 80050a6:	3714      	adds	r7, #20
 80050a8:	46bd      	mov	sp, r7
 80050aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ae:	4770      	bx	lr

080050b0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80050b0:	b480      	push	{r7}
 80050b2:	b085      	sub	sp, #20
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	691b      	ldr	r3, [r3, #16]
 80050bc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	687a      	ldr	r2, [r7, #4]
 80050c4:	6892      	ldr	r2, [r2, #8]
 80050c6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	687a      	ldr	r2, [r7, #4]
 80050ce:	6852      	ldr	r2, [r2, #4]
 80050d0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	687a      	ldr	r2, [r7, #4]
 80050d8:	429a      	cmp	r2, r3
 80050da:	d103      	bne.n	80050e4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	689a      	ldr	r2, [r3, #8]
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2200      	movs	r2, #0
 80050e8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	1e5a      	subs	r2, r3, #1
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3714      	adds	r7, #20
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr

08005104 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b084      	sub	sp, #16
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d10b      	bne.n	8005130 <xQueueGenericReset+0x2c>
	__asm volatile
 8005118:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800511c:	f383 8811 	msr	BASEPRI, r3
 8005120:	f3bf 8f6f 	isb	sy
 8005124:	f3bf 8f4f 	dsb	sy
 8005128:	60bb      	str	r3, [r7, #8]
}
 800512a:	bf00      	nop
 800512c:	bf00      	nop
 800512e:	e7fd      	b.n	800512c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005130:	f002 f8a2 	bl	8007278 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681a      	ldr	r2, [r3, #0]
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800513c:	68f9      	ldr	r1, [r7, #12]
 800513e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005140:	fb01 f303 	mul.w	r3, r1, r3
 8005144:	441a      	add	r2, r3
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2200      	movs	r2, #0
 800514e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005160:	3b01      	subs	r3, #1
 8005162:	68f9      	ldr	r1, [r7, #12]
 8005164:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005166:	fb01 f303 	mul.w	r3, r1, r3
 800516a:	441a      	add	r2, r3
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	22ff      	movs	r2, #255	@ 0xff
 8005174:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	22ff      	movs	r2, #255	@ 0xff
 800517c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d114      	bne.n	80051b0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	691b      	ldr	r3, [r3, #16]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d01a      	beq.n	80051c4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	3310      	adds	r3, #16
 8005192:	4618      	mov	r0, r3
 8005194:	f001 f91a 	bl	80063cc <xTaskRemoveFromEventList>
 8005198:	4603      	mov	r3, r0
 800519a:	2b00      	cmp	r3, #0
 800519c:	d012      	beq.n	80051c4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800519e:	4b0d      	ldr	r3, [pc, #52]	@ (80051d4 <xQueueGenericReset+0xd0>)
 80051a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80051a4:	601a      	str	r2, [r3, #0]
 80051a6:	f3bf 8f4f 	dsb	sy
 80051aa:	f3bf 8f6f 	isb	sy
 80051ae:	e009      	b.n	80051c4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	3310      	adds	r3, #16
 80051b4:	4618      	mov	r0, r3
 80051b6:	f7ff fef1 	bl	8004f9c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	3324      	adds	r3, #36	@ 0x24
 80051be:	4618      	mov	r0, r3
 80051c0:	f7ff feec 	bl	8004f9c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80051c4:	f002 f88a 	bl	80072dc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80051c8:	2301      	movs	r3, #1
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3710      	adds	r7, #16
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}
 80051d2:	bf00      	nop
 80051d4:	e000ed04 	.word	0xe000ed04

080051d8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b08e      	sub	sp, #56	@ 0x38
 80051dc:	af02      	add	r7, sp, #8
 80051de:	60f8      	str	r0, [r7, #12]
 80051e0:	60b9      	str	r1, [r7, #8]
 80051e2:	607a      	str	r2, [r7, #4]
 80051e4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d10b      	bne.n	8005204 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80051ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051f0:	f383 8811 	msr	BASEPRI, r3
 80051f4:	f3bf 8f6f 	isb	sy
 80051f8:	f3bf 8f4f 	dsb	sy
 80051fc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80051fe:	bf00      	nop
 8005200:	bf00      	nop
 8005202:	e7fd      	b.n	8005200 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d10b      	bne.n	8005222 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800520a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800520e:	f383 8811 	msr	BASEPRI, r3
 8005212:	f3bf 8f6f 	isb	sy
 8005216:	f3bf 8f4f 	dsb	sy
 800521a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800521c:	bf00      	nop
 800521e:	bf00      	nop
 8005220:	e7fd      	b.n	800521e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d002      	beq.n	800522e <xQueueGenericCreateStatic+0x56>
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d001      	beq.n	8005232 <xQueueGenericCreateStatic+0x5a>
 800522e:	2301      	movs	r3, #1
 8005230:	e000      	b.n	8005234 <xQueueGenericCreateStatic+0x5c>
 8005232:	2300      	movs	r3, #0
 8005234:	2b00      	cmp	r3, #0
 8005236:	d10b      	bne.n	8005250 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005238:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800523c:	f383 8811 	msr	BASEPRI, r3
 8005240:	f3bf 8f6f 	isb	sy
 8005244:	f3bf 8f4f 	dsb	sy
 8005248:	623b      	str	r3, [r7, #32]
}
 800524a:	bf00      	nop
 800524c:	bf00      	nop
 800524e:	e7fd      	b.n	800524c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d102      	bne.n	800525c <xQueueGenericCreateStatic+0x84>
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d101      	bne.n	8005260 <xQueueGenericCreateStatic+0x88>
 800525c:	2301      	movs	r3, #1
 800525e:	e000      	b.n	8005262 <xQueueGenericCreateStatic+0x8a>
 8005260:	2300      	movs	r3, #0
 8005262:	2b00      	cmp	r3, #0
 8005264:	d10b      	bne.n	800527e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8005266:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800526a:	f383 8811 	msr	BASEPRI, r3
 800526e:	f3bf 8f6f 	isb	sy
 8005272:	f3bf 8f4f 	dsb	sy
 8005276:	61fb      	str	r3, [r7, #28]
}
 8005278:	bf00      	nop
 800527a:	bf00      	nop
 800527c:	e7fd      	b.n	800527a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800527e:	2350      	movs	r3, #80	@ 0x50
 8005280:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	2b50      	cmp	r3, #80	@ 0x50
 8005286:	d00b      	beq.n	80052a0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005288:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800528c:	f383 8811 	msr	BASEPRI, r3
 8005290:	f3bf 8f6f 	isb	sy
 8005294:	f3bf 8f4f 	dsb	sy
 8005298:	61bb      	str	r3, [r7, #24]
}
 800529a:	bf00      	nop
 800529c:	bf00      	nop
 800529e:	e7fd      	b.n	800529c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80052a0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80052a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d00d      	beq.n	80052c8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80052ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052ae:	2201      	movs	r2, #1
 80052b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80052b4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80052b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052ba:	9300      	str	r3, [sp, #0]
 80052bc:	4613      	mov	r3, r2
 80052be:	687a      	ldr	r2, [r7, #4]
 80052c0:	68b9      	ldr	r1, [r7, #8]
 80052c2:	68f8      	ldr	r0, [r7, #12]
 80052c4:	f000 f805 	bl	80052d2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80052c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3730      	adds	r7, #48	@ 0x30
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}

080052d2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80052d2:	b580      	push	{r7, lr}
 80052d4:	b084      	sub	sp, #16
 80052d6:	af00      	add	r7, sp, #0
 80052d8:	60f8      	str	r0, [r7, #12]
 80052da:	60b9      	str	r1, [r7, #8]
 80052dc:	607a      	str	r2, [r7, #4]
 80052de:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d103      	bne.n	80052ee <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80052e6:	69bb      	ldr	r3, [r7, #24]
 80052e8:	69ba      	ldr	r2, [r7, #24]
 80052ea:	601a      	str	r2, [r3, #0]
 80052ec:	e002      	b.n	80052f4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80052ee:	69bb      	ldr	r3, [r7, #24]
 80052f0:	687a      	ldr	r2, [r7, #4]
 80052f2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80052f4:	69bb      	ldr	r3, [r7, #24]
 80052f6:	68fa      	ldr	r2, [r7, #12]
 80052f8:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80052fa:	69bb      	ldr	r3, [r7, #24]
 80052fc:	68ba      	ldr	r2, [r7, #8]
 80052fe:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005300:	2101      	movs	r1, #1
 8005302:	69b8      	ldr	r0, [r7, #24]
 8005304:	f7ff fefe 	bl	8005104 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005308:	69bb      	ldr	r3, [r7, #24]
 800530a:	78fa      	ldrb	r2, [r7, #3]
 800530c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005310:	bf00      	nop
 8005312:	3710      	adds	r7, #16
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}

08005318 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b08e      	sub	sp, #56	@ 0x38
 800531c:	af00      	add	r7, sp, #0
 800531e:	60f8      	str	r0, [r7, #12]
 8005320:	60b9      	str	r1, [r7, #8]
 8005322:	607a      	str	r2, [r7, #4]
 8005324:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005326:	2300      	movs	r3, #0
 8005328:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800532e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005330:	2b00      	cmp	r3, #0
 8005332:	d10b      	bne.n	800534c <xQueueGenericSend+0x34>
	__asm volatile
 8005334:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005338:	f383 8811 	msr	BASEPRI, r3
 800533c:	f3bf 8f6f 	isb	sy
 8005340:	f3bf 8f4f 	dsb	sy
 8005344:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005346:	bf00      	nop
 8005348:	bf00      	nop
 800534a:	e7fd      	b.n	8005348 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d103      	bne.n	800535a <xQueueGenericSend+0x42>
 8005352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005356:	2b00      	cmp	r3, #0
 8005358:	d101      	bne.n	800535e <xQueueGenericSend+0x46>
 800535a:	2301      	movs	r3, #1
 800535c:	e000      	b.n	8005360 <xQueueGenericSend+0x48>
 800535e:	2300      	movs	r3, #0
 8005360:	2b00      	cmp	r3, #0
 8005362:	d10b      	bne.n	800537c <xQueueGenericSend+0x64>
	__asm volatile
 8005364:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005368:	f383 8811 	msr	BASEPRI, r3
 800536c:	f3bf 8f6f 	isb	sy
 8005370:	f3bf 8f4f 	dsb	sy
 8005374:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005376:	bf00      	nop
 8005378:	bf00      	nop
 800537a:	e7fd      	b.n	8005378 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	2b02      	cmp	r3, #2
 8005380:	d103      	bne.n	800538a <xQueueGenericSend+0x72>
 8005382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005384:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005386:	2b01      	cmp	r3, #1
 8005388:	d101      	bne.n	800538e <xQueueGenericSend+0x76>
 800538a:	2301      	movs	r3, #1
 800538c:	e000      	b.n	8005390 <xQueueGenericSend+0x78>
 800538e:	2300      	movs	r3, #0
 8005390:	2b00      	cmp	r3, #0
 8005392:	d10b      	bne.n	80053ac <xQueueGenericSend+0x94>
	__asm volatile
 8005394:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005398:	f383 8811 	msr	BASEPRI, r3
 800539c:	f3bf 8f6f 	isb	sy
 80053a0:	f3bf 8f4f 	dsb	sy
 80053a4:	623b      	str	r3, [r7, #32]
}
 80053a6:	bf00      	nop
 80053a8:	bf00      	nop
 80053aa:	e7fd      	b.n	80053a8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80053ac:	f001 f9f6 	bl	800679c <xTaskGetSchedulerState>
 80053b0:	4603      	mov	r3, r0
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d102      	bne.n	80053bc <xQueueGenericSend+0xa4>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d101      	bne.n	80053c0 <xQueueGenericSend+0xa8>
 80053bc:	2301      	movs	r3, #1
 80053be:	e000      	b.n	80053c2 <xQueueGenericSend+0xaa>
 80053c0:	2300      	movs	r3, #0
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d10b      	bne.n	80053de <xQueueGenericSend+0xc6>
	__asm volatile
 80053c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053ca:	f383 8811 	msr	BASEPRI, r3
 80053ce:	f3bf 8f6f 	isb	sy
 80053d2:	f3bf 8f4f 	dsb	sy
 80053d6:	61fb      	str	r3, [r7, #28]
}
 80053d8:	bf00      	nop
 80053da:	bf00      	nop
 80053dc:	e7fd      	b.n	80053da <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80053de:	f001 ff4b 	bl	8007278 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80053e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80053e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053ea:	429a      	cmp	r2, r3
 80053ec:	d302      	bcc.n	80053f4 <xQueueGenericSend+0xdc>
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	2b02      	cmp	r3, #2
 80053f2:	d129      	bne.n	8005448 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80053f4:	683a      	ldr	r2, [r7, #0]
 80053f6:	68b9      	ldr	r1, [r7, #8]
 80053f8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80053fa:	f000 fa0f 	bl	800581c <prvCopyDataToQueue>
 80053fe:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005404:	2b00      	cmp	r3, #0
 8005406:	d010      	beq.n	800542a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800540a:	3324      	adds	r3, #36	@ 0x24
 800540c:	4618      	mov	r0, r3
 800540e:	f000 ffdd 	bl	80063cc <xTaskRemoveFromEventList>
 8005412:	4603      	mov	r3, r0
 8005414:	2b00      	cmp	r3, #0
 8005416:	d013      	beq.n	8005440 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005418:	4b3f      	ldr	r3, [pc, #252]	@ (8005518 <xQueueGenericSend+0x200>)
 800541a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800541e:	601a      	str	r2, [r3, #0]
 8005420:	f3bf 8f4f 	dsb	sy
 8005424:	f3bf 8f6f 	isb	sy
 8005428:	e00a      	b.n	8005440 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800542a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800542c:	2b00      	cmp	r3, #0
 800542e:	d007      	beq.n	8005440 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005430:	4b39      	ldr	r3, [pc, #228]	@ (8005518 <xQueueGenericSend+0x200>)
 8005432:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005436:	601a      	str	r2, [r3, #0]
 8005438:	f3bf 8f4f 	dsb	sy
 800543c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005440:	f001 ff4c 	bl	80072dc <vPortExitCritical>
				return pdPASS;
 8005444:	2301      	movs	r3, #1
 8005446:	e063      	b.n	8005510 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d103      	bne.n	8005456 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800544e:	f001 ff45 	bl	80072dc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005452:	2300      	movs	r3, #0
 8005454:	e05c      	b.n	8005510 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005456:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005458:	2b00      	cmp	r3, #0
 800545a:	d106      	bne.n	800546a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800545c:	f107 0314 	add.w	r3, r7, #20
 8005460:	4618      	mov	r0, r3
 8005462:	f001 f83f 	bl	80064e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005466:	2301      	movs	r3, #1
 8005468:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800546a:	f001 ff37 	bl	80072dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800546e:	f000 fd87 	bl	8005f80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005472:	f001 ff01 	bl	8007278 <vPortEnterCritical>
 8005476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005478:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800547c:	b25b      	sxtb	r3, r3
 800547e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005482:	d103      	bne.n	800548c <xQueueGenericSend+0x174>
 8005484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005486:	2200      	movs	r2, #0
 8005488:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800548c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800548e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005492:	b25b      	sxtb	r3, r3
 8005494:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005498:	d103      	bne.n	80054a2 <xQueueGenericSend+0x18a>
 800549a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800549c:	2200      	movs	r2, #0
 800549e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80054a2:	f001 ff1b 	bl	80072dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80054a6:	1d3a      	adds	r2, r7, #4
 80054a8:	f107 0314 	add.w	r3, r7, #20
 80054ac:	4611      	mov	r1, r2
 80054ae:	4618      	mov	r0, r3
 80054b0:	f001 f82e 	bl	8006510 <xTaskCheckForTimeOut>
 80054b4:	4603      	mov	r3, r0
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d124      	bne.n	8005504 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80054ba:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80054bc:	f000 faa6 	bl	8005a0c <prvIsQueueFull>
 80054c0:	4603      	mov	r3, r0
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d018      	beq.n	80054f8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80054c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054c8:	3310      	adds	r3, #16
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	4611      	mov	r1, r2
 80054ce:	4618      	mov	r0, r3
 80054d0:	f000 ff2a 	bl	8006328 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80054d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80054d6:	f000 fa31 	bl	800593c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80054da:	f000 fd5f 	bl	8005f9c <xTaskResumeAll>
 80054de:	4603      	mov	r3, r0
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	f47f af7c 	bne.w	80053de <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80054e6:	4b0c      	ldr	r3, [pc, #48]	@ (8005518 <xQueueGenericSend+0x200>)
 80054e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80054ec:	601a      	str	r2, [r3, #0]
 80054ee:	f3bf 8f4f 	dsb	sy
 80054f2:	f3bf 8f6f 	isb	sy
 80054f6:	e772      	b.n	80053de <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80054f8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80054fa:	f000 fa1f 	bl	800593c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80054fe:	f000 fd4d 	bl	8005f9c <xTaskResumeAll>
 8005502:	e76c      	b.n	80053de <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005504:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005506:	f000 fa19 	bl	800593c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800550a:	f000 fd47 	bl	8005f9c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800550e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005510:	4618      	mov	r0, r3
 8005512:	3738      	adds	r7, #56	@ 0x38
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}
 8005518:	e000ed04 	.word	0xe000ed04

0800551c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b090      	sub	sp, #64	@ 0x40
 8005520:	af00      	add	r7, sp, #0
 8005522:	60f8      	str	r0, [r7, #12]
 8005524:	60b9      	str	r1, [r7, #8]
 8005526:	607a      	str	r2, [r7, #4]
 8005528:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800552e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005530:	2b00      	cmp	r3, #0
 8005532:	d10b      	bne.n	800554c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005534:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005538:	f383 8811 	msr	BASEPRI, r3
 800553c:	f3bf 8f6f 	isb	sy
 8005540:	f3bf 8f4f 	dsb	sy
 8005544:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005546:	bf00      	nop
 8005548:	bf00      	nop
 800554a:	e7fd      	b.n	8005548 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d103      	bne.n	800555a <xQueueGenericSendFromISR+0x3e>
 8005552:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005556:	2b00      	cmp	r3, #0
 8005558:	d101      	bne.n	800555e <xQueueGenericSendFromISR+0x42>
 800555a:	2301      	movs	r3, #1
 800555c:	e000      	b.n	8005560 <xQueueGenericSendFromISR+0x44>
 800555e:	2300      	movs	r3, #0
 8005560:	2b00      	cmp	r3, #0
 8005562:	d10b      	bne.n	800557c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005564:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005568:	f383 8811 	msr	BASEPRI, r3
 800556c:	f3bf 8f6f 	isb	sy
 8005570:	f3bf 8f4f 	dsb	sy
 8005574:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005576:	bf00      	nop
 8005578:	bf00      	nop
 800557a:	e7fd      	b.n	8005578 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	2b02      	cmp	r3, #2
 8005580:	d103      	bne.n	800558a <xQueueGenericSendFromISR+0x6e>
 8005582:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005584:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005586:	2b01      	cmp	r3, #1
 8005588:	d101      	bne.n	800558e <xQueueGenericSendFromISR+0x72>
 800558a:	2301      	movs	r3, #1
 800558c:	e000      	b.n	8005590 <xQueueGenericSendFromISR+0x74>
 800558e:	2300      	movs	r3, #0
 8005590:	2b00      	cmp	r3, #0
 8005592:	d10b      	bne.n	80055ac <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005594:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005598:	f383 8811 	msr	BASEPRI, r3
 800559c:	f3bf 8f6f 	isb	sy
 80055a0:	f3bf 8f4f 	dsb	sy
 80055a4:	623b      	str	r3, [r7, #32]
}
 80055a6:	bf00      	nop
 80055a8:	bf00      	nop
 80055aa:	e7fd      	b.n	80055a8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80055ac:	f001 ff44 	bl	8007438 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80055b0:	f3ef 8211 	mrs	r2, BASEPRI
 80055b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055b8:	f383 8811 	msr	BASEPRI, r3
 80055bc:	f3bf 8f6f 	isb	sy
 80055c0:	f3bf 8f4f 	dsb	sy
 80055c4:	61fa      	str	r2, [r7, #28]
 80055c6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80055c8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80055ca:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80055cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055ce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80055d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055d4:	429a      	cmp	r2, r3
 80055d6:	d302      	bcc.n	80055de <xQueueGenericSendFromISR+0xc2>
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	2b02      	cmp	r3, #2
 80055dc:	d12f      	bne.n	800563e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80055de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055e0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80055e4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80055e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80055ee:	683a      	ldr	r2, [r7, #0]
 80055f0:	68b9      	ldr	r1, [r7, #8]
 80055f2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80055f4:	f000 f912 	bl	800581c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80055f8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80055fc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005600:	d112      	bne.n	8005628 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005602:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005606:	2b00      	cmp	r3, #0
 8005608:	d016      	beq.n	8005638 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800560a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800560c:	3324      	adds	r3, #36	@ 0x24
 800560e:	4618      	mov	r0, r3
 8005610:	f000 fedc 	bl	80063cc <xTaskRemoveFromEventList>
 8005614:	4603      	mov	r3, r0
 8005616:	2b00      	cmp	r3, #0
 8005618:	d00e      	beq.n	8005638 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d00b      	beq.n	8005638 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2201      	movs	r2, #1
 8005624:	601a      	str	r2, [r3, #0]
 8005626:	e007      	b.n	8005638 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005628:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800562c:	3301      	adds	r3, #1
 800562e:	b2db      	uxtb	r3, r3
 8005630:	b25a      	sxtb	r2, r3
 8005632:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005634:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005638:	2301      	movs	r3, #1
 800563a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800563c:	e001      	b.n	8005642 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800563e:	2300      	movs	r3, #0
 8005640:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005642:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005644:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800564c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800564e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005650:	4618      	mov	r0, r3
 8005652:	3740      	adds	r7, #64	@ 0x40
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}

08005658 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b08c      	sub	sp, #48	@ 0x30
 800565c:	af00      	add	r7, sp, #0
 800565e:	60f8      	str	r0, [r7, #12]
 8005660:	60b9      	str	r1, [r7, #8]
 8005662:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005664:	2300      	movs	r3, #0
 8005666:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800566c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800566e:	2b00      	cmp	r3, #0
 8005670:	d10b      	bne.n	800568a <xQueueReceive+0x32>
	__asm volatile
 8005672:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005676:	f383 8811 	msr	BASEPRI, r3
 800567a:	f3bf 8f6f 	isb	sy
 800567e:	f3bf 8f4f 	dsb	sy
 8005682:	623b      	str	r3, [r7, #32]
}
 8005684:	bf00      	nop
 8005686:	bf00      	nop
 8005688:	e7fd      	b.n	8005686 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d103      	bne.n	8005698 <xQueueReceive+0x40>
 8005690:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005694:	2b00      	cmp	r3, #0
 8005696:	d101      	bne.n	800569c <xQueueReceive+0x44>
 8005698:	2301      	movs	r3, #1
 800569a:	e000      	b.n	800569e <xQueueReceive+0x46>
 800569c:	2300      	movs	r3, #0
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d10b      	bne.n	80056ba <xQueueReceive+0x62>
	__asm volatile
 80056a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056a6:	f383 8811 	msr	BASEPRI, r3
 80056aa:	f3bf 8f6f 	isb	sy
 80056ae:	f3bf 8f4f 	dsb	sy
 80056b2:	61fb      	str	r3, [r7, #28]
}
 80056b4:	bf00      	nop
 80056b6:	bf00      	nop
 80056b8:	e7fd      	b.n	80056b6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80056ba:	f001 f86f 	bl	800679c <xTaskGetSchedulerState>
 80056be:	4603      	mov	r3, r0
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d102      	bne.n	80056ca <xQueueReceive+0x72>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d101      	bne.n	80056ce <xQueueReceive+0x76>
 80056ca:	2301      	movs	r3, #1
 80056cc:	e000      	b.n	80056d0 <xQueueReceive+0x78>
 80056ce:	2300      	movs	r3, #0
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d10b      	bne.n	80056ec <xQueueReceive+0x94>
	__asm volatile
 80056d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056d8:	f383 8811 	msr	BASEPRI, r3
 80056dc:	f3bf 8f6f 	isb	sy
 80056e0:	f3bf 8f4f 	dsb	sy
 80056e4:	61bb      	str	r3, [r7, #24]
}
 80056e6:	bf00      	nop
 80056e8:	bf00      	nop
 80056ea:	e7fd      	b.n	80056e8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80056ec:	f001 fdc4 	bl	8007278 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80056f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056f4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80056f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d01f      	beq.n	800573c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80056fc:	68b9      	ldr	r1, [r7, #8]
 80056fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005700:	f000 f8f6 	bl	80058f0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005706:	1e5a      	subs	r2, r3, #1
 8005708:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800570a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800570c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800570e:	691b      	ldr	r3, [r3, #16]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d00f      	beq.n	8005734 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005714:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005716:	3310      	adds	r3, #16
 8005718:	4618      	mov	r0, r3
 800571a:	f000 fe57 	bl	80063cc <xTaskRemoveFromEventList>
 800571e:	4603      	mov	r3, r0
 8005720:	2b00      	cmp	r3, #0
 8005722:	d007      	beq.n	8005734 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005724:	4b3c      	ldr	r3, [pc, #240]	@ (8005818 <xQueueReceive+0x1c0>)
 8005726:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800572a:	601a      	str	r2, [r3, #0]
 800572c:	f3bf 8f4f 	dsb	sy
 8005730:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005734:	f001 fdd2 	bl	80072dc <vPortExitCritical>
				return pdPASS;
 8005738:	2301      	movs	r3, #1
 800573a:	e069      	b.n	8005810 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d103      	bne.n	800574a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005742:	f001 fdcb 	bl	80072dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005746:	2300      	movs	r3, #0
 8005748:	e062      	b.n	8005810 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800574a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800574c:	2b00      	cmp	r3, #0
 800574e:	d106      	bne.n	800575e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005750:	f107 0310 	add.w	r3, r7, #16
 8005754:	4618      	mov	r0, r3
 8005756:	f000 fec5 	bl	80064e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800575a:	2301      	movs	r3, #1
 800575c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800575e:	f001 fdbd 	bl	80072dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005762:	f000 fc0d 	bl	8005f80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005766:	f001 fd87 	bl	8007278 <vPortEnterCritical>
 800576a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800576c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005770:	b25b      	sxtb	r3, r3
 8005772:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005776:	d103      	bne.n	8005780 <xQueueReceive+0x128>
 8005778:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800577a:	2200      	movs	r2, #0
 800577c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005780:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005782:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005786:	b25b      	sxtb	r3, r3
 8005788:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800578c:	d103      	bne.n	8005796 <xQueueReceive+0x13e>
 800578e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005790:	2200      	movs	r2, #0
 8005792:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005796:	f001 fda1 	bl	80072dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800579a:	1d3a      	adds	r2, r7, #4
 800579c:	f107 0310 	add.w	r3, r7, #16
 80057a0:	4611      	mov	r1, r2
 80057a2:	4618      	mov	r0, r3
 80057a4:	f000 feb4 	bl	8006510 <xTaskCheckForTimeOut>
 80057a8:	4603      	mov	r3, r0
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d123      	bne.n	80057f6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80057ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80057b0:	f000 f916 	bl	80059e0 <prvIsQueueEmpty>
 80057b4:	4603      	mov	r3, r0
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d017      	beq.n	80057ea <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80057ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057bc:	3324      	adds	r3, #36	@ 0x24
 80057be:	687a      	ldr	r2, [r7, #4]
 80057c0:	4611      	mov	r1, r2
 80057c2:	4618      	mov	r0, r3
 80057c4:	f000 fdb0 	bl	8006328 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80057c8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80057ca:	f000 f8b7 	bl	800593c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80057ce:	f000 fbe5 	bl	8005f9c <xTaskResumeAll>
 80057d2:	4603      	mov	r3, r0
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d189      	bne.n	80056ec <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80057d8:	4b0f      	ldr	r3, [pc, #60]	@ (8005818 <xQueueReceive+0x1c0>)
 80057da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80057de:	601a      	str	r2, [r3, #0]
 80057e0:	f3bf 8f4f 	dsb	sy
 80057e4:	f3bf 8f6f 	isb	sy
 80057e8:	e780      	b.n	80056ec <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80057ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80057ec:	f000 f8a6 	bl	800593c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80057f0:	f000 fbd4 	bl	8005f9c <xTaskResumeAll>
 80057f4:	e77a      	b.n	80056ec <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80057f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80057f8:	f000 f8a0 	bl	800593c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80057fc:	f000 fbce 	bl	8005f9c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005800:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005802:	f000 f8ed 	bl	80059e0 <prvIsQueueEmpty>
 8005806:	4603      	mov	r3, r0
 8005808:	2b00      	cmp	r3, #0
 800580a:	f43f af6f 	beq.w	80056ec <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800580e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005810:	4618      	mov	r0, r3
 8005812:	3730      	adds	r7, #48	@ 0x30
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}
 8005818:	e000ed04 	.word	0xe000ed04

0800581c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b086      	sub	sp, #24
 8005820:	af00      	add	r7, sp, #0
 8005822:	60f8      	str	r0, [r7, #12]
 8005824:	60b9      	str	r1, [r7, #8]
 8005826:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005828:	2300      	movs	r3, #0
 800582a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005830:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005836:	2b00      	cmp	r3, #0
 8005838:	d10d      	bne.n	8005856 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d14d      	bne.n	80058de <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	689b      	ldr	r3, [r3, #8]
 8005846:	4618      	mov	r0, r3
 8005848:	f000 ffc6 	bl	80067d8 <xTaskPriorityDisinherit>
 800584c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2200      	movs	r2, #0
 8005852:	609a      	str	r2, [r3, #8]
 8005854:	e043      	b.n	80058de <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d119      	bne.n	8005890 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	6858      	ldr	r0, [r3, #4]
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005864:	461a      	mov	r2, r3
 8005866:	68b9      	ldr	r1, [r7, #8]
 8005868:	f00b f971 	bl	8010b4e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	685a      	ldr	r2, [r3, #4]
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005874:	441a      	add	r2, r3
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	685a      	ldr	r2, [r3, #4]
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	689b      	ldr	r3, [r3, #8]
 8005882:	429a      	cmp	r2, r3
 8005884:	d32b      	bcc.n	80058de <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681a      	ldr	r2, [r3, #0]
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	605a      	str	r2, [r3, #4]
 800588e:	e026      	b.n	80058de <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	68d8      	ldr	r0, [r3, #12]
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005898:	461a      	mov	r2, r3
 800589a:	68b9      	ldr	r1, [r7, #8]
 800589c:	f00b f957 	bl	8010b4e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	68da      	ldr	r2, [r3, #12]
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058a8:	425b      	negs	r3, r3
 80058aa:	441a      	add	r2, r3
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	68da      	ldr	r2, [r3, #12]
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d207      	bcs.n	80058cc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	689a      	ldr	r2, [r3, #8]
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058c4:	425b      	negs	r3, r3
 80058c6:	441a      	add	r2, r3
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2b02      	cmp	r3, #2
 80058d0:	d105      	bne.n	80058de <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d002      	beq.n	80058de <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	3b01      	subs	r3, #1
 80058dc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	1c5a      	adds	r2, r3, #1
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80058e6:	697b      	ldr	r3, [r7, #20]
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	3718      	adds	r7, #24
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}

080058f0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b082      	sub	sp, #8
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
 80058f8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d018      	beq.n	8005934 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	68da      	ldr	r2, [r3, #12]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800590a:	441a      	add	r2, r3
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	68da      	ldr	r2, [r3, #12]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	429a      	cmp	r2, r3
 800591a:	d303      	bcc.n	8005924 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681a      	ldr	r2, [r3, #0]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	68d9      	ldr	r1, [r3, #12]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800592c:	461a      	mov	r2, r3
 800592e:	6838      	ldr	r0, [r7, #0]
 8005930:	f00b f90d 	bl	8010b4e <memcpy>
	}
}
 8005934:	bf00      	nop
 8005936:	3708      	adds	r7, #8
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}

0800593c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b084      	sub	sp, #16
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005944:	f001 fc98 	bl	8007278 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800594e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005950:	e011      	b.n	8005976 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005956:	2b00      	cmp	r3, #0
 8005958:	d012      	beq.n	8005980 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	3324      	adds	r3, #36	@ 0x24
 800595e:	4618      	mov	r0, r3
 8005960:	f000 fd34 	bl	80063cc <xTaskRemoveFromEventList>
 8005964:	4603      	mov	r3, r0
 8005966:	2b00      	cmp	r3, #0
 8005968:	d001      	beq.n	800596e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800596a:	f000 fe35 	bl	80065d8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800596e:	7bfb      	ldrb	r3, [r7, #15]
 8005970:	3b01      	subs	r3, #1
 8005972:	b2db      	uxtb	r3, r3
 8005974:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005976:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800597a:	2b00      	cmp	r3, #0
 800597c:	dce9      	bgt.n	8005952 <prvUnlockQueue+0x16>
 800597e:	e000      	b.n	8005982 <prvUnlockQueue+0x46>
					break;
 8005980:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	22ff      	movs	r2, #255	@ 0xff
 8005986:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800598a:	f001 fca7 	bl	80072dc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800598e:	f001 fc73 	bl	8007278 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005998:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800599a:	e011      	b.n	80059c0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	691b      	ldr	r3, [r3, #16]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d012      	beq.n	80059ca <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	3310      	adds	r3, #16
 80059a8:	4618      	mov	r0, r3
 80059aa:	f000 fd0f 	bl	80063cc <xTaskRemoveFromEventList>
 80059ae:	4603      	mov	r3, r0
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d001      	beq.n	80059b8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80059b4:	f000 fe10 	bl	80065d8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80059b8:	7bbb      	ldrb	r3, [r7, #14]
 80059ba:	3b01      	subs	r3, #1
 80059bc:	b2db      	uxtb	r3, r3
 80059be:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80059c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	dce9      	bgt.n	800599c <prvUnlockQueue+0x60>
 80059c8:	e000      	b.n	80059cc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80059ca:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	22ff      	movs	r2, #255	@ 0xff
 80059d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80059d4:	f001 fc82 	bl	80072dc <vPortExitCritical>
}
 80059d8:	bf00      	nop
 80059da:	3710      	adds	r7, #16
 80059dc:	46bd      	mov	sp, r7
 80059de:	bd80      	pop	{r7, pc}

080059e0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b084      	sub	sp, #16
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80059e8:	f001 fc46 	bl	8007278 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d102      	bne.n	80059fa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80059f4:	2301      	movs	r3, #1
 80059f6:	60fb      	str	r3, [r7, #12]
 80059f8:	e001      	b.n	80059fe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80059fa:	2300      	movs	r3, #0
 80059fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80059fe:	f001 fc6d 	bl	80072dc <vPortExitCritical>

	return xReturn;
 8005a02:	68fb      	ldr	r3, [r7, #12]
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	3710      	adds	r7, #16
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}

08005a0c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b084      	sub	sp, #16
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005a14:	f001 fc30 	bl	8007278 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a20:	429a      	cmp	r2, r3
 8005a22:	d102      	bne.n	8005a2a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005a24:	2301      	movs	r3, #1
 8005a26:	60fb      	str	r3, [r7, #12]
 8005a28:	e001      	b.n	8005a2e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005a2e:	f001 fc55 	bl	80072dc <vPortExitCritical>

	return xReturn;
 8005a32:	68fb      	ldr	r3, [r7, #12]
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	3710      	adds	r7, #16
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd80      	pop	{r7, pc}

08005a3c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b085      	sub	sp, #20
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
 8005a44:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005a46:	2300      	movs	r3, #0
 8005a48:	60fb      	str	r3, [r7, #12]
 8005a4a:	e014      	b.n	8005a76 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005a4c:	4a0f      	ldr	r2, [pc, #60]	@ (8005a8c <vQueueAddToRegistry+0x50>)
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d10b      	bne.n	8005a70 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005a58:	490c      	ldr	r1, [pc, #48]	@ (8005a8c <vQueueAddToRegistry+0x50>)
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	683a      	ldr	r2, [r7, #0]
 8005a5e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005a62:	4a0a      	ldr	r2, [pc, #40]	@ (8005a8c <vQueueAddToRegistry+0x50>)
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	00db      	lsls	r3, r3, #3
 8005a68:	4413      	add	r3, r2
 8005a6a:	687a      	ldr	r2, [r7, #4]
 8005a6c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005a6e:	e006      	b.n	8005a7e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	3301      	adds	r3, #1
 8005a74:	60fb      	str	r3, [r7, #12]
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2b07      	cmp	r3, #7
 8005a7a:	d9e7      	bls.n	8005a4c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005a7c:	bf00      	nop
 8005a7e:	bf00      	nop
 8005a80:	3714      	adds	r7, #20
 8005a82:	46bd      	mov	sp, r7
 8005a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a88:	4770      	bx	lr
 8005a8a:	bf00      	nop
 8005a8c:	20004d70 	.word	0x20004d70

08005a90 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b086      	sub	sp, #24
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	60f8      	str	r0, [r7, #12]
 8005a98:	60b9      	str	r1, [r7, #8]
 8005a9a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005aa0:	f001 fbea 	bl	8007278 <vPortEnterCritical>
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005aaa:	b25b      	sxtb	r3, r3
 8005aac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005ab0:	d103      	bne.n	8005aba <vQueueWaitForMessageRestricted+0x2a>
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005ac0:	b25b      	sxtb	r3, r3
 8005ac2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005ac6:	d103      	bne.n	8005ad0 <vQueueWaitForMessageRestricted+0x40>
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	2200      	movs	r2, #0
 8005acc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005ad0:	f001 fc04 	bl	80072dc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d106      	bne.n	8005aea <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	3324      	adds	r3, #36	@ 0x24
 8005ae0:	687a      	ldr	r2, [r7, #4]
 8005ae2:	68b9      	ldr	r1, [r7, #8]
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	f000 fc45 	bl	8006374 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005aea:	6978      	ldr	r0, [r7, #20]
 8005aec:	f7ff ff26 	bl	800593c <prvUnlockQueue>
	}
 8005af0:	bf00      	nop
 8005af2:	3718      	adds	r7, #24
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}

08005af8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b08e      	sub	sp, #56	@ 0x38
 8005afc:	af04      	add	r7, sp, #16
 8005afe:	60f8      	str	r0, [r7, #12]
 8005b00:	60b9      	str	r1, [r7, #8]
 8005b02:	607a      	str	r2, [r7, #4]
 8005b04:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005b06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d10b      	bne.n	8005b24 <xTaskCreateStatic+0x2c>
	__asm volatile
 8005b0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b10:	f383 8811 	msr	BASEPRI, r3
 8005b14:	f3bf 8f6f 	isb	sy
 8005b18:	f3bf 8f4f 	dsb	sy
 8005b1c:	623b      	str	r3, [r7, #32]
}
 8005b1e:	bf00      	nop
 8005b20:	bf00      	nop
 8005b22:	e7fd      	b.n	8005b20 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005b24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d10b      	bne.n	8005b42 <xTaskCreateStatic+0x4a>
	__asm volatile
 8005b2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b2e:	f383 8811 	msr	BASEPRI, r3
 8005b32:	f3bf 8f6f 	isb	sy
 8005b36:	f3bf 8f4f 	dsb	sy
 8005b3a:	61fb      	str	r3, [r7, #28]
}
 8005b3c:	bf00      	nop
 8005b3e:	bf00      	nop
 8005b40:	e7fd      	b.n	8005b3e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005b42:	235c      	movs	r3, #92	@ 0x5c
 8005b44:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	2b5c      	cmp	r3, #92	@ 0x5c
 8005b4a:	d00b      	beq.n	8005b64 <xTaskCreateStatic+0x6c>
	__asm volatile
 8005b4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b50:	f383 8811 	msr	BASEPRI, r3
 8005b54:	f3bf 8f6f 	isb	sy
 8005b58:	f3bf 8f4f 	dsb	sy
 8005b5c:	61bb      	str	r3, [r7, #24]
}
 8005b5e:	bf00      	nop
 8005b60:	bf00      	nop
 8005b62:	e7fd      	b.n	8005b60 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005b64:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005b66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d01e      	beq.n	8005baa <xTaskCreateStatic+0xb2>
 8005b6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d01b      	beq.n	8005baa <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005b72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b74:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b78:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005b7a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b7e:	2202      	movs	r2, #2
 8005b80:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005b84:	2300      	movs	r3, #0
 8005b86:	9303      	str	r3, [sp, #12]
 8005b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b8a:	9302      	str	r3, [sp, #8]
 8005b8c:	f107 0314 	add.w	r3, r7, #20
 8005b90:	9301      	str	r3, [sp, #4]
 8005b92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b94:	9300      	str	r3, [sp, #0]
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	687a      	ldr	r2, [r7, #4]
 8005b9a:	68b9      	ldr	r1, [r7, #8]
 8005b9c:	68f8      	ldr	r0, [r7, #12]
 8005b9e:	f000 f850 	bl	8005c42 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005ba2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005ba4:	f000 f8de 	bl	8005d64 <prvAddNewTaskToReadyList>
 8005ba8:	e001      	b.n	8005bae <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005baa:	2300      	movs	r3, #0
 8005bac:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005bae:	697b      	ldr	r3, [r7, #20]
	}
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	3728      	adds	r7, #40	@ 0x28
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bd80      	pop	{r7, pc}

08005bb8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b08c      	sub	sp, #48	@ 0x30
 8005bbc:	af04      	add	r7, sp, #16
 8005bbe:	60f8      	str	r0, [r7, #12]
 8005bc0:	60b9      	str	r1, [r7, #8]
 8005bc2:	603b      	str	r3, [r7, #0]
 8005bc4:	4613      	mov	r3, r2
 8005bc6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005bc8:	88fb      	ldrh	r3, [r7, #6]
 8005bca:	009b      	lsls	r3, r3, #2
 8005bcc:	4618      	mov	r0, r3
 8005bce:	f001 fc75 	bl	80074bc <pvPortMalloc>
 8005bd2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d00e      	beq.n	8005bf8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005bda:	205c      	movs	r0, #92	@ 0x5c
 8005bdc:	f001 fc6e 	bl	80074bc <pvPortMalloc>
 8005be0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005be2:	69fb      	ldr	r3, [r7, #28]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d003      	beq.n	8005bf0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005be8:	69fb      	ldr	r3, [r7, #28]
 8005bea:	697a      	ldr	r2, [r7, #20]
 8005bec:	631a      	str	r2, [r3, #48]	@ 0x30
 8005bee:	e005      	b.n	8005bfc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005bf0:	6978      	ldr	r0, [r7, #20]
 8005bf2:	f001 fd31 	bl	8007658 <vPortFree>
 8005bf6:	e001      	b.n	8005bfc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005bfc:	69fb      	ldr	r3, [r7, #28]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d017      	beq.n	8005c32 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005c02:	69fb      	ldr	r3, [r7, #28]
 8005c04:	2200      	movs	r2, #0
 8005c06:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005c0a:	88fa      	ldrh	r2, [r7, #6]
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	9303      	str	r3, [sp, #12]
 8005c10:	69fb      	ldr	r3, [r7, #28]
 8005c12:	9302      	str	r3, [sp, #8]
 8005c14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c16:	9301      	str	r3, [sp, #4]
 8005c18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c1a:	9300      	str	r3, [sp, #0]
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	68b9      	ldr	r1, [r7, #8]
 8005c20:	68f8      	ldr	r0, [r7, #12]
 8005c22:	f000 f80e 	bl	8005c42 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005c26:	69f8      	ldr	r0, [r7, #28]
 8005c28:	f000 f89c 	bl	8005d64 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	61bb      	str	r3, [r7, #24]
 8005c30:	e002      	b.n	8005c38 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005c32:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005c36:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005c38:	69bb      	ldr	r3, [r7, #24]
	}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3720      	adds	r7, #32
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}

08005c42 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005c42:	b580      	push	{r7, lr}
 8005c44:	b088      	sub	sp, #32
 8005c46:	af00      	add	r7, sp, #0
 8005c48:	60f8      	str	r0, [r7, #12]
 8005c4a:	60b9      	str	r1, [r7, #8]
 8005c4c:	607a      	str	r2, [r7, #4]
 8005c4e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005c50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c52:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	009b      	lsls	r3, r3, #2
 8005c58:	461a      	mov	r2, r3
 8005c5a:	21a5      	movs	r1, #165	@ 0xa5
 8005c5c:	f00a feae 	bl	80109bc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005c60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c62:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005c6a:	3b01      	subs	r3, #1
 8005c6c:	009b      	lsls	r3, r3, #2
 8005c6e:	4413      	add	r3, r2
 8005c70:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005c72:	69bb      	ldr	r3, [r7, #24]
 8005c74:	f023 0307 	bic.w	r3, r3, #7
 8005c78:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005c7a:	69bb      	ldr	r3, [r7, #24]
 8005c7c:	f003 0307 	and.w	r3, r3, #7
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d00b      	beq.n	8005c9c <prvInitialiseNewTask+0x5a>
	__asm volatile
 8005c84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c88:	f383 8811 	msr	BASEPRI, r3
 8005c8c:	f3bf 8f6f 	isb	sy
 8005c90:	f3bf 8f4f 	dsb	sy
 8005c94:	617b      	str	r3, [r7, #20]
}
 8005c96:	bf00      	nop
 8005c98:	bf00      	nop
 8005c9a:	e7fd      	b.n	8005c98 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d01f      	beq.n	8005ce2 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	61fb      	str	r3, [r7, #28]
 8005ca6:	e012      	b.n	8005cce <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005ca8:	68ba      	ldr	r2, [r7, #8]
 8005caa:	69fb      	ldr	r3, [r7, #28]
 8005cac:	4413      	add	r3, r2
 8005cae:	7819      	ldrb	r1, [r3, #0]
 8005cb0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005cb2:	69fb      	ldr	r3, [r7, #28]
 8005cb4:	4413      	add	r3, r2
 8005cb6:	3334      	adds	r3, #52	@ 0x34
 8005cb8:	460a      	mov	r2, r1
 8005cba:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005cbc:	68ba      	ldr	r2, [r7, #8]
 8005cbe:	69fb      	ldr	r3, [r7, #28]
 8005cc0:	4413      	add	r3, r2
 8005cc2:	781b      	ldrb	r3, [r3, #0]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d006      	beq.n	8005cd6 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005cc8:	69fb      	ldr	r3, [r7, #28]
 8005cca:	3301      	adds	r3, #1
 8005ccc:	61fb      	str	r3, [r7, #28]
 8005cce:	69fb      	ldr	r3, [r7, #28]
 8005cd0:	2b0f      	cmp	r3, #15
 8005cd2:	d9e9      	bls.n	8005ca8 <prvInitialiseNewTask+0x66>
 8005cd4:	e000      	b.n	8005cd8 <prvInitialiseNewTask+0x96>
			{
				break;
 8005cd6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005cd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cda:	2200      	movs	r2, #0
 8005cdc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005ce0:	e003      	b.n	8005cea <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005ce2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005cea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cec:	2b37      	cmp	r3, #55	@ 0x37
 8005cee:	d901      	bls.n	8005cf4 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005cf0:	2337      	movs	r3, #55	@ 0x37
 8005cf2:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005cf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cf6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005cf8:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005cfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cfc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005cfe:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005d00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d02:	2200      	movs	r2, #0
 8005d04:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005d06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d08:	3304      	adds	r3, #4
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	f7ff f966 	bl	8004fdc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005d10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d12:	3318      	adds	r3, #24
 8005d14:	4618      	mov	r0, r3
 8005d16:	f7ff f961 	bl	8004fdc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005d1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d1e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d22:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005d26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d28:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005d2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d2e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005d30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d32:	2200      	movs	r2, #0
 8005d34:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005d36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d38:	2200      	movs	r2, #0
 8005d3a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005d3e:	683a      	ldr	r2, [r7, #0]
 8005d40:	68f9      	ldr	r1, [r7, #12]
 8005d42:	69b8      	ldr	r0, [r7, #24]
 8005d44:	f001 f966 	bl	8007014 <pxPortInitialiseStack>
 8005d48:	4602      	mov	r2, r0
 8005d4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d4c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005d4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d002      	beq.n	8005d5a <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005d54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d58:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005d5a:	bf00      	nop
 8005d5c:	3720      	adds	r7, #32
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}
	...

08005d64 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b082      	sub	sp, #8
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005d6c:	f001 fa84 	bl	8007278 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005d70:	4b2d      	ldr	r3, [pc, #180]	@ (8005e28 <prvAddNewTaskToReadyList+0xc4>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	3301      	adds	r3, #1
 8005d76:	4a2c      	ldr	r2, [pc, #176]	@ (8005e28 <prvAddNewTaskToReadyList+0xc4>)
 8005d78:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005d7a:	4b2c      	ldr	r3, [pc, #176]	@ (8005e2c <prvAddNewTaskToReadyList+0xc8>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d109      	bne.n	8005d96 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005d82:	4a2a      	ldr	r2, [pc, #168]	@ (8005e2c <prvAddNewTaskToReadyList+0xc8>)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005d88:	4b27      	ldr	r3, [pc, #156]	@ (8005e28 <prvAddNewTaskToReadyList+0xc4>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d110      	bne.n	8005db2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005d90:	f000 fc46 	bl	8006620 <prvInitialiseTaskLists>
 8005d94:	e00d      	b.n	8005db2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005d96:	4b26      	ldr	r3, [pc, #152]	@ (8005e30 <prvAddNewTaskToReadyList+0xcc>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d109      	bne.n	8005db2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005d9e:	4b23      	ldr	r3, [pc, #140]	@ (8005e2c <prvAddNewTaskToReadyList+0xc8>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005da8:	429a      	cmp	r2, r3
 8005daa:	d802      	bhi.n	8005db2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005dac:	4a1f      	ldr	r2, [pc, #124]	@ (8005e2c <prvAddNewTaskToReadyList+0xc8>)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005db2:	4b20      	ldr	r3, [pc, #128]	@ (8005e34 <prvAddNewTaskToReadyList+0xd0>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	3301      	adds	r3, #1
 8005db8:	4a1e      	ldr	r2, [pc, #120]	@ (8005e34 <prvAddNewTaskToReadyList+0xd0>)
 8005dba:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005dbc:	4b1d      	ldr	r3, [pc, #116]	@ (8005e34 <prvAddNewTaskToReadyList+0xd0>)
 8005dbe:	681a      	ldr	r2, [r3, #0]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005dc8:	4b1b      	ldr	r3, [pc, #108]	@ (8005e38 <prvAddNewTaskToReadyList+0xd4>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	429a      	cmp	r2, r3
 8005dce:	d903      	bls.n	8005dd8 <prvAddNewTaskToReadyList+0x74>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dd4:	4a18      	ldr	r2, [pc, #96]	@ (8005e38 <prvAddNewTaskToReadyList+0xd4>)
 8005dd6:	6013      	str	r3, [r2, #0]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ddc:	4613      	mov	r3, r2
 8005dde:	009b      	lsls	r3, r3, #2
 8005de0:	4413      	add	r3, r2
 8005de2:	009b      	lsls	r3, r3, #2
 8005de4:	4a15      	ldr	r2, [pc, #84]	@ (8005e3c <prvAddNewTaskToReadyList+0xd8>)
 8005de6:	441a      	add	r2, r3
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	3304      	adds	r3, #4
 8005dec:	4619      	mov	r1, r3
 8005dee:	4610      	mov	r0, r2
 8005df0:	f7ff f901 	bl	8004ff6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005df4:	f001 fa72 	bl	80072dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005df8:	4b0d      	ldr	r3, [pc, #52]	@ (8005e30 <prvAddNewTaskToReadyList+0xcc>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d00e      	beq.n	8005e1e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005e00:	4b0a      	ldr	r3, [pc, #40]	@ (8005e2c <prvAddNewTaskToReadyList+0xc8>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e0a:	429a      	cmp	r2, r3
 8005e0c:	d207      	bcs.n	8005e1e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005e0e:	4b0c      	ldr	r3, [pc, #48]	@ (8005e40 <prvAddNewTaskToReadyList+0xdc>)
 8005e10:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e14:	601a      	str	r2, [r3, #0]
 8005e16:	f3bf 8f4f 	dsb	sy
 8005e1a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005e1e:	bf00      	nop
 8005e20:	3708      	adds	r7, #8
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}
 8005e26:	bf00      	nop
 8005e28:	20005284 	.word	0x20005284
 8005e2c:	20004db0 	.word	0x20004db0
 8005e30:	20005290 	.word	0x20005290
 8005e34:	200052a0 	.word	0x200052a0
 8005e38:	2000528c 	.word	0x2000528c
 8005e3c:	20004db4 	.word	0x20004db4
 8005e40:	e000ed04 	.word	0xe000ed04

08005e44 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b084      	sub	sp, #16
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d018      	beq.n	8005e88 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005e56:	4b14      	ldr	r3, [pc, #80]	@ (8005ea8 <vTaskDelay+0x64>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d00b      	beq.n	8005e76 <vTaskDelay+0x32>
	__asm volatile
 8005e5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e62:	f383 8811 	msr	BASEPRI, r3
 8005e66:	f3bf 8f6f 	isb	sy
 8005e6a:	f3bf 8f4f 	dsb	sy
 8005e6e:	60bb      	str	r3, [r7, #8]
}
 8005e70:	bf00      	nop
 8005e72:	bf00      	nop
 8005e74:	e7fd      	b.n	8005e72 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005e76:	f000 f883 	bl	8005f80 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005e7a:	2100      	movs	r1, #0
 8005e7c:	6878      	ldr	r0, [r7, #4]
 8005e7e:	f000 fd1b 	bl	80068b8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005e82:	f000 f88b 	bl	8005f9c <xTaskResumeAll>
 8005e86:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d107      	bne.n	8005e9e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005e8e:	4b07      	ldr	r3, [pc, #28]	@ (8005eac <vTaskDelay+0x68>)
 8005e90:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e94:	601a      	str	r2, [r3, #0]
 8005e96:	f3bf 8f4f 	dsb	sy
 8005e9a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005e9e:	bf00      	nop
 8005ea0:	3710      	adds	r7, #16
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}
 8005ea6:	bf00      	nop
 8005ea8:	200052ac 	.word	0x200052ac
 8005eac:	e000ed04 	.word	0xe000ed04

08005eb0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b08a      	sub	sp, #40	@ 0x28
 8005eb4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005eba:	2300      	movs	r3, #0
 8005ebc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005ebe:	463a      	mov	r2, r7
 8005ec0:	1d39      	adds	r1, r7, #4
 8005ec2:	f107 0308 	add.w	r3, r7, #8
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	f7ff f834 	bl	8004f34 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005ecc:	6839      	ldr	r1, [r7, #0]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	68ba      	ldr	r2, [r7, #8]
 8005ed2:	9202      	str	r2, [sp, #8]
 8005ed4:	9301      	str	r3, [sp, #4]
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	9300      	str	r3, [sp, #0]
 8005eda:	2300      	movs	r3, #0
 8005edc:	460a      	mov	r2, r1
 8005ede:	4922      	ldr	r1, [pc, #136]	@ (8005f68 <vTaskStartScheduler+0xb8>)
 8005ee0:	4822      	ldr	r0, [pc, #136]	@ (8005f6c <vTaskStartScheduler+0xbc>)
 8005ee2:	f7ff fe09 	bl	8005af8 <xTaskCreateStatic>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	4a21      	ldr	r2, [pc, #132]	@ (8005f70 <vTaskStartScheduler+0xc0>)
 8005eea:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005eec:	4b20      	ldr	r3, [pc, #128]	@ (8005f70 <vTaskStartScheduler+0xc0>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d002      	beq.n	8005efa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	617b      	str	r3, [r7, #20]
 8005ef8:	e001      	b.n	8005efe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005efa:	2300      	movs	r3, #0
 8005efc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	2b01      	cmp	r3, #1
 8005f02:	d102      	bne.n	8005f0a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005f04:	f000 fd2c 	bl	8006960 <xTimerCreateTimerTask>
 8005f08:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	d116      	bne.n	8005f3e <vTaskStartScheduler+0x8e>
	__asm volatile
 8005f10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f14:	f383 8811 	msr	BASEPRI, r3
 8005f18:	f3bf 8f6f 	isb	sy
 8005f1c:	f3bf 8f4f 	dsb	sy
 8005f20:	613b      	str	r3, [r7, #16]
}
 8005f22:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005f24:	4b13      	ldr	r3, [pc, #76]	@ (8005f74 <vTaskStartScheduler+0xc4>)
 8005f26:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005f2a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005f2c:	4b12      	ldr	r3, [pc, #72]	@ (8005f78 <vTaskStartScheduler+0xc8>)
 8005f2e:	2201      	movs	r2, #1
 8005f30:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005f32:	4b12      	ldr	r3, [pc, #72]	@ (8005f7c <vTaskStartScheduler+0xcc>)
 8005f34:	2200      	movs	r2, #0
 8005f36:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005f38:	f001 f8fa 	bl	8007130 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005f3c:	e00f      	b.n	8005f5e <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005f44:	d10b      	bne.n	8005f5e <vTaskStartScheduler+0xae>
	__asm volatile
 8005f46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f4a:	f383 8811 	msr	BASEPRI, r3
 8005f4e:	f3bf 8f6f 	isb	sy
 8005f52:	f3bf 8f4f 	dsb	sy
 8005f56:	60fb      	str	r3, [r7, #12]
}
 8005f58:	bf00      	nop
 8005f5a:	bf00      	nop
 8005f5c:	e7fd      	b.n	8005f5a <vTaskStartScheduler+0xaa>
}
 8005f5e:	bf00      	nop
 8005f60:	3718      	adds	r7, #24
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}
 8005f66:	bf00      	nop
 8005f68:	080119b4 	.word	0x080119b4
 8005f6c:	080065f1 	.word	0x080065f1
 8005f70:	200052a8 	.word	0x200052a8
 8005f74:	200052a4 	.word	0x200052a4
 8005f78:	20005290 	.word	0x20005290
 8005f7c:	20005288 	.word	0x20005288

08005f80 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005f80:	b480      	push	{r7}
 8005f82:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005f84:	4b04      	ldr	r3, [pc, #16]	@ (8005f98 <vTaskSuspendAll+0x18>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	3301      	adds	r3, #1
 8005f8a:	4a03      	ldr	r2, [pc, #12]	@ (8005f98 <vTaskSuspendAll+0x18>)
 8005f8c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005f8e:	bf00      	nop
 8005f90:	46bd      	mov	sp, r7
 8005f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f96:	4770      	bx	lr
 8005f98:	200052ac 	.word	0x200052ac

08005f9c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b084      	sub	sp, #16
 8005fa0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005faa:	4b42      	ldr	r3, [pc, #264]	@ (80060b4 <xTaskResumeAll+0x118>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d10b      	bne.n	8005fca <xTaskResumeAll+0x2e>
	__asm volatile
 8005fb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fb6:	f383 8811 	msr	BASEPRI, r3
 8005fba:	f3bf 8f6f 	isb	sy
 8005fbe:	f3bf 8f4f 	dsb	sy
 8005fc2:	603b      	str	r3, [r7, #0]
}
 8005fc4:	bf00      	nop
 8005fc6:	bf00      	nop
 8005fc8:	e7fd      	b.n	8005fc6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005fca:	f001 f955 	bl	8007278 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005fce:	4b39      	ldr	r3, [pc, #228]	@ (80060b4 <xTaskResumeAll+0x118>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	3b01      	subs	r3, #1
 8005fd4:	4a37      	ldr	r2, [pc, #220]	@ (80060b4 <xTaskResumeAll+0x118>)
 8005fd6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005fd8:	4b36      	ldr	r3, [pc, #216]	@ (80060b4 <xTaskResumeAll+0x118>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d162      	bne.n	80060a6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005fe0:	4b35      	ldr	r3, [pc, #212]	@ (80060b8 <xTaskResumeAll+0x11c>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d05e      	beq.n	80060a6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005fe8:	e02f      	b.n	800604a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fea:	4b34      	ldr	r3, [pc, #208]	@ (80060bc <xTaskResumeAll+0x120>)
 8005fec:	68db      	ldr	r3, [r3, #12]
 8005fee:	68db      	ldr	r3, [r3, #12]
 8005ff0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	3318      	adds	r3, #24
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	f7ff f85a 	bl	80050b0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	3304      	adds	r3, #4
 8006000:	4618      	mov	r0, r3
 8006002:	f7ff f855 	bl	80050b0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800600a:	4b2d      	ldr	r3, [pc, #180]	@ (80060c0 <xTaskResumeAll+0x124>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	429a      	cmp	r2, r3
 8006010:	d903      	bls.n	800601a <xTaskResumeAll+0x7e>
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006016:	4a2a      	ldr	r2, [pc, #168]	@ (80060c0 <xTaskResumeAll+0x124>)
 8006018:	6013      	str	r3, [r2, #0]
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800601e:	4613      	mov	r3, r2
 8006020:	009b      	lsls	r3, r3, #2
 8006022:	4413      	add	r3, r2
 8006024:	009b      	lsls	r3, r3, #2
 8006026:	4a27      	ldr	r2, [pc, #156]	@ (80060c4 <xTaskResumeAll+0x128>)
 8006028:	441a      	add	r2, r3
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	3304      	adds	r3, #4
 800602e:	4619      	mov	r1, r3
 8006030:	4610      	mov	r0, r2
 8006032:	f7fe ffe0 	bl	8004ff6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800603a:	4b23      	ldr	r3, [pc, #140]	@ (80060c8 <xTaskResumeAll+0x12c>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006040:	429a      	cmp	r2, r3
 8006042:	d302      	bcc.n	800604a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006044:	4b21      	ldr	r3, [pc, #132]	@ (80060cc <xTaskResumeAll+0x130>)
 8006046:	2201      	movs	r2, #1
 8006048:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800604a:	4b1c      	ldr	r3, [pc, #112]	@ (80060bc <xTaskResumeAll+0x120>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d1cb      	bne.n	8005fea <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d001      	beq.n	800605c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006058:	f000 fb80 	bl	800675c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800605c:	4b1c      	ldr	r3, [pc, #112]	@ (80060d0 <xTaskResumeAll+0x134>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d010      	beq.n	800608a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006068:	f000 f846 	bl	80060f8 <xTaskIncrementTick>
 800606c:	4603      	mov	r3, r0
 800606e:	2b00      	cmp	r3, #0
 8006070:	d002      	beq.n	8006078 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8006072:	4b16      	ldr	r3, [pc, #88]	@ (80060cc <xTaskResumeAll+0x130>)
 8006074:	2201      	movs	r2, #1
 8006076:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	3b01      	subs	r3, #1
 800607c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d1f1      	bne.n	8006068 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8006084:	4b12      	ldr	r3, [pc, #72]	@ (80060d0 <xTaskResumeAll+0x134>)
 8006086:	2200      	movs	r2, #0
 8006088:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800608a:	4b10      	ldr	r3, [pc, #64]	@ (80060cc <xTaskResumeAll+0x130>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d009      	beq.n	80060a6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006092:	2301      	movs	r3, #1
 8006094:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006096:	4b0f      	ldr	r3, [pc, #60]	@ (80060d4 <xTaskResumeAll+0x138>)
 8006098:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800609c:	601a      	str	r2, [r3, #0]
 800609e:	f3bf 8f4f 	dsb	sy
 80060a2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80060a6:	f001 f919 	bl	80072dc <vPortExitCritical>

	return xAlreadyYielded;
 80060aa:	68bb      	ldr	r3, [r7, #8]
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	3710      	adds	r7, #16
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}
 80060b4:	200052ac 	.word	0x200052ac
 80060b8:	20005284 	.word	0x20005284
 80060bc:	20005244 	.word	0x20005244
 80060c0:	2000528c 	.word	0x2000528c
 80060c4:	20004db4 	.word	0x20004db4
 80060c8:	20004db0 	.word	0x20004db0
 80060cc:	20005298 	.word	0x20005298
 80060d0:	20005294 	.word	0x20005294
 80060d4:	e000ed04 	.word	0xe000ed04

080060d8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80060d8:	b480      	push	{r7}
 80060da:	b083      	sub	sp, #12
 80060dc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80060de:	4b05      	ldr	r3, [pc, #20]	@ (80060f4 <xTaskGetTickCount+0x1c>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80060e4:	687b      	ldr	r3, [r7, #4]
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	370c      	adds	r7, #12
 80060ea:	46bd      	mov	sp, r7
 80060ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f0:	4770      	bx	lr
 80060f2:	bf00      	nop
 80060f4:	20005288 	.word	0x20005288

080060f8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b086      	sub	sp, #24
 80060fc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80060fe:	2300      	movs	r3, #0
 8006100:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006102:	4b4f      	ldr	r3, [pc, #316]	@ (8006240 <xTaskIncrementTick+0x148>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	2b00      	cmp	r3, #0
 8006108:	f040 8090 	bne.w	800622c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800610c:	4b4d      	ldr	r3, [pc, #308]	@ (8006244 <xTaskIncrementTick+0x14c>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	3301      	adds	r3, #1
 8006112:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006114:	4a4b      	ldr	r2, [pc, #300]	@ (8006244 <xTaskIncrementTick+0x14c>)
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d121      	bne.n	8006164 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006120:	4b49      	ldr	r3, [pc, #292]	@ (8006248 <xTaskIncrementTick+0x150>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d00b      	beq.n	8006142 <xTaskIncrementTick+0x4a>
	__asm volatile
 800612a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800612e:	f383 8811 	msr	BASEPRI, r3
 8006132:	f3bf 8f6f 	isb	sy
 8006136:	f3bf 8f4f 	dsb	sy
 800613a:	603b      	str	r3, [r7, #0]
}
 800613c:	bf00      	nop
 800613e:	bf00      	nop
 8006140:	e7fd      	b.n	800613e <xTaskIncrementTick+0x46>
 8006142:	4b41      	ldr	r3, [pc, #260]	@ (8006248 <xTaskIncrementTick+0x150>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	60fb      	str	r3, [r7, #12]
 8006148:	4b40      	ldr	r3, [pc, #256]	@ (800624c <xTaskIncrementTick+0x154>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a3e      	ldr	r2, [pc, #248]	@ (8006248 <xTaskIncrementTick+0x150>)
 800614e:	6013      	str	r3, [r2, #0]
 8006150:	4a3e      	ldr	r2, [pc, #248]	@ (800624c <xTaskIncrementTick+0x154>)
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	6013      	str	r3, [r2, #0]
 8006156:	4b3e      	ldr	r3, [pc, #248]	@ (8006250 <xTaskIncrementTick+0x158>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	3301      	adds	r3, #1
 800615c:	4a3c      	ldr	r2, [pc, #240]	@ (8006250 <xTaskIncrementTick+0x158>)
 800615e:	6013      	str	r3, [r2, #0]
 8006160:	f000 fafc 	bl	800675c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006164:	4b3b      	ldr	r3, [pc, #236]	@ (8006254 <xTaskIncrementTick+0x15c>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	693a      	ldr	r2, [r7, #16]
 800616a:	429a      	cmp	r2, r3
 800616c:	d349      	bcc.n	8006202 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800616e:	4b36      	ldr	r3, [pc, #216]	@ (8006248 <xTaskIncrementTick+0x150>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d104      	bne.n	8006182 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006178:	4b36      	ldr	r3, [pc, #216]	@ (8006254 <xTaskIncrementTick+0x15c>)
 800617a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800617e:	601a      	str	r2, [r3, #0]
					break;
 8006180:	e03f      	b.n	8006202 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006182:	4b31      	ldr	r3, [pc, #196]	@ (8006248 <xTaskIncrementTick+0x150>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	68db      	ldr	r3, [r3, #12]
 8006188:	68db      	ldr	r3, [r3, #12]
 800618a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006192:	693a      	ldr	r2, [r7, #16]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	429a      	cmp	r2, r3
 8006198:	d203      	bcs.n	80061a2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800619a:	4a2e      	ldr	r2, [pc, #184]	@ (8006254 <xTaskIncrementTick+0x15c>)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80061a0:	e02f      	b.n	8006202 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	3304      	adds	r3, #4
 80061a6:	4618      	mov	r0, r3
 80061a8:	f7fe ff82 	bl	80050b0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d004      	beq.n	80061be <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	3318      	adds	r3, #24
 80061b8:	4618      	mov	r0, r3
 80061ba:	f7fe ff79 	bl	80050b0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061c2:	4b25      	ldr	r3, [pc, #148]	@ (8006258 <xTaskIncrementTick+0x160>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	429a      	cmp	r2, r3
 80061c8:	d903      	bls.n	80061d2 <xTaskIncrementTick+0xda>
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061ce:	4a22      	ldr	r2, [pc, #136]	@ (8006258 <xTaskIncrementTick+0x160>)
 80061d0:	6013      	str	r3, [r2, #0]
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061d6:	4613      	mov	r3, r2
 80061d8:	009b      	lsls	r3, r3, #2
 80061da:	4413      	add	r3, r2
 80061dc:	009b      	lsls	r3, r3, #2
 80061de:	4a1f      	ldr	r2, [pc, #124]	@ (800625c <xTaskIncrementTick+0x164>)
 80061e0:	441a      	add	r2, r3
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	3304      	adds	r3, #4
 80061e6:	4619      	mov	r1, r3
 80061e8:	4610      	mov	r0, r2
 80061ea:	f7fe ff04 	bl	8004ff6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061f2:	4b1b      	ldr	r3, [pc, #108]	@ (8006260 <xTaskIncrementTick+0x168>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061f8:	429a      	cmp	r2, r3
 80061fa:	d3b8      	bcc.n	800616e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80061fc:	2301      	movs	r3, #1
 80061fe:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006200:	e7b5      	b.n	800616e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006202:	4b17      	ldr	r3, [pc, #92]	@ (8006260 <xTaskIncrementTick+0x168>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006208:	4914      	ldr	r1, [pc, #80]	@ (800625c <xTaskIncrementTick+0x164>)
 800620a:	4613      	mov	r3, r2
 800620c:	009b      	lsls	r3, r3, #2
 800620e:	4413      	add	r3, r2
 8006210:	009b      	lsls	r3, r3, #2
 8006212:	440b      	add	r3, r1
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	2b01      	cmp	r3, #1
 8006218:	d901      	bls.n	800621e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800621a:	2301      	movs	r3, #1
 800621c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800621e:	4b11      	ldr	r3, [pc, #68]	@ (8006264 <xTaskIncrementTick+0x16c>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d007      	beq.n	8006236 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8006226:	2301      	movs	r3, #1
 8006228:	617b      	str	r3, [r7, #20]
 800622a:	e004      	b.n	8006236 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800622c:	4b0e      	ldr	r3, [pc, #56]	@ (8006268 <xTaskIncrementTick+0x170>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	3301      	adds	r3, #1
 8006232:	4a0d      	ldr	r2, [pc, #52]	@ (8006268 <xTaskIncrementTick+0x170>)
 8006234:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006236:	697b      	ldr	r3, [r7, #20]
}
 8006238:	4618      	mov	r0, r3
 800623a:	3718      	adds	r7, #24
 800623c:	46bd      	mov	sp, r7
 800623e:	bd80      	pop	{r7, pc}
 8006240:	200052ac 	.word	0x200052ac
 8006244:	20005288 	.word	0x20005288
 8006248:	2000523c 	.word	0x2000523c
 800624c:	20005240 	.word	0x20005240
 8006250:	2000529c 	.word	0x2000529c
 8006254:	200052a4 	.word	0x200052a4
 8006258:	2000528c 	.word	0x2000528c
 800625c:	20004db4 	.word	0x20004db4
 8006260:	20004db0 	.word	0x20004db0
 8006264:	20005298 	.word	0x20005298
 8006268:	20005294 	.word	0x20005294

0800626c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800626c:	b480      	push	{r7}
 800626e:	b085      	sub	sp, #20
 8006270:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006272:	4b28      	ldr	r3, [pc, #160]	@ (8006314 <vTaskSwitchContext+0xa8>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d003      	beq.n	8006282 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800627a:	4b27      	ldr	r3, [pc, #156]	@ (8006318 <vTaskSwitchContext+0xac>)
 800627c:	2201      	movs	r2, #1
 800627e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006280:	e042      	b.n	8006308 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8006282:	4b25      	ldr	r3, [pc, #148]	@ (8006318 <vTaskSwitchContext+0xac>)
 8006284:	2200      	movs	r2, #0
 8006286:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006288:	4b24      	ldr	r3, [pc, #144]	@ (800631c <vTaskSwitchContext+0xb0>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	60fb      	str	r3, [r7, #12]
 800628e:	e011      	b.n	80062b4 <vTaskSwitchContext+0x48>
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d10b      	bne.n	80062ae <vTaskSwitchContext+0x42>
	__asm volatile
 8006296:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800629a:	f383 8811 	msr	BASEPRI, r3
 800629e:	f3bf 8f6f 	isb	sy
 80062a2:	f3bf 8f4f 	dsb	sy
 80062a6:	607b      	str	r3, [r7, #4]
}
 80062a8:	bf00      	nop
 80062aa:	bf00      	nop
 80062ac:	e7fd      	b.n	80062aa <vTaskSwitchContext+0x3e>
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	3b01      	subs	r3, #1
 80062b2:	60fb      	str	r3, [r7, #12]
 80062b4:	491a      	ldr	r1, [pc, #104]	@ (8006320 <vTaskSwitchContext+0xb4>)
 80062b6:	68fa      	ldr	r2, [r7, #12]
 80062b8:	4613      	mov	r3, r2
 80062ba:	009b      	lsls	r3, r3, #2
 80062bc:	4413      	add	r3, r2
 80062be:	009b      	lsls	r3, r3, #2
 80062c0:	440b      	add	r3, r1
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d0e3      	beq.n	8006290 <vTaskSwitchContext+0x24>
 80062c8:	68fa      	ldr	r2, [r7, #12]
 80062ca:	4613      	mov	r3, r2
 80062cc:	009b      	lsls	r3, r3, #2
 80062ce:	4413      	add	r3, r2
 80062d0:	009b      	lsls	r3, r3, #2
 80062d2:	4a13      	ldr	r2, [pc, #76]	@ (8006320 <vTaskSwitchContext+0xb4>)
 80062d4:	4413      	add	r3, r2
 80062d6:	60bb      	str	r3, [r7, #8]
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	685a      	ldr	r2, [r3, #4]
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	605a      	str	r2, [r3, #4]
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	685a      	ldr	r2, [r3, #4]
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	3308      	adds	r3, #8
 80062ea:	429a      	cmp	r2, r3
 80062ec:	d104      	bne.n	80062f8 <vTaskSwitchContext+0x8c>
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	685a      	ldr	r2, [r3, #4]
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	605a      	str	r2, [r3, #4]
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	685b      	ldr	r3, [r3, #4]
 80062fc:	68db      	ldr	r3, [r3, #12]
 80062fe:	4a09      	ldr	r2, [pc, #36]	@ (8006324 <vTaskSwitchContext+0xb8>)
 8006300:	6013      	str	r3, [r2, #0]
 8006302:	4a06      	ldr	r2, [pc, #24]	@ (800631c <vTaskSwitchContext+0xb0>)
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	6013      	str	r3, [r2, #0]
}
 8006308:	bf00      	nop
 800630a:	3714      	adds	r7, #20
 800630c:	46bd      	mov	sp, r7
 800630e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006312:	4770      	bx	lr
 8006314:	200052ac 	.word	0x200052ac
 8006318:	20005298 	.word	0x20005298
 800631c:	2000528c 	.word	0x2000528c
 8006320:	20004db4 	.word	0x20004db4
 8006324:	20004db0 	.word	0x20004db0

08006328 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b084      	sub	sp, #16
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
 8006330:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d10b      	bne.n	8006350 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006338:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800633c:	f383 8811 	msr	BASEPRI, r3
 8006340:	f3bf 8f6f 	isb	sy
 8006344:	f3bf 8f4f 	dsb	sy
 8006348:	60fb      	str	r3, [r7, #12]
}
 800634a:	bf00      	nop
 800634c:	bf00      	nop
 800634e:	e7fd      	b.n	800634c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006350:	4b07      	ldr	r3, [pc, #28]	@ (8006370 <vTaskPlaceOnEventList+0x48>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	3318      	adds	r3, #24
 8006356:	4619      	mov	r1, r3
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f7fe fe70 	bl	800503e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800635e:	2101      	movs	r1, #1
 8006360:	6838      	ldr	r0, [r7, #0]
 8006362:	f000 faa9 	bl	80068b8 <prvAddCurrentTaskToDelayedList>
}
 8006366:	bf00      	nop
 8006368:	3710      	adds	r7, #16
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}
 800636e:	bf00      	nop
 8006370:	20004db0 	.word	0x20004db0

08006374 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006374:	b580      	push	{r7, lr}
 8006376:	b086      	sub	sp, #24
 8006378:	af00      	add	r7, sp, #0
 800637a:	60f8      	str	r0, [r7, #12]
 800637c:	60b9      	str	r1, [r7, #8]
 800637e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d10b      	bne.n	800639e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8006386:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800638a:	f383 8811 	msr	BASEPRI, r3
 800638e:	f3bf 8f6f 	isb	sy
 8006392:	f3bf 8f4f 	dsb	sy
 8006396:	617b      	str	r3, [r7, #20]
}
 8006398:	bf00      	nop
 800639a:	bf00      	nop
 800639c:	e7fd      	b.n	800639a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800639e:	4b0a      	ldr	r3, [pc, #40]	@ (80063c8 <vTaskPlaceOnEventListRestricted+0x54>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	3318      	adds	r3, #24
 80063a4:	4619      	mov	r1, r3
 80063a6:	68f8      	ldr	r0, [r7, #12]
 80063a8:	f7fe fe25 	bl	8004ff6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d002      	beq.n	80063b8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80063b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80063b6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80063b8:	6879      	ldr	r1, [r7, #4]
 80063ba:	68b8      	ldr	r0, [r7, #8]
 80063bc:	f000 fa7c 	bl	80068b8 <prvAddCurrentTaskToDelayedList>
	}
 80063c0:	bf00      	nop
 80063c2:	3718      	adds	r7, #24
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bd80      	pop	{r7, pc}
 80063c8:	20004db0 	.word	0x20004db0

080063cc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b086      	sub	sp, #24
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	68db      	ldr	r3, [r3, #12]
 80063d8:	68db      	ldr	r3, [r3, #12]
 80063da:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80063dc:	693b      	ldr	r3, [r7, #16]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d10b      	bne.n	80063fa <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80063e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063e6:	f383 8811 	msr	BASEPRI, r3
 80063ea:	f3bf 8f6f 	isb	sy
 80063ee:	f3bf 8f4f 	dsb	sy
 80063f2:	60fb      	str	r3, [r7, #12]
}
 80063f4:	bf00      	nop
 80063f6:	bf00      	nop
 80063f8:	e7fd      	b.n	80063f6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	3318      	adds	r3, #24
 80063fe:	4618      	mov	r0, r3
 8006400:	f7fe fe56 	bl	80050b0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006404:	4b1d      	ldr	r3, [pc, #116]	@ (800647c <xTaskRemoveFromEventList+0xb0>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d11d      	bne.n	8006448 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800640c:	693b      	ldr	r3, [r7, #16]
 800640e:	3304      	adds	r3, #4
 8006410:	4618      	mov	r0, r3
 8006412:	f7fe fe4d 	bl	80050b0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800641a:	4b19      	ldr	r3, [pc, #100]	@ (8006480 <xTaskRemoveFromEventList+0xb4>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	429a      	cmp	r2, r3
 8006420:	d903      	bls.n	800642a <xTaskRemoveFromEventList+0x5e>
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006426:	4a16      	ldr	r2, [pc, #88]	@ (8006480 <xTaskRemoveFromEventList+0xb4>)
 8006428:	6013      	str	r3, [r2, #0]
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800642e:	4613      	mov	r3, r2
 8006430:	009b      	lsls	r3, r3, #2
 8006432:	4413      	add	r3, r2
 8006434:	009b      	lsls	r3, r3, #2
 8006436:	4a13      	ldr	r2, [pc, #76]	@ (8006484 <xTaskRemoveFromEventList+0xb8>)
 8006438:	441a      	add	r2, r3
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	3304      	adds	r3, #4
 800643e:	4619      	mov	r1, r3
 8006440:	4610      	mov	r0, r2
 8006442:	f7fe fdd8 	bl	8004ff6 <vListInsertEnd>
 8006446:	e005      	b.n	8006454 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006448:	693b      	ldr	r3, [r7, #16]
 800644a:	3318      	adds	r3, #24
 800644c:	4619      	mov	r1, r3
 800644e:	480e      	ldr	r0, [pc, #56]	@ (8006488 <xTaskRemoveFromEventList+0xbc>)
 8006450:	f7fe fdd1 	bl	8004ff6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006454:	693b      	ldr	r3, [r7, #16]
 8006456:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006458:	4b0c      	ldr	r3, [pc, #48]	@ (800648c <xTaskRemoveFromEventList+0xc0>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800645e:	429a      	cmp	r2, r3
 8006460:	d905      	bls.n	800646e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006462:	2301      	movs	r3, #1
 8006464:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006466:	4b0a      	ldr	r3, [pc, #40]	@ (8006490 <xTaskRemoveFromEventList+0xc4>)
 8006468:	2201      	movs	r2, #1
 800646a:	601a      	str	r2, [r3, #0]
 800646c:	e001      	b.n	8006472 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800646e:	2300      	movs	r3, #0
 8006470:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006472:	697b      	ldr	r3, [r7, #20]
}
 8006474:	4618      	mov	r0, r3
 8006476:	3718      	adds	r7, #24
 8006478:	46bd      	mov	sp, r7
 800647a:	bd80      	pop	{r7, pc}
 800647c:	200052ac 	.word	0x200052ac
 8006480:	2000528c 	.word	0x2000528c
 8006484:	20004db4 	.word	0x20004db4
 8006488:	20005244 	.word	0x20005244
 800648c:	20004db0 	.word	0x20004db0
 8006490:	20005298 	.word	0x20005298

08006494 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b084      	sub	sp, #16
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d10b      	bne.n	80064ba <vTaskSetTimeOutState+0x26>
	__asm volatile
 80064a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064a6:	f383 8811 	msr	BASEPRI, r3
 80064aa:	f3bf 8f6f 	isb	sy
 80064ae:	f3bf 8f4f 	dsb	sy
 80064b2:	60fb      	str	r3, [r7, #12]
}
 80064b4:	bf00      	nop
 80064b6:	bf00      	nop
 80064b8:	e7fd      	b.n	80064b6 <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 80064ba:	f000 fedd 	bl	8007278 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 80064be:	4b07      	ldr	r3, [pc, #28]	@ (80064dc <vTaskSetTimeOutState+0x48>)
 80064c0:	681a      	ldr	r2, [r3, #0]
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 80064c6:	4b06      	ldr	r3, [pc, #24]	@ (80064e0 <vTaskSetTimeOutState+0x4c>)
 80064c8:	681a      	ldr	r2, [r3, #0]
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 80064ce:	f000 ff05 	bl	80072dc <vPortExitCritical>
}
 80064d2:	bf00      	nop
 80064d4:	3710      	adds	r7, #16
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bd80      	pop	{r7, pc}
 80064da:	bf00      	nop
 80064dc:	2000529c 	.word	0x2000529c
 80064e0:	20005288 	.word	0x20005288

080064e4 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80064e4:	b480      	push	{r7}
 80064e6:	b083      	sub	sp, #12
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80064ec:	4b06      	ldr	r3, [pc, #24]	@ (8006508 <vTaskInternalSetTimeOutState+0x24>)
 80064ee:	681a      	ldr	r2, [r3, #0]
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80064f4:	4b05      	ldr	r3, [pc, #20]	@ (800650c <vTaskInternalSetTimeOutState+0x28>)
 80064f6:	681a      	ldr	r2, [r3, #0]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	605a      	str	r2, [r3, #4]
}
 80064fc:	bf00      	nop
 80064fe:	370c      	adds	r7, #12
 8006500:	46bd      	mov	sp, r7
 8006502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006506:	4770      	bx	lr
 8006508:	2000529c 	.word	0x2000529c
 800650c:	20005288 	.word	0x20005288

08006510 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b088      	sub	sp, #32
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
 8006518:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d10b      	bne.n	8006538 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006520:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006524:	f383 8811 	msr	BASEPRI, r3
 8006528:	f3bf 8f6f 	isb	sy
 800652c:	f3bf 8f4f 	dsb	sy
 8006530:	613b      	str	r3, [r7, #16]
}
 8006532:	bf00      	nop
 8006534:	bf00      	nop
 8006536:	e7fd      	b.n	8006534 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d10b      	bne.n	8006556 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800653e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006542:	f383 8811 	msr	BASEPRI, r3
 8006546:	f3bf 8f6f 	isb	sy
 800654a:	f3bf 8f4f 	dsb	sy
 800654e:	60fb      	str	r3, [r7, #12]
}
 8006550:	bf00      	nop
 8006552:	bf00      	nop
 8006554:	e7fd      	b.n	8006552 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8006556:	f000 fe8f 	bl	8007278 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800655a:	4b1d      	ldr	r3, [pc, #116]	@ (80065d0 <xTaskCheckForTimeOut+0xc0>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	69ba      	ldr	r2, [r7, #24]
 8006566:	1ad3      	subs	r3, r2, r3
 8006568:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006572:	d102      	bne.n	800657a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006574:	2300      	movs	r3, #0
 8006576:	61fb      	str	r3, [r7, #28]
 8006578:	e023      	b.n	80065c2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681a      	ldr	r2, [r3, #0]
 800657e:	4b15      	ldr	r3, [pc, #84]	@ (80065d4 <xTaskCheckForTimeOut+0xc4>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	429a      	cmp	r2, r3
 8006584:	d007      	beq.n	8006596 <xTaskCheckForTimeOut+0x86>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	69ba      	ldr	r2, [r7, #24]
 800658c:	429a      	cmp	r2, r3
 800658e:	d302      	bcc.n	8006596 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006590:	2301      	movs	r3, #1
 8006592:	61fb      	str	r3, [r7, #28]
 8006594:	e015      	b.n	80065c2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	697a      	ldr	r2, [r7, #20]
 800659c:	429a      	cmp	r2, r3
 800659e:	d20b      	bcs.n	80065b8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	681a      	ldr	r2, [r3, #0]
 80065a4:	697b      	ldr	r3, [r7, #20]
 80065a6:	1ad2      	subs	r2, r2, r3
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f7ff ff99 	bl	80064e4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80065b2:	2300      	movs	r3, #0
 80065b4:	61fb      	str	r3, [r7, #28]
 80065b6:	e004      	b.n	80065c2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	2200      	movs	r2, #0
 80065bc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80065be:	2301      	movs	r3, #1
 80065c0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80065c2:	f000 fe8b 	bl	80072dc <vPortExitCritical>

	return xReturn;
 80065c6:	69fb      	ldr	r3, [r7, #28]
}
 80065c8:	4618      	mov	r0, r3
 80065ca:	3720      	adds	r7, #32
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bd80      	pop	{r7, pc}
 80065d0:	20005288 	.word	0x20005288
 80065d4:	2000529c 	.word	0x2000529c

080065d8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80065d8:	b480      	push	{r7}
 80065da:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80065dc:	4b03      	ldr	r3, [pc, #12]	@ (80065ec <vTaskMissedYield+0x14>)
 80065de:	2201      	movs	r2, #1
 80065e0:	601a      	str	r2, [r3, #0]
}
 80065e2:	bf00      	nop
 80065e4:	46bd      	mov	sp, r7
 80065e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ea:	4770      	bx	lr
 80065ec:	20005298 	.word	0x20005298

080065f0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b082      	sub	sp, #8
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80065f8:	f000 f852 	bl	80066a0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80065fc:	4b06      	ldr	r3, [pc, #24]	@ (8006618 <prvIdleTask+0x28>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	2b01      	cmp	r3, #1
 8006602:	d9f9      	bls.n	80065f8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006604:	4b05      	ldr	r3, [pc, #20]	@ (800661c <prvIdleTask+0x2c>)
 8006606:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800660a:	601a      	str	r2, [r3, #0]
 800660c:	f3bf 8f4f 	dsb	sy
 8006610:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006614:	e7f0      	b.n	80065f8 <prvIdleTask+0x8>
 8006616:	bf00      	nop
 8006618:	20004db4 	.word	0x20004db4
 800661c:	e000ed04 	.word	0xe000ed04

08006620 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b082      	sub	sp, #8
 8006624:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006626:	2300      	movs	r3, #0
 8006628:	607b      	str	r3, [r7, #4]
 800662a:	e00c      	b.n	8006646 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800662c:	687a      	ldr	r2, [r7, #4]
 800662e:	4613      	mov	r3, r2
 8006630:	009b      	lsls	r3, r3, #2
 8006632:	4413      	add	r3, r2
 8006634:	009b      	lsls	r3, r3, #2
 8006636:	4a12      	ldr	r2, [pc, #72]	@ (8006680 <prvInitialiseTaskLists+0x60>)
 8006638:	4413      	add	r3, r2
 800663a:	4618      	mov	r0, r3
 800663c:	f7fe fcae 	bl	8004f9c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	3301      	adds	r3, #1
 8006644:	607b      	str	r3, [r7, #4]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2b37      	cmp	r3, #55	@ 0x37
 800664a:	d9ef      	bls.n	800662c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800664c:	480d      	ldr	r0, [pc, #52]	@ (8006684 <prvInitialiseTaskLists+0x64>)
 800664e:	f7fe fca5 	bl	8004f9c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006652:	480d      	ldr	r0, [pc, #52]	@ (8006688 <prvInitialiseTaskLists+0x68>)
 8006654:	f7fe fca2 	bl	8004f9c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006658:	480c      	ldr	r0, [pc, #48]	@ (800668c <prvInitialiseTaskLists+0x6c>)
 800665a:	f7fe fc9f 	bl	8004f9c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800665e:	480c      	ldr	r0, [pc, #48]	@ (8006690 <prvInitialiseTaskLists+0x70>)
 8006660:	f7fe fc9c 	bl	8004f9c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006664:	480b      	ldr	r0, [pc, #44]	@ (8006694 <prvInitialiseTaskLists+0x74>)
 8006666:	f7fe fc99 	bl	8004f9c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800666a:	4b0b      	ldr	r3, [pc, #44]	@ (8006698 <prvInitialiseTaskLists+0x78>)
 800666c:	4a05      	ldr	r2, [pc, #20]	@ (8006684 <prvInitialiseTaskLists+0x64>)
 800666e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006670:	4b0a      	ldr	r3, [pc, #40]	@ (800669c <prvInitialiseTaskLists+0x7c>)
 8006672:	4a05      	ldr	r2, [pc, #20]	@ (8006688 <prvInitialiseTaskLists+0x68>)
 8006674:	601a      	str	r2, [r3, #0]
}
 8006676:	bf00      	nop
 8006678:	3708      	adds	r7, #8
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}
 800667e:	bf00      	nop
 8006680:	20004db4 	.word	0x20004db4
 8006684:	20005214 	.word	0x20005214
 8006688:	20005228 	.word	0x20005228
 800668c:	20005244 	.word	0x20005244
 8006690:	20005258 	.word	0x20005258
 8006694:	20005270 	.word	0x20005270
 8006698:	2000523c 	.word	0x2000523c
 800669c:	20005240 	.word	0x20005240

080066a0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b082      	sub	sp, #8
 80066a4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80066a6:	e019      	b.n	80066dc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80066a8:	f000 fde6 	bl	8007278 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066ac:	4b10      	ldr	r3, [pc, #64]	@ (80066f0 <prvCheckTasksWaitingTermination+0x50>)
 80066ae:	68db      	ldr	r3, [r3, #12]
 80066b0:	68db      	ldr	r3, [r3, #12]
 80066b2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	3304      	adds	r3, #4
 80066b8:	4618      	mov	r0, r3
 80066ba:	f7fe fcf9 	bl	80050b0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80066be:	4b0d      	ldr	r3, [pc, #52]	@ (80066f4 <prvCheckTasksWaitingTermination+0x54>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	3b01      	subs	r3, #1
 80066c4:	4a0b      	ldr	r2, [pc, #44]	@ (80066f4 <prvCheckTasksWaitingTermination+0x54>)
 80066c6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80066c8:	4b0b      	ldr	r3, [pc, #44]	@ (80066f8 <prvCheckTasksWaitingTermination+0x58>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	3b01      	subs	r3, #1
 80066ce:	4a0a      	ldr	r2, [pc, #40]	@ (80066f8 <prvCheckTasksWaitingTermination+0x58>)
 80066d0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80066d2:	f000 fe03 	bl	80072dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f000 f810 	bl	80066fc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80066dc:	4b06      	ldr	r3, [pc, #24]	@ (80066f8 <prvCheckTasksWaitingTermination+0x58>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d1e1      	bne.n	80066a8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80066e4:	bf00      	nop
 80066e6:	bf00      	nop
 80066e8:	3708      	adds	r7, #8
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd80      	pop	{r7, pc}
 80066ee:	bf00      	nop
 80066f0:	20005258 	.word	0x20005258
 80066f4:	20005284 	.word	0x20005284
 80066f8:	2000526c 	.word	0x2000526c

080066fc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b084      	sub	sp, #16
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800670a:	2b00      	cmp	r3, #0
 800670c:	d108      	bne.n	8006720 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006712:	4618      	mov	r0, r3
 8006714:	f000 ffa0 	bl	8007658 <vPortFree>
				vPortFree( pxTCB );
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f000 ff9d 	bl	8007658 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800671e:	e019      	b.n	8006754 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006726:	2b01      	cmp	r3, #1
 8006728:	d103      	bne.n	8006732 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f000 ff94 	bl	8007658 <vPortFree>
	}
 8006730:	e010      	b.n	8006754 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006738:	2b02      	cmp	r3, #2
 800673a:	d00b      	beq.n	8006754 <prvDeleteTCB+0x58>
	__asm volatile
 800673c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006740:	f383 8811 	msr	BASEPRI, r3
 8006744:	f3bf 8f6f 	isb	sy
 8006748:	f3bf 8f4f 	dsb	sy
 800674c:	60fb      	str	r3, [r7, #12]
}
 800674e:	bf00      	nop
 8006750:	bf00      	nop
 8006752:	e7fd      	b.n	8006750 <prvDeleteTCB+0x54>
	}
 8006754:	bf00      	nop
 8006756:	3710      	adds	r7, #16
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}

0800675c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800675c:	b480      	push	{r7}
 800675e:	b083      	sub	sp, #12
 8006760:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006762:	4b0c      	ldr	r3, [pc, #48]	@ (8006794 <prvResetNextTaskUnblockTime+0x38>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d104      	bne.n	8006776 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800676c:	4b0a      	ldr	r3, [pc, #40]	@ (8006798 <prvResetNextTaskUnblockTime+0x3c>)
 800676e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006772:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006774:	e008      	b.n	8006788 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006776:	4b07      	ldr	r3, [pc, #28]	@ (8006794 <prvResetNextTaskUnblockTime+0x38>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	68db      	ldr	r3, [r3, #12]
 800677c:	68db      	ldr	r3, [r3, #12]
 800677e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	4a04      	ldr	r2, [pc, #16]	@ (8006798 <prvResetNextTaskUnblockTime+0x3c>)
 8006786:	6013      	str	r3, [r2, #0]
}
 8006788:	bf00      	nop
 800678a:	370c      	adds	r7, #12
 800678c:	46bd      	mov	sp, r7
 800678e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006792:	4770      	bx	lr
 8006794:	2000523c 	.word	0x2000523c
 8006798:	200052a4 	.word	0x200052a4

0800679c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800679c:	b480      	push	{r7}
 800679e:	b083      	sub	sp, #12
 80067a0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80067a2:	4b0b      	ldr	r3, [pc, #44]	@ (80067d0 <xTaskGetSchedulerState+0x34>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d102      	bne.n	80067b0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80067aa:	2301      	movs	r3, #1
 80067ac:	607b      	str	r3, [r7, #4]
 80067ae:	e008      	b.n	80067c2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80067b0:	4b08      	ldr	r3, [pc, #32]	@ (80067d4 <xTaskGetSchedulerState+0x38>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d102      	bne.n	80067be <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80067b8:	2302      	movs	r3, #2
 80067ba:	607b      	str	r3, [r7, #4]
 80067bc:	e001      	b.n	80067c2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80067be:	2300      	movs	r3, #0
 80067c0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80067c2:	687b      	ldr	r3, [r7, #4]
	}
 80067c4:	4618      	mov	r0, r3
 80067c6:	370c      	adds	r7, #12
 80067c8:	46bd      	mov	sp, r7
 80067ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ce:	4770      	bx	lr
 80067d0:	20005290 	.word	0x20005290
 80067d4:	200052ac 	.word	0x200052ac

080067d8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b086      	sub	sp, #24
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80067e4:	2300      	movs	r3, #0
 80067e6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d058      	beq.n	80068a0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80067ee:	4b2f      	ldr	r3, [pc, #188]	@ (80068ac <xTaskPriorityDisinherit+0xd4>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	693a      	ldr	r2, [r7, #16]
 80067f4:	429a      	cmp	r2, r3
 80067f6:	d00b      	beq.n	8006810 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80067f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067fc:	f383 8811 	msr	BASEPRI, r3
 8006800:	f3bf 8f6f 	isb	sy
 8006804:	f3bf 8f4f 	dsb	sy
 8006808:	60fb      	str	r3, [r7, #12]
}
 800680a:	bf00      	nop
 800680c:	bf00      	nop
 800680e:	e7fd      	b.n	800680c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006810:	693b      	ldr	r3, [r7, #16]
 8006812:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006814:	2b00      	cmp	r3, #0
 8006816:	d10b      	bne.n	8006830 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006818:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800681c:	f383 8811 	msr	BASEPRI, r3
 8006820:	f3bf 8f6f 	isb	sy
 8006824:	f3bf 8f4f 	dsb	sy
 8006828:	60bb      	str	r3, [r7, #8]
}
 800682a:	bf00      	nop
 800682c:	bf00      	nop
 800682e:	e7fd      	b.n	800682c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006830:	693b      	ldr	r3, [r7, #16]
 8006832:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006834:	1e5a      	subs	r2, r3, #1
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006842:	429a      	cmp	r2, r3
 8006844:	d02c      	beq.n	80068a0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006846:	693b      	ldr	r3, [r7, #16]
 8006848:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800684a:	2b00      	cmp	r3, #0
 800684c:	d128      	bne.n	80068a0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	3304      	adds	r3, #4
 8006852:	4618      	mov	r0, r3
 8006854:	f7fe fc2c 	bl	80050b0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800685c:	693b      	ldr	r3, [r7, #16]
 800685e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006860:	693b      	ldr	r3, [r7, #16]
 8006862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006864:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006868:	693b      	ldr	r3, [r7, #16]
 800686a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006870:	4b0f      	ldr	r3, [pc, #60]	@ (80068b0 <xTaskPriorityDisinherit+0xd8>)
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	429a      	cmp	r2, r3
 8006876:	d903      	bls.n	8006880 <xTaskPriorityDisinherit+0xa8>
 8006878:	693b      	ldr	r3, [r7, #16]
 800687a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800687c:	4a0c      	ldr	r2, [pc, #48]	@ (80068b0 <xTaskPriorityDisinherit+0xd8>)
 800687e:	6013      	str	r3, [r2, #0]
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006884:	4613      	mov	r3, r2
 8006886:	009b      	lsls	r3, r3, #2
 8006888:	4413      	add	r3, r2
 800688a:	009b      	lsls	r3, r3, #2
 800688c:	4a09      	ldr	r2, [pc, #36]	@ (80068b4 <xTaskPriorityDisinherit+0xdc>)
 800688e:	441a      	add	r2, r3
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	3304      	adds	r3, #4
 8006894:	4619      	mov	r1, r3
 8006896:	4610      	mov	r0, r2
 8006898:	f7fe fbad 	bl	8004ff6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800689c:	2301      	movs	r3, #1
 800689e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80068a0:	697b      	ldr	r3, [r7, #20]
	}
 80068a2:	4618      	mov	r0, r3
 80068a4:	3718      	adds	r7, #24
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}
 80068aa:	bf00      	nop
 80068ac:	20004db0 	.word	0x20004db0
 80068b0:	2000528c 	.word	0x2000528c
 80068b4:	20004db4 	.word	0x20004db4

080068b8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b084      	sub	sp, #16
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
 80068c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80068c2:	4b21      	ldr	r3, [pc, #132]	@ (8006948 <prvAddCurrentTaskToDelayedList+0x90>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80068c8:	4b20      	ldr	r3, [pc, #128]	@ (800694c <prvAddCurrentTaskToDelayedList+0x94>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	3304      	adds	r3, #4
 80068ce:	4618      	mov	r0, r3
 80068d0:	f7fe fbee 	bl	80050b0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80068da:	d10a      	bne.n	80068f2 <prvAddCurrentTaskToDelayedList+0x3a>
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d007      	beq.n	80068f2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80068e2:	4b1a      	ldr	r3, [pc, #104]	@ (800694c <prvAddCurrentTaskToDelayedList+0x94>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	3304      	adds	r3, #4
 80068e8:	4619      	mov	r1, r3
 80068ea:	4819      	ldr	r0, [pc, #100]	@ (8006950 <prvAddCurrentTaskToDelayedList+0x98>)
 80068ec:	f7fe fb83 	bl	8004ff6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80068f0:	e026      	b.n	8006940 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80068f2:	68fa      	ldr	r2, [r7, #12]
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	4413      	add	r3, r2
 80068f8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80068fa:	4b14      	ldr	r3, [pc, #80]	@ (800694c <prvAddCurrentTaskToDelayedList+0x94>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	68ba      	ldr	r2, [r7, #8]
 8006900:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006902:	68ba      	ldr	r2, [r7, #8]
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	429a      	cmp	r2, r3
 8006908:	d209      	bcs.n	800691e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800690a:	4b12      	ldr	r3, [pc, #72]	@ (8006954 <prvAddCurrentTaskToDelayedList+0x9c>)
 800690c:	681a      	ldr	r2, [r3, #0]
 800690e:	4b0f      	ldr	r3, [pc, #60]	@ (800694c <prvAddCurrentTaskToDelayedList+0x94>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	3304      	adds	r3, #4
 8006914:	4619      	mov	r1, r3
 8006916:	4610      	mov	r0, r2
 8006918:	f7fe fb91 	bl	800503e <vListInsert>
}
 800691c:	e010      	b.n	8006940 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800691e:	4b0e      	ldr	r3, [pc, #56]	@ (8006958 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006920:	681a      	ldr	r2, [r3, #0]
 8006922:	4b0a      	ldr	r3, [pc, #40]	@ (800694c <prvAddCurrentTaskToDelayedList+0x94>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	3304      	adds	r3, #4
 8006928:	4619      	mov	r1, r3
 800692a:	4610      	mov	r0, r2
 800692c:	f7fe fb87 	bl	800503e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006930:	4b0a      	ldr	r3, [pc, #40]	@ (800695c <prvAddCurrentTaskToDelayedList+0xa4>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	68ba      	ldr	r2, [r7, #8]
 8006936:	429a      	cmp	r2, r3
 8006938:	d202      	bcs.n	8006940 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800693a:	4a08      	ldr	r2, [pc, #32]	@ (800695c <prvAddCurrentTaskToDelayedList+0xa4>)
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	6013      	str	r3, [r2, #0]
}
 8006940:	bf00      	nop
 8006942:	3710      	adds	r7, #16
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}
 8006948:	20005288 	.word	0x20005288
 800694c:	20004db0 	.word	0x20004db0
 8006950:	20005270 	.word	0x20005270
 8006954:	20005240 	.word	0x20005240
 8006958:	2000523c 	.word	0x2000523c
 800695c:	200052a4 	.word	0x200052a4

08006960 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b08a      	sub	sp, #40	@ 0x28
 8006964:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006966:	2300      	movs	r3, #0
 8006968:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800696a:	f000 fb13 	bl	8006f94 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800696e:	4b1d      	ldr	r3, [pc, #116]	@ (80069e4 <xTimerCreateTimerTask+0x84>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d021      	beq.n	80069ba <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006976:	2300      	movs	r3, #0
 8006978:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800697a:	2300      	movs	r3, #0
 800697c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800697e:	1d3a      	adds	r2, r7, #4
 8006980:	f107 0108 	add.w	r1, r7, #8
 8006984:	f107 030c 	add.w	r3, r7, #12
 8006988:	4618      	mov	r0, r3
 800698a:	f7fe faed 	bl	8004f68 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800698e:	6879      	ldr	r1, [r7, #4]
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	68fa      	ldr	r2, [r7, #12]
 8006994:	9202      	str	r2, [sp, #8]
 8006996:	9301      	str	r3, [sp, #4]
 8006998:	2302      	movs	r3, #2
 800699a:	9300      	str	r3, [sp, #0]
 800699c:	2300      	movs	r3, #0
 800699e:	460a      	mov	r2, r1
 80069a0:	4911      	ldr	r1, [pc, #68]	@ (80069e8 <xTimerCreateTimerTask+0x88>)
 80069a2:	4812      	ldr	r0, [pc, #72]	@ (80069ec <xTimerCreateTimerTask+0x8c>)
 80069a4:	f7ff f8a8 	bl	8005af8 <xTaskCreateStatic>
 80069a8:	4603      	mov	r3, r0
 80069aa:	4a11      	ldr	r2, [pc, #68]	@ (80069f0 <xTimerCreateTimerTask+0x90>)
 80069ac:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80069ae:	4b10      	ldr	r3, [pc, #64]	@ (80069f0 <xTimerCreateTimerTask+0x90>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d001      	beq.n	80069ba <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80069b6:	2301      	movs	r3, #1
 80069b8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d10b      	bne.n	80069d8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80069c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069c4:	f383 8811 	msr	BASEPRI, r3
 80069c8:	f3bf 8f6f 	isb	sy
 80069cc:	f3bf 8f4f 	dsb	sy
 80069d0:	613b      	str	r3, [r7, #16]
}
 80069d2:	bf00      	nop
 80069d4:	bf00      	nop
 80069d6:	e7fd      	b.n	80069d4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80069d8:	697b      	ldr	r3, [r7, #20]
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3718      	adds	r7, #24
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}
 80069e2:	bf00      	nop
 80069e4:	200052e0 	.word	0x200052e0
 80069e8:	080119bc 	.word	0x080119bc
 80069ec:	08006b2d 	.word	0x08006b2d
 80069f0:	200052e4 	.word	0x200052e4

080069f4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b08a      	sub	sp, #40	@ 0x28
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	60f8      	str	r0, [r7, #12]
 80069fc:	60b9      	str	r1, [r7, #8]
 80069fe:	607a      	str	r2, [r7, #4]
 8006a00:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006a02:	2300      	movs	r3, #0
 8006a04:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d10b      	bne.n	8006a24 <xTimerGenericCommand+0x30>
	__asm volatile
 8006a0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a10:	f383 8811 	msr	BASEPRI, r3
 8006a14:	f3bf 8f6f 	isb	sy
 8006a18:	f3bf 8f4f 	dsb	sy
 8006a1c:	623b      	str	r3, [r7, #32]
}
 8006a1e:	bf00      	nop
 8006a20:	bf00      	nop
 8006a22:	e7fd      	b.n	8006a20 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006a24:	4b19      	ldr	r3, [pc, #100]	@ (8006a8c <xTimerGenericCommand+0x98>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d02a      	beq.n	8006a82 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	2b05      	cmp	r3, #5
 8006a3c:	dc18      	bgt.n	8006a70 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006a3e:	f7ff fead 	bl	800679c <xTaskGetSchedulerState>
 8006a42:	4603      	mov	r3, r0
 8006a44:	2b02      	cmp	r3, #2
 8006a46:	d109      	bne.n	8006a5c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006a48:	4b10      	ldr	r3, [pc, #64]	@ (8006a8c <xTimerGenericCommand+0x98>)
 8006a4a:	6818      	ldr	r0, [r3, #0]
 8006a4c:	f107 0110 	add.w	r1, r7, #16
 8006a50:	2300      	movs	r3, #0
 8006a52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a54:	f7fe fc60 	bl	8005318 <xQueueGenericSend>
 8006a58:	6278      	str	r0, [r7, #36]	@ 0x24
 8006a5a:	e012      	b.n	8006a82 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006a5c:	4b0b      	ldr	r3, [pc, #44]	@ (8006a8c <xTimerGenericCommand+0x98>)
 8006a5e:	6818      	ldr	r0, [r3, #0]
 8006a60:	f107 0110 	add.w	r1, r7, #16
 8006a64:	2300      	movs	r3, #0
 8006a66:	2200      	movs	r2, #0
 8006a68:	f7fe fc56 	bl	8005318 <xQueueGenericSend>
 8006a6c:	6278      	str	r0, [r7, #36]	@ 0x24
 8006a6e:	e008      	b.n	8006a82 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006a70:	4b06      	ldr	r3, [pc, #24]	@ (8006a8c <xTimerGenericCommand+0x98>)
 8006a72:	6818      	ldr	r0, [r3, #0]
 8006a74:	f107 0110 	add.w	r1, r7, #16
 8006a78:	2300      	movs	r3, #0
 8006a7a:	683a      	ldr	r2, [r7, #0]
 8006a7c:	f7fe fd4e 	bl	800551c <xQueueGenericSendFromISR>
 8006a80:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006a84:	4618      	mov	r0, r3
 8006a86:	3728      	adds	r7, #40	@ 0x28
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bd80      	pop	{r7, pc}
 8006a8c:	200052e0 	.word	0x200052e0

08006a90 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b088      	sub	sp, #32
 8006a94:	af02      	add	r7, sp, #8
 8006a96:	6078      	str	r0, [r7, #4]
 8006a98:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a9a:	4b23      	ldr	r3, [pc, #140]	@ (8006b28 <prvProcessExpiredTimer+0x98>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	68db      	ldr	r3, [r3, #12]
 8006aa0:	68db      	ldr	r3, [r3, #12]
 8006aa2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006aa4:	697b      	ldr	r3, [r7, #20]
 8006aa6:	3304      	adds	r3, #4
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	f7fe fb01 	bl	80050b0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006ab4:	f003 0304 	and.w	r3, r3, #4
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d023      	beq.n	8006b04 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	699a      	ldr	r2, [r3, #24]
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	18d1      	adds	r1, r2, r3
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	683a      	ldr	r2, [r7, #0]
 8006ac8:	6978      	ldr	r0, [r7, #20]
 8006aca:	f000 f8d5 	bl	8006c78 <prvInsertTimerInActiveList>
 8006ace:	4603      	mov	r3, r0
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d020      	beq.n	8006b16 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	9300      	str	r3, [sp, #0]
 8006ad8:	2300      	movs	r3, #0
 8006ada:	687a      	ldr	r2, [r7, #4]
 8006adc:	2100      	movs	r1, #0
 8006ade:	6978      	ldr	r0, [r7, #20]
 8006ae0:	f7ff ff88 	bl	80069f4 <xTimerGenericCommand>
 8006ae4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006ae6:	693b      	ldr	r3, [r7, #16]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d114      	bne.n	8006b16 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8006aec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006af0:	f383 8811 	msr	BASEPRI, r3
 8006af4:	f3bf 8f6f 	isb	sy
 8006af8:	f3bf 8f4f 	dsb	sy
 8006afc:	60fb      	str	r3, [r7, #12]
}
 8006afe:	bf00      	nop
 8006b00:	bf00      	nop
 8006b02:	e7fd      	b.n	8006b00 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006b04:	697b      	ldr	r3, [r7, #20]
 8006b06:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006b0a:	f023 0301 	bic.w	r3, r3, #1
 8006b0e:	b2da      	uxtb	r2, r3
 8006b10:	697b      	ldr	r3, [r7, #20]
 8006b12:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	6a1b      	ldr	r3, [r3, #32]
 8006b1a:	6978      	ldr	r0, [r7, #20]
 8006b1c:	4798      	blx	r3
}
 8006b1e:	bf00      	nop
 8006b20:	3718      	adds	r7, #24
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd80      	pop	{r7, pc}
 8006b26:	bf00      	nop
 8006b28:	200052d8 	.word	0x200052d8

08006b2c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b084      	sub	sp, #16
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006b34:	f107 0308 	add.w	r3, r7, #8
 8006b38:	4618      	mov	r0, r3
 8006b3a:	f000 f859 	bl	8006bf0 <prvGetNextExpireTime>
 8006b3e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	4619      	mov	r1, r3
 8006b44:	68f8      	ldr	r0, [r7, #12]
 8006b46:	f000 f805 	bl	8006b54 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006b4a:	f000 f8d7 	bl	8006cfc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006b4e:	bf00      	nop
 8006b50:	e7f0      	b.n	8006b34 <prvTimerTask+0x8>
	...

08006b54 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b084      	sub	sp, #16
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
 8006b5c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006b5e:	f7ff fa0f 	bl	8005f80 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006b62:	f107 0308 	add.w	r3, r7, #8
 8006b66:	4618      	mov	r0, r3
 8006b68:	f000 f866 	bl	8006c38 <prvSampleTimeNow>
 8006b6c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d130      	bne.n	8006bd6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d10a      	bne.n	8006b90 <prvProcessTimerOrBlockTask+0x3c>
 8006b7a:	687a      	ldr	r2, [r7, #4]
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	429a      	cmp	r2, r3
 8006b80:	d806      	bhi.n	8006b90 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006b82:	f7ff fa0b 	bl	8005f9c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006b86:	68f9      	ldr	r1, [r7, #12]
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f7ff ff81 	bl	8006a90 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006b8e:	e024      	b.n	8006bda <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d008      	beq.n	8006ba8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006b96:	4b13      	ldr	r3, [pc, #76]	@ (8006be4 <prvProcessTimerOrBlockTask+0x90>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d101      	bne.n	8006ba4 <prvProcessTimerOrBlockTask+0x50>
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	e000      	b.n	8006ba6 <prvProcessTimerOrBlockTask+0x52>
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006ba8:	4b0f      	ldr	r3, [pc, #60]	@ (8006be8 <prvProcessTimerOrBlockTask+0x94>)
 8006baa:	6818      	ldr	r0, [r3, #0]
 8006bac:	687a      	ldr	r2, [r7, #4]
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	1ad3      	subs	r3, r2, r3
 8006bb2:	683a      	ldr	r2, [r7, #0]
 8006bb4:	4619      	mov	r1, r3
 8006bb6:	f7fe ff6b 	bl	8005a90 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006bba:	f7ff f9ef 	bl	8005f9c <xTaskResumeAll>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d10a      	bne.n	8006bda <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006bc4:	4b09      	ldr	r3, [pc, #36]	@ (8006bec <prvProcessTimerOrBlockTask+0x98>)
 8006bc6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006bca:	601a      	str	r2, [r3, #0]
 8006bcc:	f3bf 8f4f 	dsb	sy
 8006bd0:	f3bf 8f6f 	isb	sy
}
 8006bd4:	e001      	b.n	8006bda <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006bd6:	f7ff f9e1 	bl	8005f9c <xTaskResumeAll>
}
 8006bda:	bf00      	nop
 8006bdc:	3710      	adds	r7, #16
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}
 8006be2:	bf00      	nop
 8006be4:	200052dc 	.word	0x200052dc
 8006be8:	200052e0 	.word	0x200052e0
 8006bec:	e000ed04 	.word	0xe000ed04

08006bf0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b085      	sub	sp, #20
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006bf8:	4b0e      	ldr	r3, [pc, #56]	@ (8006c34 <prvGetNextExpireTime+0x44>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d101      	bne.n	8006c06 <prvGetNextExpireTime+0x16>
 8006c02:	2201      	movs	r2, #1
 8006c04:	e000      	b.n	8006c08 <prvGetNextExpireTime+0x18>
 8006c06:	2200      	movs	r2, #0
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d105      	bne.n	8006c20 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006c14:	4b07      	ldr	r3, [pc, #28]	@ (8006c34 <prvGetNextExpireTime+0x44>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	68db      	ldr	r3, [r3, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	60fb      	str	r3, [r7, #12]
 8006c1e:	e001      	b.n	8006c24 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006c20:	2300      	movs	r3, #0
 8006c22:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006c24:	68fb      	ldr	r3, [r7, #12]
}
 8006c26:	4618      	mov	r0, r3
 8006c28:	3714      	adds	r7, #20
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c30:	4770      	bx	lr
 8006c32:	bf00      	nop
 8006c34:	200052d8 	.word	0x200052d8

08006c38 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b084      	sub	sp, #16
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006c40:	f7ff fa4a 	bl	80060d8 <xTaskGetTickCount>
 8006c44:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006c46:	4b0b      	ldr	r3, [pc, #44]	@ (8006c74 <prvSampleTimeNow+0x3c>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	68fa      	ldr	r2, [r7, #12]
 8006c4c:	429a      	cmp	r2, r3
 8006c4e:	d205      	bcs.n	8006c5c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006c50:	f000 f93a 	bl	8006ec8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2201      	movs	r2, #1
 8006c58:	601a      	str	r2, [r3, #0]
 8006c5a:	e002      	b.n	8006c62 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006c62:	4a04      	ldr	r2, [pc, #16]	@ (8006c74 <prvSampleTimeNow+0x3c>)
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006c68:	68fb      	ldr	r3, [r7, #12]
}
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	3710      	adds	r7, #16
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bd80      	pop	{r7, pc}
 8006c72:	bf00      	nop
 8006c74:	200052e8 	.word	0x200052e8

08006c78 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b086      	sub	sp, #24
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	60f8      	str	r0, [r7, #12]
 8006c80:	60b9      	str	r1, [r7, #8]
 8006c82:	607a      	str	r2, [r7, #4]
 8006c84:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006c86:	2300      	movs	r3, #0
 8006c88:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	68ba      	ldr	r2, [r7, #8]
 8006c8e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	68fa      	ldr	r2, [r7, #12]
 8006c94:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006c96:	68ba      	ldr	r2, [r7, #8]
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	429a      	cmp	r2, r3
 8006c9c:	d812      	bhi.n	8006cc4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c9e:	687a      	ldr	r2, [r7, #4]
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	1ad2      	subs	r2, r2, r3
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	699b      	ldr	r3, [r3, #24]
 8006ca8:	429a      	cmp	r2, r3
 8006caa:	d302      	bcc.n	8006cb2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006cac:	2301      	movs	r3, #1
 8006cae:	617b      	str	r3, [r7, #20]
 8006cb0:	e01b      	b.n	8006cea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006cb2:	4b10      	ldr	r3, [pc, #64]	@ (8006cf4 <prvInsertTimerInActiveList+0x7c>)
 8006cb4:	681a      	ldr	r2, [r3, #0]
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	3304      	adds	r3, #4
 8006cba:	4619      	mov	r1, r3
 8006cbc:	4610      	mov	r0, r2
 8006cbe:	f7fe f9be 	bl	800503e <vListInsert>
 8006cc2:	e012      	b.n	8006cea <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006cc4:	687a      	ldr	r2, [r7, #4]
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	429a      	cmp	r2, r3
 8006cca:	d206      	bcs.n	8006cda <prvInsertTimerInActiveList+0x62>
 8006ccc:	68ba      	ldr	r2, [r7, #8]
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	429a      	cmp	r2, r3
 8006cd2:	d302      	bcc.n	8006cda <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	617b      	str	r3, [r7, #20]
 8006cd8:	e007      	b.n	8006cea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006cda:	4b07      	ldr	r3, [pc, #28]	@ (8006cf8 <prvInsertTimerInActiveList+0x80>)
 8006cdc:	681a      	ldr	r2, [r3, #0]
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	3304      	adds	r3, #4
 8006ce2:	4619      	mov	r1, r3
 8006ce4:	4610      	mov	r0, r2
 8006ce6:	f7fe f9aa 	bl	800503e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006cea:	697b      	ldr	r3, [r7, #20]
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	3718      	adds	r7, #24
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}
 8006cf4:	200052dc 	.word	0x200052dc
 8006cf8:	200052d8 	.word	0x200052d8

08006cfc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b08e      	sub	sp, #56	@ 0x38
 8006d00:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006d02:	e0ce      	b.n	8006ea2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	da19      	bge.n	8006d3e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006d0a:	1d3b      	adds	r3, r7, #4
 8006d0c:	3304      	adds	r3, #4
 8006d0e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006d10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d10b      	bne.n	8006d2e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8006d16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d1a:	f383 8811 	msr	BASEPRI, r3
 8006d1e:	f3bf 8f6f 	isb	sy
 8006d22:	f3bf 8f4f 	dsb	sy
 8006d26:	61fb      	str	r3, [r7, #28]
}
 8006d28:	bf00      	nop
 8006d2a:	bf00      	nop
 8006d2c:	e7fd      	b.n	8006d2a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006d2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006d34:	6850      	ldr	r0, [r2, #4]
 8006d36:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006d38:	6892      	ldr	r2, [r2, #8]
 8006d3a:	4611      	mov	r1, r2
 8006d3c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	f2c0 80ae 	blt.w	8006ea2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006d4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d4c:	695b      	ldr	r3, [r3, #20]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d004      	beq.n	8006d5c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006d52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d54:	3304      	adds	r3, #4
 8006d56:	4618      	mov	r0, r3
 8006d58:	f7fe f9aa 	bl	80050b0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006d5c:	463b      	mov	r3, r7
 8006d5e:	4618      	mov	r0, r3
 8006d60:	f7ff ff6a 	bl	8006c38 <prvSampleTimeNow>
 8006d64:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2b09      	cmp	r3, #9
 8006d6a:	f200 8097 	bhi.w	8006e9c <prvProcessReceivedCommands+0x1a0>
 8006d6e:	a201      	add	r2, pc, #4	@ (adr r2, 8006d74 <prvProcessReceivedCommands+0x78>)
 8006d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d74:	08006d9d 	.word	0x08006d9d
 8006d78:	08006d9d 	.word	0x08006d9d
 8006d7c:	08006d9d 	.word	0x08006d9d
 8006d80:	08006e13 	.word	0x08006e13
 8006d84:	08006e27 	.word	0x08006e27
 8006d88:	08006e73 	.word	0x08006e73
 8006d8c:	08006d9d 	.word	0x08006d9d
 8006d90:	08006d9d 	.word	0x08006d9d
 8006d94:	08006e13 	.word	0x08006e13
 8006d98:	08006e27 	.word	0x08006e27
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006d9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d9e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006da2:	f043 0301 	orr.w	r3, r3, #1
 8006da6:	b2da      	uxtb	r2, r3
 8006da8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006daa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006dae:	68ba      	ldr	r2, [r7, #8]
 8006db0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006db2:	699b      	ldr	r3, [r3, #24]
 8006db4:	18d1      	adds	r1, r2, r3
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006dba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006dbc:	f7ff ff5c 	bl	8006c78 <prvInsertTimerInActiveList>
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d06c      	beq.n	8006ea0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006dc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dc8:	6a1b      	ldr	r3, [r3, #32]
 8006dca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006dcc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006dce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dd0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006dd4:	f003 0304 	and.w	r3, r3, #4
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d061      	beq.n	8006ea0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006ddc:	68ba      	ldr	r2, [r7, #8]
 8006dde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006de0:	699b      	ldr	r3, [r3, #24]
 8006de2:	441a      	add	r2, r3
 8006de4:	2300      	movs	r3, #0
 8006de6:	9300      	str	r3, [sp, #0]
 8006de8:	2300      	movs	r3, #0
 8006dea:	2100      	movs	r1, #0
 8006dec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006dee:	f7ff fe01 	bl	80069f4 <xTimerGenericCommand>
 8006df2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006df4:	6a3b      	ldr	r3, [r7, #32]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d152      	bne.n	8006ea0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8006dfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dfe:	f383 8811 	msr	BASEPRI, r3
 8006e02:	f3bf 8f6f 	isb	sy
 8006e06:	f3bf 8f4f 	dsb	sy
 8006e0a:	61bb      	str	r3, [r7, #24]
}
 8006e0c:	bf00      	nop
 8006e0e:	bf00      	nop
 8006e10:	e7fd      	b.n	8006e0e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006e12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e14:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006e18:	f023 0301 	bic.w	r3, r3, #1
 8006e1c:	b2da      	uxtb	r2, r3
 8006e1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e20:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006e24:	e03d      	b.n	8006ea2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006e26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e28:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006e2c:	f043 0301 	orr.w	r3, r3, #1
 8006e30:	b2da      	uxtb	r2, r3
 8006e32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e34:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006e38:	68ba      	ldr	r2, [r7, #8]
 8006e3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e3c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006e3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e40:	699b      	ldr	r3, [r3, #24]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d10b      	bne.n	8006e5e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8006e46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e4a:	f383 8811 	msr	BASEPRI, r3
 8006e4e:	f3bf 8f6f 	isb	sy
 8006e52:	f3bf 8f4f 	dsb	sy
 8006e56:	617b      	str	r3, [r7, #20]
}
 8006e58:	bf00      	nop
 8006e5a:	bf00      	nop
 8006e5c:	e7fd      	b.n	8006e5a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006e5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e60:	699a      	ldr	r2, [r3, #24]
 8006e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e64:	18d1      	adds	r1, r2, r3
 8006e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e6a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006e6c:	f7ff ff04 	bl	8006c78 <prvInsertTimerInActiveList>
					break;
 8006e70:	e017      	b.n	8006ea2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006e72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e74:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006e78:	f003 0302 	and.w	r3, r3, #2
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d103      	bne.n	8006e88 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8006e80:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006e82:	f000 fbe9 	bl	8007658 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006e86:	e00c      	b.n	8006ea2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006e88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e8a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006e8e:	f023 0301 	bic.w	r3, r3, #1
 8006e92:	b2da      	uxtb	r2, r3
 8006e94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e96:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006e9a:	e002      	b.n	8006ea2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8006e9c:	bf00      	nop
 8006e9e:	e000      	b.n	8006ea2 <prvProcessReceivedCommands+0x1a6>
					break;
 8006ea0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006ea2:	4b08      	ldr	r3, [pc, #32]	@ (8006ec4 <prvProcessReceivedCommands+0x1c8>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	1d39      	adds	r1, r7, #4
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	4618      	mov	r0, r3
 8006eac:	f7fe fbd4 	bl	8005658 <xQueueReceive>
 8006eb0:	4603      	mov	r3, r0
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	f47f af26 	bne.w	8006d04 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006eb8:	bf00      	nop
 8006eba:	bf00      	nop
 8006ebc:	3730      	adds	r7, #48	@ 0x30
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}
 8006ec2:	bf00      	nop
 8006ec4:	200052e0 	.word	0x200052e0

08006ec8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b088      	sub	sp, #32
 8006ecc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006ece:	e049      	b.n	8006f64 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006ed0:	4b2e      	ldr	r3, [pc, #184]	@ (8006f8c <prvSwitchTimerLists+0xc4>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	68db      	ldr	r3, [r3, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006eda:	4b2c      	ldr	r3, [pc, #176]	@ (8006f8c <prvSwitchTimerLists+0xc4>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	68db      	ldr	r3, [r3, #12]
 8006ee0:	68db      	ldr	r3, [r3, #12]
 8006ee2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	3304      	adds	r3, #4
 8006ee8:	4618      	mov	r0, r3
 8006eea:	f7fe f8e1 	bl	80050b0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	6a1b      	ldr	r3, [r3, #32]
 8006ef2:	68f8      	ldr	r0, [r7, #12]
 8006ef4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006efc:	f003 0304 	and.w	r3, r3, #4
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d02f      	beq.n	8006f64 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	699b      	ldr	r3, [r3, #24]
 8006f08:	693a      	ldr	r2, [r7, #16]
 8006f0a:	4413      	add	r3, r2
 8006f0c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006f0e:	68ba      	ldr	r2, [r7, #8]
 8006f10:	693b      	ldr	r3, [r7, #16]
 8006f12:	429a      	cmp	r2, r3
 8006f14:	d90e      	bls.n	8006f34 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	68ba      	ldr	r2, [r7, #8]
 8006f1a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	68fa      	ldr	r2, [r7, #12]
 8006f20:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006f22:	4b1a      	ldr	r3, [pc, #104]	@ (8006f8c <prvSwitchTimerLists+0xc4>)
 8006f24:	681a      	ldr	r2, [r3, #0]
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	3304      	adds	r3, #4
 8006f2a:	4619      	mov	r1, r3
 8006f2c:	4610      	mov	r0, r2
 8006f2e:	f7fe f886 	bl	800503e <vListInsert>
 8006f32:	e017      	b.n	8006f64 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006f34:	2300      	movs	r3, #0
 8006f36:	9300      	str	r3, [sp, #0]
 8006f38:	2300      	movs	r3, #0
 8006f3a:	693a      	ldr	r2, [r7, #16]
 8006f3c:	2100      	movs	r1, #0
 8006f3e:	68f8      	ldr	r0, [r7, #12]
 8006f40:	f7ff fd58 	bl	80069f4 <xTimerGenericCommand>
 8006f44:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d10b      	bne.n	8006f64 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8006f4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f50:	f383 8811 	msr	BASEPRI, r3
 8006f54:	f3bf 8f6f 	isb	sy
 8006f58:	f3bf 8f4f 	dsb	sy
 8006f5c:	603b      	str	r3, [r7, #0]
}
 8006f5e:	bf00      	nop
 8006f60:	bf00      	nop
 8006f62:	e7fd      	b.n	8006f60 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006f64:	4b09      	ldr	r3, [pc, #36]	@ (8006f8c <prvSwitchTimerLists+0xc4>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d1b0      	bne.n	8006ed0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006f6e:	4b07      	ldr	r3, [pc, #28]	@ (8006f8c <prvSwitchTimerLists+0xc4>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006f74:	4b06      	ldr	r3, [pc, #24]	@ (8006f90 <prvSwitchTimerLists+0xc8>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4a04      	ldr	r2, [pc, #16]	@ (8006f8c <prvSwitchTimerLists+0xc4>)
 8006f7a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006f7c:	4a04      	ldr	r2, [pc, #16]	@ (8006f90 <prvSwitchTimerLists+0xc8>)
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	6013      	str	r3, [r2, #0]
}
 8006f82:	bf00      	nop
 8006f84:	3718      	adds	r7, #24
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bd80      	pop	{r7, pc}
 8006f8a:	bf00      	nop
 8006f8c:	200052d8 	.word	0x200052d8
 8006f90:	200052dc 	.word	0x200052dc

08006f94 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b082      	sub	sp, #8
 8006f98:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006f9a:	f000 f96d 	bl	8007278 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006f9e:	4b15      	ldr	r3, [pc, #84]	@ (8006ff4 <prvCheckForValidListAndQueue+0x60>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d120      	bne.n	8006fe8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006fa6:	4814      	ldr	r0, [pc, #80]	@ (8006ff8 <prvCheckForValidListAndQueue+0x64>)
 8006fa8:	f7fd fff8 	bl	8004f9c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006fac:	4813      	ldr	r0, [pc, #76]	@ (8006ffc <prvCheckForValidListAndQueue+0x68>)
 8006fae:	f7fd fff5 	bl	8004f9c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006fb2:	4b13      	ldr	r3, [pc, #76]	@ (8007000 <prvCheckForValidListAndQueue+0x6c>)
 8006fb4:	4a10      	ldr	r2, [pc, #64]	@ (8006ff8 <prvCheckForValidListAndQueue+0x64>)
 8006fb6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006fb8:	4b12      	ldr	r3, [pc, #72]	@ (8007004 <prvCheckForValidListAndQueue+0x70>)
 8006fba:	4a10      	ldr	r2, [pc, #64]	@ (8006ffc <prvCheckForValidListAndQueue+0x68>)
 8006fbc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	9300      	str	r3, [sp, #0]
 8006fc2:	4b11      	ldr	r3, [pc, #68]	@ (8007008 <prvCheckForValidListAndQueue+0x74>)
 8006fc4:	4a11      	ldr	r2, [pc, #68]	@ (800700c <prvCheckForValidListAndQueue+0x78>)
 8006fc6:	2110      	movs	r1, #16
 8006fc8:	200a      	movs	r0, #10
 8006fca:	f7fe f905 	bl	80051d8 <xQueueGenericCreateStatic>
 8006fce:	4603      	mov	r3, r0
 8006fd0:	4a08      	ldr	r2, [pc, #32]	@ (8006ff4 <prvCheckForValidListAndQueue+0x60>)
 8006fd2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006fd4:	4b07      	ldr	r3, [pc, #28]	@ (8006ff4 <prvCheckForValidListAndQueue+0x60>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d005      	beq.n	8006fe8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006fdc:	4b05      	ldr	r3, [pc, #20]	@ (8006ff4 <prvCheckForValidListAndQueue+0x60>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	490b      	ldr	r1, [pc, #44]	@ (8007010 <prvCheckForValidListAndQueue+0x7c>)
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	f7fe fd2a 	bl	8005a3c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006fe8:	f000 f978 	bl	80072dc <vPortExitCritical>
}
 8006fec:	bf00      	nop
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}
 8006ff2:	bf00      	nop
 8006ff4:	200052e0 	.word	0x200052e0
 8006ff8:	200052b0 	.word	0x200052b0
 8006ffc:	200052c4 	.word	0x200052c4
 8007000:	200052d8 	.word	0x200052d8
 8007004:	200052dc 	.word	0x200052dc
 8007008:	2000538c 	.word	0x2000538c
 800700c:	200052ec 	.word	0x200052ec
 8007010:	080119c4 	.word	0x080119c4

08007014 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007014:	b480      	push	{r7}
 8007016:	b085      	sub	sp, #20
 8007018:	af00      	add	r7, sp, #0
 800701a:	60f8      	str	r0, [r7, #12]
 800701c:	60b9      	str	r1, [r7, #8]
 800701e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	3b04      	subs	r3, #4
 8007024:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800702c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	3b04      	subs	r3, #4
 8007032:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	f023 0201 	bic.w	r2, r3, #1
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	3b04      	subs	r3, #4
 8007042:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007044:	4a0c      	ldr	r2, [pc, #48]	@ (8007078 <pxPortInitialiseStack+0x64>)
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	3b14      	subs	r3, #20
 800704e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007050:	687a      	ldr	r2, [r7, #4]
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	3b04      	subs	r3, #4
 800705a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	f06f 0202 	mvn.w	r2, #2
 8007062:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	3b20      	subs	r3, #32
 8007068:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800706a:	68fb      	ldr	r3, [r7, #12]
}
 800706c:	4618      	mov	r0, r3
 800706e:	3714      	adds	r7, #20
 8007070:	46bd      	mov	sp, r7
 8007072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007076:	4770      	bx	lr
 8007078:	0800707d 	.word	0x0800707d

0800707c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800707c:	b480      	push	{r7}
 800707e:	b085      	sub	sp, #20
 8007080:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007082:	2300      	movs	r3, #0
 8007084:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007086:	4b13      	ldr	r3, [pc, #76]	@ (80070d4 <prvTaskExitError+0x58>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800708e:	d00b      	beq.n	80070a8 <prvTaskExitError+0x2c>
	__asm volatile
 8007090:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007094:	f383 8811 	msr	BASEPRI, r3
 8007098:	f3bf 8f6f 	isb	sy
 800709c:	f3bf 8f4f 	dsb	sy
 80070a0:	60fb      	str	r3, [r7, #12]
}
 80070a2:	bf00      	nop
 80070a4:	bf00      	nop
 80070a6:	e7fd      	b.n	80070a4 <prvTaskExitError+0x28>
	__asm volatile
 80070a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070ac:	f383 8811 	msr	BASEPRI, r3
 80070b0:	f3bf 8f6f 	isb	sy
 80070b4:	f3bf 8f4f 	dsb	sy
 80070b8:	60bb      	str	r3, [r7, #8]
}
 80070ba:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80070bc:	bf00      	nop
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d0fc      	beq.n	80070be <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80070c4:	bf00      	nop
 80070c6:	bf00      	nop
 80070c8:	3714      	adds	r7, #20
 80070ca:	46bd      	mov	sp, r7
 80070cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d0:	4770      	bx	lr
 80070d2:	bf00      	nop
 80070d4:	20000010 	.word	0x20000010
	...

080070e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80070e0:	4b07      	ldr	r3, [pc, #28]	@ (8007100 <pxCurrentTCBConst2>)
 80070e2:	6819      	ldr	r1, [r3, #0]
 80070e4:	6808      	ldr	r0, [r1, #0]
 80070e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070ea:	f380 8809 	msr	PSP, r0
 80070ee:	f3bf 8f6f 	isb	sy
 80070f2:	f04f 0000 	mov.w	r0, #0
 80070f6:	f380 8811 	msr	BASEPRI, r0
 80070fa:	4770      	bx	lr
 80070fc:	f3af 8000 	nop.w

08007100 <pxCurrentTCBConst2>:
 8007100:	20004db0 	.word	0x20004db0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007104:	bf00      	nop
 8007106:	bf00      	nop

08007108 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007108:	4808      	ldr	r0, [pc, #32]	@ (800712c <prvPortStartFirstTask+0x24>)
 800710a:	6800      	ldr	r0, [r0, #0]
 800710c:	6800      	ldr	r0, [r0, #0]
 800710e:	f380 8808 	msr	MSP, r0
 8007112:	f04f 0000 	mov.w	r0, #0
 8007116:	f380 8814 	msr	CONTROL, r0
 800711a:	b662      	cpsie	i
 800711c:	b661      	cpsie	f
 800711e:	f3bf 8f4f 	dsb	sy
 8007122:	f3bf 8f6f 	isb	sy
 8007126:	df00      	svc	0
 8007128:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800712a:	bf00      	nop
 800712c:	e000ed08 	.word	0xe000ed08

08007130 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b086      	sub	sp, #24
 8007134:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007136:	4b47      	ldr	r3, [pc, #284]	@ (8007254 <xPortStartScheduler+0x124>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4a47      	ldr	r2, [pc, #284]	@ (8007258 <xPortStartScheduler+0x128>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d10b      	bne.n	8007158 <xPortStartScheduler+0x28>
	__asm volatile
 8007140:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007144:	f383 8811 	msr	BASEPRI, r3
 8007148:	f3bf 8f6f 	isb	sy
 800714c:	f3bf 8f4f 	dsb	sy
 8007150:	60fb      	str	r3, [r7, #12]
}
 8007152:	bf00      	nop
 8007154:	bf00      	nop
 8007156:	e7fd      	b.n	8007154 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007158:	4b3e      	ldr	r3, [pc, #248]	@ (8007254 <xPortStartScheduler+0x124>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4a3f      	ldr	r2, [pc, #252]	@ (800725c <xPortStartScheduler+0x12c>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d10b      	bne.n	800717a <xPortStartScheduler+0x4a>
	__asm volatile
 8007162:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007166:	f383 8811 	msr	BASEPRI, r3
 800716a:	f3bf 8f6f 	isb	sy
 800716e:	f3bf 8f4f 	dsb	sy
 8007172:	613b      	str	r3, [r7, #16]
}
 8007174:	bf00      	nop
 8007176:	bf00      	nop
 8007178:	e7fd      	b.n	8007176 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800717a:	4b39      	ldr	r3, [pc, #228]	@ (8007260 <xPortStartScheduler+0x130>)
 800717c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800717e:	697b      	ldr	r3, [r7, #20]
 8007180:	781b      	ldrb	r3, [r3, #0]
 8007182:	b2db      	uxtb	r3, r3
 8007184:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007186:	697b      	ldr	r3, [r7, #20]
 8007188:	22ff      	movs	r2, #255	@ 0xff
 800718a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800718c:	697b      	ldr	r3, [r7, #20]
 800718e:	781b      	ldrb	r3, [r3, #0]
 8007190:	b2db      	uxtb	r3, r3
 8007192:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007194:	78fb      	ldrb	r3, [r7, #3]
 8007196:	b2db      	uxtb	r3, r3
 8007198:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800719c:	b2da      	uxtb	r2, r3
 800719e:	4b31      	ldr	r3, [pc, #196]	@ (8007264 <xPortStartScheduler+0x134>)
 80071a0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80071a2:	4b31      	ldr	r3, [pc, #196]	@ (8007268 <xPortStartScheduler+0x138>)
 80071a4:	2207      	movs	r2, #7
 80071a6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80071a8:	e009      	b.n	80071be <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80071aa:	4b2f      	ldr	r3, [pc, #188]	@ (8007268 <xPortStartScheduler+0x138>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	3b01      	subs	r3, #1
 80071b0:	4a2d      	ldr	r2, [pc, #180]	@ (8007268 <xPortStartScheduler+0x138>)
 80071b2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80071b4:	78fb      	ldrb	r3, [r7, #3]
 80071b6:	b2db      	uxtb	r3, r3
 80071b8:	005b      	lsls	r3, r3, #1
 80071ba:	b2db      	uxtb	r3, r3
 80071bc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80071be:	78fb      	ldrb	r3, [r7, #3]
 80071c0:	b2db      	uxtb	r3, r3
 80071c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071c6:	2b80      	cmp	r3, #128	@ 0x80
 80071c8:	d0ef      	beq.n	80071aa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80071ca:	4b27      	ldr	r3, [pc, #156]	@ (8007268 <xPortStartScheduler+0x138>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f1c3 0307 	rsb	r3, r3, #7
 80071d2:	2b04      	cmp	r3, #4
 80071d4:	d00b      	beq.n	80071ee <xPortStartScheduler+0xbe>
	__asm volatile
 80071d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071da:	f383 8811 	msr	BASEPRI, r3
 80071de:	f3bf 8f6f 	isb	sy
 80071e2:	f3bf 8f4f 	dsb	sy
 80071e6:	60bb      	str	r3, [r7, #8]
}
 80071e8:	bf00      	nop
 80071ea:	bf00      	nop
 80071ec:	e7fd      	b.n	80071ea <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80071ee:	4b1e      	ldr	r3, [pc, #120]	@ (8007268 <xPortStartScheduler+0x138>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	021b      	lsls	r3, r3, #8
 80071f4:	4a1c      	ldr	r2, [pc, #112]	@ (8007268 <xPortStartScheduler+0x138>)
 80071f6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80071f8:	4b1b      	ldr	r3, [pc, #108]	@ (8007268 <xPortStartScheduler+0x138>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007200:	4a19      	ldr	r2, [pc, #100]	@ (8007268 <xPortStartScheduler+0x138>)
 8007202:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	b2da      	uxtb	r2, r3
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800720c:	4b17      	ldr	r3, [pc, #92]	@ (800726c <xPortStartScheduler+0x13c>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4a16      	ldr	r2, [pc, #88]	@ (800726c <xPortStartScheduler+0x13c>)
 8007212:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007216:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007218:	4b14      	ldr	r3, [pc, #80]	@ (800726c <xPortStartScheduler+0x13c>)
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4a13      	ldr	r2, [pc, #76]	@ (800726c <xPortStartScheduler+0x13c>)
 800721e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007222:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007224:	f000 f8da 	bl	80073dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007228:	4b11      	ldr	r3, [pc, #68]	@ (8007270 <xPortStartScheduler+0x140>)
 800722a:	2200      	movs	r2, #0
 800722c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800722e:	f000 f8f9 	bl	8007424 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007232:	4b10      	ldr	r3, [pc, #64]	@ (8007274 <xPortStartScheduler+0x144>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a0f      	ldr	r2, [pc, #60]	@ (8007274 <xPortStartScheduler+0x144>)
 8007238:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800723c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800723e:	f7ff ff63 	bl	8007108 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007242:	f7ff f813 	bl	800626c <vTaskSwitchContext>
	prvTaskExitError();
 8007246:	f7ff ff19 	bl	800707c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800724a:	2300      	movs	r3, #0
}
 800724c:	4618      	mov	r0, r3
 800724e:	3718      	adds	r7, #24
 8007250:	46bd      	mov	sp, r7
 8007252:	bd80      	pop	{r7, pc}
 8007254:	e000ed00 	.word	0xe000ed00
 8007258:	410fc271 	.word	0x410fc271
 800725c:	410fc270 	.word	0x410fc270
 8007260:	e000e400 	.word	0xe000e400
 8007264:	200053dc 	.word	0x200053dc
 8007268:	200053e0 	.word	0x200053e0
 800726c:	e000ed20 	.word	0xe000ed20
 8007270:	20000010 	.word	0x20000010
 8007274:	e000ef34 	.word	0xe000ef34

08007278 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007278:	b480      	push	{r7}
 800727a:	b083      	sub	sp, #12
 800727c:	af00      	add	r7, sp, #0
	__asm volatile
 800727e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007282:	f383 8811 	msr	BASEPRI, r3
 8007286:	f3bf 8f6f 	isb	sy
 800728a:	f3bf 8f4f 	dsb	sy
 800728e:	607b      	str	r3, [r7, #4]
}
 8007290:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007292:	4b10      	ldr	r3, [pc, #64]	@ (80072d4 <vPortEnterCritical+0x5c>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	3301      	adds	r3, #1
 8007298:	4a0e      	ldr	r2, [pc, #56]	@ (80072d4 <vPortEnterCritical+0x5c>)
 800729a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800729c:	4b0d      	ldr	r3, [pc, #52]	@ (80072d4 <vPortEnterCritical+0x5c>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	2b01      	cmp	r3, #1
 80072a2:	d110      	bne.n	80072c6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80072a4:	4b0c      	ldr	r3, [pc, #48]	@ (80072d8 <vPortEnterCritical+0x60>)
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	b2db      	uxtb	r3, r3
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d00b      	beq.n	80072c6 <vPortEnterCritical+0x4e>
	__asm volatile
 80072ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072b2:	f383 8811 	msr	BASEPRI, r3
 80072b6:	f3bf 8f6f 	isb	sy
 80072ba:	f3bf 8f4f 	dsb	sy
 80072be:	603b      	str	r3, [r7, #0]
}
 80072c0:	bf00      	nop
 80072c2:	bf00      	nop
 80072c4:	e7fd      	b.n	80072c2 <vPortEnterCritical+0x4a>
	}
}
 80072c6:	bf00      	nop
 80072c8:	370c      	adds	r7, #12
 80072ca:	46bd      	mov	sp, r7
 80072cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d0:	4770      	bx	lr
 80072d2:	bf00      	nop
 80072d4:	20000010 	.word	0x20000010
 80072d8:	e000ed04 	.word	0xe000ed04

080072dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80072dc:	b480      	push	{r7}
 80072de:	b083      	sub	sp, #12
 80072e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80072e2:	4b12      	ldr	r3, [pc, #72]	@ (800732c <vPortExitCritical+0x50>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d10b      	bne.n	8007302 <vPortExitCritical+0x26>
	__asm volatile
 80072ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072ee:	f383 8811 	msr	BASEPRI, r3
 80072f2:	f3bf 8f6f 	isb	sy
 80072f6:	f3bf 8f4f 	dsb	sy
 80072fa:	607b      	str	r3, [r7, #4]
}
 80072fc:	bf00      	nop
 80072fe:	bf00      	nop
 8007300:	e7fd      	b.n	80072fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007302:	4b0a      	ldr	r3, [pc, #40]	@ (800732c <vPortExitCritical+0x50>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	3b01      	subs	r3, #1
 8007308:	4a08      	ldr	r2, [pc, #32]	@ (800732c <vPortExitCritical+0x50>)
 800730a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800730c:	4b07      	ldr	r3, [pc, #28]	@ (800732c <vPortExitCritical+0x50>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d105      	bne.n	8007320 <vPortExitCritical+0x44>
 8007314:	2300      	movs	r3, #0
 8007316:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	f383 8811 	msr	BASEPRI, r3
}
 800731e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007320:	bf00      	nop
 8007322:	370c      	adds	r7, #12
 8007324:	46bd      	mov	sp, r7
 8007326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732a:	4770      	bx	lr
 800732c:	20000010 	.word	0x20000010

08007330 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007330:	f3ef 8009 	mrs	r0, PSP
 8007334:	f3bf 8f6f 	isb	sy
 8007338:	4b15      	ldr	r3, [pc, #84]	@ (8007390 <pxCurrentTCBConst>)
 800733a:	681a      	ldr	r2, [r3, #0]
 800733c:	f01e 0f10 	tst.w	lr, #16
 8007340:	bf08      	it	eq
 8007342:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007346:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800734a:	6010      	str	r0, [r2, #0]
 800734c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007350:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007354:	f380 8811 	msr	BASEPRI, r0
 8007358:	f3bf 8f4f 	dsb	sy
 800735c:	f3bf 8f6f 	isb	sy
 8007360:	f7fe ff84 	bl	800626c <vTaskSwitchContext>
 8007364:	f04f 0000 	mov.w	r0, #0
 8007368:	f380 8811 	msr	BASEPRI, r0
 800736c:	bc09      	pop	{r0, r3}
 800736e:	6819      	ldr	r1, [r3, #0]
 8007370:	6808      	ldr	r0, [r1, #0]
 8007372:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007376:	f01e 0f10 	tst.w	lr, #16
 800737a:	bf08      	it	eq
 800737c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007380:	f380 8809 	msr	PSP, r0
 8007384:	f3bf 8f6f 	isb	sy
 8007388:	4770      	bx	lr
 800738a:	bf00      	nop
 800738c:	f3af 8000 	nop.w

08007390 <pxCurrentTCBConst>:
 8007390:	20004db0 	.word	0x20004db0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007394:	bf00      	nop
 8007396:	bf00      	nop

08007398 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b082      	sub	sp, #8
 800739c:	af00      	add	r7, sp, #0
	__asm volatile
 800739e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073a2:	f383 8811 	msr	BASEPRI, r3
 80073a6:	f3bf 8f6f 	isb	sy
 80073aa:	f3bf 8f4f 	dsb	sy
 80073ae:	607b      	str	r3, [r7, #4]
}
 80073b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80073b2:	f7fe fea1 	bl	80060f8 <xTaskIncrementTick>
 80073b6:	4603      	mov	r3, r0
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d003      	beq.n	80073c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80073bc:	4b06      	ldr	r3, [pc, #24]	@ (80073d8 <xPortSysTickHandler+0x40>)
 80073be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80073c2:	601a      	str	r2, [r3, #0]
 80073c4:	2300      	movs	r3, #0
 80073c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	f383 8811 	msr	BASEPRI, r3
}
 80073ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80073d0:	bf00      	nop
 80073d2:	3708      	adds	r7, #8
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bd80      	pop	{r7, pc}
 80073d8:	e000ed04 	.word	0xe000ed04

080073dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80073dc:	b480      	push	{r7}
 80073de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80073e0:	4b0b      	ldr	r3, [pc, #44]	@ (8007410 <vPortSetupTimerInterrupt+0x34>)
 80073e2:	2200      	movs	r2, #0
 80073e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80073e6:	4b0b      	ldr	r3, [pc, #44]	@ (8007414 <vPortSetupTimerInterrupt+0x38>)
 80073e8:	2200      	movs	r2, #0
 80073ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80073ec:	4b0a      	ldr	r3, [pc, #40]	@ (8007418 <vPortSetupTimerInterrupt+0x3c>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	4a0a      	ldr	r2, [pc, #40]	@ (800741c <vPortSetupTimerInterrupt+0x40>)
 80073f2:	fba2 2303 	umull	r2, r3, r2, r3
 80073f6:	099b      	lsrs	r3, r3, #6
 80073f8:	4a09      	ldr	r2, [pc, #36]	@ (8007420 <vPortSetupTimerInterrupt+0x44>)
 80073fa:	3b01      	subs	r3, #1
 80073fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80073fe:	4b04      	ldr	r3, [pc, #16]	@ (8007410 <vPortSetupTimerInterrupt+0x34>)
 8007400:	2207      	movs	r2, #7
 8007402:	601a      	str	r2, [r3, #0]
}
 8007404:	bf00      	nop
 8007406:	46bd      	mov	sp, r7
 8007408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740c:	4770      	bx	lr
 800740e:	bf00      	nop
 8007410:	e000e010 	.word	0xe000e010
 8007414:	e000e018 	.word	0xe000e018
 8007418:	20000004 	.word	0x20000004
 800741c:	10624dd3 	.word	0x10624dd3
 8007420:	e000e014 	.word	0xe000e014

08007424 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007424:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007434 <vPortEnableVFP+0x10>
 8007428:	6801      	ldr	r1, [r0, #0]
 800742a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800742e:	6001      	str	r1, [r0, #0]
 8007430:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007432:	bf00      	nop
 8007434:	e000ed88 	.word	0xe000ed88

08007438 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007438:	b480      	push	{r7}
 800743a:	b085      	sub	sp, #20
 800743c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800743e:	f3ef 8305 	mrs	r3, IPSR
 8007442:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	2b0f      	cmp	r3, #15
 8007448:	d915      	bls.n	8007476 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800744a:	4a18      	ldr	r2, [pc, #96]	@ (80074ac <vPortValidateInterruptPriority+0x74>)
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	4413      	add	r3, r2
 8007450:	781b      	ldrb	r3, [r3, #0]
 8007452:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007454:	4b16      	ldr	r3, [pc, #88]	@ (80074b0 <vPortValidateInterruptPriority+0x78>)
 8007456:	781b      	ldrb	r3, [r3, #0]
 8007458:	7afa      	ldrb	r2, [r7, #11]
 800745a:	429a      	cmp	r2, r3
 800745c:	d20b      	bcs.n	8007476 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800745e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007462:	f383 8811 	msr	BASEPRI, r3
 8007466:	f3bf 8f6f 	isb	sy
 800746a:	f3bf 8f4f 	dsb	sy
 800746e:	607b      	str	r3, [r7, #4]
}
 8007470:	bf00      	nop
 8007472:	bf00      	nop
 8007474:	e7fd      	b.n	8007472 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007476:	4b0f      	ldr	r3, [pc, #60]	@ (80074b4 <vPortValidateInterruptPriority+0x7c>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800747e:	4b0e      	ldr	r3, [pc, #56]	@ (80074b8 <vPortValidateInterruptPriority+0x80>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	429a      	cmp	r2, r3
 8007484:	d90b      	bls.n	800749e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007486:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800748a:	f383 8811 	msr	BASEPRI, r3
 800748e:	f3bf 8f6f 	isb	sy
 8007492:	f3bf 8f4f 	dsb	sy
 8007496:	603b      	str	r3, [r7, #0]
}
 8007498:	bf00      	nop
 800749a:	bf00      	nop
 800749c:	e7fd      	b.n	800749a <vPortValidateInterruptPriority+0x62>
	}
 800749e:	bf00      	nop
 80074a0:	3714      	adds	r7, #20
 80074a2:	46bd      	mov	sp, r7
 80074a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a8:	4770      	bx	lr
 80074aa:	bf00      	nop
 80074ac:	e000e3f0 	.word	0xe000e3f0
 80074b0:	200053dc 	.word	0x200053dc
 80074b4:	e000ed0c 	.word	0xe000ed0c
 80074b8:	200053e0 	.word	0x200053e0

080074bc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b08a      	sub	sp, #40	@ 0x28
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80074c4:	2300      	movs	r3, #0
 80074c6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80074c8:	f7fe fd5a 	bl	8005f80 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80074cc:	4b5c      	ldr	r3, [pc, #368]	@ (8007640 <pvPortMalloc+0x184>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d101      	bne.n	80074d8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80074d4:	f000 f924 	bl	8007720 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80074d8:	4b5a      	ldr	r3, [pc, #360]	@ (8007644 <pvPortMalloc+0x188>)
 80074da:	681a      	ldr	r2, [r3, #0]
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	4013      	ands	r3, r2
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	f040 8095 	bne.w	8007610 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d01e      	beq.n	800752a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80074ec:	2208      	movs	r2, #8
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	4413      	add	r3, r2
 80074f2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	f003 0307 	and.w	r3, r3, #7
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d015      	beq.n	800752a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	f023 0307 	bic.w	r3, r3, #7
 8007504:	3308      	adds	r3, #8
 8007506:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f003 0307 	and.w	r3, r3, #7
 800750e:	2b00      	cmp	r3, #0
 8007510:	d00b      	beq.n	800752a <pvPortMalloc+0x6e>
	__asm volatile
 8007512:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007516:	f383 8811 	msr	BASEPRI, r3
 800751a:	f3bf 8f6f 	isb	sy
 800751e:	f3bf 8f4f 	dsb	sy
 8007522:	617b      	str	r3, [r7, #20]
}
 8007524:	bf00      	nop
 8007526:	bf00      	nop
 8007528:	e7fd      	b.n	8007526 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d06f      	beq.n	8007610 <pvPortMalloc+0x154>
 8007530:	4b45      	ldr	r3, [pc, #276]	@ (8007648 <pvPortMalloc+0x18c>)
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	687a      	ldr	r2, [r7, #4]
 8007536:	429a      	cmp	r2, r3
 8007538:	d86a      	bhi.n	8007610 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800753a:	4b44      	ldr	r3, [pc, #272]	@ (800764c <pvPortMalloc+0x190>)
 800753c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800753e:	4b43      	ldr	r3, [pc, #268]	@ (800764c <pvPortMalloc+0x190>)
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007544:	e004      	b.n	8007550 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007548:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800754a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007552:	685b      	ldr	r3, [r3, #4]
 8007554:	687a      	ldr	r2, [r7, #4]
 8007556:	429a      	cmp	r2, r3
 8007558:	d903      	bls.n	8007562 <pvPortMalloc+0xa6>
 800755a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d1f1      	bne.n	8007546 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007562:	4b37      	ldr	r3, [pc, #220]	@ (8007640 <pvPortMalloc+0x184>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007568:	429a      	cmp	r2, r3
 800756a:	d051      	beq.n	8007610 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800756c:	6a3b      	ldr	r3, [r7, #32]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	2208      	movs	r2, #8
 8007572:	4413      	add	r3, r2
 8007574:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007578:	681a      	ldr	r2, [r3, #0]
 800757a:	6a3b      	ldr	r3, [r7, #32]
 800757c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800757e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007580:	685a      	ldr	r2, [r3, #4]
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	1ad2      	subs	r2, r2, r3
 8007586:	2308      	movs	r3, #8
 8007588:	005b      	lsls	r3, r3, #1
 800758a:	429a      	cmp	r2, r3
 800758c:	d920      	bls.n	80075d0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800758e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	4413      	add	r3, r2
 8007594:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007596:	69bb      	ldr	r3, [r7, #24]
 8007598:	f003 0307 	and.w	r3, r3, #7
 800759c:	2b00      	cmp	r3, #0
 800759e:	d00b      	beq.n	80075b8 <pvPortMalloc+0xfc>
	__asm volatile
 80075a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075a4:	f383 8811 	msr	BASEPRI, r3
 80075a8:	f3bf 8f6f 	isb	sy
 80075ac:	f3bf 8f4f 	dsb	sy
 80075b0:	613b      	str	r3, [r7, #16]
}
 80075b2:	bf00      	nop
 80075b4:	bf00      	nop
 80075b6:	e7fd      	b.n	80075b4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80075b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075ba:	685a      	ldr	r2, [r3, #4]
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	1ad2      	subs	r2, r2, r3
 80075c0:	69bb      	ldr	r3, [r7, #24]
 80075c2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80075c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075c6:	687a      	ldr	r2, [r7, #4]
 80075c8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80075ca:	69b8      	ldr	r0, [r7, #24]
 80075cc:	f000 f90a 	bl	80077e4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80075d0:	4b1d      	ldr	r3, [pc, #116]	@ (8007648 <pvPortMalloc+0x18c>)
 80075d2:	681a      	ldr	r2, [r3, #0]
 80075d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075d6:	685b      	ldr	r3, [r3, #4]
 80075d8:	1ad3      	subs	r3, r2, r3
 80075da:	4a1b      	ldr	r2, [pc, #108]	@ (8007648 <pvPortMalloc+0x18c>)
 80075dc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80075de:	4b1a      	ldr	r3, [pc, #104]	@ (8007648 <pvPortMalloc+0x18c>)
 80075e0:	681a      	ldr	r2, [r3, #0]
 80075e2:	4b1b      	ldr	r3, [pc, #108]	@ (8007650 <pvPortMalloc+0x194>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	429a      	cmp	r2, r3
 80075e8:	d203      	bcs.n	80075f2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80075ea:	4b17      	ldr	r3, [pc, #92]	@ (8007648 <pvPortMalloc+0x18c>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	4a18      	ldr	r2, [pc, #96]	@ (8007650 <pvPortMalloc+0x194>)
 80075f0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80075f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075f4:	685a      	ldr	r2, [r3, #4]
 80075f6:	4b13      	ldr	r3, [pc, #76]	@ (8007644 <pvPortMalloc+0x188>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	431a      	orrs	r2, r3
 80075fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075fe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007602:	2200      	movs	r2, #0
 8007604:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007606:	4b13      	ldr	r3, [pc, #76]	@ (8007654 <pvPortMalloc+0x198>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	3301      	adds	r3, #1
 800760c:	4a11      	ldr	r2, [pc, #68]	@ (8007654 <pvPortMalloc+0x198>)
 800760e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007610:	f7fe fcc4 	bl	8005f9c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007614:	69fb      	ldr	r3, [r7, #28]
 8007616:	f003 0307 	and.w	r3, r3, #7
 800761a:	2b00      	cmp	r3, #0
 800761c:	d00b      	beq.n	8007636 <pvPortMalloc+0x17a>
	__asm volatile
 800761e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007622:	f383 8811 	msr	BASEPRI, r3
 8007626:	f3bf 8f6f 	isb	sy
 800762a:	f3bf 8f4f 	dsb	sy
 800762e:	60fb      	str	r3, [r7, #12]
}
 8007630:	bf00      	nop
 8007632:	bf00      	nop
 8007634:	e7fd      	b.n	8007632 <pvPortMalloc+0x176>
	return pvReturn;
 8007636:	69fb      	ldr	r3, [r7, #28]
}
 8007638:	4618      	mov	r0, r3
 800763a:	3728      	adds	r7, #40	@ 0x28
 800763c:	46bd      	mov	sp, r7
 800763e:	bd80      	pop	{r7, pc}
 8007640:	20008fec 	.word	0x20008fec
 8007644:	20009000 	.word	0x20009000
 8007648:	20008ff0 	.word	0x20008ff0
 800764c:	20008fe4 	.word	0x20008fe4
 8007650:	20008ff4 	.word	0x20008ff4
 8007654:	20008ff8 	.word	0x20008ff8

08007658 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b086      	sub	sp, #24
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d04f      	beq.n	800770a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800766a:	2308      	movs	r3, #8
 800766c:	425b      	negs	r3, r3
 800766e:	697a      	ldr	r2, [r7, #20]
 8007670:	4413      	add	r3, r2
 8007672:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007674:	697b      	ldr	r3, [r7, #20]
 8007676:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007678:	693b      	ldr	r3, [r7, #16]
 800767a:	685a      	ldr	r2, [r3, #4]
 800767c:	4b25      	ldr	r3, [pc, #148]	@ (8007714 <vPortFree+0xbc>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	4013      	ands	r3, r2
 8007682:	2b00      	cmp	r3, #0
 8007684:	d10b      	bne.n	800769e <vPortFree+0x46>
	__asm volatile
 8007686:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800768a:	f383 8811 	msr	BASEPRI, r3
 800768e:	f3bf 8f6f 	isb	sy
 8007692:	f3bf 8f4f 	dsb	sy
 8007696:	60fb      	str	r3, [r7, #12]
}
 8007698:	bf00      	nop
 800769a:	bf00      	nop
 800769c:	e7fd      	b.n	800769a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800769e:	693b      	ldr	r3, [r7, #16]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d00b      	beq.n	80076be <vPortFree+0x66>
	__asm volatile
 80076a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076aa:	f383 8811 	msr	BASEPRI, r3
 80076ae:	f3bf 8f6f 	isb	sy
 80076b2:	f3bf 8f4f 	dsb	sy
 80076b6:	60bb      	str	r3, [r7, #8]
}
 80076b8:	bf00      	nop
 80076ba:	bf00      	nop
 80076bc:	e7fd      	b.n	80076ba <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80076be:	693b      	ldr	r3, [r7, #16]
 80076c0:	685a      	ldr	r2, [r3, #4]
 80076c2:	4b14      	ldr	r3, [pc, #80]	@ (8007714 <vPortFree+0xbc>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	4013      	ands	r3, r2
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d01e      	beq.n	800770a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80076cc:	693b      	ldr	r3, [r7, #16]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d11a      	bne.n	800770a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80076d4:	693b      	ldr	r3, [r7, #16]
 80076d6:	685a      	ldr	r2, [r3, #4]
 80076d8:	4b0e      	ldr	r3, [pc, #56]	@ (8007714 <vPortFree+0xbc>)
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	43db      	mvns	r3, r3
 80076de:	401a      	ands	r2, r3
 80076e0:	693b      	ldr	r3, [r7, #16]
 80076e2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80076e4:	f7fe fc4c 	bl	8005f80 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80076e8:	693b      	ldr	r3, [r7, #16]
 80076ea:	685a      	ldr	r2, [r3, #4]
 80076ec:	4b0a      	ldr	r3, [pc, #40]	@ (8007718 <vPortFree+0xc0>)
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4413      	add	r3, r2
 80076f2:	4a09      	ldr	r2, [pc, #36]	@ (8007718 <vPortFree+0xc0>)
 80076f4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80076f6:	6938      	ldr	r0, [r7, #16]
 80076f8:	f000 f874 	bl	80077e4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80076fc:	4b07      	ldr	r3, [pc, #28]	@ (800771c <vPortFree+0xc4>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	3301      	adds	r3, #1
 8007702:	4a06      	ldr	r2, [pc, #24]	@ (800771c <vPortFree+0xc4>)
 8007704:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007706:	f7fe fc49 	bl	8005f9c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800770a:	bf00      	nop
 800770c:	3718      	adds	r7, #24
 800770e:	46bd      	mov	sp, r7
 8007710:	bd80      	pop	{r7, pc}
 8007712:	bf00      	nop
 8007714:	20009000 	.word	0x20009000
 8007718:	20008ff0 	.word	0x20008ff0
 800771c:	20008ffc 	.word	0x20008ffc

08007720 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007720:	b480      	push	{r7}
 8007722:	b085      	sub	sp, #20
 8007724:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007726:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800772a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800772c:	4b27      	ldr	r3, [pc, #156]	@ (80077cc <prvHeapInit+0xac>)
 800772e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	f003 0307 	and.w	r3, r3, #7
 8007736:	2b00      	cmp	r3, #0
 8007738:	d00c      	beq.n	8007754 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	3307      	adds	r3, #7
 800773e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	f023 0307 	bic.w	r3, r3, #7
 8007746:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007748:	68ba      	ldr	r2, [r7, #8]
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	1ad3      	subs	r3, r2, r3
 800774e:	4a1f      	ldr	r2, [pc, #124]	@ (80077cc <prvHeapInit+0xac>)
 8007750:	4413      	add	r3, r2
 8007752:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007758:	4a1d      	ldr	r2, [pc, #116]	@ (80077d0 <prvHeapInit+0xb0>)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800775e:	4b1c      	ldr	r3, [pc, #112]	@ (80077d0 <prvHeapInit+0xb0>)
 8007760:	2200      	movs	r2, #0
 8007762:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	68ba      	ldr	r2, [r7, #8]
 8007768:	4413      	add	r3, r2
 800776a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800776c:	2208      	movs	r2, #8
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	1a9b      	subs	r3, r3, r2
 8007772:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	f023 0307 	bic.w	r3, r3, #7
 800777a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	4a15      	ldr	r2, [pc, #84]	@ (80077d4 <prvHeapInit+0xb4>)
 8007780:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007782:	4b14      	ldr	r3, [pc, #80]	@ (80077d4 <prvHeapInit+0xb4>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	2200      	movs	r2, #0
 8007788:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800778a:	4b12      	ldr	r3, [pc, #72]	@ (80077d4 <prvHeapInit+0xb4>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	2200      	movs	r2, #0
 8007790:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	68fa      	ldr	r2, [r7, #12]
 800779a:	1ad2      	subs	r2, r2, r3
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80077a0:	4b0c      	ldr	r3, [pc, #48]	@ (80077d4 <prvHeapInit+0xb4>)
 80077a2:	681a      	ldr	r2, [r3, #0]
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	685b      	ldr	r3, [r3, #4]
 80077ac:	4a0a      	ldr	r2, [pc, #40]	@ (80077d8 <prvHeapInit+0xb8>)
 80077ae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	685b      	ldr	r3, [r3, #4]
 80077b4:	4a09      	ldr	r2, [pc, #36]	@ (80077dc <prvHeapInit+0xbc>)
 80077b6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80077b8:	4b09      	ldr	r3, [pc, #36]	@ (80077e0 <prvHeapInit+0xc0>)
 80077ba:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80077be:	601a      	str	r2, [r3, #0]
}
 80077c0:	bf00      	nop
 80077c2:	3714      	adds	r7, #20
 80077c4:	46bd      	mov	sp, r7
 80077c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ca:	4770      	bx	lr
 80077cc:	200053e4 	.word	0x200053e4
 80077d0:	20008fe4 	.word	0x20008fe4
 80077d4:	20008fec 	.word	0x20008fec
 80077d8:	20008ff4 	.word	0x20008ff4
 80077dc:	20008ff0 	.word	0x20008ff0
 80077e0:	20009000 	.word	0x20009000

080077e4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80077e4:	b480      	push	{r7}
 80077e6:	b085      	sub	sp, #20
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80077ec:	4b28      	ldr	r3, [pc, #160]	@ (8007890 <prvInsertBlockIntoFreeList+0xac>)
 80077ee:	60fb      	str	r3, [r7, #12]
 80077f0:	e002      	b.n	80077f8 <prvInsertBlockIntoFreeList+0x14>
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	60fb      	str	r3, [r7, #12]
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	687a      	ldr	r2, [r7, #4]
 80077fe:	429a      	cmp	r2, r3
 8007800:	d8f7      	bhi.n	80077f2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	685b      	ldr	r3, [r3, #4]
 800780a:	68ba      	ldr	r2, [r7, #8]
 800780c:	4413      	add	r3, r2
 800780e:	687a      	ldr	r2, [r7, #4]
 8007810:	429a      	cmp	r2, r3
 8007812:	d108      	bne.n	8007826 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	685a      	ldr	r2, [r3, #4]
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	685b      	ldr	r3, [r3, #4]
 800781c:	441a      	add	r2, r3
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	685b      	ldr	r3, [r3, #4]
 800782e:	68ba      	ldr	r2, [r7, #8]
 8007830:	441a      	add	r2, r3
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	429a      	cmp	r2, r3
 8007838:	d118      	bne.n	800786c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681a      	ldr	r2, [r3, #0]
 800783e:	4b15      	ldr	r3, [pc, #84]	@ (8007894 <prvInsertBlockIntoFreeList+0xb0>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	429a      	cmp	r2, r3
 8007844:	d00d      	beq.n	8007862 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	685a      	ldr	r2, [r3, #4]
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	685b      	ldr	r3, [r3, #4]
 8007850:	441a      	add	r2, r3
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	681a      	ldr	r2, [r3, #0]
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	601a      	str	r2, [r3, #0]
 8007860:	e008      	b.n	8007874 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007862:	4b0c      	ldr	r3, [pc, #48]	@ (8007894 <prvInsertBlockIntoFreeList+0xb0>)
 8007864:	681a      	ldr	r2, [r3, #0]
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	601a      	str	r2, [r3, #0]
 800786a:	e003      	b.n	8007874 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681a      	ldr	r2, [r3, #0]
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007874:	68fa      	ldr	r2, [r7, #12]
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	429a      	cmp	r2, r3
 800787a:	d002      	beq.n	8007882 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	687a      	ldr	r2, [r7, #4]
 8007880:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007882:	bf00      	nop
 8007884:	3714      	adds	r7, #20
 8007886:	46bd      	mov	sp, r7
 8007888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788c:	4770      	bx	lr
 800788e:	bf00      	nop
 8007890:	20008fe4 	.word	0x20008fe4
 8007894:	20008fec 	.word	0x20008fec

08007898 <rcl_get_zero_initialized_publisher>:
 8007898:	4b01      	ldr	r3, [pc, #4]	@ (80078a0 <rcl_get_zero_initialized_publisher+0x8>)
 800789a:	6818      	ldr	r0, [r3, #0]
 800789c:	4770      	bx	lr
 800789e:	bf00      	nop
 80078a0:	08011a1c 	.word	0x08011a1c

080078a4 <rcl_publisher_init>:
 80078a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078a8:	b088      	sub	sp, #32
 80078aa:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 80078ac:	2d00      	cmp	r5, #0
 80078ae:	d069      	beq.n	8007984 <rcl_publisher_init+0xe0>
 80078b0:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 80078b4:	4604      	mov	r4, r0
 80078b6:	4648      	mov	r0, r9
 80078b8:	460e      	mov	r6, r1
 80078ba:	4690      	mov	r8, r2
 80078bc:	461f      	mov	r7, r3
 80078be:	f000 f9d5 	bl	8007c6c <rcutils_allocator_is_valid>
 80078c2:	2800      	cmp	r0, #0
 80078c4:	d05e      	beq.n	8007984 <rcl_publisher_init+0xe0>
 80078c6:	2c00      	cmp	r4, #0
 80078c8:	d05c      	beq.n	8007984 <rcl_publisher_init+0xe0>
 80078ca:	f8d4 a000 	ldr.w	sl, [r4]
 80078ce:	f1ba 0f00 	cmp.w	sl, #0
 80078d2:	d004      	beq.n	80078de <rcl_publisher_init+0x3a>
 80078d4:	2764      	movs	r7, #100	@ 0x64
 80078d6:	4638      	mov	r0, r7
 80078d8:	b008      	add	sp, #32
 80078da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078de:	4630      	mov	r0, r6
 80078e0:	f004 ffa4 	bl	800c82c <rcl_node_is_valid>
 80078e4:	2800      	cmp	r0, #0
 80078e6:	d052      	beq.n	800798e <rcl_publisher_init+0xea>
 80078e8:	f1b8 0f00 	cmp.w	r8, #0
 80078ec:	d04a      	beq.n	8007984 <rcl_publisher_init+0xe0>
 80078ee:	2f00      	cmp	r7, #0
 80078f0:	d048      	beq.n	8007984 <rcl_publisher_init+0xe0>
 80078f2:	e9cd aa03 	strd	sl, sl, [sp, #12]
 80078f6:	aa07      	add	r2, sp, #28
 80078f8:	9205      	str	r2, [sp, #20]
 80078fa:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 80078fe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007902:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8007906:	f8cd a01c 	str.w	sl, [sp, #28]
 800790a:	4639      	mov	r1, r7
 800790c:	e899 000c 	ldmia.w	r9, {r2, r3}
 8007910:	4630      	mov	r0, r6
 8007912:	f004 ffdf 	bl	800c8d4 <rcl_node_resolve_name>
 8007916:	4607      	mov	r7, r0
 8007918:	2800      	cmp	r0, #0
 800791a:	d14f      	bne.n	80079bc <rcl_publisher_init+0x118>
 800791c:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800791e:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 8007920:	20c8      	movs	r0, #200	@ 0xc8
 8007922:	4798      	blx	r3
 8007924:	6020      	str	r0, [r4, #0]
 8007926:	2800      	cmp	r0, #0
 8007928:	d04e      	beq.n	80079c8 <rcl_publisher_init+0x124>
 800792a:	4630      	mov	r0, r6
 800792c:	f004 ffa0 	bl	800c870 <rcl_node_get_rmw_handle>
 8007930:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 8007934:	9300      	str	r3, [sp, #0]
 8007936:	9a07      	ldr	r2, [sp, #28]
 8007938:	6827      	ldr	r7, [r4, #0]
 800793a:	462b      	mov	r3, r5
 800793c:	4641      	mov	r1, r8
 800793e:	f000 fa55 	bl	8007dec <rmw_create_publisher>
 8007942:	6823      	ldr	r3, [r4, #0]
 8007944:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
 8007948:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800794c:	b370      	cbz	r0, 80079ac <rcl_publisher_init+0x108>
 800794e:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 8007952:	f000 fb29 	bl	8007fa8 <rmw_publisher_get_actual_qos>
 8007956:	6823      	ldr	r3, [r4, #0]
 8007958:	4607      	mov	r7, r0
 800795a:	b9d0      	cbnz	r0, 8007992 <rcl_publisher_init+0xee>
 800795c:	f895 2048 	ldrb.w	r2, [r5, #72]	@ 0x48
 8007960:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 8007964:	4629      	mov	r1, r5
 8007966:	2270      	movs	r2, #112	@ 0x70
 8007968:	4618      	mov	r0, r3
 800796a:	f009 f8f0 	bl	8010b4e <memcpy>
 800796e:	6832      	ldr	r2, [r6, #0]
 8007970:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 8007974:	9807      	ldr	r0, [sp, #28]
 8007976:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 8007978:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800797a:	4798      	blx	r3
 800797c:	4638      	mov	r0, r7
 800797e:	b008      	add	sp, #32
 8007980:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007984:	270b      	movs	r7, #11
 8007986:	4638      	mov	r0, r7
 8007988:	b008      	add	sp, #32
 800798a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800798e:	27c8      	movs	r7, #200	@ 0xc8
 8007990:	e7a1      	b.n	80078d6 <rcl_publisher_init+0x32>
 8007992:	b18b      	cbz	r3, 80079b8 <rcl_publisher_init+0x114>
 8007994:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8007998:	b142      	cbz	r2, 80079ac <rcl_publisher_init+0x108>
 800799a:	4630      	mov	r0, r6
 800799c:	f004 ff68 	bl	800c870 <rcl_node_get_rmw_handle>
 80079a0:	6823      	ldr	r3, [r4, #0]
 80079a2:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 80079a6:	f000 fb0f 	bl	8007fc8 <rmw_destroy_publisher>
 80079aa:	6823      	ldr	r3, [r4, #0]
 80079ac:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 80079ae:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 80079b0:	4618      	mov	r0, r3
 80079b2:	4790      	blx	r2
 80079b4:	2300      	movs	r3, #0
 80079b6:	6023      	str	r3, [r4, #0]
 80079b8:	2701      	movs	r7, #1
 80079ba:	e7db      	b.n	8007974 <rcl_publisher_init+0xd0>
 80079bc:	2867      	cmp	r0, #103	@ 0x67
 80079be:	d0d9      	beq.n	8007974 <rcl_publisher_init+0xd0>
 80079c0:	2869      	cmp	r0, #105	@ 0x69
 80079c2:	d003      	beq.n	80079cc <rcl_publisher_init+0x128>
 80079c4:	280a      	cmp	r0, #10
 80079c6:	d1f7      	bne.n	80079b8 <rcl_publisher_init+0x114>
 80079c8:	270a      	movs	r7, #10
 80079ca:	e7d3      	b.n	8007974 <rcl_publisher_init+0xd0>
 80079cc:	2767      	movs	r7, #103	@ 0x67
 80079ce:	e7d1      	b.n	8007974 <rcl_publisher_init+0xd0>

080079d0 <rcl_publisher_get_default_options>:
 80079d0:	b570      	push	{r4, r5, r6, lr}
 80079d2:	4d14      	ldr	r5, [pc, #80]	@ (8007a24 <rcl_publisher_get_default_options+0x54>)
 80079d4:	4914      	ldr	r1, [pc, #80]	@ (8007a28 <rcl_publisher_get_default_options+0x58>)
 80079d6:	b088      	sub	sp, #32
 80079d8:	4604      	mov	r4, r0
 80079da:	2250      	movs	r2, #80	@ 0x50
 80079dc:	4628      	mov	r0, r5
 80079de:	f009 f8b6 	bl	8010b4e <memcpy>
 80079e2:	a802      	add	r0, sp, #8
 80079e4:	f000 f934 	bl	8007c50 <rcutils_get_default_allocator>
 80079e8:	f10d 0c08 	add.w	ip, sp, #8
 80079ec:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80079f0:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 80079f4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80079f8:	466e      	mov	r6, sp
 80079fa:	f8dc 3000 	ldr.w	r3, [ip]
 80079fe:	f8ce 3000 	str.w	r3, [lr]
 8007a02:	4630      	mov	r0, r6
 8007a04:	f000 f974 	bl	8007cf0 <rmw_get_default_publisher_options>
 8007a08:	e896 0003 	ldmia.w	r6, {r0, r1}
 8007a0c:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 8007a10:	e883 0003 	stmia.w	r3, {r0, r1}
 8007a14:	2270      	movs	r2, #112	@ 0x70
 8007a16:	4629      	mov	r1, r5
 8007a18:	4620      	mov	r0, r4
 8007a1a:	f009 f898 	bl	8010b4e <memcpy>
 8007a1e:	4620      	mov	r0, r4
 8007a20:	b008      	add	sp, #32
 8007a22:	bd70      	pop	{r4, r5, r6, pc}
 8007a24:	20009008 	.word	0x20009008
 8007a28:	08011a20 	.word	0x08011a20

08007a2c <rcl_publish>:
 8007a2c:	b1f8      	cbz	r0, 8007a6e <rcl_publish+0x42>
 8007a2e:	6803      	ldr	r3, [r0, #0]
 8007a30:	b570      	push	{r4, r5, r6, lr}
 8007a32:	4604      	mov	r4, r0
 8007a34:	b1b3      	cbz	r3, 8007a64 <rcl_publish+0x38>
 8007a36:	4616      	mov	r6, r2
 8007a38:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8007a3c:	b192      	cbz	r2, 8007a64 <rcl_publish+0x38>
 8007a3e:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 8007a42:	460d      	mov	r5, r1
 8007a44:	f004 fb2e 	bl	800c0a4 <rcl_context_is_valid>
 8007a48:	b160      	cbz	r0, 8007a64 <rcl_publish+0x38>
 8007a4a:	6823      	ldr	r3, [r4, #0]
 8007a4c:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 8007a50:	b140      	cbz	r0, 8007a64 <rcl_publish+0x38>
 8007a52:	b155      	cbz	r5, 8007a6a <rcl_publish+0x3e>
 8007a54:	4632      	mov	r2, r6
 8007a56:	4629      	mov	r1, r5
 8007a58:	f000 f968 	bl	8007d2c <rmw_publish>
 8007a5c:	3800      	subs	r0, #0
 8007a5e:	bf18      	it	ne
 8007a60:	2001      	movne	r0, #1
 8007a62:	bd70      	pop	{r4, r5, r6, pc}
 8007a64:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8007a68:	bd70      	pop	{r4, r5, r6, pc}
 8007a6a:	200b      	movs	r0, #11
 8007a6c:	bd70      	pop	{r4, r5, r6, pc}
 8007a6e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8007a72:	4770      	bx	lr

08007a74 <rclc_support_init>:
 8007a74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a78:	b086      	sub	sp, #24
 8007a7a:	b3b8      	cbz	r0, 8007aec <rclc_support_init+0x78>
 8007a7c:	461c      	mov	r4, r3
 8007a7e:	b3ab      	cbz	r3, 8007aec <rclc_support_init+0x78>
 8007a80:	460f      	mov	r7, r1
 8007a82:	4690      	mov	r8, r2
 8007a84:	4606      	mov	r6, r0
 8007a86:	f004 fc61 	bl	800c34c <rcl_get_zero_initialized_init_options>
 8007a8a:	f104 030c 	add.w	r3, r4, #12
 8007a8e:	9005      	str	r0, [sp, #20]
 8007a90:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007a94:	e88d 0003 	stmia.w	sp, {r0, r1}
 8007a98:	a805      	add	r0, sp, #20
 8007a9a:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8007a9e:	f004 fc57 	bl	800c350 <rcl_init_options_init>
 8007aa2:	4605      	mov	r5, r0
 8007aa4:	b9e0      	cbnz	r0, 8007ae0 <rclc_support_init+0x6c>
 8007aa6:	ad02      	add	r5, sp, #8
 8007aa8:	4628      	mov	r0, r5
 8007aaa:	f004 faf1 	bl	800c090 <rcl_get_zero_initialized_context>
 8007aae:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007ab2:	4633      	mov	r3, r6
 8007ab4:	e886 0003 	stmia.w	r6, {r0, r1}
 8007ab8:	aa05      	add	r2, sp, #20
 8007aba:	4641      	mov	r1, r8
 8007abc:	4638      	mov	r0, r7
 8007abe:	f004 fb57 	bl	800c170 <rcl_init>
 8007ac2:	4605      	mov	r5, r0
 8007ac4:	b9b8      	cbnz	r0, 8007af6 <rclc_support_init+0x82>
 8007ac6:	60b4      	str	r4, [r6, #8]
 8007ac8:	4622      	mov	r2, r4
 8007aca:	f106 010c 	add.w	r1, r6, #12
 8007ace:	2003      	movs	r0, #3
 8007ad0:	f004 ffc0 	bl	800ca54 <rcl_clock_init>
 8007ad4:	4605      	mov	r5, r0
 8007ad6:	b970      	cbnz	r0, 8007af6 <rclc_support_init+0x82>
 8007ad8:	a805      	add	r0, sp, #20
 8007ada:	f004 fc9f 	bl	800c41c <rcl_init_options_fini>
 8007ade:	b108      	cbz	r0, 8007ae4 <rclc_support_init+0x70>
 8007ae0:	f000 f8ea 	bl	8007cb8 <rcutils_reset_error>
 8007ae4:	4628      	mov	r0, r5
 8007ae6:	b006      	add	sp, #24
 8007ae8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007aec:	250b      	movs	r5, #11
 8007aee:	4628      	mov	r0, r5
 8007af0:	b006      	add	sp, #24
 8007af2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007af6:	f000 f8df 	bl	8007cb8 <rcutils_reset_error>
 8007afa:	a805      	add	r0, sp, #20
 8007afc:	f004 fc8e 	bl	800c41c <rcl_init_options_fini>
 8007b00:	2800      	cmp	r0, #0
 8007b02:	d0ef      	beq.n	8007ae4 <rclc_support_init+0x70>
 8007b04:	e7ec      	b.n	8007ae0 <rclc_support_init+0x6c>
 8007b06:	bf00      	nop

08007b08 <rclc_node_init_default>:
 8007b08:	b3b8      	cbz	r0, 8007b7a <rclc_node_init_default+0x72>
 8007b0a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007b0e:	460d      	mov	r5, r1
 8007b10:	b0a1      	sub	sp, #132	@ 0x84
 8007b12:	b329      	cbz	r1, 8007b60 <rclc_node_init_default+0x58>
 8007b14:	4616      	mov	r6, r2
 8007b16:	b31a      	cbz	r2, 8007b60 <rclc_node_init_default+0x58>
 8007b18:	461f      	mov	r7, r3
 8007b1a:	b30b      	cbz	r3, 8007b60 <rclc_node_init_default+0x58>
 8007b1c:	f10d 0810 	add.w	r8, sp, #16
 8007b20:	4604      	mov	r4, r0
 8007b22:	4640      	mov	r0, r8
 8007b24:	f004 fd32 	bl	800c58c <rcl_get_zero_initialized_node>
 8007b28:	e898 0003 	ldmia.w	r8, {r0, r1}
 8007b2c:	f10d 0918 	add.w	r9, sp, #24
 8007b30:	e884 0003 	stmia.w	r4, {r0, r1}
 8007b34:	4648      	mov	r0, r9
 8007b36:	f004 fea1 	bl	800c87c <rcl_node_get_default_options>
 8007b3a:	4640      	mov	r0, r8
 8007b3c:	f004 fd26 	bl	800c58c <rcl_get_zero_initialized_node>
 8007b40:	f8cd 9000 	str.w	r9, [sp]
 8007b44:	e898 0003 	ldmia.w	r8, {r0, r1}
 8007b48:	463b      	mov	r3, r7
 8007b4a:	e884 0003 	stmia.w	r4, {r0, r1}
 8007b4e:	4632      	mov	r2, r6
 8007b50:	4629      	mov	r1, r5
 8007b52:	4620      	mov	r0, r4
 8007b54:	f004 fd24 	bl	800c5a0 <rcl_node_init>
 8007b58:	b930      	cbnz	r0, 8007b68 <rclc_node_init_default+0x60>
 8007b5a:	b021      	add	sp, #132	@ 0x84
 8007b5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007b60:	200b      	movs	r0, #11
 8007b62:	b021      	add	sp, #132	@ 0x84
 8007b64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007b68:	9003      	str	r0, [sp, #12]
 8007b6a:	f000 f8a5 	bl	8007cb8 <rcutils_reset_error>
 8007b6e:	f000 f8a3 	bl	8007cb8 <rcutils_reset_error>
 8007b72:	9803      	ldr	r0, [sp, #12]
 8007b74:	b021      	add	sp, #132	@ 0x84
 8007b76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007b7a:	200b      	movs	r0, #11
 8007b7c:	4770      	bx	lr
 8007b7e:	bf00      	nop

08007b80 <rclc_publisher_init_default>:
 8007b80:	b368      	cbz	r0, 8007bde <rclc_publisher_init_default+0x5e>
 8007b82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b86:	460d      	mov	r5, r1
 8007b88:	b0a0      	sub	sp, #128	@ 0x80
 8007b8a:	b321      	cbz	r1, 8007bd6 <rclc_publisher_init_default+0x56>
 8007b8c:	4616      	mov	r6, r2
 8007b8e:	b312      	cbz	r2, 8007bd6 <rclc_publisher_init_default+0x56>
 8007b90:	461f      	mov	r7, r3
 8007b92:	b303      	cbz	r3, 8007bd6 <rclc_publisher_init_default+0x56>
 8007b94:	4604      	mov	r4, r0
 8007b96:	f7ff fe7f 	bl	8007898 <rcl_get_zero_initialized_publisher>
 8007b9a:	f10d 0810 	add.w	r8, sp, #16
 8007b9e:	6020      	str	r0, [r4, #0]
 8007ba0:	4640      	mov	r0, r8
 8007ba2:	f7ff ff15 	bl	80079d0 <rcl_publisher_get_default_options>
 8007ba6:	490f      	ldr	r1, [pc, #60]	@ (8007be4 <rclc_publisher_init_default+0x64>)
 8007ba8:	2250      	movs	r2, #80	@ 0x50
 8007baa:	4640      	mov	r0, r8
 8007bac:	f008 ffcf 	bl	8010b4e <memcpy>
 8007bb0:	f8cd 8000 	str.w	r8, [sp]
 8007bb4:	463b      	mov	r3, r7
 8007bb6:	4632      	mov	r2, r6
 8007bb8:	4629      	mov	r1, r5
 8007bba:	4620      	mov	r0, r4
 8007bbc:	f7ff fe72 	bl	80078a4 <rcl_publisher_init>
 8007bc0:	b910      	cbnz	r0, 8007bc8 <rclc_publisher_init_default+0x48>
 8007bc2:	b020      	add	sp, #128	@ 0x80
 8007bc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007bc8:	9003      	str	r0, [sp, #12]
 8007bca:	f000 f875 	bl	8007cb8 <rcutils_reset_error>
 8007bce:	9803      	ldr	r0, [sp, #12]
 8007bd0:	b020      	add	sp, #128	@ 0x80
 8007bd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007bd6:	200b      	movs	r0, #11
 8007bd8:	b020      	add	sp, #128	@ 0x80
 8007bda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007bde:	200b      	movs	r0, #11
 8007be0:	4770      	bx	lr
 8007be2:	bf00      	nop
 8007be4:	08011a70 	.word	0x08011a70

08007be8 <__default_zero_allocate>:
 8007be8:	f008 bb22 	b.w	8010230 <calloc>

08007bec <__default_reallocate>:
 8007bec:	f008 bcae 	b.w	801054c <realloc>

08007bf0 <__default_deallocate>:
 8007bf0:	f008 bb8a 	b.w	8010308 <free>

08007bf4 <__default_allocate>:
 8007bf4:	f008 bb80 	b.w	80102f8 <malloc>

08007bf8 <rcutils_get_zero_initialized_allocator>:
 8007bf8:	b510      	push	{r4, lr}
 8007bfa:	4c05      	ldr	r4, [pc, #20]	@ (8007c10 <rcutils_get_zero_initialized_allocator+0x18>)
 8007bfc:	4686      	mov	lr, r0
 8007bfe:	4684      	mov	ip, r0
 8007c00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007c02:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8007c06:	6823      	ldr	r3, [r4, #0]
 8007c08:	f8cc 3000 	str.w	r3, [ip]
 8007c0c:	4670      	mov	r0, lr
 8007c0e:	bd10      	pop	{r4, pc}
 8007c10:	08011ac0 	.word	0x08011ac0

08007c14 <rcutils_set_default_allocator>:
 8007c14:	b1a8      	cbz	r0, 8007c42 <rcutils_set_default_allocator+0x2e>
 8007c16:	6802      	ldr	r2, [r0, #0]
 8007c18:	b1a2      	cbz	r2, 8007c44 <rcutils_set_default_allocator+0x30>
 8007c1a:	6841      	ldr	r1, [r0, #4]
 8007c1c:	b1a1      	cbz	r1, 8007c48 <rcutils_set_default_allocator+0x34>
 8007c1e:	b410      	push	{r4}
 8007c20:	68c4      	ldr	r4, [r0, #12]
 8007c22:	b164      	cbz	r4, 8007c3e <rcutils_set_default_allocator+0x2a>
 8007c24:	6880      	ldr	r0, [r0, #8]
 8007c26:	b138      	cbz	r0, 8007c38 <rcutils_set_default_allocator+0x24>
 8007c28:	4b08      	ldr	r3, [pc, #32]	@ (8007c4c <rcutils_set_default_allocator+0x38>)
 8007c2a:	601a      	str	r2, [r3, #0]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	e9c3 4203 	strd	r4, r2, [r3, #12]
 8007c32:	e9c3 1001 	strd	r1, r0, [r3, #4]
 8007c36:	2001      	movs	r0, #1
 8007c38:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007c3c:	4770      	bx	lr
 8007c3e:	4620      	mov	r0, r4
 8007c40:	e7fa      	b.n	8007c38 <rcutils_set_default_allocator+0x24>
 8007c42:	4770      	bx	lr
 8007c44:	4610      	mov	r0, r2
 8007c46:	4770      	bx	lr
 8007c48:	4608      	mov	r0, r1
 8007c4a:	4770      	bx	lr
 8007c4c:	20000014 	.word	0x20000014

08007c50 <rcutils_get_default_allocator>:
 8007c50:	b510      	push	{r4, lr}
 8007c52:	4c05      	ldr	r4, [pc, #20]	@ (8007c68 <rcutils_get_default_allocator+0x18>)
 8007c54:	4686      	mov	lr, r0
 8007c56:	4684      	mov	ip, r0
 8007c58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007c5a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8007c5e:	6823      	ldr	r3, [r4, #0]
 8007c60:	f8cc 3000 	str.w	r3, [ip]
 8007c64:	4670      	mov	r0, lr
 8007c66:	bd10      	pop	{r4, pc}
 8007c68:	20000014 	.word	0x20000014

08007c6c <rcutils_allocator_is_valid>:
 8007c6c:	b158      	cbz	r0, 8007c86 <rcutils_allocator_is_valid+0x1a>
 8007c6e:	6803      	ldr	r3, [r0, #0]
 8007c70:	b143      	cbz	r3, 8007c84 <rcutils_allocator_is_valid+0x18>
 8007c72:	6843      	ldr	r3, [r0, #4]
 8007c74:	b133      	cbz	r3, 8007c84 <rcutils_allocator_is_valid+0x18>
 8007c76:	68c3      	ldr	r3, [r0, #12]
 8007c78:	b123      	cbz	r3, 8007c84 <rcutils_allocator_is_valid+0x18>
 8007c7a:	6880      	ldr	r0, [r0, #8]
 8007c7c:	3800      	subs	r0, #0
 8007c7e:	bf18      	it	ne
 8007c80:	2001      	movne	r0, #1
 8007c82:	4770      	bx	lr
 8007c84:	4618      	mov	r0, r3
 8007c86:	4770      	bx	lr

08007c88 <rcutils_get_error_string>:
 8007c88:	4b06      	ldr	r3, [pc, #24]	@ (8007ca4 <rcutils_get_error_string+0x1c>)
 8007c8a:	781b      	ldrb	r3, [r3, #0]
 8007c8c:	b13b      	cbz	r3, 8007c9e <rcutils_get_error_string+0x16>
 8007c8e:	4b06      	ldr	r3, [pc, #24]	@ (8007ca8 <rcutils_get_error_string+0x20>)
 8007c90:	781a      	ldrb	r2, [r3, #0]
 8007c92:	b90a      	cbnz	r2, 8007c98 <rcutils_get_error_string+0x10>
 8007c94:	2201      	movs	r2, #1
 8007c96:	701a      	strb	r2, [r3, #0]
 8007c98:	4b04      	ldr	r3, [pc, #16]	@ (8007cac <rcutils_get_error_string+0x24>)
 8007c9a:	7818      	ldrb	r0, [r3, #0]
 8007c9c:	4770      	bx	lr
 8007c9e:	4b04      	ldr	r3, [pc, #16]	@ (8007cb0 <rcutils_get_error_string+0x28>)
 8007ca0:	7818      	ldrb	r0, [r3, #0]
 8007ca2:	4770      	bx	lr
 8007ca4:	20009078 	.word	0x20009078
 8007ca8:	20009091 	.word	0x20009091
 8007cac:	20009090 	.word	0x20009090
 8007cb0:	08011ad4 	.word	0x08011ad4
 8007cb4:	00000000 	.word	0x00000000

08007cb8 <rcutils_reset_error>:
 8007cb8:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 8007cd8 <rcutils_reset_error+0x20>
 8007cbc:	4a08      	ldr	r2, [pc, #32]	@ (8007ce0 <rcutils_reset_error+0x28>)
 8007cbe:	4809      	ldr	r0, [pc, #36]	@ (8007ce4 <rcutils_reset_error+0x2c>)
 8007cc0:	4909      	ldr	r1, [pc, #36]	@ (8007ce8 <rcutils_reset_error+0x30>)
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	8013      	strh	r3, [r2, #0]
 8007cc6:	ed82 7b02 	vstr	d7, [r2, #8]
 8007cca:	4a08      	ldr	r2, [pc, #32]	@ (8007cec <rcutils_reset_error+0x34>)
 8007ccc:	7003      	strb	r3, [r0, #0]
 8007cce:	700b      	strb	r3, [r1, #0]
 8007cd0:	7013      	strb	r3, [r2, #0]
 8007cd2:	4770      	bx	lr
 8007cd4:	f3af 8000 	nop.w
	...
 8007ce0:	20009080 	.word	0x20009080
 8007ce4:	20009091 	.word	0x20009091
 8007ce8:	20009090 	.word	0x20009090
 8007cec:	20009078 	.word	0x20009078

08007cf0 <rmw_get_default_publisher_options>:
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	6002      	str	r2, [r0, #0]
 8007cf4:	7102      	strb	r2, [r0, #4]
 8007cf6:	4770      	bx	lr

08007cf8 <rmw_uros_set_custom_transport>:
 8007cf8:	b470      	push	{r4, r5, r6}
 8007cfa:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 8007cfe:	b162      	cbz	r2, 8007d1a <rmw_uros_set_custom_transport+0x22>
 8007d00:	b15b      	cbz	r3, 8007d1a <rmw_uros_set_custom_transport+0x22>
 8007d02:	b155      	cbz	r5, 8007d1a <rmw_uros_set_custom_transport+0x22>
 8007d04:	b14e      	cbz	r6, 8007d1a <rmw_uros_set_custom_transport+0x22>
 8007d06:	4c06      	ldr	r4, [pc, #24]	@ (8007d20 <rmw_uros_set_custom_transport+0x28>)
 8007d08:	7020      	strb	r0, [r4, #0]
 8007d0a:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8007d0e:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8007d12:	6166      	str	r6, [r4, #20]
 8007d14:	2000      	movs	r0, #0
 8007d16:	bc70      	pop	{r4, r5, r6}
 8007d18:	4770      	bx	lr
 8007d1a:	200b      	movs	r0, #11
 8007d1c:	bc70      	pop	{r4, r5, r6}
 8007d1e:	4770      	bx	lr
 8007d20:	20009094 	.word	0x20009094

08007d24 <flush_session>:
 8007d24:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 8007d26:	f002 bb3d 	b.w	800a3a4 <uxr_run_session_until_confirm_delivery>
 8007d2a:	bf00      	nop

08007d2c <rmw_publish>:
 8007d2c:	2800      	cmp	r0, #0
 8007d2e:	d053      	beq.n	8007dd8 <rmw_publish+0xac>
 8007d30:	b570      	push	{r4, r5, r6, lr}
 8007d32:	460d      	mov	r5, r1
 8007d34:	b08e      	sub	sp, #56	@ 0x38
 8007d36:	2900      	cmp	r1, #0
 8007d38:	d04b      	beq.n	8007dd2 <rmw_publish+0xa6>
 8007d3a:	4604      	mov	r4, r0
 8007d3c:	6800      	ldr	r0, [r0, #0]
 8007d3e:	f000 fc47 	bl	80085d0 <is_uxrce_rmw_identifier_valid>
 8007d42:	2800      	cmp	r0, #0
 8007d44:	d045      	beq.n	8007dd2 <rmw_publish+0xa6>
 8007d46:	6866      	ldr	r6, [r4, #4]
 8007d48:	2e00      	cmp	r6, #0
 8007d4a:	d042      	beq.n	8007dd2 <rmw_publish+0xa6>
 8007d4c:	69b4      	ldr	r4, [r6, #24]
 8007d4e:	4628      	mov	r0, r5
 8007d50:	6923      	ldr	r3, [r4, #16]
 8007d52:	4798      	blx	r3
 8007d54:	69f3      	ldr	r3, [r6, #28]
 8007d56:	9005      	str	r0, [sp, #20]
 8007d58:	b113      	cbz	r3, 8007d60 <rmw_publish+0x34>
 8007d5a:	a805      	add	r0, sp, #20
 8007d5c:	4798      	blx	r3
 8007d5e:	9805      	ldr	r0, [sp, #20]
 8007d60:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 8007d64:	691b      	ldr	r3, [r3, #16]
 8007d66:	9000      	str	r0, [sp, #0]
 8007d68:	6972      	ldr	r2, [r6, #20]
 8007d6a:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 8007d6c:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8007d70:	ab06      	add	r3, sp, #24
 8007d72:	f003 f903 	bl	800af7c <uxr_prepare_output_stream>
 8007d76:	b1d8      	cbz	r0, 8007db0 <rmw_publish+0x84>
 8007d78:	68a3      	ldr	r3, [r4, #8]
 8007d7a:	a906      	add	r1, sp, #24
 8007d7c:	4628      	mov	r0, r5
 8007d7e:	4798      	blx	r3
 8007d80:	6a33      	ldr	r3, [r6, #32]
 8007d82:	4604      	mov	r4, r0
 8007d84:	b10b      	cbz	r3, 8007d8a <rmw_publish+0x5e>
 8007d86:	a806      	add	r0, sp, #24
 8007d88:	4798      	blx	r3
 8007d8a:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 8007d8e:	2b01      	cmp	r3, #1
 8007d90:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 8007d94:	d022      	beq.n	8007ddc <rmw_publish+0xb0>
 8007d96:	6918      	ldr	r0, [r3, #16]
 8007d98:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 8007d9a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8007d9e:	f002 fb01 	bl	800a3a4 <uxr_run_session_until_confirm_delivery>
 8007da2:	4020      	ands	r0, r4
 8007da4:	b2c4      	uxtb	r4, r0
 8007da6:	f084 0001 	eor.w	r0, r4, #1
 8007daa:	b2c0      	uxtb	r0, r0
 8007dac:	b00e      	add	sp, #56	@ 0x38
 8007dae:	bd70      	pop	{r4, r5, r6, pc}
 8007db0:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 8007db4:	6918      	ldr	r0, [r3, #16]
 8007db6:	9b05      	ldr	r3, [sp, #20]
 8007db8:	9300      	str	r3, [sp, #0]
 8007dba:	4b0b      	ldr	r3, [pc, #44]	@ (8007de8 <rmw_publish+0xbc>)
 8007dbc:	9301      	str	r3, [sp, #4]
 8007dbe:	9602      	str	r6, [sp, #8]
 8007dc0:	6972      	ldr	r2, [r6, #20]
 8007dc2:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 8007dc4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8007dc8:	ab06      	add	r3, sp, #24
 8007dca:	f003 f907 	bl	800afdc <uxr_prepare_output_stream_fragmented>
 8007dce:	2800      	cmp	r0, #0
 8007dd0:	d1d2      	bne.n	8007d78 <rmw_publish+0x4c>
 8007dd2:	2001      	movs	r0, #1
 8007dd4:	b00e      	add	sp, #56	@ 0x38
 8007dd6:	bd70      	pop	{r4, r5, r6, pc}
 8007dd8:	2001      	movs	r0, #1
 8007dda:	4770      	bx	lr
 8007ddc:	6918      	ldr	r0, [r3, #16]
 8007dde:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8007de2:	f001 ff59 	bl	8009c98 <uxr_flash_output_streams>
 8007de6:	e7de      	b.n	8007da6 <rmw_publish+0x7a>
 8007de8:	08007d25 	.word	0x08007d25

08007dec <rmw_create_publisher>:
 8007dec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007df0:	b087      	sub	sp, #28
 8007df2:	2800      	cmp	r0, #0
 8007df4:	f000 80cc 	beq.w	8007f90 <rmw_create_publisher+0x1a4>
 8007df8:	460e      	mov	r6, r1
 8007dfa:	2900      	cmp	r1, #0
 8007dfc:	f000 80c8 	beq.w	8007f90 <rmw_create_publisher+0x1a4>
 8007e00:	4604      	mov	r4, r0
 8007e02:	6800      	ldr	r0, [r0, #0]
 8007e04:	4615      	mov	r5, r2
 8007e06:	4698      	mov	r8, r3
 8007e08:	f000 fbe2 	bl	80085d0 <is_uxrce_rmw_identifier_valid>
 8007e0c:	2800      	cmp	r0, #0
 8007e0e:	f000 80bf 	beq.w	8007f90 <rmw_create_publisher+0x1a4>
 8007e12:	2d00      	cmp	r5, #0
 8007e14:	f000 80bc 	beq.w	8007f90 <rmw_create_publisher+0x1a4>
 8007e18:	782b      	ldrb	r3, [r5, #0]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	f000 80b8 	beq.w	8007f90 <rmw_create_publisher+0x1a4>
 8007e20:	f1b8 0f00 	cmp.w	r8, #0
 8007e24:	f000 80b4 	beq.w	8007f90 <rmw_create_publisher+0x1a4>
 8007e28:	485c      	ldr	r0, [pc, #368]	@ (8007f9c <rmw_create_publisher+0x1b0>)
 8007e2a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8007e2e:	f005 fb0f 	bl	800d450 <get_memory>
 8007e32:	2800      	cmp	r0, #0
 8007e34:	f000 80ac 	beq.w	8007f90 <rmw_create_publisher+0x1a4>
 8007e38:	6884      	ldr	r4, [r0, #8]
 8007e3a:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 8007e3e:	f005 fb2b 	bl	800d498 <rmw_get_implementation_identifier>
 8007e42:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 8007e46:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 8007e4a:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 8007e4e:	4628      	mov	r0, r5
 8007e50:	f7f8 f9e8 	bl	8000224 <strlen>
 8007e54:	3001      	adds	r0, #1
 8007e56:	283c      	cmp	r0, #60	@ 0x3c
 8007e58:	f104 0784 	add.w	r7, r4, #132	@ 0x84
 8007e5c:	f200 8091 	bhi.w	8007f82 <rmw_create_publisher+0x196>
 8007e60:	4a4f      	ldr	r2, [pc, #316]	@ (8007fa0 <rmw_create_publisher+0x1b4>)
 8007e62:	462b      	mov	r3, r5
 8007e64:	213c      	movs	r1, #60	@ 0x3c
 8007e66:	4650      	mov	r0, sl
 8007e68:	f008 fcf2 	bl	8010850 <sniprintf>
 8007e6c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8007e70:	67e3      	str	r3, [r4, #124]	@ 0x7c
 8007e72:	4641      	mov	r1, r8
 8007e74:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 8007e78:	2250      	movs	r2, #80	@ 0x50
 8007e7a:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8007e7e:	f008 fe66 	bl	8010b4e <memcpy>
 8007e82:	f898 3008 	ldrb.w	r3, [r8, #8]
 8007e86:	4947      	ldr	r1, [pc, #284]	@ (8007fa4 <rmw_create_publisher+0x1b8>)
 8007e88:	2b02      	cmp	r3, #2
 8007e8a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007e8e:	bf0c      	ite	eq
 8007e90:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 8007e94:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 8007e98:	67a3      	str	r3, [r4, #120]	@ 0x78
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8007ea0:	4630      	mov	r0, r6
 8007ea2:	f000 fba3 	bl	80085ec <get_message_typesupport_handle>
 8007ea6:	2800      	cmp	r0, #0
 8007ea8:	d06b      	beq.n	8007f82 <rmw_create_publisher+0x196>
 8007eaa:	6842      	ldr	r2, [r0, #4]
 8007eac:	61a2      	str	r2, [r4, #24]
 8007eae:	2a00      	cmp	r2, #0
 8007eb0:	d067      	beq.n	8007f82 <rmw_create_publisher+0x196>
 8007eb2:	4629      	mov	r1, r5
 8007eb4:	4643      	mov	r3, r8
 8007eb6:	4648      	mov	r0, r9
 8007eb8:	f005 fd7e 	bl	800d9b8 <create_topic>
 8007ebc:	6260      	str	r0, [r4, #36]	@ 0x24
 8007ebe:	2800      	cmp	r0, #0
 8007ec0:	d063      	beq.n	8007f8a <rmw_create_publisher+0x19e>
 8007ec2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007ec6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007eca:	2103      	movs	r1, #3
 8007ecc:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 8007ed0:	1c42      	adds	r2, r0, #1
 8007ed2:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 8007ed6:	f001 fd91 	bl	80099fc <uxr_object_id>
 8007eda:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 8007ede:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007ee2:	6120      	str	r0, [r4, #16]
 8007ee4:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 8007ee8:	6910      	ldr	r0, [r2, #16]
 8007eea:	2506      	movs	r5, #6
 8007eec:	9500      	str	r5, [sp, #0]
 8007eee:	6819      	ldr	r1, [r3, #0]
 8007ef0:	6922      	ldr	r2, [r4, #16]
 8007ef2:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8007ef6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8007efa:	f001 fcd9 	bl	80098b0 <uxr_buffer_create_publisher_bin>
 8007efe:	4602      	mov	r2, r0
 8007f00:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8007f04:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8007f08:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8007f0c:	f000 fae0 	bl	80084d0 <run_xrce_session>
 8007f10:	b3b8      	cbz	r0, 8007f82 <rmw_create_publisher+0x196>
 8007f12:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007f16:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007f1a:	2105      	movs	r1, #5
 8007f1c:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 8007f20:	1c42      	adds	r2, r0, #1
 8007f22:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 8007f26:	f001 fd69 	bl	80099fc <uxr_object_id>
 8007f2a:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8007f2e:	6160      	str	r0, [r4, #20]
 8007f30:	691e      	ldr	r6, [r3, #16]
 8007f32:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007f36:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 8007f3a:	f10d 0a10 	add.w	sl, sp, #16
 8007f3e:	4641      	mov	r1, r8
 8007f40:	4650      	mov	r0, sl
 8007f42:	f8d3 8384 	ldr.w	r8, [r3, #900]	@ 0x384
 8007f46:	f000 fadf 	bl	8008508 <convert_qos_profile>
 8007f4a:	9503      	str	r5, [sp, #12]
 8007f4c:	e89a 0003 	ldmia.w	sl, {r0, r1}
 8007f50:	9001      	str	r0, [sp, #4]
 8007f52:	f8ad 1008 	strh.w	r1, [sp, #8]
 8007f56:	f8db 3010 	ldr.w	r3, [fp, #16]
 8007f5a:	9300      	str	r3, [sp, #0]
 8007f5c:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 8007f60:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8007f64:	f8d8 1000 	ldr.w	r1, [r8]
 8007f68:	4630      	mov	r0, r6
 8007f6a:	f001 fcd1 	bl	8009910 <uxr_buffer_create_datawriter_bin>
 8007f6e:	4602      	mov	r2, r0
 8007f70:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8007f74:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8007f78:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8007f7c:	f000 faa8 	bl	80084d0 <run_xrce_session>
 8007f80:	b938      	cbnz	r0, 8007f92 <rmw_create_publisher+0x1a6>
 8007f82:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8007f84:	b108      	cbz	r0, 8007f8a <rmw_create_publisher+0x19e>
 8007f86:	f000 fa47 	bl	8008418 <rmw_uxrce_fini_topic_memory>
 8007f8a:	4638      	mov	r0, r7
 8007f8c:	f000 f9ec 	bl	8008368 <rmw_uxrce_fini_publisher_memory>
 8007f90:	2700      	movs	r7, #0
 8007f92:	4638      	mov	r0, r7
 8007f94:	b007      	add	sp, #28
 8007f96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f9a:	bf00      	nop
 8007f9c:	2000d98c 	.word	0x2000d98c
 8007fa0:	08011b0c 	.word	0x08011b0c
 8007fa4:	08011ad8 	.word	0x08011ad8

08007fa8 <rmw_publisher_get_actual_qos>:
 8007fa8:	b150      	cbz	r0, 8007fc0 <rmw_publisher_get_actual_qos+0x18>
 8007faa:	b508      	push	{r3, lr}
 8007fac:	460b      	mov	r3, r1
 8007fae:	b149      	cbz	r1, 8007fc4 <rmw_publisher_get_actual_qos+0x1c>
 8007fb0:	6841      	ldr	r1, [r0, #4]
 8007fb2:	2250      	movs	r2, #80	@ 0x50
 8007fb4:	3128      	adds	r1, #40	@ 0x28
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	f008 fdc9 	bl	8010b4e <memcpy>
 8007fbc:	2000      	movs	r0, #0
 8007fbe:	bd08      	pop	{r3, pc}
 8007fc0:	200b      	movs	r0, #11
 8007fc2:	4770      	bx	lr
 8007fc4:	200b      	movs	r0, #11
 8007fc6:	bd08      	pop	{r3, pc}

08007fc8 <rmw_destroy_publisher>:
 8007fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fca:	b128      	cbz	r0, 8007fd8 <rmw_destroy_publisher+0x10>
 8007fcc:	4604      	mov	r4, r0
 8007fce:	6800      	ldr	r0, [r0, #0]
 8007fd0:	460d      	mov	r5, r1
 8007fd2:	f000 fafd 	bl	80085d0 <is_uxrce_rmw_identifier_valid>
 8007fd6:	b910      	cbnz	r0, 8007fde <rmw_destroy_publisher+0x16>
 8007fd8:	2401      	movs	r4, #1
 8007fda:	4620      	mov	r0, r4
 8007fdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007fde:	6863      	ldr	r3, [r4, #4]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d0f9      	beq.n	8007fd8 <rmw_destroy_publisher+0x10>
 8007fe4:	2d00      	cmp	r5, #0
 8007fe6:	d0f7      	beq.n	8007fd8 <rmw_destroy_publisher+0x10>
 8007fe8:	6828      	ldr	r0, [r5, #0]
 8007fea:	f000 faf1 	bl	80085d0 <is_uxrce_rmw_identifier_valid>
 8007fee:	2800      	cmp	r0, #0
 8007ff0:	d0f2      	beq.n	8007fd8 <rmw_destroy_publisher+0x10>
 8007ff2:	686c      	ldr	r4, [r5, #4]
 8007ff4:	2c00      	cmp	r4, #0
 8007ff6:	d0ef      	beq.n	8007fd8 <rmw_destroy_publisher+0x10>
 8007ff8:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8007ffa:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 8007ffe:	f005 fd2b 	bl	800da58 <destroy_topic>
 8008002:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8008006:	6962      	ldr	r2, [r4, #20]
 8008008:	6918      	ldr	r0, [r3, #16]
 800800a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800800e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8008012:	6819      	ldr	r1, [r3, #0]
 8008014:	f001 fb98 	bl	8009748 <uxr_buffer_delete_entity>
 8008018:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800801c:	6922      	ldr	r2, [r4, #16]
 800801e:	691b      	ldr	r3, [r3, #16]
 8008020:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 8008024:	4604      	mov	r4, r0
 8008026:	6809      	ldr	r1, [r1, #0]
 8008028:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800802c:	f001 fb8c 	bl	8009748 <uxr_buffer_delete_entity>
 8008030:	693e      	ldr	r6, [r7, #16]
 8008032:	4622      	mov	r2, r4
 8008034:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 8008038:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800803c:	4604      	mov	r4, r0
 800803e:	4630      	mov	r0, r6
 8008040:	f000 fa46 	bl	80084d0 <run_xrce_session>
 8008044:	693e      	ldr	r6, [r7, #16]
 8008046:	4622      	mov	r2, r4
 8008048:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800804c:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 8008050:	4604      	mov	r4, r0
 8008052:	4630      	mov	r0, r6
 8008054:	f000 fa3c 	bl	80084d0 <run_xrce_session>
 8008058:	b12c      	cbz	r4, 8008066 <rmw_destroy_publisher+0x9e>
 800805a:	b120      	cbz	r0, 8008066 <rmw_destroy_publisher+0x9e>
 800805c:	2400      	movs	r4, #0
 800805e:	4628      	mov	r0, r5
 8008060:	f000 f982 	bl	8008368 <rmw_uxrce_fini_publisher_memory>
 8008064:	e7b9      	b.n	8007fda <rmw_destroy_publisher+0x12>
 8008066:	2402      	movs	r4, #2
 8008068:	e7f9      	b.n	800805e <rmw_destroy_publisher+0x96>
 800806a:	bf00      	nop

0800806c <rmw_uxrce_init_service_memory>:
 800806c:	b1e2      	cbz	r2, 80080a8 <rmw_uxrce_init_service_memory+0x3c>
 800806e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008072:	7b05      	ldrb	r5, [r0, #12]
 8008074:	4606      	mov	r6, r0
 8008076:	b9ad      	cbnz	r5, 80080a4 <rmw_uxrce_init_service_memory+0x38>
 8008078:	23c8      	movs	r3, #200	@ 0xc8
 800807a:	e9c0 5500 	strd	r5, r5, [r0]
 800807e:	6083      	str	r3, [r0, #8]
 8008080:	f240 1301 	movw	r3, #257	@ 0x101
 8008084:	4617      	mov	r7, r2
 8008086:	8183      	strh	r3, [r0, #12]
 8008088:	460c      	mov	r4, r1
 800808a:	46a8      	mov	r8, r5
 800808c:	4621      	mov	r1, r4
 800808e:	4630      	mov	r0, r6
 8008090:	3501      	adds	r5, #1
 8008092:	f005 f9ed 	bl	800d470 <put_memory>
 8008096:	42af      	cmp	r7, r5
 8008098:	60a4      	str	r4, [r4, #8]
 800809a:	f884 800c 	strb.w	r8, [r4, #12]
 800809e:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 80080a2:	d1f3      	bne.n	800808c <rmw_uxrce_init_service_memory+0x20>
 80080a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080a8:	4770      	bx	lr
 80080aa:	bf00      	nop

080080ac <rmw_uxrce_init_client_memory>:
 80080ac:	b1e2      	cbz	r2, 80080e8 <rmw_uxrce_init_client_memory+0x3c>
 80080ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080b2:	7b05      	ldrb	r5, [r0, #12]
 80080b4:	4606      	mov	r6, r0
 80080b6:	b9ad      	cbnz	r5, 80080e4 <rmw_uxrce_init_client_memory+0x38>
 80080b8:	23c8      	movs	r3, #200	@ 0xc8
 80080ba:	e9c0 5500 	strd	r5, r5, [r0]
 80080be:	6083      	str	r3, [r0, #8]
 80080c0:	f240 1301 	movw	r3, #257	@ 0x101
 80080c4:	4617      	mov	r7, r2
 80080c6:	8183      	strh	r3, [r0, #12]
 80080c8:	460c      	mov	r4, r1
 80080ca:	46a8      	mov	r8, r5
 80080cc:	4621      	mov	r1, r4
 80080ce:	4630      	mov	r0, r6
 80080d0:	3501      	adds	r5, #1
 80080d2:	f005 f9cd 	bl	800d470 <put_memory>
 80080d6:	42af      	cmp	r7, r5
 80080d8:	60a4      	str	r4, [r4, #8]
 80080da:	f884 800c 	strb.w	r8, [r4, #12]
 80080de:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 80080e2:	d1f3      	bne.n	80080cc <rmw_uxrce_init_client_memory+0x20>
 80080e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080e8:	4770      	bx	lr
 80080ea:	bf00      	nop

080080ec <rmw_uxrce_init_publisher_memory>:
 80080ec:	b1e2      	cbz	r2, 8008128 <rmw_uxrce_init_publisher_memory+0x3c>
 80080ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080f2:	7b05      	ldrb	r5, [r0, #12]
 80080f4:	4606      	mov	r6, r0
 80080f6:	b9ad      	cbnz	r5, 8008124 <rmw_uxrce_init_publisher_memory+0x38>
 80080f8:	23d8      	movs	r3, #216	@ 0xd8
 80080fa:	e9c0 5500 	strd	r5, r5, [r0]
 80080fe:	6083      	str	r3, [r0, #8]
 8008100:	f240 1301 	movw	r3, #257	@ 0x101
 8008104:	4617      	mov	r7, r2
 8008106:	8183      	strh	r3, [r0, #12]
 8008108:	460c      	mov	r4, r1
 800810a:	46a8      	mov	r8, r5
 800810c:	4621      	mov	r1, r4
 800810e:	4630      	mov	r0, r6
 8008110:	3501      	adds	r5, #1
 8008112:	f005 f9ad 	bl	800d470 <put_memory>
 8008116:	42af      	cmp	r7, r5
 8008118:	60a4      	str	r4, [r4, #8]
 800811a:	f884 800c 	strb.w	r8, [r4, #12]
 800811e:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 8008122:	d1f3      	bne.n	800810c <rmw_uxrce_init_publisher_memory+0x20>
 8008124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008128:	4770      	bx	lr
 800812a:	bf00      	nop

0800812c <rmw_uxrce_init_subscription_memory>:
 800812c:	b1e2      	cbz	r2, 8008168 <rmw_uxrce_init_subscription_memory+0x3c>
 800812e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008132:	7b05      	ldrb	r5, [r0, #12]
 8008134:	4606      	mov	r6, r0
 8008136:	b9ad      	cbnz	r5, 8008164 <rmw_uxrce_init_subscription_memory+0x38>
 8008138:	23d8      	movs	r3, #216	@ 0xd8
 800813a:	e9c0 5500 	strd	r5, r5, [r0]
 800813e:	6083      	str	r3, [r0, #8]
 8008140:	f240 1301 	movw	r3, #257	@ 0x101
 8008144:	4617      	mov	r7, r2
 8008146:	8183      	strh	r3, [r0, #12]
 8008148:	460c      	mov	r4, r1
 800814a:	46a8      	mov	r8, r5
 800814c:	4621      	mov	r1, r4
 800814e:	4630      	mov	r0, r6
 8008150:	3501      	adds	r5, #1
 8008152:	f005 f98d 	bl	800d470 <put_memory>
 8008156:	42af      	cmp	r7, r5
 8008158:	60a4      	str	r4, [r4, #8]
 800815a:	f884 800c 	strb.w	r8, [r4, #12]
 800815e:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 8008162:	d1f3      	bne.n	800814c <rmw_uxrce_init_subscription_memory+0x20>
 8008164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008168:	4770      	bx	lr
 800816a:	bf00      	nop

0800816c <rmw_uxrce_init_node_memory>:
 800816c:	b1e2      	cbz	r2, 80081a8 <rmw_uxrce_init_node_memory+0x3c>
 800816e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008172:	7b05      	ldrb	r5, [r0, #12]
 8008174:	4606      	mov	r6, r0
 8008176:	b9ad      	cbnz	r5, 80081a4 <rmw_uxrce_init_node_memory+0x38>
 8008178:	23a4      	movs	r3, #164	@ 0xa4
 800817a:	e9c0 5500 	strd	r5, r5, [r0]
 800817e:	6083      	str	r3, [r0, #8]
 8008180:	f240 1301 	movw	r3, #257	@ 0x101
 8008184:	4617      	mov	r7, r2
 8008186:	8183      	strh	r3, [r0, #12]
 8008188:	460c      	mov	r4, r1
 800818a:	46a8      	mov	r8, r5
 800818c:	4621      	mov	r1, r4
 800818e:	4630      	mov	r0, r6
 8008190:	3501      	adds	r5, #1
 8008192:	f005 f96d 	bl	800d470 <put_memory>
 8008196:	42af      	cmp	r7, r5
 8008198:	60a4      	str	r4, [r4, #8]
 800819a:	f884 800c 	strb.w	r8, [r4, #12]
 800819e:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 80081a2:	d1f3      	bne.n	800818c <rmw_uxrce_init_node_memory+0x20>
 80081a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081a8:	4770      	bx	lr
 80081aa:	bf00      	nop

080081ac <rmw_uxrce_init_session_memory>:
 80081ac:	b1ea      	cbz	r2, 80081ea <rmw_uxrce_init_session_memory+0x3e>
 80081ae:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081b2:	7b05      	ldrb	r5, [r0, #12]
 80081b4:	4606      	mov	r6, r0
 80081b6:	b9b5      	cbnz	r5, 80081e6 <rmw_uxrce_init_session_memory+0x3a>
 80081b8:	e9c0 5500 	strd	r5, r5, [r0]
 80081bc:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 80081c0:	f240 1301 	movw	r3, #257	@ 0x101
 80081c4:	4617      	mov	r7, r2
 80081c6:	f8c0 8008 	str.w	r8, [r0, #8]
 80081ca:	460c      	mov	r4, r1
 80081cc:	8183      	strh	r3, [r0, #12]
 80081ce:	46a9      	mov	r9, r5
 80081d0:	4621      	mov	r1, r4
 80081d2:	4630      	mov	r0, r6
 80081d4:	3501      	adds	r5, #1
 80081d6:	f005 f94b 	bl	800d470 <put_memory>
 80081da:	42af      	cmp	r7, r5
 80081dc:	60a4      	str	r4, [r4, #8]
 80081de:	f884 900c 	strb.w	r9, [r4, #12]
 80081e2:	4444      	add	r4, r8
 80081e4:	d1f4      	bne.n	80081d0 <rmw_uxrce_init_session_memory+0x24>
 80081e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081ea:	4770      	bx	lr

080081ec <rmw_uxrce_init_topic_memory>:
 80081ec:	b1e2      	cbz	r2, 8008228 <rmw_uxrce_init_topic_memory+0x3c>
 80081ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081f2:	7b05      	ldrb	r5, [r0, #12]
 80081f4:	4606      	mov	r6, r0
 80081f6:	b9ad      	cbnz	r5, 8008224 <rmw_uxrce_init_topic_memory+0x38>
 80081f8:	231c      	movs	r3, #28
 80081fa:	e9c0 5500 	strd	r5, r5, [r0]
 80081fe:	6083      	str	r3, [r0, #8]
 8008200:	f240 1301 	movw	r3, #257	@ 0x101
 8008204:	4617      	mov	r7, r2
 8008206:	8183      	strh	r3, [r0, #12]
 8008208:	460c      	mov	r4, r1
 800820a:	46a8      	mov	r8, r5
 800820c:	4621      	mov	r1, r4
 800820e:	4630      	mov	r0, r6
 8008210:	3501      	adds	r5, #1
 8008212:	f005 f92d 	bl	800d470 <put_memory>
 8008216:	42af      	cmp	r7, r5
 8008218:	60a4      	str	r4, [r4, #8]
 800821a:	f884 800c 	strb.w	r8, [r4, #12]
 800821e:	f104 041c 	add.w	r4, r4, #28
 8008222:	d1f3      	bne.n	800820c <rmw_uxrce_init_topic_memory+0x20>
 8008224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008228:	4770      	bx	lr
 800822a:	bf00      	nop

0800822c <rmw_uxrce_init_static_input_buffer_memory>:
 800822c:	b1ea      	cbz	r2, 800826a <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800822e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008232:	7b05      	ldrb	r5, [r0, #12]
 8008234:	4606      	mov	r6, r0
 8008236:	b9b5      	cbnz	r5, 8008266 <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 8008238:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 800823c:	e9c0 5500 	strd	r5, r5, [r0]
 8008240:	6083      	str	r3, [r0, #8]
 8008242:	f240 1301 	movw	r3, #257	@ 0x101
 8008246:	4617      	mov	r7, r2
 8008248:	8183      	strh	r3, [r0, #12]
 800824a:	460c      	mov	r4, r1
 800824c:	46a8      	mov	r8, r5
 800824e:	4621      	mov	r1, r4
 8008250:	4630      	mov	r0, r6
 8008252:	3501      	adds	r5, #1
 8008254:	f005 f90c 	bl	800d470 <put_memory>
 8008258:	42af      	cmp	r7, r5
 800825a:	60a4      	str	r4, [r4, #8]
 800825c:	f884 800c 	strb.w	r8, [r4, #12]
 8008260:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 8008264:	d1f3      	bne.n	800824e <rmw_uxrce_init_static_input_buffer_memory+0x22>
 8008266:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800826a:	4770      	bx	lr

0800826c <rmw_uxrce_init_init_options_impl_memory>:
 800826c:	b1e2      	cbz	r2, 80082a8 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800826e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008272:	7b05      	ldrb	r5, [r0, #12]
 8008274:	4606      	mov	r6, r0
 8008276:	b9ad      	cbnz	r5, 80082a4 <rmw_uxrce_init_init_options_impl_memory+0x38>
 8008278:	232c      	movs	r3, #44	@ 0x2c
 800827a:	e9c0 5500 	strd	r5, r5, [r0]
 800827e:	6083      	str	r3, [r0, #8]
 8008280:	f240 1301 	movw	r3, #257	@ 0x101
 8008284:	4617      	mov	r7, r2
 8008286:	8183      	strh	r3, [r0, #12]
 8008288:	460c      	mov	r4, r1
 800828a:	46a8      	mov	r8, r5
 800828c:	4621      	mov	r1, r4
 800828e:	4630      	mov	r0, r6
 8008290:	3501      	adds	r5, #1
 8008292:	f005 f8ed 	bl	800d470 <put_memory>
 8008296:	42af      	cmp	r7, r5
 8008298:	60a4      	str	r4, [r4, #8]
 800829a:	f884 800c 	strb.w	r8, [r4, #12]
 800829e:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 80082a2:	d1f3      	bne.n	800828c <rmw_uxrce_init_init_options_impl_memory+0x20>
 80082a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082a8:	4770      	bx	lr
 80082aa:	bf00      	nop

080082ac <rmw_uxrce_init_wait_set_memory>:
 80082ac:	b1e2      	cbz	r2, 80082e8 <rmw_uxrce_init_wait_set_memory+0x3c>
 80082ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082b2:	7b05      	ldrb	r5, [r0, #12]
 80082b4:	4606      	mov	r6, r0
 80082b6:	b9ad      	cbnz	r5, 80082e4 <rmw_uxrce_init_wait_set_memory+0x38>
 80082b8:	231c      	movs	r3, #28
 80082ba:	e9c0 5500 	strd	r5, r5, [r0]
 80082be:	6083      	str	r3, [r0, #8]
 80082c0:	f240 1301 	movw	r3, #257	@ 0x101
 80082c4:	4617      	mov	r7, r2
 80082c6:	8183      	strh	r3, [r0, #12]
 80082c8:	460c      	mov	r4, r1
 80082ca:	46a8      	mov	r8, r5
 80082cc:	4621      	mov	r1, r4
 80082ce:	4630      	mov	r0, r6
 80082d0:	3501      	adds	r5, #1
 80082d2:	f005 f8cd 	bl	800d470 <put_memory>
 80082d6:	42af      	cmp	r7, r5
 80082d8:	60a4      	str	r4, [r4, #8]
 80082da:	f884 800c 	strb.w	r8, [r4, #12]
 80082de:	f104 041c 	add.w	r4, r4, #28
 80082e2:	d1f3      	bne.n	80082cc <rmw_uxrce_init_wait_set_memory+0x20>
 80082e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082e8:	4770      	bx	lr
 80082ea:	bf00      	nop

080082ec <rmw_uxrce_init_guard_condition_memory>:
 80082ec:	b1e2      	cbz	r2, 8008328 <rmw_uxrce_init_guard_condition_memory+0x3c>
 80082ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082f2:	7b05      	ldrb	r5, [r0, #12]
 80082f4:	4606      	mov	r6, r0
 80082f6:	b9ad      	cbnz	r5, 8008324 <rmw_uxrce_init_guard_condition_memory+0x38>
 80082f8:	2320      	movs	r3, #32
 80082fa:	e9c0 5500 	strd	r5, r5, [r0]
 80082fe:	6083      	str	r3, [r0, #8]
 8008300:	f240 1301 	movw	r3, #257	@ 0x101
 8008304:	4617      	mov	r7, r2
 8008306:	8183      	strh	r3, [r0, #12]
 8008308:	460c      	mov	r4, r1
 800830a:	46a8      	mov	r8, r5
 800830c:	4621      	mov	r1, r4
 800830e:	4630      	mov	r0, r6
 8008310:	3501      	adds	r5, #1
 8008312:	f005 f8ad 	bl	800d470 <put_memory>
 8008316:	42af      	cmp	r7, r5
 8008318:	60a4      	str	r4, [r4, #8]
 800831a:	f884 800c 	strb.w	r8, [r4, #12]
 800831e:	f104 0420 	add.w	r4, r4, #32
 8008322:	d1f3      	bne.n	800830c <rmw_uxrce_init_guard_condition_memory+0x20>
 8008324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008328:	4770      	bx	lr
 800832a:	bf00      	nop

0800832c <rmw_uxrce_fini_session_memory>:
 800832c:	4601      	mov	r1, r0
 800832e:	4801      	ldr	r0, [pc, #4]	@ (8008334 <rmw_uxrce_fini_session_memory+0x8>)
 8008330:	f005 b89e 	b.w	800d470 <put_memory>
 8008334:	2000d9ac 	.word	0x2000d9ac

08008338 <rmw_uxrce_fini_node_memory>:
 8008338:	b538      	push	{r3, r4, r5, lr}
 800833a:	4604      	mov	r4, r0
 800833c:	6800      	ldr	r0, [r0, #0]
 800833e:	b128      	cbz	r0, 800834c <rmw_uxrce_fini_node_memory+0x14>
 8008340:	4b07      	ldr	r3, [pc, #28]	@ (8008360 <rmw_uxrce_fini_node_memory+0x28>)
 8008342:	6819      	ldr	r1, [r3, #0]
 8008344:	f7f7 ff64 	bl	8000210 <strcmp>
 8008348:	b940      	cbnz	r0, 800835c <rmw_uxrce_fini_node_memory+0x24>
 800834a:	6020      	str	r0, [r4, #0]
 800834c:	6861      	ldr	r1, [r4, #4]
 800834e:	b129      	cbz	r1, 800835c <rmw_uxrce_fini_node_memory+0x24>
 8008350:	2500      	movs	r5, #0
 8008352:	4804      	ldr	r0, [pc, #16]	@ (8008364 <rmw_uxrce_fini_node_memory+0x2c>)
 8008354:	610d      	str	r5, [r1, #16]
 8008356:	f005 f88b 	bl	800d470 <put_memory>
 800835a:	6065      	str	r5, [r4, #4]
 800835c:	bd38      	pop	{r3, r4, r5, pc}
 800835e:	bf00      	nop
 8008360:	08012060 	.word	0x08012060
 8008364:	2000d97c 	.word	0x2000d97c

08008368 <rmw_uxrce_fini_publisher_memory>:
 8008368:	b510      	push	{r4, lr}
 800836a:	4604      	mov	r4, r0
 800836c:	6800      	ldr	r0, [r0, #0]
 800836e:	b128      	cbz	r0, 800837c <rmw_uxrce_fini_publisher_memory+0x14>
 8008370:	4b06      	ldr	r3, [pc, #24]	@ (800838c <rmw_uxrce_fini_publisher_memory+0x24>)
 8008372:	6819      	ldr	r1, [r3, #0]
 8008374:	f7f7 ff4c 	bl	8000210 <strcmp>
 8008378:	b938      	cbnz	r0, 800838a <rmw_uxrce_fini_publisher_memory+0x22>
 800837a:	6020      	str	r0, [r4, #0]
 800837c:	6861      	ldr	r1, [r4, #4]
 800837e:	b121      	cbz	r1, 800838a <rmw_uxrce_fini_publisher_memory+0x22>
 8008380:	4803      	ldr	r0, [pc, #12]	@ (8008390 <rmw_uxrce_fini_publisher_memory+0x28>)
 8008382:	f005 f875 	bl	800d470 <put_memory>
 8008386:	2300      	movs	r3, #0
 8008388:	6063      	str	r3, [r4, #4]
 800838a:	bd10      	pop	{r4, pc}
 800838c:	08012060 	.word	0x08012060
 8008390:	2000d98c 	.word	0x2000d98c

08008394 <rmw_uxrce_fini_subscription_memory>:
 8008394:	b510      	push	{r4, lr}
 8008396:	4604      	mov	r4, r0
 8008398:	6800      	ldr	r0, [r0, #0]
 800839a:	b128      	cbz	r0, 80083a8 <rmw_uxrce_fini_subscription_memory+0x14>
 800839c:	4b06      	ldr	r3, [pc, #24]	@ (80083b8 <rmw_uxrce_fini_subscription_memory+0x24>)
 800839e:	6819      	ldr	r1, [r3, #0]
 80083a0:	f7f7 ff36 	bl	8000210 <strcmp>
 80083a4:	b938      	cbnz	r0, 80083b6 <rmw_uxrce_fini_subscription_memory+0x22>
 80083a6:	6020      	str	r0, [r4, #0]
 80083a8:	6861      	ldr	r1, [r4, #4]
 80083aa:	b121      	cbz	r1, 80083b6 <rmw_uxrce_fini_subscription_memory+0x22>
 80083ac:	4803      	ldr	r0, [pc, #12]	@ (80083bc <rmw_uxrce_fini_subscription_memory+0x28>)
 80083ae:	f005 f85f 	bl	800d470 <put_memory>
 80083b2:	2300      	movs	r3, #0
 80083b4:	6063      	str	r3, [r4, #4]
 80083b6:	bd10      	pop	{r4, pc}
 80083b8:	08012060 	.word	0x08012060
 80083bc:	2000d9cc 	.word	0x2000d9cc

080083c0 <rmw_uxrce_fini_service_memory>:
 80083c0:	b510      	push	{r4, lr}
 80083c2:	4604      	mov	r4, r0
 80083c4:	6800      	ldr	r0, [r0, #0]
 80083c6:	b128      	cbz	r0, 80083d4 <rmw_uxrce_fini_service_memory+0x14>
 80083c8:	4b06      	ldr	r3, [pc, #24]	@ (80083e4 <rmw_uxrce_fini_service_memory+0x24>)
 80083ca:	6819      	ldr	r1, [r3, #0]
 80083cc:	f7f7 ff20 	bl	8000210 <strcmp>
 80083d0:	b938      	cbnz	r0, 80083e2 <rmw_uxrce_fini_service_memory+0x22>
 80083d2:	6020      	str	r0, [r4, #0]
 80083d4:	6861      	ldr	r1, [r4, #4]
 80083d6:	b121      	cbz	r1, 80083e2 <rmw_uxrce_fini_service_memory+0x22>
 80083d8:	4803      	ldr	r0, [pc, #12]	@ (80083e8 <rmw_uxrce_fini_service_memory+0x28>)
 80083da:	f005 f849 	bl	800d470 <put_memory>
 80083de:	2300      	movs	r3, #0
 80083e0:	6063      	str	r3, [r4, #4]
 80083e2:	bd10      	pop	{r4, pc}
 80083e4:	08012060 	.word	0x08012060
 80083e8:	2000d99c 	.word	0x2000d99c

080083ec <rmw_uxrce_fini_client_memory>:
 80083ec:	b510      	push	{r4, lr}
 80083ee:	4604      	mov	r4, r0
 80083f0:	6800      	ldr	r0, [r0, #0]
 80083f2:	b128      	cbz	r0, 8008400 <rmw_uxrce_fini_client_memory+0x14>
 80083f4:	4b06      	ldr	r3, [pc, #24]	@ (8008410 <rmw_uxrce_fini_client_memory+0x24>)
 80083f6:	6819      	ldr	r1, [r3, #0]
 80083f8:	f7f7 ff0a 	bl	8000210 <strcmp>
 80083fc:	b938      	cbnz	r0, 800840e <rmw_uxrce_fini_client_memory+0x22>
 80083fe:	6020      	str	r0, [r4, #0]
 8008400:	6861      	ldr	r1, [r4, #4]
 8008402:	b121      	cbz	r1, 800840e <rmw_uxrce_fini_client_memory+0x22>
 8008404:	4803      	ldr	r0, [pc, #12]	@ (8008414 <rmw_uxrce_fini_client_memory+0x28>)
 8008406:	f005 f833 	bl	800d470 <put_memory>
 800840a:	2300      	movs	r3, #0
 800840c:	6063      	str	r3, [r4, #4]
 800840e:	bd10      	pop	{r4, pc}
 8008410:	08012060 	.word	0x08012060
 8008414:	200090b0 	.word	0x200090b0

08008418 <rmw_uxrce_fini_topic_memory>:
 8008418:	b510      	push	{r4, lr}
 800841a:	4604      	mov	r4, r0
 800841c:	4621      	mov	r1, r4
 800841e:	4803      	ldr	r0, [pc, #12]	@ (800842c <rmw_uxrce_fini_topic_memory+0x14>)
 8008420:	f005 f826 	bl	800d470 <put_memory>
 8008424:	2300      	movs	r3, #0
 8008426:	61a3      	str	r3, [r4, #24]
 8008428:	bd10      	pop	{r4, pc}
 800842a:	bf00      	nop
 800842c:	2000d9dc 	.word	0x2000d9dc

08008430 <rmw_uxrce_get_static_input_buffer_for_entity>:
 8008430:	b082      	sub	sp, #8
 8008432:	b530      	push	{r4, r5, lr}
 8008434:	4925      	ldr	r1, [pc, #148]	@ (80084cc <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 8008436:	680d      	ldr	r5, [r1, #0]
 8008438:	ac03      	add	r4, sp, #12
 800843a:	e884 000c 	stmia.w	r4, {r2, r3}
 800843e:	461c      	mov	r4, r3
 8008440:	2d00      	cmp	r5, #0
 8008442:	d041      	beq.n	80084c8 <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 8008444:	462b      	mov	r3, r5
 8008446:	2100      	movs	r1, #0
 8008448:	689a      	ldr	r2, [r3, #8]
 800844a:	685b      	ldr	r3, [r3, #4]
 800844c:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 8008450:	4290      	cmp	r0, r2
 8008452:	bf08      	it	eq
 8008454:	3101      	addeq	r1, #1
 8008456:	2b00      	cmp	r3, #0
 8008458:	d1f6      	bne.n	8008448 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800845a:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800845e:	2b02      	cmp	r3, #2
 8008460:	d029      	beq.n	80084b6 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 8008462:	d907      	bls.n	8008474 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 8008464:	2b03      	cmp	r3, #3
 8008466:	d005      	beq.n	8008474 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 8008468:	2100      	movs	r1, #0
 800846a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800846e:	4608      	mov	r0, r1
 8008470:	b002      	add	sp, #8
 8008472:	4770      	bx	lr
 8008474:	b314      	cbz	r4, 80084bc <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 8008476:	428c      	cmp	r4, r1
 8008478:	d820      	bhi.n	80084bc <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800847a:	2d00      	cmp	r5, #0
 800847c:	d0f4      	beq.n	8008468 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800847e:	2100      	movs	r1, #0
 8008480:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8008484:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 8008488:	e002      	b.n	8008490 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 800848a:	686d      	ldr	r5, [r5, #4]
 800848c:	2d00      	cmp	r5, #0
 800848e:	d0ec      	beq.n	800846a <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 8008490:	68ab      	ldr	r3, [r5, #8]
 8008492:	f8d3 2814 	ldr.w	r2, [r3, #2068]	@ 0x814
 8008496:	4290      	cmp	r0, r2
 8008498:	d1f7      	bne.n	800848a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800849a:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 800849e:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 80084a2:	4562      	cmp	r2, ip
 80084a4:	f853 3c04 	ldr.w	r3, [r3, #-4]
 80084a8:	eb73 0e04 	sbcs.w	lr, r3, r4
 80084ac:	daed      	bge.n	800848a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 80084ae:	4694      	mov	ip, r2
 80084b0:	461c      	mov	r4, r3
 80084b2:	4629      	mov	r1, r5
 80084b4:	e7e9      	b.n	800848a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 80084b6:	b10c      	cbz	r4, 80084bc <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 80084b8:	428c      	cmp	r4, r1
 80084ba:	d9d5      	bls.n	8008468 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 80084bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80084c0:	4802      	ldr	r0, [pc, #8]	@ (80084cc <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 80084c2:	b002      	add	sp, #8
 80084c4:	f004 bfc4 	b.w	800d450 <get_memory>
 80084c8:	4629      	mov	r1, r5
 80084ca:	e7c6      	b.n	800845a <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 80084cc:	2000d9bc 	.word	0x2000d9bc

080084d0 <run_xrce_session>:
 80084d0:	b510      	push	{r4, lr}
 80084d2:	788c      	ldrb	r4, [r1, #2]
 80084d4:	b086      	sub	sp, #24
 80084d6:	2c01      	cmp	r4, #1
 80084d8:	f8ad 200e 	strh.w	r2, [sp, #14]
 80084dc:	d00c      	beq.n	80084f8 <run_xrce_session+0x28>
 80084de:	4619      	mov	r1, r3
 80084e0:	2301      	movs	r3, #1
 80084e2:	9300      	str	r3, [sp, #0]
 80084e4:	f10d 020e 	add.w	r2, sp, #14
 80084e8:	f10d 0317 	add.w	r3, sp, #23
 80084ec:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80084f0:	f001 ff7e 	bl	800a3f0 <uxr_run_session_until_all_status>
 80084f4:	b006      	add	sp, #24
 80084f6:	bd10      	pop	{r4, pc}
 80084f8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80084fc:	f001 fbcc 	bl	8009c98 <uxr_flash_output_streams>
 8008500:	4620      	mov	r0, r4
 8008502:	b006      	add	sp, #24
 8008504:	bd10      	pop	{r4, pc}
 8008506:	bf00      	nop

08008508 <convert_qos_profile>:
 8008508:	7a4a      	ldrb	r2, [r1, #9]
 800850a:	f891 c008 	ldrb.w	ip, [r1, #8]
 800850e:	2a02      	cmp	r2, #2
 8008510:	bf18      	it	ne
 8008512:	2200      	movne	r2, #0
 8008514:	7002      	strb	r2, [r0, #0]
 8008516:	780a      	ldrb	r2, [r1, #0]
 8008518:	8889      	ldrh	r1, [r1, #4]
 800851a:	8081      	strh	r1, [r0, #4]
 800851c:	f1ac 0c02 	sub.w	ip, ip, #2
 8008520:	f1a2 0202 	sub.w	r2, r2, #2
 8008524:	fabc fc8c 	clz	ip, ip
 8008528:	fab2 f282 	clz	r2, r2
 800852c:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8008530:	0952      	lsrs	r2, r2, #5
 8008532:	f880 c001 	strb.w	ip, [r0, #1]
 8008536:	7082      	strb	r2, [r0, #2]
 8008538:	4770      	bx	lr
 800853a:	bf00      	nop

0800853c <generate_type_name>:
 800853c:	b530      	push	{r4, r5, lr}
 800853e:	2300      	movs	r3, #0
 8008540:	700b      	strb	r3, [r1, #0]
 8008542:	6803      	ldr	r3, [r0, #0]
 8008544:	b087      	sub	sp, #28
 8008546:	4614      	mov	r4, r2
 8008548:	b1d3      	cbz	r3, 8008580 <generate_type_name+0x44>
 800854a:	4a0f      	ldr	r2, [pc, #60]	@ (8008588 <generate_type_name+0x4c>)
 800854c:	4615      	mov	r5, r2
 800854e:	9203      	str	r2, [sp, #12]
 8008550:	9500      	str	r5, [sp, #0]
 8008552:	6842      	ldr	r2, [r0, #4]
 8008554:	480d      	ldr	r0, [pc, #52]	@ (800858c <generate_type_name+0x50>)
 8008556:	9001      	str	r0, [sp, #4]
 8008558:	4608      	mov	r0, r1
 800855a:	490d      	ldr	r1, [pc, #52]	@ (8008590 <generate_type_name+0x54>)
 800855c:	9204      	str	r2, [sp, #16]
 800855e:	9105      	str	r1, [sp, #20]
 8008560:	9102      	str	r1, [sp, #8]
 8008562:	4a0c      	ldr	r2, [pc, #48]	@ (8008594 <generate_type_name+0x58>)
 8008564:	4621      	mov	r1, r4
 8008566:	f008 f973 	bl	8010850 <sniprintf>
 800856a:	2800      	cmp	r0, #0
 800856c:	db05      	blt.n	800857a <generate_type_name+0x3e>
 800856e:	4284      	cmp	r4, r0
 8008570:	bfd4      	ite	le
 8008572:	2000      	movle	r0, #0
 8008574:	2001      	movgt	r0, #1
 8008576:	b007      	add	sp, #28
 8008578:	bd30      	pop	{r4, r5, pc}
 800857a:	2000      	movs	r0, #0
 800857c:	b007      	add	sp, #28
 800857e:	bd30      	pop	{r4, r5, pc}
 8008580:	4b05      	ldr	r3, [pc, #20]	@ (8008598 <generate_type_name+0x5c>)
 8008582:	4a01      	ldr	r2, [pc, #4]	@ (8008588 <generate_type_name+0x4c>)
 8008584:	461d      	mov	r5, r3
 8008586:	e7e2      	b.n	800854e <generate_type_name+0x12>
 8008588:	08011afc 	.word	0x08011afc
 800858c:	08011b14 	.word	0x08011b14
 8008590:	08011b10 	.word	0x08011b10
 8008594:	08011b00 	.word	0x08011b00
 8008598:	08011d98 	.word	0x08011d98

0800859c <generate_topic_name>:
 800859c:	b510      	push	{r4, lr}
 800859e:	b082      	sub	sp, #8
 80085a0:	4614      	mov	r4, r2
 80085a2:	9000      	str	r0, [sp, #0]
 80085a4:	4b08      	ldr	r3, [pc, #32]	@ (80085c8 <generate_topic_name+0x2c>)
 80085a6:	4a09      	ldr	r2, [pc, #36]	@ (80085cc <generate_topic_name+0x30>)
 80085a8:	4608      	mov	r0, r1
 80085aa:	4621      	mov	r1, r4
 80085ac:	f008 f950 	bl	8010850 <sniprintf>
 80085b0:	2800      	cmp	r0, #0
 80085b2:	db05      	blt.n	80085c0 <generate_topic_name+0x24>
 80085b4:	4284      	cmp	r4, r0
 80085b6:	bfd4      	ite	le
 80085b8:	2000      	movle	r0, #0
 80085ba:	2001      	movgt	r0, #1
 80085bc:	b002      	add	sp, #8
 80085be:	bd10      	pop	{r4, pc}
 80085c0:	2000      	movs	r0, #0
 80085c2:	b002      	add	sp, #8
 80085c4:	bd10      	pop	{r4, pc}
 80085c6:	bf00      	nop
 80085c8:	08011fd8 	.word	0x08011fd8
 80085cc:	08011b18 	.word	0x08011b18

080085d0 <is_uxrce_rmw_identifier_valid>:
 80085d0:	b510      	push	{r4, lr}
 80085d2:	4604      	mov	r4, r0
 80085d4:	b140      	cbz	r0, 80085e8 <is_uxrce_rmw_identifier_valid+0x18>
 80085d6:	f004 ff5f 	bl	800d498 <rmw_get_implementation_identifier>
 80085da:	4601      	mov	r1, r0
 80085dc:	4620      	mov	r0, r4
 80085de:	f7f7 fe17 	bl	8000210 <strcmp>
 80085e2:	fab0 f080 	clz	r0, r0
 80085e6:	0940      	lsrs	r0, r0, #5
 80085e8:	bd10      	pop	{r4, pc}
 80085ea:	bf00      	nop

080085ec <get_message_typesupport_handle>:
 80085ec:	6883      	ldr	r3, [r0, #8]
 80085ee:	4718      	bx	r3

080085f0 <get_message_typesupport_handle_function>:
 80085f0:	b510      	push	{r4, lr}
 80085f2:	4604      	mov	r4, r0
 80085f4:	6800      	ldr	r0, [r0, #0]
 80085f6:	f7f7 fe0b 	bl	8000210 <strcmp>
 80085fa:	2800      	cmp	r0, #0
 80085fc:	bf0c      	ite	eq
 80085fe:	4620      	moveq	r0, r4
 8008600:	2000      	movne	r0, #0
 8008602:	bd10      	pop	{r4, pc}

08008604 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 8008604:	4b04      	ldr	r3, [pc, #16]	@ (8008618 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8008606:	681a      	ldr	r2, [r3, #0]
 8008608:	b10a      	cbz	r2, 800860e <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 800860a:	4803      	ldr	r0, [pc, #12]	@ (8008618 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800860c:	4770      	bx	lr
 800860e:	4a03      	ldr	r2, [pc, #12]	@ (800861c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 8008610:	4801      	ldr	r0, [pc, #4]	@ (8008618 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8008612:	6812      	ldr	r2, [r2, #0]
 8008614:	601a      	str	r2, [r3, #0]
 8008616:	4770      	bx	lr
 8008618:	20000030 	.word	0x20000030
 800861c:	200000ac 	.word	0x200000ac

08008620 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 8008620:	4a02      	ldr	r2, [pc, #8]	@ (800862c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xc>)
 8008622:	4b03      	ldr	r3, [pc, #12]	@ (8008630 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x10>)
 8008624:	6812      	ldr	r2, [r2, #0]
 8008626:	601a      	str	r2, [r3, #0]
 8008628:	4770      	bx	lr
 800862a:	bf00      	nop
 800862c:	200000ac 	.word	0x200000ac
 8008630:	20000030 	.word	0x20000030

08008634 <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_init_function>:
 8008634:	f005 bc3e 	b.w	800deb4 <std_msgs__msg__Int32__init>

08008638 <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_fini_function>:
 8008638:	f005 bc40 	b.w	800debc <std_msgs__msg__Int32__fini>

0800863c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800863c:	4b04      	ldr	r3, [pc, #16]	@ (8008650 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800863e:	681a      	ldr	r2, [r3, #0]
 8008640:	b10a      	cbz	r2, 8008646 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 8008642:	4803      	ldr	r0, [pc, #12]	@ (8008650 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8008644:	4770      	bx	lr
 8008646:	4a03      	ldr	r2, [pc, #12]	@ (8008654 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 8008648:	4801      	ldr	r0, [pc, #4]	@ (8008650 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800864a:	6812      	ldr	r2, [r2, #0]
 800864c:	601a      	str	r2, [r3, #0]
 800864e:	4770      	bx	lr
 8008650:	20000078 	.word	0x20000078
 8008654:	200000b0 	.word	0x200000b0

08008658 <_Int32__max_serialized_size>:
 8008658:	b508      	push	{r3, lr}
 800865a:	2104      	movs	r1, #4
 800865c:	2000      	movs	r0, #0
 800865e:	f001 f807 	bl	8009670 <ucdr_alignment>
 8008662:	3004      	adds	r0, #4
 8008664:	bd08      	pop	{r3, pc}
 8008666:	bf00      	nop

08008668 <_Int32__cdr_deserialize>:
 8008668:	b109      	cbz	r1, 800866e <_Int32__cdr_deserialize+0x6>
 800866a:	f000 bf19 	b.w	80094a0 <ucdr_deserialize_int32_t>
 800866e:	4608      	mov	r0, r1
 8008670:	4770      	bx	lr
 8008672:	bf00      	nop

08008674 <get_serialized_size_std_msgs__msg__Int32>:
 8008674:	b138      	cbz	r0, 8008686 <get_serialized_size_std_msgs__msg__Int32+0x12>
 8008676:	b508      	push	{r3, lr}
 8008678:	460b      	mov	r3, r1
 800867a:	4618      	mov	r0, r3
 800867c:	2104      	movs	r1, #4
 800867e:	f000 fff7 	bl	8009670 <ucdr_alignment>
 8008682:	3004      	adds	r0, #4
 8008684:	bd08      	pop	{r3, pc}
 8008686:	4770      	bx	lr

08008688 <_Int32__cdr_serialize>:
 8008688:	460a      	mov	r2, r1
 800868a:	b118      	cbz	r0, 8008694 <_Int32__cdr_serialize+0xc>
 800868c:	6801      	ldr	r1, [r0, #0]
 800868e:	4610      	mov	r0, r2
 8008690:	f000 be6e 	b.w	8009370 <ucdr_serialize_int32_t>
 8008694:	4770      	bx	lr
 8008696:	bf00      	nop

08008698 <_Int32__get_serialized_size>:
 8008698:	b130      	cbz	r0, 80086a8 <_Int32__get_serialized_size+0x10>
 800869a:	b508      	push	{r3, lr}
 800869c:	2104      	movs	r1, #4
 800869e:	2000      	movs	r0, #0
 80086a0:	f000 ffe6 	bl	8009670 <ucdr_alignment>
 80086a4:	3004      	adds	r0, #4
 80086a6:	bd08      	pop	{r3, pc}
 80086a8:	4770      	bx	lr
 80086aa:	bf00      	nop

080086ac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 80086ac:	4800      	ldr	r0, [pc, #0]	@ (80086b0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32+0x4>)
 80086ae:	4770      	bx	lr
 80086b0:	20000084 	.word	0x20000084

080086b4 <ucdr_serialize_bool>:
 80086b4:	b538      	push	{r3, r4, r5, lr}
 80086b6:	460d      	mov	r5, r1
 80086b8:	2101      	movs	r1, #1
 80086ba:	4604      	mov	r4, r0
 80086bc:	f000 ff8c 	bl	80095d8 <ucdr_check_final_buffer_behavior>
 80086c0:	b148      	cbz	r0, 80086d6 <ucdr_serialize_bool+0x22>
 80086c2:	68a3      	ldr	r3, [r4, #8]
 80086c4:	701d      	strb	r5, [r3, #0]
 80086c6:	68a2      	ldr	r2, [r4, #8]
 80086c8:	6923      	ldr	r3, [r4, #16]
 80086ca:	2101      	movs	r1, #1
 80086cc:	440a      	add	r2, r1
 80086ce:	440b      	add	r3, r1
 80086d0:	60a2      	str	r2, [r4, #8]
 80086d2:	6123      	str	r3, [r4, #16]
 80086d4:	7561      	strb	r1, [r4, #21]
 80086d6:	7da0      	ldrb	r0, [r4, #22]
 80086d8:	f080 0001 	eor.w	r0, r0, #1
 80086dc:	bd38      	pop	{r3, r4, r5, pc}
 80086de:	bf00      	nop

080086e0 <ucdr_deserialize_bool>:
 80086e0:	b538      	push	{r3, r4, r5, lr}
 80086e2:	460d      	mov	r5, r1
 80086e4:	2101      	movs	r1, #1
 80086e6:	4604      	mov	r4, r0
 80086e8:	f000 ff76 	bl	80095d8 <ucdr_check_final_buffer_behavior>
 80086ec:	b160      	cbz	r0, 8008708 <ucdr_deserialize_bool+0x28>
 80086ee:	68a2      	ldr	r2, [r4, #8]
 80086f0:	6923      	ldr	r3, [r4, #16]
 80086f2:	f812 1b01 	ldrb.w	r1, [r2], #1
 80086f6:	3900      	subs	r1, #0
 80086f8:	bf18      	it	ne
 80086fa:	2101      	movne	r1, #1
 80086fc:	7029      	strb	r1, [r5, #0]
 80086fe:	3301      	adds	r3, #1
 8008700:	2101      	movs	r1, #1
 8008702:	60a2      	str	r2, [r4, #8]
 8008704:	6123      	str	r3, [r4, #16]
 8008706:	7561      	strb	r1, [r4, #21]
 8008708:	7da0      	ldrb	r0, [r4, #22]
 800870a:	f080 0001 	eor.w	r0, r0, #1
 800870e:	bd38      	pop	{r3, r4, r5, pc}

08008710 <ucdr_serialize_uint8_t>:
 8008710:	b538      	push	{r3, r4, r5, lr}
 8008712:	460d      	mov	r5, r1
 8008714:	2101      	movs	r1, #1
 8008716:	4604      	mov	r4, r0
 8008718:	f000 ff5e 	bl	80095d8 <ucdr_check_final_buffer_behavior>
 800871c:	b148      	cbz	r0, 8008732 <ucdr_serialize_uint8_t+0x22>
 800871e:	68a3      	ldr	r3, [r4, #8]
 8008720:	701d      	strb	r5, [r3, #0]
 8008722:	68a2      	ldr	r2, [r4, #8]
 8008724:	6923      	ldr	r3, [r4, #16]
 8008726:	2101      	movs	r1, #1
 8008728:	440a      	add	r2, r1
 800872a:	440b      	add	r3, r1
 800872c:	60a2      	str	r2, [r4, #8]
 800872e:	6123      	str	r3, [r4, #16]
 8008730:	7561      	strb	r1, [r4, #21]
 8008732:	7da0      	ldrb	r0, [r4, #22]
 8008734:	f080 0001 	eor.w	r0, r0, #1
 8008738:	bd38      	pop	{r3, r4, r5, pc}
 800873a:	bf00      	nop

0800873c <ucdr_deserialize_uint8_t>:
 800873c:	b538      	push	{r3, r4, r5, lr}
 800873e:	460d      	mov	r5, r1
 8008740:	2101      	movs	r1, #1
 8008742:	4604      	mov	r4, r0
 8008744:	f000 ff48 	bl	80095d8 <ucdr_check_final_buffer_behavior>
 8008748:	b150      	cbz	r0, 8008760 <ucdr_deserialize_uint8_t+0x24>
 800874a:	68a3      	ldr	r3, [r4, #8]
 800874c:	781b      	ldrb	r3, [r3, #0]
 800874e:	702b      	strb	r3, [r5, #0]
 8008750:	68a2      	ldr	r2, [r4, #8]
 8008752:	6923      	ldr	r3, [r4, #16]
 8008754:	2101      	movs	r1, #1
 8008756:	440a      	add	r2, r1
 8008758:	440b      	add	r3, r1
 800875a:	60a2      	str	r2, [r4, #8]
 800875c:	6123      	str	r3, [r4, #16]
 800875e:	7561      	strb	r1, [r4, #21]
 8008760:	7da0      	ldrb	r0, [r4, #22]
 8008762:	f080 0001 	eor.w	r0, r0, #1
 8008766:	bd38      	pop	{r3, r4, r5, pc}

08008768 <ucdr_serialize_uint16_t>:
 8008768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800876c:	b082      	sub	sp, #8
 800876e:	460b      	mov	r3, r1
 8008770:	2102      	movs	r1, #2
 8008772:	4604      	mov	r4, r0
 8008774:	f8ad 3006 	strh.w	r3, [sp, #6]
 8008778:	f000 ff82 	bl	8009680 <ucdr_buffer_alignment>
 800877c:	4601      	mov	r1, r0
 800877e:	4620      	mov	r0, r4
 8008780:	7d67      	ldrb	r7, [r4, #21]
 8008782:	f000 ffc1 	bl	8009708 <ucdr_advance_buffer>
 8008786:	2102      	movs	r1, #2
 8008788:	4620      	mov	r0, r4
 800878a:	f000 ff19 	bl	80095c0 <ucdr_check_buffer_available_for>
 800878e:	bb78      	cbnz	r0, 80087f0 <ucdr_serialize_uint16_t+0x88>
 8008790:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8008794:	42ab      	cmp	r3, r5
 8008796:	d926      	bls.n	80087e6 <ucdr_serialize_uint16_t+0x7e>
 8008798:	1b5e      	subs	r6, r3, r5
 800879a:	60a3      	str	r3, [r4, #8]
 800879c:	6923      	ldr	r3, [r4, #16]
 800879e:	f1c6 0802 	rsb	r8, r6, #2
 80087a2:	4433      	add	r3, r6
 80087a4:	6123      	str	r3, [r4, #16]
 80087a6:	4641      	mov	r1, r8
 80087a8:	4620      	mov	r0, r4
 80087aa:	f000 ff15 	bl	80095d8 <ucdr_check_final_buffer_behavior>
 80087ae:	2800      	cmp	r0, #0
 80087b0:	d03b      	beq.n	800882a <ucdr_serialize_uint16_t+0xc2>
 80087b2:	7d23      	ldrb	r3, [r4, #20]
 80087b4:	2b01      	cmp	r3, #1
 80087b6:	d04a      	beq.n	800884e <ucdr_serialize_uint16_t+0xe6>
 80087b8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80087bc:	702b      	strb	r3, [r5, #0]
 80087be:	2e00      	cmp	r6, #0
 80087c0:	d040      	beq.n	8008844 <ucdr_serialize_uint16_t+0xdc>
 80087c2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80087c6:	706b      	strb	r3, [r5, #1]
 80087c8:	6923      	ldr	r3, [r4, #16]
 80087ca:	68a2      	ldr	r2, [r4, #8]
 80087cc:	7da0      	ldrb	r0, [r4, #22]
 80087ce:	3302      	adds	r3, #2
 80087d0:	1b9e      	subs	r6, r3, r6
 80087d2:	4442      	add	r2, r8
 80087d4:	2302      	movs	r3, #2
 80087d6:	f080 0001 	eor.w	r0, r0, #1
 80087da:	60a2      	str	r2, [r4, #8]
 80087dc:	6126      	str	r6, [r4, #16]
 80087de:	7563      	strb	r3, [r4, #21]
 80087e0:	b002      	add	sp, #8
 80087e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087e6:	2102      	movs	r1, #2
 80087e8:	4620      	mov	r0, r4
 80087ea:	f000 fef5 	bl	80095d8 <ucdr_check_final_buffer_behavior>
 80087ee:	b190      	cbz	r0, 8008816 <ucdr_serialize_uint16_t+0xae>
 80087f0:	7d23      	ldrb	r3, [r4, #20]
 80087f2:	2b01      	cmp	r3, #1
 80087f4:	68a3      	ldr	r3, [r4, #8]
 80087f6:	d014      	beq.n	8008822 <ucdr_serialize_uint16_t+0xba>
 80087f8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80087fc:	701a      	strb	r2, [r3, #0]
 80087fe:	68a3      	ldr	r3, [r4, #8]
 8008800:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008804:	705a      	strb	r2, [r3, #1]
 8008806:	68a2      	ldr	r2, [r4, #8]
 8008808:	6923      	ldr	r3, [r4, #16]
 800880a:	3202      	adds	r2, #2
 800880c:	3302      	adds	r3, #2
 800880e:	2102      	movs	r1, #2
 8008810:	60a2      	str	r2, [r4, #8]
 8008812:	6123      	str	r3, [r4, #16]
 8008814:	7561      	strb	r1, [r4, #21]
 8008816:	7da0      	ldrb	r0, [r4, #22]
 8008818:	f080 0001 	eor.w	r0, r0, #1
 800881c:	b002      	add	sp, #8
 800881e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008822:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8008826:	801a      	strh	r2, [r3, #0]
 8008828:	e7ed      	b.n	8008806 <ucdr_serialize_uint16_t+0x9e>
 800882a:	68a2      	ldr	r2, [r4, #8]
 800882c:	6923      	ldr	r3, [r4, #16]
 800882e:	7da0      	ldrb	r0, [r4, #22]
 8008830:	7567      	strb	r7, [r4, #21]
 8008832:	1b92      	subs	r2, r2, r6
 8008834:	1b9b      	subs	r3, r3, r6
 8008836:	f080 0001 	eor.w	r0, r0, #1
 800883a:	60a2      	str	r2, [r4, #8]
 800883c:	6123      	str	r3, [r4, #16]
 800883e:	b002      	add	sp, #8
 8008840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008844:	68a3      	ldr	r3, [r4, #8]
 8008846:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800884a:	701a      	strb	r2, [r3, #0]
 800884c:	e7bc      	b.n	80087c8 <ucdr_serialize_uint16_t+0x60>
 800884e:	4628      	mov	r0, r5
 8008850:	f10d 0506 	add.w	r5, sp, #6
 8008854:	4629      	mov	r1, r5
 8008856:	4632      	mov	r2, r6
 8008858:	f008 f979 	bl	8010b4e <memcpy>
 800885c:	68a0      	ldr	r0, [r4, #8]
 800885e:	4642      	mov	r2, r8
 8008860:	19a9      	adds	r1, r5, r6
 8008862:	f008 f974 	bl	8010b4e <memcpy>
 8008866:	e7af      	b.n	80087c8 <ucdr_serialize_uint16_t+0x60>

08008868 <ucdr_serialize_endian_uint16_t>:
 8008868:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800886c:	b083      	sub	sp, #12
 800886e:	460d      	mov	r5, r1
 8008870:	2102      	movs	r1, #2
 8008872:	4604      	mov	r4, r0
 8008874:	f8ad 2006 	strh.w	r2, [sp, #6]
 8008878:	f000 ff02 	bl	8009680 <ucdr_buffer_alignment>
 800887c:	4601      	mov	r1, r0
 800887e:	4620      	mov	r0, r4
 8008880:	f894 8015 	ldrb.w	r8, [r4, #21]
 8008884:	f000 ff40 	bl	8009708 <ucdr_advance_buffer>
 8008888:	2102      	movs	r1, #2
 800888a:	4620      	mov	r0, r4
 800888c:	f000 fe98 	bl	80095c0 <ucdr_check_buffer_available_for>
 8008890:	bb70      	cbnz	r0, 80088f0 <ucdr_serialize_endian_uint16_t+0x88>
 8008892:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8008896:	42be      	cmp	r6, r7
 8008898:	d925      	bls.n	80088e6 <ucdr_serialize_endian_uint16_t+0x7e>
 800889a:	6923      	ldr	r3, [r4, #16]
 800889c:	60a6      	str	r6, [r4, #8]
 800889e:	1bf6      	subs	r6, r6, r7
 80088a0:	4433      	add	r3, r6
 80088a2:	f1c6 0902 	rsb	r9, r6, #2
 80088a6:	6123      	str	r3, [r4, #16]
 80088a8:	4649      	mov	r1, r9
 80088aa:	4620      	mov	r0, r4
 80088ac:	f000 fe94 	bl	80095d8 <ucdr_check_final_buffer_behavior>
 80088b0:	2800      	cmp	r0, #0
 80088b2:	d039      	beq.n	8008928 <ucdr_serialize_endian_uint16_t+0xc0>
 80088b4:	2d01      	cmp	r5, #1
 80088b6:	d04a      	beq.n	800894e <ucdr_serialize_endian_uint16_t+0xe6>
 80088b8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80088bc:	703b      	strb	r3, [r7, #0]
 80088be:	2e00      	cmp	r6, #0
 80088c0:	d040      	beq.n	8008944 <ucdr_serialize_endian_uint16_t+0xdc>
 80088c2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80088c6:	707b      	strb	r3, [r7, #1]
 80088c8:	6923      	ldr	r3, [r4, #16]
 80088ca:	68a2      	ldr	r2, [r4, #8]
 80088cc:	7da0      	ldrb	r0, [r4, #22]
 80088ce:	3302      	adds	r3, #2
 80088d0:	444a      	add	r2, r9
 80088d2:	1b9b      	subs	r3, r3, r6
 80088d4:	2102      	movs	r1, #2
 80088d6:	f080 0001 	eor.w	r0, r0, #1
 80088da:	60a2      	str	r2, [r4, #8]
 80088dc:	6123      	str	r3, [r4, #16]
 80088de:	7561      	strb	r1, [r4, #21]
 80088e0:	b003      	add	sp, #12
 80088e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80088e6:	2102      	movs	r1, #2
 80088e8:	4620      	mov	r0, r4
 80088ea:	f000 fe75 	bl	80095d8 <ucdr_check_final_buffer_behavior>
 80088ee:	b188      	cbz	r0, 8008914 <ucdr_serialize_endian_uint16_t+0xac>
 80088f0:	2d01      	cmp	r5, #1
 80088f2:	68a3      	ldr	r3, [r4, #8]
 80088f4:	d014      	beq.n	8008920 <ucdr_serialize_endian_uint16_t+0xb8>
 80088f6:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80088fa:	701a      	strb	r2, [r3, #0]
 80088fc:	68a3      	ldr	r3, [r4, #8]
 80088fe:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008902:	705a      	strb	r2, [r3, #1]
 8008904:	68a2      	ldr	r2, [r4, #8]
 8008906:	6923      	ldr	r3, [r4, #16]
 8008908:	3202      	adds	r2, #2
 800890a:	3302      	adds	r3, #2
 800890c:	2102      	movs	r1, #2
 800890e:	60a2      	str	r2, [r4, #8]
 8008910:	6123      	str	r3, [r4, #16]
 8008912:	7561      	strb	r1, [r4, #21]
 8008914:	7da0      	ldrb	r0, [r4, #22]
 8008916:	f080 0001 	eor.w	r0, r0, #1
 800891a:	b003      	add	sp, #12
 800891c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008920:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8008924:	801a      	strh	r2, [r3, #0]
 8008926:	e7ed      	b.n	8008904 <ucdr_serialize_endian_uint16_t+0x9c>
 8008928:	68a2      	ldr	r2, [r4, #8]
 800892a:	6923      	ldr	r3, [r4, #16]
 800892c:	7da0      	ldrb	r0, [r4, #22]
 800892e:	f884 8015 	strb.w	r8, [r4, #21]
 8008932:	1b92      	subs	r2, r2, r6
 8008934:	1b9b      	subs	r3, r3, r6
 8008936:	f080 0001 	eor.w	r0, r0, #1
 800893a:	60a2      	str	r2, [r4, #8]
 800893c:	6123      	str	r3, [r4, #16]
 800893e:	b003      	add	sp, #12
 8008940:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008944:	68a3      	ldr	r3, [r4, #8]
 8008946:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800894a:	701a      	strb	r2, [r3, #0]
 800894c:	e7bc      	b.n	80088c8 <ucdr_serialize_endian_uint16_t+0x60>
 800894e:	f10d 0506 	add.w	r5, sp, #6
 8008952:	4629      	mov	r1, r5
 8008954:	4632      	mov	r2, r6
 8008956:	4638      	mov	r0, r7
 8008958:	f008 f8f9 	bl	8010b4e <memcpy>
 800895c:	68a0      	ldr	r0, [r4, #8]
 800895e:	464a      	mov	r2, r9
 8008960:	19a9      	adds	r1, r5, r6
 8008962:	f008 f8f4 	bl	8010b4e <memcpy>
 8008966:	e7af      	b.n	80088c8 <ucdr_serialize_endian_uint16_t+0x60>

08008968 <ucdr_deserialize_uint16_t>:
 8008968:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800896c:	460d      	mov	r5, r1
 800896e:	2102      	movs	r1, #2
 8008970:	4604      	mov	r4, r0
 8008972:	f000 fe85 	bl	8009680 <ucdr_buffer_alignment>
 8008976:	4601      	mov	r1, r0
 8008978:	4620      	mov	r0, r4
 800897a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800897e:	f000 fec3 	bl	8009708 <ucdr_advance_buffer>
 8008982:	2102      	movs	r1, #2
 8008984:	4620      	mov	r0, r4
 8008986:	f000 fe1b 	bl	80095c0 <ucdr_check_buffer_available_for>
 800898a:	bb60      	cbnz	r0, 80089e6 <ucdr_deserialize_uint16_t+0x7e>
 800898c:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8008990:	42be      	cmp	r6, r7
 8008992:	d923      	bls.n	80089dc <ucdr_deserialize_uint16_t+0x74>
 8008994:	6923      	ldr	r3, [r4, #16]
 8008996:	60a6      	str	r6, [r4, #8]
 8008998:	1bf6      	subs	r6, r6, r7
 800899a:	4433      	add	r3, r6
 800899c:	f1c6 0902 	rsb	r9, r6, #2
 80089a0:	6123      	str	r3, [r4, #16]
 80089a2:	4649      	mov	r1, r9
 80089a4:	4620      	mov	r0, r4
 80089a6:	f000 fe17 	bl	80095d8 <ucdr_check_final_buffer_behavior>
 80089aa:	2800      	cmp	r0, #0
 80089ac:	d034      	beq.n	8008a18 <ucdr_deserialize_uint16_t+0xb0>
 80089ae:	7d23      	ldrb	r3, [r4, #20]
 80089b0:	2b01      	cmp	r3, #1
 80089b2:	d042      	beq.n	8008a3a <ucdr_deserialize_uint16_t+0xd2>
 80089b4:	787b      	ldrb	r3, [r7, #1]
 80089b6:	702b      	strb	r3, [r5, #0]
 80089b8:	2e00      	cmp	r6, #0
 80089ba:	d03a      	beq.n	8008a32 <ucdr_deserialize_uint16_t+0xca>
 80089bc:	783b      	ldrb	r3, [r7, #0]
 80089be:	706b      	strb	r3, [r5, #1]
 80089c0:	6923      	ldr	r3, [r4, #16]
 80089c2:	68a2      	ldr	r2, [r4, #8]
 80089c4:	7da0      	ldrb	r0, [r4, #22]
 80089c6:	2102      	movs	r1, #2
 80089c8:	3302      	adds	r3, #2
 80089ca:	444a      	add	r2, r9
 80089cc:	1b9b      	subs	r3, r3, r6
 80089ce:	7561      	strb	r1, [r4, #21]
 80089d0:	60a2      	str	r2, [r4, #8]
 80089d2:	6123      	str	r3, [r4, #16]
 80089d4:	f080 0001 	eor.w	r0, r0, #1
 80089d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80089dc:	2102      	movs	r1, #2
 80089de:	4620      	mov	r0, r4
 80089e0:	f000 fdfa 	bl	80095d8 <ucdr_check_final_buffer_behavior>
 80089e4:	b180      	cbz	r0, 8008a08 <ucdr_deserialize_uint16_t+0xa0>
 80089e6:	7d23      	ldrb	r3, [r4, #20]
 80089e8:	2b01      	cmp	r3, #1
 80089ea:	68a3      	ldr	r3, [r4, #8]
 80089ec:	d011      	beq.n	8008a12 <ucdr_deserialize_uint16_t+0xaa>
 80089ee:	785b      	ldrb	r3, [r3, #1]
 80089f0:	702b      	strb	r3, [r5, #0]
 80089f2:	68a3      	ldr	r3, [r4, #8]
 80089f4:	781b      	ldrb	r3, [r3, #0]
 80089f6:	706b      	strb	r3, [r5, #1]
 80089f8:	68a2      	ldr	r2, [r4, #8]
 80089fa:	6923      	ldr	r3, [r4, #16]
 80089fc:	3202      	adds	r2, #2
 80089fe:	3302      	adds	r3, #2
 8008a00:	2102      	movs	r1, #2
 8008a02:	60a2      	str	r2, [r4, #8]
 8008a04:	6123      	str	r3, [r4, #16]
 8008a06:	7561      	strb	r1, [r4, #21]
 8008a08:	7da0      	ldrb	r0, [r4, #22]
 8008a0a:	f080 0001 	eor.w	r0, r0, #1
 8008a0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a12:	881b      	ldrh	r3, [r3, #0]
 8008a14:	802b      	strh	r3, [r5, #0]
 8008a16:	e7ef      	b.n	80089f8 <ucdr_deserialize_uint16_t+0x90>
 8008a18:	68a2      	ldr	r2, [r4, #8]
 8008a1a:	6923      	ldr	r3, [r4, #16]
 8008a1c:	7da0      	ldrb	r0, [r4, #22]
 8008a1e:	f884 8015 	strb.w	r8, [r4, #21]
 8008a22:	1b92      	subs	r2, r2, r6
 8008a24:	1b9b      	subs	r3, r3, r6
 8008a26:	60a2      	str	r2, [r4, #8]
 8008a28:	6123      	str	r3, [r4, #16]
 8008a2a:	f080 0001 	eor.w	r0, r0, #1
 8008a2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a32:	68a3      	ldr	r3, [r4, #8]
 8008a34:	781b      	ldrb	r3, [r3, #0]
 8008a36:	706b      	strb	r3, [r5, #1]
 8008a38:	e7c2      	b.n	80089c0 <ucdr_deserialize_uint16_t+0x58>
 8008a3a:	4639      	mov	r1, r7
 8008a3c:	4632      	mov	r2, r6
 8008a3e:	4628      	mov	r0, r5
 8008a40:	f008 f885 	bl	8010b4e <memcpy>
 8008a44:	68a1      	ldr	r1, [r4, #8]
 8008a46:	464a      	mov	r2, r9
 8008a48:	19a8      	adds	r0, r5, r6
 8008a4a:	f008 f880 	bl	8010b4e <memcpy>
 8008a4e:	e7b7      	b.n	80089c0 <ucdr_deserialize_uint16_t+0x58>

08008a50 <ucdr_deserialize_endian_uint16_t>:
 8008a50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a54:	460e      	mov	r6, r1
 8008a56:	2102      	movs	r1, #2
 8008a58:	4604      	mov	r4, r0
 8008a5a:	4615      	mov	r5, r2
 8008a5c:	f000 fe10 	bl	8009680 <ucdr_buffer_alignment>
 8008a60:	4601      	mov	r1, r0
 8008a62:	4620      	mov	r0, r4
 8008a64:	f894 9015 	ldrb.w	r9, [r4, #21]
 8008a68:	f000 fe4e 	bl	8009708 <ucdr_advance_buffer>
 8008a6c:	2102      	movs	r1, #2
 8008a6e:	4620      	mov	r0, r4
 8008a70:	f000 fda6 	bl	80095c0 <ucdr_check_buffer_available_for>
 8008a74:	bb70      	cbnz	r0, 8008ad4 <ucdr_deserialize_endian_uint16_t+0x84>
 8008a76:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 8008a7a:	4547      	cmp	r7, r8
 8008a7c:	d925      	bls.n	8008aca <ucdr_deserialize_endian_uint16_t+0x7a>
 8008a7e:	6923      	ldr	r3, [r4, #16]
 8008a80:	60a7      	str	r7, [r4, #8]
 8008a82:	eba7 0708 	sub.w	r7, r7, r8
 8008a86:	443b      	add	r3, r7
 8008a88:	f1c7 0a02 	rsb	sl, r7, #2
 8008a8c:	6123      	str	r3, [r4, #16]
 8008a8e:	4651      	mov	r1, sl
 8008a90:	4620      	mov	r0, r4
 8008a92:	f000 fda1 	bl	80095d8 <ucdr_check_final_buffer_behavior>
 8008a96:	2800      	cmp	r0, #0
 8008a98:	d034      	beq.n	8008b04 <ucdr_deserialize_endian_uint16_t+0xb4>
 8008a9a:	2e01      	cmp	r6, #1
 8008a9c:	d043      	beq.n	8008b26 <ucdr_deserialize_endian_uint16_t+0xd6>
 8008a9e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8008aa2:	702b      	strb	r3, [r5, #0]
 8008aa4:	2f00      	cmp	r7, #0
 8008aa6:	d03a      	beq.n	8008b1e <ucdr_deserialize_endian_uint16_t+0xce>
 8008aa8:	f898 3000 	ldrb.w	r3, [r8]
 8008aac:	706b      	strb	r3, [r5, #1]
 8008aae:	6923      	ldr	r3, [r4, #16]
 8008ab0:	68a2      	ldr	r2, [r4, #8]
 8008ab2:	7da0      	ldrb	r0, [r4, #22]
 8008ab4:	2102      	movs	r1, #2
 8008ab6:	3302      	adds	r3, #2
 8008ab8:	4452      	add	r2, sl
 8008aba:	1bdb      	subs	r3, r3, r7
 8008abc:	7561      	strb	r1, [r4, #21]
 8008abe:	60a2      	str	r2, [r4, #8]
 8008ac0:	6123      	str	r3, [r4, #16]
 8008ac2:	f080 0001 	eor.w	r0, r0, #1
 8008ac6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008aca:	2102      	movs	r1, #2
 8008acc:	4620      	mov	r0, r4
 8008ace:	f000 fd83 	bl	80095d8 <ucdr_check_final_buffer_behavior>
 8008ad2:	b178      	cbz	r0, 8008af4 <ucdr_deserialize_endian_uint16_t+0xa4>
 8008ad4:	2e01      	cmp	r6, #1
 8008ad6:	68a3      	ldr	r3, [r4, #8]
 8008ad8:	d011      	beq.n	8008afe <ucdr_deserialize_endian_uint16_t+0xae>
 8008ada:	785b      	ldrb	r3, [r3, #1]
 8008adc:	702b      	strb	r3, [r5, #0]
 8008ade:	68a3      	ldr	r3, [r4, #8]
 8008ae0:	781b      	ldrb	r3, [r3, #0]
 8008ae2:	706b      	strb	r3, [r5, #1]
 8008ae4:	68a2      	ldr	r2, [r4, #8]
 8008ae6:	6923      	ldr	r3, [r4, #16]
 8008ae8:	3202      	adds	r2, #2
 8008aea:	3302      	adds	r3, #2
 8008aec:	2102      	movs	r1, #2
 8008aee:	60a2      	str	r2, [r4, #8]
 8008af0:	6123      	str	r3, [r4, #16]
 8008af2:	7561      	strb	r1, [r4, #21]
 8008af4:	7da0      	ldrb	r0, [r4, #22]
 8008af6:	f080 0001 	eor.w	r0, r0, #1
 8008afa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008afe:	881b      	ldrh	r3, [r3, #0]
 8008b00:	802b      	strh	r3, [r5, #0]
 8008b02:	e7ef      	b.n	8008ae4 <ucdr_deserialize_endian_uint16_t+0x94>
 8008b04:	68a2      	ldr	r2, [r4, #8]
 8008b06:	6923      	ldr	r3, [r4, #16]
 8008b08:	7da0      	ldrb	r0, [r4, #22]
 8008b0a:	f884 9015 	strb.w	r9, [r4, #21]
 8008b0e:	1bd2      	subs	r2, r2, r7
 8008b10:	1bdb      	subs	r3, r3, r7
 8008b12:	60a2      	str	r2, [r4, #8]
 8008b14:	6123      	str	r3, [r4, #16]
 8008b16:	f080 0001 	eor.w	r0, r0, #1
 8008b1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b1e:	68a3      	ldr	r3, [r4, #8]
 8008b20:	781b      	ldrb	r3, [r3, #0]
 8008b22:	706b      	strb	r3, [r5, #1]
 8008b24:	e7c3      	b.n	8008aae <ucdr_deserialize_endian_uint16_t+0x5e>
 8008b26:	4641      	mov	r1, r8
 8008b28:	463a      	mov	r2, r7
 8008b2a:	4628      	mov	r0, r5
 8008b2c:	f008 f80f 	bl	8010b4e <memcpy>
 8008b30:	68a1      	ldr	r1, [r4, #8]
 8008b32:	4652      	mov	r2, sl
 8008b34:	19e8      	adds	r0, r5, r7
 8008b36:	f008 f80a 	bl	8010b4e <memcpy>
 8008b3a:	e7b8      	b.n	8008aae <ucdr_deserialize_endian_uint16_t+0x5e>

08008b3c <ucdr_serialize_uint32_t>:
 8008b3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b40:	b082      	sub	sp, #8
 8008b42:	4604      	mov	r4, r0
 8008b44:	9101      	str	r1, [sp, #4]
 8008b46:	2104      	movs	r1, #4
 8008b48:	f000 fd9a 	bl	8009680 <ucdr_buffer_alignment>
 8008b4c:	4601      	mov	r1, r0
 8008b4e:	4620      	mov	r0, r4
 8008b50:	7d67      	ldrb	r7, [r4, #21]
 8008b52:	f000 fdd9 	bl	8009708 <ucdr_advance_buffer>
 8008b56:	2104      	movs	r1, #4
 8008b58:	4620      	mov	r0, r4
 8008b5a:	f000 fd31 	bl	80095c0 <ucdr_check_buffer_available_for>
 8008b5e:	2800      	cmp	r0, #0
 8008b60:	d139      	bne.n	8008bd6 <ucdr_serialize_uint32_t+0x9a>
 8008b62:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8008b66:	42ab      	cmp	r3, r5
 8008b68:	d930      	bls.n	8008bcc <ucdr_serialize_uint32_t+0x90>
 8008b6a:	1b5e      	subs	r6, r3, r5
 8008b6c:	60a3      	str	r3, [r4, #8]
 8008b6e:	6923      	ldr	r3, [r4, #16]
 8008b70:	f1c6 0804 	rsb	r8, r6, #4
 8008b74:	4433      	add	r3, r6
 8008b76:	6123      	str	r3, [r4, #16]
 8008b78:	4641      	mov	r1, r8
 8008b7a:	4620      	mov	r0, r4
 8008b7c:	f000 fd2c 	bl	80095d8 <ucdr_check_final_buffer_behavior>
 8008b80:	2800      	cmp	r0, #0
 8008b82:	d04c      	beq.n	8008c1e <ucdr_serialize_uint32_t+0xe2>
 8008b84:	7d23      	ldrb	r3, [r4, #20]
 8008b86:	2b01      	cmp	r3, #1
 8008b88:	d063      	beq.n	8008c52 <ucdr_serialize_uint32_t+0x116>
 8008b8a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008b8e:	702b      	strb	r3, [r5, #0]
 8008b90:	2e00      	cmp	r6, #0
 8008b92:	d051      	beq.n	8008c38 <ucdr_serialize_uint32_t+0xfc>
 8008b94:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008b98:	706b      	strb	r3, [r5, #1]
 8008b9a:	2e01      	cmp	r6, #1
 8008b9c:	d050      	beq.n	8008c40 <ucdr_serialize_uint32_t+0x104>
 8008b9e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8008ba2:	70ab      	strb	r3, [r5, #2]
 8008ba4:	2e02      	cmp	r6, #2
 8008ba6:	d04f      	beq.n	8008c48 <ucdr_serialize_uint32_t+0x10c>
 8008ba8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8008bac:	70eb      	strb	r3, [r5, #3]
 8008bae:	6923      	ldr	r3, [r4, #16]
 8008bb0:	68a2      	ldr	r2, [r4, #8]
 8008bb2:	7da0      	ldrb	r0, [r4, #22]
 8008bb4:	3304      	adds	r3, #4
 8008bb6:	1b9e      	subs	r6, r3, r6
 8008bb8:	4442      	add	r2, r8
 8008bba:	2304      	movs	r3, #4
 8008bbc:	f080 0001 	eor.w	r0, r0, #1
 8008bc0:	60a2      	str	r2, [r4, #8]
 8008bc2:	6126      	str	r6, [r4, #16]
 8008bc4:	7563      	strb	r3, [r4, #21]
 8008bc6:	b002      	add	sp, #8
 8008bc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008bcc:	2104      	movs	r1, #4
 8008bce:	4620      	mov	r0, r4
 8008bd0:	f000 fd02 	bl	80095d8 <ucdr_check_final_buffer_behavior>
 8008bd4:	b1d0      	cbz	r0, 8008c0c <ucdr_serialize_uint32_t+0xd0>
 8008bd6:	7d23      	ldrb	r3, [r4, #20]
 8008bd8:	2b01      	cmp	r3, #1
 8008bda:	68a3      	ldr	r3, [r4, #8]
 8008bdc:	d01c      	beq.n	8008c18 <ucdr_serialize_uint32_t+0xdc>
 8008bde:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8008be2:	701a      	strb	r2, [r3, #0]
 8008be4:	68a3      	ldr	r3, [r4, #8]
 8008be6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008bea:	705a      	strb	r2, [r3, #1]
 8008bec:	68a3      	ldr	r3, [r4, #8]
 8008bee:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8008bf2:	709a      	strb	r2, [r3, #2]
 8008bf4:	68a3      	ldr	r3, [r4, #8]
 8008bf6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8008bfa:	70da      	strb	r2, [r3, #3]
 8008bfc:	68a2      	ldr	r2, [r4, #8]
 8008bfe:	6923      	ldr	r3, [r4, #16]
 8008c00:	3204      	adds	r2, #4
 8008c02:	3304      	adds	r3, #4
 8008c04:	2104      	movs	r1, #4
 8008c06:	60a2      	str	r2, [r4, #8]
 8008c08:	6123      	str	r3, [r4, #16]
 8008c0a:	7561      	strb	r1, [r4, #21]
 8008c0c:	7da0      	ldrb	r0, [r4, #22]
 8008c0e:	f080 0001 	eor.w	r0, r0, #1
 8008c12:	b002      	add	sp, #8
 8008c14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c18:	9a01      	ldr	r2, [sp, #4]
 8008c1a:	601a      	str	r2, [r3, #0]
 8008c1c:	e7ee      	b.n	8008bfc <ucdr_serialize_uint32_t+0xc0>
 8008c1e:	68a2      	ldr	r2, [r4, #8]
 8008c20:	6923      	ldr	r3, [r4, #16]
 8008c22:	7da0      	ldrb	r0, [r4, #22]
 8008c24:	7567      	strb	r7, [r4, #21]
 8008c26:	1b92      	subs	r2, r2, r6
 8008c28:	1b9b      	subs	r3, r3, r6
 8008c2a:	f080 0001 	eor.w	r0, r0, #1
 8008c2e:	60a2      	str	r2, [r4, #8]
 8008c30:	6123      	str	r3, [r4, #16]
 8008c32:	b002      	add	sp, #8
 8008c34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c38:	68a3      	ldr	r3, [r4, #8]
 8008c3a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008c3e:	701a      	strb	r2, [r3, #0]
 8008c40:	68a3      	ldr	r3, [r4, #8]
 8008c42:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8008c46:	701a      	strb	r2, [r3, #0]
 8008c48:	68a3      	ldr	r3, [r4, #8]
 8008c4a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8008c4e:	701a      	strb	r2, [r3, #0]
 8008c50:	e7ad      	b.n	8008bae <ucdr_serialize_uint32_t+0x72>
 8008c52:	4628      	mov	r0, r5
 8008c54:	ad01      	add	r5, sp, #4
 8008c56:	4629      	mov	r1, r5
 8008c58:	4632      	mov	r2, r6
 8008c5a:	f007 ff78 	bl	8010b4e <memcpy>
 8008c5e:	68a0      	ldr	r0, [r4, #8]
 8008c60:	4642      	mov	r2, r8
 8008c62:	19a9      	adds	r1, r5, r6
 8008c64:	f007 ff73 	bl	8010b4e <memcpy>
 8008c68:	e7a1      	b.n	8008bae <ucdr_serialize_uint32_t+0x72>
 8008c6a:	bf00      	nop

08008c6c <ucdr_serialize_endian_uint32_t>:
 8008c6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008c70:	b083      	sub	sp, #12
 8008c72:	460d      	mov	r5, r1
 8008c74:	2104      	movs	r1, #4
 8008c76:	4604      	mov	r4, r0
 8008c78:	9201      	str	r2, [sp, #4]
 8008c7a:	f000 fd01 	bl	8009680 <ucdr_buffer_alignment>
 8008c7e:	4601      	mov	r1, r0
 8008c80:	4620      	mov	r0, r4
 8008c82:	f894 8015 	ldrb.w	r8, [r4, #21]
 8008c86:	f000 fd3f 	bl	8009708 <ucdr_advance_buffer>
 8008c8a:	2104      	movs	r1, #4
 8008c8c:	4620      	mov	r0, r4
 8008c8e:	f000 fc97 	bl	80095c0 <ucdr_check_buffer_available_for>
 8008c92:	2800      	cmp	r0, #0
 8008c94:	d138      	bne.n	8008d08 <ucdr_serialize_endian_uint32_t+0x9c>
 8008c96:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8008c9a:	42b7      	cmp	r7, r6
 8008c9c:	d92f      	bls.n	8008cfe <ucdr_serialize_endian_uint32_t+0x92>
 8008c9e:	6923      	ldr	r3, [r4, #16]
 8008ca0:	60a7      	str	r7, [r4, #8]
 8008ca2:	1bbf      	subs	r7, r7, r6
 8008ca4:	443b      	add	r3, r7
 8008ca6:	f1c7 0904 	rsb	r9, r7, #4
 8008caa:	6123      	str	r3, [r4, #16]
 8008cac:	4649      	mov	r1, r9
 8008cae:	4620      	mov	r0, r4
 8008cb0:	f000 fc92 	bl	80095d8 <ucdr_check_final_buffer_behavior>
 8008cb4:	2800      	cmp	r0, #0
 8008cb6:	d04a      	beq.n	8008d4e <ucdr_serialize_endian_uint32_t+0xe2>
 8008cb8:	2d01      	cmp	r5, #1
 8008cba:	d063      	beq.n	8008d84 <ucdr_serialize_endian_uint32_t+0x118>
 8008cbc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008cc0:	7033      	strb	r3, [r6, #0]
 8008cc2:	2f00      	cmp	r7, #0
 8008cc4:	d051      	beq.n	8008d6a <ucdr_serialize_endian_uint32_t+0xfe>
 8008cc6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008cca:	7073      	strb	r3, [r6, #1]
 8008ccc:	2f01      	cmp	r7, #1
 8008cce:	d050      	beq.n	8008d72 <ucdr_serialize_endian_uint32_t+0x106>
 8008cd0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8008cd4:	70b3      	strb	r3, [r6, #2]
 8008cd6:	2f02      	cmp	r7, #2
 8008cd8:	d04f      	beq.n	8008d7a <ucdr_serialize_endian_uint32_t+0x10e>
 8008cda:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8008cde:	70f3      	strb	r3, [r6, #3]
 8008ce0:	6923      	ldr	r3, [r4, #16]
 8008ce2:	68a2      	ldr	r2, [r4, #8]
 8008ce4:	7da0      	ldrb	r0, [r4, #22]
 8008ce6:	3304      	adds	r3, #4
 8008ce8:	444a      	add	r2, r9
 8008cea:	1bdb      	subs	r3, r3, r7
 8008cec:	2104      	movs	r1, #4
 8008cee:	f080 0001 	eor.w	r0, r0, #1
 8008cf2:	60a2      	str	r2, [r4, #8]
 8008cf4:	6123      	str	r3, [r4, #16]
 8008cf6:	7561      	strb	r1, [r4, #21]
 8008cf8:	b003      	add	sp, #12
 8008cfa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008cfe:	2104      	movs	r1, #4
 8008d00:	4620      	mov	r0, r4
 8008d02:	f000 fc69 	bl	80095d8 <ucdr_check_final_buffer_behavior>
 8008d06:	b1c8      	cbz	r0, 8008d3c <ucdr_serialize_endian_uint32_t+0xd0>
 8008d08:	2d01      	cmp	r5, #1
 8008d0a:	68a3      	ldr	r3, [r4, #8]
 8008d0c:	d01c      	beq.n	8008d48 <ucdr_serialize_endian_uint32_t+0xdc>
 8008d0e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8008d12:	701a      	strb	r2, [r3, #0]
 8008d14:	68a3      	ldr	r3, [r4, #8]
 8008d16:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008d1a:	705a      	strb	r2, [r3, #1]
 8008d1c:	68a3      	ldr	r3, [r4, #8]
 8008d1e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8008d22:	709a      	strb	r2, [r3, #2]
 8008d24:	68a3      	ldr	r3, [r4, #8]
 8008d26:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8008d2a:	70da      	strb	r2, [r3, #3]
 8008d2c:	68a2      	ldr	r2, [r4, #8]
 8008d2e:	6923      	ldr	r3, [r4, #16]
 8008d30:	3204      	adds	r2, #4
 8008d32:	3304      	adds	r3, #4
 8008d34:	2104      	movs	r1, #4
 8008d36:	60a2      	str	r2, [r4, #8]
 8008d38:	6123      	str	r3, [r4, #16]
 8008d3a:	7561      	strb	r1, [r4, #21]
 8008d3c:	7da0      	ldrb	r0, [r4, #22]
 8008d3e:	f080 0001 	eor.w	r0, r0, #1
 8008d42:	b003      	add	sp, #12
 8008d44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008d48:	9a01      	ldr	r2, [sp, #4]
 8008d4a:	601a      	str	r2, [r3, #0]
 8008d4c:	e7ee      	b.n	8008d2c <ucdr_serialize_endian_uint32_t+0xc0>
 8008d4e:	68a2      	ldr	r2, [r4, #8]
 8008d50:	6923      	ldr	r3, [r4, #16]
 8008d52:	7da0      	ldrb	r0, [r4, #22]
 8008d54:	f884 8015 	strb.w	r8, [r4, #21]
 8008d58:	1bd2      	subs	r2, r2, r7
 8008d5a:	1bdb      	subs	r3, r3, r7
 8008d5c:	f080 0001 	eor.w	r0, r0, #1
 8008d60:	60a2      	str	r2, [r4, #8]
 8008d62:	6123      	str	r3, [r4, #16]
 8008d64:	b003      	add	sp, #12
 8008d66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008d6a:	68a3      	ldr	r3, [r4, #8]
 8008d6c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008d70:	701a      	strb	r2, [r3, #0]
 8008d72:	68a3      	ldr	r3, [r4, #8]
 8008d74:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8008d78:	701a      	strb	r2, [r3, #0]
 8008d7a:	68a3      	ldr	r3, [r4, #8]
 8008d7c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8008d80:	701a      	strb	r2, [r3, #0]
 8008d82:	e7ad      	b.n	8008ce0 <ucdr_serialize_endian_uint32_t+0x74>
 8008d84:	ad01      	add	r5, sp, #4
 8008d86:	4629      	mov	r1, r5
 8008d88:	463a      	mov	r2, r7
 8008d8a:	4630      	mov	r0, r6
 8008d8c:	f007 fedf 	bl	8010b4e <memcpy>
 8008d90:	68a0      	ldr	r0, [r4, #8]
 8008d92:	464a      	mov	r2, r9
 8008d94:	19e9      	adds	r1, r5, r7
 8008d96:	f007 feda 	bl	8010b4e <memcpy>
 8008d9a:	e7a1      	b.n	8008ce0 <ucdr_serialize_endian_uint32_t+0x74>

08008d9c <ucdr_deserialize_uint32_t>:
 8008d9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008da0:	460d      	mov	r5, r1
 8008da2:	2104      	movs	r1, #4
 8008da4:	4604      	mov	r4, r0
 8008da6:	f000 fc6b 	bl	8009680 <ucdr_buffer_alignment>
 8008daa:	4601      	mov	r1, r0
 8008dac:	4620      	mov	r0, r4
 8008dae:	f894 8015 	ldrb.w	r8, [r4, #21]
 8008db2:	f000 fca9 	bl	8009708 <ucdr_advance_buffer>
 8008db6:	2104      	movs	r1, #4
 8008db8:	4620      	mov	r0, r4
 8008dba:	f000 fc01 	bl	80095c0 <ucdr_check_buffer_available_for>
 8008dbe:	2800      	cmp	r0, #0
 8008dc0:	d138      	bne.n	8008e34 <ucdr_deserialize_uint32_t+0x98>
 8008dc2:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8008dc6:	42b7      	cmp	r7, r6
 8008dc8:	d92f      	bls.n	8008e2a <ucdr_deserialize_uint32_t+0x8e>
 8008dca:	6923      	ldr	r3, [r4, #16]
 8008dcc:	60a7      	str	r7, [r4, #8]
 8008dce:	1bbf      	subs	r7, r7, r6
 8008dd0:	443b      	add	r3, r7
 8008dd2:	f1c7 0904 	rsb	r9, r7, #4
 8008dd6:	6123      	str	r3, [r4, #16]
 8008dd8:	4649      	mov	r1, r9
 8008dda:	4620      	mov	r0, r4
 8008ddc:	f000 fbfc 	bl	80095d8 <ucdr_check_final_buffer_behavior>
 8008de0:	2800      	cmp	r0, #0
 8008de2:	d046      	beq.n	8008e72 <ucdr_deserialize_uint32_t+0xd6>
 8008de4:	7d23      	ldrb	r3, [r4, #20]
 8008de6:	2b01      	cmp	r3, #1
 8008de8:	d05c      	beq.n	8008ea4 <ucdr_deserialize_uint32_t+0x108>
 8008dea:	78f3      	ldrb	r3, [r6, #3]
 8008dec:	702b      	strb	r3, [r5, #0]
 8008dee:	2f00      	cmp	r7, #0
 8008df0:	d04c      	beq.n	8008e8c <ucdr_deserialize_uint32_t+0xf0>
 8008df2:	78b3      	ldrb	r3, [r6, #2]
 8008df4:	706b      	strb	r3, [r5, #1]
 8008df6:	2f01      	cmp	r7, #1
 8008df8:	f105 0302 	add.w	r3, r5, #2
 8008dfc:	d04a      	beq.n	8008e94 <ucdr_deserialize_uint32_t+0xf8>
 8008dfe:	7873      	ldrb	r3, [r6, #1]
 8008e00:	70ab      	strb	r3, [r5, #2]
 8008e02:	2f02      	cmp	r7, #2
 8008e04:	f105 0303 	add.w	r3, r5, #3
 8008e08:	d048      	beq.n	8008e9c <ucdr_deserialize_uint32_t+0x100>
 8008e0a:	7833      	ldrb	r3, [r6, #0]
 8008e0c:	70eb      	strb	r3, [r5, #3]
 8008e0e:	6923      	ldr	r3, [r4, #16]
 8008e10:	68a2      	ldr	r2, [r4, #8]
 8008e12:	7da0      	ldrb	r0, [r4, #22]
 8008e14:	2104      	movs	r1, #4
 8008e16:	3304      	adds	r3, #4
 8008e18:	444a      	add	r2, r9
 8008e1a:	1bdb      	subs	r3, r3, r7
 8008e1c:	7561      	strb	r1, [r4, #21]
 8008e1e:	60a2      	str	r2, [r4, #8]
 8008e20:	6123      	str	r3, [r4, #16]
 8008e22:	f080 0001 	eor.w	r0, r0, #1
 8008e26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e2a:	2104      	movs	r1, #4
 8008e2c:	4620      	mov	r0, r4
 8008e2e:	f000 fbd3 	bl	80095d8 <ucdr_check_final_buffer_behavior>
 8008e32:	b1b0      	cbz	r0, 8008e62 <ucdr_deserialize_uint32_t+0xc6>
 8008e34:	7d23      	ldrb	r3, [r4, #20]
 8008e36:	2b01      	cmp	r3, #1
 8008e38:	68a3      	ldr	r3, [r4, #8]
 8008e3a:	d017      	beq.n	8008e6c <ucdr_deserialize_uint32_t+0xd0>
 8008e3c:	78db      	ldrb	r3, [r3, #3]
 8008e3e:	702b      	strb	r3, [r5, #0]
 8008e40:	68a3      	ldr	r3, [r4, #8]
 8008e42:	789b      	ldrb	r3, [r3, #2]
 8008e44:	706b      	strb	r3, [r5, #1]
 8008e46:	68a3      	ldr	r3, [r4, #8]
 8008e48:	785b      	ldrb	r3, [r3, #1]
 8008e4a:	70ab      	strb	r3, [r5, #2]
 8008e4c:	68a3      	ldr	r3, [r4, #8]
 8008e4e:	781b      	ldrb	r3, [r3, #0]
 8008e50:	70eb      	strb	r3, [r5, #3]
 8008e52:	68a2      	ldr	r2, [r4, #8]
 8008e54:	6923      	ldr	r3, [r4, #16]
 8008e56:	3204      	adds	r2, #4
 8008e58:	3304      	adds	r3, #4
 8008e5a:	2104      	movs	r1, #4
 8008e5c:	60a2      	str	r2, [r4, #8]
 8008e5e:	6123      	str	r3, [r4, #16]
 8008e60:	7561      	strb	r1, [r4, #21]
 8008e62:	7da0      	ldrb	r0, [r4, #22]
 8008e64:	f080 0001 	eor.w	r0, r0, #1
 8008e68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	602b      	str	r3, [r5, #0]
 8008e70:	e7ef      	b.n	8008e52 <ucdr_deserialize_uint32_t+0xb6>
 8008e72:	68a2      	ldr	r2, [r4, #8]
 8008e74:	6923      	ldr	r3, [r4, #16]
 8008e76:	7da0      	ldrb	r0, [r4, #22]
 8008e78:	f884 8015 	strb.w	r8, [r4, #21]
 8008e7c:	1bd2      	subs	r2, r2, r7
 8008e7e:	1bdb      	subs	r3, r3, r7
 8008e80:	60a2      	str	r2, [r4, #8]
 8008e82:	6123      	str	r3, [r4, #16]
 8008e84:	f080 0001 	eor.w	r0, r0, #1
 8008e88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e8c:	68a3      	ldr	r3, [r4, #8]
 8008e8e:	789b      	ldrb	r3, [r3, #2]
 8008e90:	706b      	strb	r3, [r5, #1]
 8008e92:	1cab      	adds	r3, r5, #2
 8008e94:	68a2      	ldr	r2, [r4, #8]
 8008e96:	7852      	ldrb	r2, [r2, #1]
 8008e98:	f803 2b01 	strb.w	r2, [r3], #1
 8008e9c:	68a2      	ldr	r2, [r4, #8]
 8008e9e:	7812      	ldrb	r2, [r2, #0]
 8008ea0:	701a      	strb	r2, [r3, #0]
 8008ea2:	e7b4      	b.n	8008e0e <ucdr_deserialize_uint32_t+0x72>
 8008ea4:	4631      	mov	r1, r6
 8008ea6:	463a      	mov	r2, r7
 8008ea8:	4628      	mov	r0, r5
 8008eaa:	f007 fe50 	bl	8010b4e <memcpy>
 8008eae:	68a1      	ldr	r1, [r4, #8]
 8008eb0:	464a      	mov	r2, r9
 8008eb2:	19e8      	adds	r0, r5, r7
 8008eb4:	f007 fe4b 	bl	8010b4e <memcpy>
 8008eb8:	e7a9      	b.n	8008e0e <ucdr_deserialize_uint32_t+0x72>
 8008eba:	bf00      	nop

08008ebc <ucdr_deserialize_endian_uint32_t>:
 8008ebc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ec0:	460e      	mov	r6, r1
 8008ec2:	2104      	movs	r1, #4
 8008ec4:	4604      	mov	r4, r0
 8008ec6:	4615      	mov	r5, r2
 8008ec8:	f000 fbda 	bl	8009680 <ucdr_buffer_alignment>
 8008ecc:	4601      	mov	r1, r0
 8008ece:	4620      	mov	r0, r4
 8008ed0:	f894 9015 	ldrb.w	r9, [r4, #21]
 8008ed4:	f000 fc18 	bl	8009708 <ucdr_advance_buffer>
 8008ed8:	2104      	movs	r1, #4
 8008eda:	4620      	mov	r0, r4
 8008edc:	f000 fb70 	bl	80095c0 <ucdr_check_buffer_available_for>
 8008ee0:	2800      	cmp	r0, #0
 8008ee2:	d13c      	bne.n	8008f5e <ucdr_deserialize_endian_uint32_t+0xa2>
 8008ee4:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 8008ee8:	42bb      	cmp	r3, r7
 8008eea:	d933      	bls.n	8008f54 <ucdr_deserialize_endian_uint32_t+0x98>
 8008eec:	eba3 0807 	sub.w	r8, r3, r7
 8008ef0:	60a3      	str	r3, [r4, #8]
 8008ef2:	6923      	ldr	r3, [r4, #16]
 8008ef4:	f1c8 0a04 	rsb	sl, r8, #4
 8008ef8:	4443      	add	r3, r8
 8008efa:	6123      	str	r3, [r4, #16]
 8008efc:	4651      	mov	r1, sl
 8008efe:	4620      	mov	r0, r4
 8008f00:	f000 fb6a 	bl	80095d8 <ucdr_check_final_buffer_behavior>
 8008f04:	2800      	cmp	r0, #0
 8008f06:	d048      	beq.n	8008f9a <ucdr_deserialize_endian_uint32_t+0xde>
 8008f08:	2e01      	cmp	r6, #1
 8008f0a:	d061      	beq.n	8008fd0 <ucdr_deserialize_endian_uint32_t+0x114>
 8008f0c:	78fb      	ldrb	r3, [r7, #3]
 8008f0e:	702b      	strb	r3, [r5, #0]
 8008f10:	f1b8 0f00 	cmp.w	r8, #0
 8008f14:	d050      	beq.n	8008fb8 <ucdr_deserialize_endian_uint32_t+0xfc>
 8008f16:	78bb      	ldrb	r3, [r7, #2]
 8008f18:	706b      	strb	r3, [r5, #1]
 8008f1a:	f1b8 0f01 	cmp.w	r8, #1
 8008f1e:	f105 0302 	add.w	r3, r5, #2
 8008f22:	d04d      	beq.n	8008fc0 <ucdr_deserialize_endian_uint32_t+0x104>
 8008f24:	787b      	ldrb	r3, [r7, #1]
 8008f26:	70ab      	strb	r3, [r5, #2]
 8008f28:	f1b8 0f02 	cmp.w	r8, #2
 8008f2c:	f105 0303 	add.w	r3, r5, #3
 8008f30:	d04a      	beq.n	8008fc8 <ucdr_deserialize_endian_uint32_t+0x10c>
 8008f32:	783b      	ldrb	r3, [r7, #0]
 8008f34:	70eb      	strb	r3, [r5, #3]
 8008f36:	6923      	ldr	r3, [r4, #16]
 8008f38:	68a2      	ldr	r2, [r4, #8]
 8008f3a:	7da0      	ldrb	r0, [r4, #22]
 8008f3c:	2104      	movs	r1, #4
 8008f3e:	3304      	adds	r3, #4
 8008f40:	4452      	add	r2, sl
 8008f42:	eba3 0308 	sub.w	r3, r3, r8
 8008f46:	7561      	strb	r1, [r4, #21]
 8008f48:	60a2      	str	r2, [r4, #8]
 8008f4a:	6123      	str	r3, [r4, #16]
 8008f4c:	f080 0001 	eor.w	r0, r0, #1
 8008f50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f54:	2104      	movs	r1, #4
 8008f56:	4620      	mov	r0, r4
 8008f58:	f000 fb3e 	bl	80095d8 <ucdr_check_final_buffer_behavior>
 8008f5c:	b1a8      	cbz	r0, 8008f8a <ucdr_deserialize_endian_uint32_t+0xce>
 8008f5e:	2e01      	cmp	r6, #1
 8008f60:	68a3      	ldr	r3, [r4, #8]
 8008f62:	d017      	beq.n	8008f94 <ucdr_deserialize_endian_uint32_t+0xd8>
 8008f64:	78db      	ldrb	r3, [r3, #3]
 8008f66:	702b      	strb	r3, [r5, #0]
 8008f68:	68a3      	ldr	r3, [r4, #8]
 8008f6a:	789b      	ldrb	r3, [r3, #2]
 8008f6c:	706b      	strb	r3, [r5, #1]
 8008f6e:	68a3      	ldr	r3, [r4, #8]
 8008f70:	785b      	ldrb	r3, [r3, #1]
 8008f72:	70ab      	strb	r3, [r5, #2]
 8008f74:	68a3      	ldr	r3, [r4, #8]
 8008f76:	781b      	ldrb	r3, [r3, #0]
 8008f78:	70eb      	strb	r3, [r5, #3]
 8008f7a:	68a2      	ldr	r2, [r4, #8]
 8008f7c:	6923      	ldr	r3, [r4, #16]
 8008f7e:	3204      	adds	r2, #4
 8008f80:	3304      	adds	r3, #4
 8008f82:	2104      	movs	r1, #4
 8008f84:	60a2      	str	r2, [r4, #8]
 8008f86:	6123      	str	r3, [r4, #16]
 8008f88:	7561      	strb	r1, [r4, #21]
 8008f8a:	7da0      	ldrb	r0, [r4, #22]
 8008f8c:	f080 0001 	eor.w	r0, r0, #1
 8008f90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	602b      	str	r3, [r5, #0]
 8008f98:	e7ef      	b.n	8008f7a <ucdr_deserialize_endian_uint32_t+0xbe>
 8008f9a:	68a2      	ldr	r2, [r4, #8]
 8008f9c:	6923      	ldr	r3, [r4, #16]
 8008f9e:	7da0      	ldrb	r0, [r4, #22]
 8008fa0:	f884 9015 	strb.w	r9, [r4, #21]
 8008fa4:	eba2 0208 	sub.w	r2, r2, r8
 8008fa8:	eba3 0308 	sub.w	r3, r3, r8
 8008fac:	60a2      	str	r2, [r4, #8]
 8008fae:	6123      	str	r3, [r4, #16]
 8008fb0:	f080 0001 	eor.w	r0, r0, #1
 8008fb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fb8:	68a3      	ldr	r3, [r4, #8]
 8008fba:	789b      	ldrb	r3, [r3, #2]
 8008fbc:	706b      	strb	r3, [r5, #1]
 8008fbe:	1cab      	adds	r3, r5, #2
 8008fc0:	68a2      	ldr	r2, [r4, #8]
 8008fc2:	7852      	ldrb	r2, [r2, #1]
 8008fc4:	f803 2b01 	strb.w	r2, [r3], #1
 8008fc8:	68a2      	ldr	r2, [r4, #8]
 8008fca:	7812      	ldrb	r2, [r2, #0]
 8008fcc:	701a      	strb	r2, [r3, #0]
 8008fce:	e7b2      	b.n	8008f36 <ucdr_deserialize_endian_uint32_t+0x7a>
 8008fd0:	4639      	mov	r1, r7
 8008fd2:	4642      	mov	r2, r8
 8008fd4:	4628      	mov	r0, r5
 8008fd6:	f007 fdba 	bl	8010b4e <memcpy>
 8008fda:	68a1      	ldr	r1, [r4, #8]
 8008fdc:	4652      	mov	r2, sl
 8008fde:	eb05 0008 	add.w	r0, r5, r8
 8008fe2:	f007 fdb4 	bl	8010b4e <memcpy>
 8008fe6:	e7a6      	b.n	8008f36 <ucdr_deserialize_endian_uint32_t+0x7a>

08008fe8 <ucdr_serialize_uint64_t>:
 8008fe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fec:	2108      	movs	r1, #8
 8008fee:	b082      	sub	sp, #8
 8008ff0:	4604      	mov	r4, r0
 8008ff2:	e9cd 2300 	strd	r2, r3, [sp]
 8008ff6:	f000 fb43 	bl	8009680 <ucdr_buffer_alignment>
 8008ffa:	4601      	mov	r1, r0
 8008ffc:	4620      	mov	r0, r4
 8008ffe:	7d67      	ldrb	r7, [r4, #21]
 8009000:	f000 fb82 	bl	8009708 <ucdr_advance_buffer>
 8009004:	2108      	movs	r1, #8
 8009006:	4620      	mov	r0, r4
 8009008:	f000 fada 	bl	80095c0 <ucdr_check_buffer_available_for>
 800900c:	2800      	cmp	r0, #0
 800900e:	d14e      	bne.n	80090ae <ucdr_serialize_uint64_t+0xc6>
 8009010:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8009014:	42ab      	cmp	r3, r5
 8009016:	d945      	bls.n	80090a4 <ucdr_serialize_uint64_t+0xbc>
 8009018:	1b5e      	subs	r6, r3, r5
 800901a:	60a3      	str	r3, [r4, #8]
 800901c:	6923      	ldr	r3, [r4, #16]
 800901e:	f1c6 0808 	rsb	r8, r6, #8
 8009022:	4433      	add	r3, r6
 8009024:	6123      	str	r3, [r4, #16]
 8009026:	4641      	mov	r1, r8
 8009028:	4620      	mov	r0, r4
 800902a:	f000 fad5 	bl	80095d8 <ucdr_check_final_buffer_behavior>
 800902e:	2800      	cmp	r0, #0
 8009030:	d074      	beq.n	800911c <ucdr_serialize_uint64_t+0x134>
 8009032:	7d23      	ldrb	r3, [r4, #20]
 8009034:	2b01      	cmp	r3, #1
 8009036:	f000 809b 	beq.w	8009170 <ucdr_serialize_uint64_t+0x188>
 800903a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800903e:	702b      	strb	r3, [r5, #0]
 8009040:	2e00      	cmp	r6, #0
 8009042:	d078      	beq.n	8009136 <ucdr_serialize_uint64_t+0x14e>
 8009044:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8009048:	706b      	strb	r3, [r5, #1]
 800904a:	2e01      	cmp	r6, #1
 800904c:	d077      	beq.n	800913e <ucdr_serialize_uint64_t+0x156>
 800904e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8009052:	70ab      	strb	r3, [r5, #2]
 8009054:	2e02      	cmp	r6, #2
 8009056:	d076      	beq.n	8009146 <ucdr_serialize_uint64_t+0x15e>
 8009058:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800905c:	70eb      	strb	r3, [r5, #3]
 800905e:	2e03      	cmp	r6, #3
 8009060:	d075      	beq.n	800914e <ucdr_serialize_uint64_t+0x166>
 8009062:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8009066:	712b      	strb	r3, [r5, #4]
 8009068:	2e04      	cmp	r6, #4
 800906a:	d074      	beq.n	8009156 <ucdr_serialize_uint64_t+0x16e>
 800906c:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8009070:	716b      	strb	r3, [r5, #5]
 8009072:	2e05      	cmp	r6, #5
 8009074:	d073      	beq.n	800915e <ucdr_serialize_uint64_t+0x176>
 8009076:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800907a:	71ab      	strb	r3, [r5, #6]
 800907c:	2e06      	cmp	r6, #6
 800907e:	d072      	beq.n	8009166 <ucdr_serialize_uint64_t+0x17e>
 8009080:	f89d 3000 	ldrb.w	r3, [sp]
 8009084:	71eb      	strb	r3, [r5, #7]
 8009086:	6923      	ldr	r3, [r4, #16]
 8009088:	68a2      	ldr	r2, [r4, #8]
 800908a:	7da0      	ldrb	r0, [r4, #22]
 800908c:	3308      	adds	r3, #8
 800908e:	1b9e      	subs	r6, r3, r6
 8009090:	4442      	add	r2, r8
 8009092:	2308      	movs	r3, #8
 8009094:	f080 0001 	eor.w	r0, r0, #1
 8009098:	60a2      	str	r2, [r4, #8]
 800909a:	6126      	str	r6, [r4, #16]
 800909c:	7563      	strb	r3, [r4, #21]
 800909e:	b002      	add	sp, #8
 80090a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090a4:	2108      	movs	r1, #8
 80090a6:	4620      	mov	r0, r4
 80090a8:	f000 fa96 	bl	80095d8 <ucdr_check_final_buffer_behavior>
 80090ac:	b350      	cbz	r0, 8009104 <ucdr_serialize_uint64_t+0x11c>
 80090ae:	7d23      	ldrb	r3, [r4, #20]
 80090b0:	2b01      	cmp	r3, #1
 80090b2:	d02d      	beq.n	8009110 <ucdr_serialize_uint64_t+0x128>
 80090b4:	68a3      	ldr	r3, [r4, #8]
 80090b6:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80090ba:	701a      	strb	r2, [r3, #0]
 80090bc:	68a3      	ldr	r3, [r4, #8]
 80090be:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80090c2:	705a      	strb	r2, [r3, #1]
 80090c4:	68a3      	ldr	r3, [r4, #8]
 80090c6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80090ca:	709a      	strb	r2, [r3, #2]
 80090cc:	68a3      	ldr	r3, [r4, #8]
 80090ce:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80090d2:	70da      	strb	r2, [r3, #3]
 80090d4:	68a3      	ldr	r3, [r4, #8]
 80090d6:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80090da:	711a      	strb	r2, [r3, #4]
 80090dc:	68a3      	ldr	r3, [r4, #8]
 80090de:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80090e2:	715a      	strb	r2, [r3, #5]
 80090e4:	68a3      	ldr	r3, [r4, #8]
 80090e6:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80090ea:	719a      	strb	r2, [r3, #6]
 80090ec:	68a3      	ldr	r3, [r4, #8]
 80090ee:	f89d 2000 	ldrb.w	r2, [sp]
 80090f2:	71da      	strb	r2, [r3, #7]
 80090f4:	68a2      	ldr	r2, [r4, #8]
 80090f6:	6923      	ldr	r3, [r4, #16]
 80090f8:	3208      	adds	r2, #8
 80090fa:	3308      	adds	r3, #8
 80090fc:	2108      	movs	r1, #8
 80090fe:	60a2      	str	r2, [r4, #8]
 8009100:	6123      	str	r3, [r4, #16]
 8009102:	7561      	strb	r1, [r4, #21]
 8009104:	7da0      	ldrb	r0, [r4, #22]
 8009106:	f080 0001 	eor.w	r0, r0, #1
 800910a:	b002      	add	sp, #8
 800910c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009110:	466b      	mov	r3, sp
 8009112:	cb03      	ldmia	r3!, {r0, r1}
 8009114:	68a3      	ldr	r3, [r4, #8]
 8009116:	6018      	str	r0, [r3, #0]
 8009118:	6059      	str	r1, [r3, #4]
 800911a:	e7eb      	b.n	80090f4 <ucdr_serialize_uint64_t+0x10c>
 800911c:	68a2      	ldr	r2, [r4, #8]
 800911e:	6923      	ldr	r3, [r4, #16]
 8009120:	7da0      	ldrb	r0, [r4, #22]
 8009122:	7567      	strb	r7, [r4, #21]
 8009124:	1b92      	subs	r2, r2, r6
 8009126:	1b9b      	subs	r3, r3, r6
 8009128:	f080 0001 	eor.w	r0, r0, #1
 800912c:	60a2      	str	r2, [r4, #8]
 800912e:	6123      	str	r3, [r4, #16]
 8009130:	b002      	add	sp, #8
 8009132:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009136:	68a3      	ldr	r3, [r4, #8]
 8009138:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800913c:	701a      	strb	r2, [r3, #0]
 800913e:	68a3      	ldr	r3, [r4, #8]
 8009140:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8009144:	701a      	strb	r2, [r3, #0]
 8009146:	68a3      	ldr	r3, [r4, #8]
 8009148:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800914c:	701a      	strb	r2, [r3, #0]
 800914e:	68a3      	ldr	r3, [r4, #8]
 8009150:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8009154:	701a      	strb	r2, [r3, #0]
 8009156:	68a3      	ldr	r3, [r4, #8]
 8009158:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800915c:	701a      	strb	r2, [r3, #0]
 800915e:	68a3      	ldr	r3, [r4, #8]
 8009160:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8009164:	701a      	strb	r2, [r3, #0]
 8009166:	68a3      	ldr	r3, [r4, #8]
 8009168:	f89d 2000 	ldrb.w	r2, [sp]
 800916c:	701a      	strb	r2, [r3, #0]
 800916e:	e78a      	b.n	8009086 <ucdr_serialize_uint64_t+0x9e>
 8009170:	4628      	mov	r0, r5
 8009172:	466d      	mov	r5, sp
 8009174:	4629      	mov	r1, r5
 8009176:	4632      	mov	r2, r6
 8009178:	f007 fce9 	bl	8010b4e <memcpy>
 800917c:	68a0      	ldr	r0, [r4, #8]
 800917e:	4642      	mov	r2, r8
 8009180:	19a9      	adds	r1, r5, r6
 8009182:	f007 fce4 	bl	8010b4e <memcpy>
 8009186:	e77e      	b.n	8009086 <ucdr_serialize_uint64_t+0x9e>

08009188 <ucdr_serialize_int16_t>:
 8009188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800918c:	b082      	sub	sp, #8
 800918e:	460b      	mov	r3, r1
 8009190:	2102      	movs	r1, #2
 8009192:	4604      	mov	r4, r0
 8009194:	f8ad 3006 	strh.w	r3, [sp, #6]
 8009198:	f000 fa72 	bl	8009680 <ucdr_buffer_alignment>
 800919c:	4601      	mov	r1, r0
 800919e:	4620      	mov	r0, r4
 80091a0:	7d67      	ldrb	r7, [r4, #21]
 80091a2:	f000 fab1 	bl	8009708 <ucdr_advance_buffer>
 80091a6:	2102      	movs	r1, #2
 80091a8:	4620      	mov	r0, r4
 80091aa:	f000 fa09 	bl	80095c0 <ucdr_check_buffer_available_for>
 80091ae:	bb78      	cbnz	r0, 8009210 <ucdr_serialize_int16_t+0x88>
 80091b0:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80091b4:	42ab      	cmp	r3, r5
 80091b6:	d926      	bls.n	8009206 <ucdr_serialize_int16_t+0x7e>
 80091b8:	1b5e      	subs	r6, r3, r5
 80091ba:	60a3      	str	r3, [r4, #8]
 80091bc:	6923      	ldr	r3, [r4, #16]
 80091be:	f1c6 0802 	rsb	r8, r6, #2
 80091c2:	4433      	add	r3, r6
 80091c4:	6123      	str	r3, [r4, #16]
 80091c6:	4641      	mov	r1, r8
 80091c8:	4620      	mov	r0, r4
 80091ca:	f000 fa05 	bl	80095d8 <ucdr_check_final_buffer_behavior>
 80091ce:	2800      	cmp	r0, #0
 80091d0:	d03b      	beq.n	800924a <ucdr_serialize_int16_t+0xc2>
 80091d2:	7d23      	ldrb	r3, [r4, #20]
 80091d4:	2b01      	cmp	r3, #1
 80091d6:	d04a      	beq.n	800926e <ucdr_serialize_int16_t+0xe6>
 80091d8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80091dc:	702b      	strb	r3, [r5, #0]
 80091de:	2e00      	cmp	r6, #0
 80091e0:	d040      	beq.n	8009264 <ucdr_serialize_int16_t+0xdc>
 80091e2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80091e6:	706b      	strb	r3, [r5, #1]
 80091e8:	6923      	ldr	r3, [r4, #16]
 80091ea:	68a2      	ldr	r2, [r4, #8]
 80091ec:	7da0      	ldrb	r0, [r4, #22]
 80091ee:	3302      	adds	r3, #2
 80091f0:	1b9e      	subs	r6, r3, r6
 80091f2:	4442      	add	r2, r8
 80091f4:	2302      	movs	r3, #2
 80091f6:	f080 0001 	eor.w	r0, r0, #1
 80091fa:	60a2      	str	r2, [r4, #8]
 80091fc:	6126      	str	r6, [r4, #16]
 80091fe:	7563      	strb	r3, [r4, #21]
 8009200:	b002      	add	sp, #8
 8009202:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009206:	2102      	movs	r1, #2
 8009208:	4620      	mov	r0, r4
 800920a:	f000 f9e5 	bl	80095d8 <ucdr_check_final_buffer_behavior>
 800920e:	b190      	cbz	r0, 8009236 <ucdr_serialize_int16_t+0xae>
 8009210:	7d23      	ldrb	r3, [r4, #20]
 8009212:	2b01      	cmp	r3, #1
 8009214:	68a3      	ldr	r3, [r4, #8]
 8009216:	d014      	beq.n	8009242 <ucdr_serialize_int16_t+0xba>
 8009218:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800921c:	701a      	strb	r2, [r3, #0]
 800921e:	68a3      	ldr	r3, [r4, #8]
 8009220:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009224:	705a      	strb	r2, [r3, #1]
 8009226:	68a2      	ldr	r2, [r4, #8]
 8009228:	6923      	ldr	r3, [r4, #16]
 800922a:	3202      	adds	r2, #2
 800922c:	3302      	adds	r3, #2
 800922e:	2102      	movs	r1, #2
 8009230:	60a2      	str	r2, [r4, #8]
 8009232:	6123      	str	r3, [r4, #16]
 8009234:	7561      	strb	r1, [r4, #21]
 8009236:	7da0      	ldrb	r0, [r4, #22]
 8009238:	f080 0001 	eor.w	r0, r0, #1
 800923c:	b002      	add	sp, #8
 800923e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009242:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8009246:	801a      	strh	r2, [r3, #0]
 8009248:	e7ed      	b.n	8009226 <ucdr_serialize_int16_t+0x9e>
 800924a:	68a2      	ldr	r2, [r4, #8]
 800924c:	6923      	ldr	r3, [r4, #16]
 800924e:	7da0      	ldrb	r0, [r4, #22]
 8009250:	7567      	strb	r7, [r4, #21]
 8009252:	1b92      	subs	r2, r2, r6
 8009254:	1b9b      	subs	r3, r3, r6
 8009256:	f080 0001 	eor.w	r0, r0, #1
 800925a:	60a2      	str	r2, [r4, #8]
 800925c:	6123      	str	r3, [r4, #16]
 800925e:	b002      	add	sp, #8
 8009260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009264:	68a3      	ldr	r3, [r4, #8]
 8009266:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800926a:	701a      	strb	r2, [r3, #0]
 800926c:	e7bc      	b.n	80091e8 <ucdr_serialize_int16_t+0x60>
 800926e:	4628      	mov	r0, r5
 8009270:	f10d 0506 	add.w	r5, sp, #6
 8009274:	4629      	mov	r1, r5
 8009276:	4632      	mov	r2, r6
 8009278:	f007 fc69 	bl	8010b4e <memcpy>
 800927c:	68a0      	ldr	r0, [r4, #8]
 800927e:	4642      	mov	r2, r8
 8009280:	19a9      	adds	r1, r5, r6
 8009282:	f007 fc64 	bl	8010b4e <memcpy>
 8009286:	e7af      	b.n	80091e8 <ucdr_serialize_int16_t+0x60>

08009288 <ucdr_deserialize_int16_t>:
 8009288:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800928c:	460d      	mov	r5, r1
 800928e:	2102      	movs	r1, #2
 8009290:	4604      	mov	r4, r0
 8009292:	f000 f9f5 	bl	8009680 <ucdr_buffer_alignment>
 8009296:	4601      	mov	r1, r0
 8009298:	4620      	mov	r0, r4
 800929a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800929e:	f000 fa33 	bl	8009708 <ucdr_advance_buffer>
 80092a2:	2102      	movs	r1, #2
 80092a4:	4620      	mov	r0, r4
 80092a6:	f000 f98b 	bl	80095c0 <ucdr_check_buffer_available_for>
 80092aa:	bb60      	cbnz	r0, 8009306 <ucdr_deserialize_int16_t+0x7e>
 80092ac:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 80092b0:	42be      	cmp	r6, r7
 80092b2:	d923      	bls.n	80092fc <ucdr_deserialize_int16_t+0x74>
 80092b4:	6923      	ldr	r3, [r4, #16]
 80092b6:	60a6      	str	r6, [r4, #8]
 80092b8:	1bf6      	subs	r6, r6, r7
 80092ba:	4433      	add	r3, r6
 80092bc:	f1c6 0902 	rsb	r9, r6, #2
 80092c0:	6123      	str	r3, [r4, #16]
 80092c2:	4649      	mov	r1, r9
 80092c4:	4620      	mov	r0, r4
 80092c6:	f000 f987 	bl	80095d8 <ucdr_check_final_buffer_behavior>
 80092ca:	2800      	cmp	r0, #0
 80092cc:	d034      	beq.n	8009338 <ucdr_deserialize_int16_t+0xb0>
 80092ce:	7d23      	ldrb	r3, [r4, #20]
 80092d0:	2b01      	cmp	r3, #1
 80092d2:	d042      	beq.n	800935a <ucdr_deserialize_int16_t+0xd2>
 80092d4:	787b      	ldrb	r3, [r7, #1]
 80092d6:	702b      	strb	r3, [r5, #0]
 80092d8:	2e00      	cmp	r6, #0
 80092da:	d03a      	beq.n	8009352 <ucdr_deserialize_int16_t+0xca>
 80092dc:	783b      	ldrb	r3, [r7, #0]
 80092de:	706b      	strb	r3, [r5, #1]
 80092e0:	6923      	ldr	r3, [r4, #16]
 80092e2:	68a2      	ldr	r2, [r4, #8]
 80092e4:	7da0      	ldrb	r0, [r4, #22]
 80092e6:	2102      	movs	r1, #2
 80092e8:	3302      	adds	r3, #2
 80092ea:	444a      	add	r2, r9
 80092ec:	1b9b      	subs	r3, r3, r6
 80092ee:	7561      	strb	r1, [r4, #21]
 80092f0:	60a2      	str	r2, [r4, #8]
 80092f2:	6123      	str	r3, [r4, #16]
 80092f4:	f080 0001 	eor.w	r0, r0, #1
 80092f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092fc:	2102      	movs	r1, #2
 80092fe:	4620      	mov	r0, r4
 8009300:	f000 f96a 	bl	80095d8 <ucdr_check_final_buffer_behavior>
 8009304:	b180      	cbz	r0, 8009328 <ucdr_deserialize_int16_t+0xa0>
 8009306:	7d23      	ldrb	r3, [r4, #20]
 8009308:	2b01      	cmp	r3, #1
 800930a:	68a3      	ldr	r3, [r4, #8]
 800930c:	d011      	beq.n	8009332 <ucdr_deserialize_int16_t+0xaa>
 800930e:	785b      	ldrb	r3, [r3, #1]
 8009310:	702b      	strb	r3, [r5, #0]
 8009312:	68a3      	ldr	r3, [r4, #8]
 8009314:	781b      	ldrb	r3, [r3, #0]
 8009316:	706b      	strb	r3, [r5, #1]
 8009318:	68a2      	ldr	r2, [r4, #8]
 800931a:	6923      	ldr	r3, [r4, #16]
 800931c:	3202      	adds	r2, #2
 800931e:	3302      	adds	r3, #2
 8009320:	2102      	movs	r1, #2
 8009322:	60a2      	str	r2, [r4, #8]
 8009324:	6123      	str	r3, [r4, #16]
 8009326:	7561      	strb	r1, [r4, #21]
 8009328:	7da0      	ldrb	r0, [r4, #22]
 800932a:	f080 0001 	eor.w	r0, r0, #1
 800932e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009332:	881b      	ldrh	r3, [r3, #0]
 8009334:	802b      	strh	r3, [r5, #0]
 8009336:	e7ef      	b.n	8009318 <ucdr_deserialize_int16_t+0x90>
 8009338:	68a2      	ldr	r2, [r4, #8]
 800933a:	6923      	ldr	r3, [r4, #16]
 800933c:	7da0      	ldrb	r0, [r4, #22]
 800933e:	f884 8015 	strb.w	r8, [r4, #21]
 8009342:	1b92      	subs	r2, r2, r6
 8009344:	1b9b      	subs	r3, r3, r6
 8009346:	60a2      	str	r2, [r4, #8]
 8009348:	6123      	str	r3, [r4, #16]
 800934a:	f080 0001 	eor.w	r0, r0, #1
 800934e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009352:	68a3      	ldr	r3, [r4, #8]
 8009354:	781b      	ldrb	r3, [r3, #0]
 8009356:	706b      	strb	r3, [r5, #1]
 8009358:	e7c2      	b.n	80092e0 <ucdr_deserialize_int16_t+0x58>
 800935a:	4639      	mov	r1, r7
 800935c:	4632      	mov	r2, r6
 800935e:	4628      	mov	r0, r5
 8009360:	f007 fbf5 	bl	8010b4e <memcpy>
 8009364:	68a1      	ldr	r1, [r4, #8]
 8009366:	464a      	mov	r2, r9
 8009368:	19a8      	adds	r0, r5, r6
 800936a:	f007 fbf0 	bl	8010b4e <memcpy>
 800936e:	e7b7      	b.n	80092e0 <ucdr_deserialize_int16_t+0x58>

08009370 <ucdr_serialize_int32_t>:
 8009370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009374:	b082      	sub	sp, #8
 8009376:	4604      	mov	r4, r0
 8009378:	9101      	str	r1, [sp, #4]
 800937a:	2104      	movs	r1, #4
 800937c:	f000 f980 	bl	8009680 <ucdr_buffer_alignment>
 8009380:	4601      	mov	r1, r0
 8009382:	4620      	mov	r0, r4
 8009384:	7d67      	ldrb	r7, [r4, #21]
 8009386:	f000 f9bf 	bl	8009708 <ucdr_advance_buffer>
 800938a:	2104      	movs	r1, #4
 800938c:	4620      	mov	r0, r4
 800938e:	f000 f917 	bl	80095c0 <ucdr_check_buffer_available_for>
 8009392:	2800      	cmp	r0, #0
 8009394:	d139      	bne.n	800940a <ucdr_serialize_int32_t+0x9a>
 8009396:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800939a:	42ab      	cmp	r3, r5
 800939c:	d930      	bls.n	8009400 <ucdr_serialize_int32_t+0x90>
 800939e:	1b5e      	subs	r6, r3, r5
 80093a0:	60a3      	str	r3, [r4, #8]
 80093a2:	6923      	ldr	r3, [r4, #16]
 80093a4:	f1c6 0804 	rsb	r8, r6, #4
 80093a8:	4433      	add	r3, r6
 80093aa:	6123      	str	r3, [r4, #16]
 80093ac:	4641      	mov	r1, r8
 80093ae:	4620      	mov	r0, r4
 80093b0:	f000 f912 	bl	80095d8 <ucdr_check_final_buffer_behavior>
 80093b4:	2800      	cmp	r0, #0
 80093b6:	d04c      	beq.n	8009452 <ucdr_serialize_int32_t+0xe2>
 80093b8:	7d23      	ldrb	r3, [r4, #20]
 80093ba:	2b01      	cmp	r3, #1
 80093bc:	d063      	beq.n	8009486 <ucdr_serialize_int32_t+0x116>
 80093be:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80093c2:	702b      	strb	r3, [r5, #0]
 80093c4:	2e00      	cmp	r6, #0
 80093c6:	d051      	beq.n	800946c <ucdr_serialize_int32_t+0xfc>
 80093c8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80093cc:	706b      	strb	r3, [r5, #1]
 80093ce:	2e01      	cmp	r6, #1
 80093d0:	d050      	beq.n	8009474 <ucdr_serialize_int32_t+0x104>
 80093d2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80093d6:	70ab      	strb	r3, [r5, #2]
 80093d8:	2e02      	cmp	r6, #2
 80093da:	d04f      	beq.n	800947c <ucdr_serialize_int32_t+0x10c>
 80093dc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80093e0:	70eb      	strb	r3, [r5, #3]
 80093e2:	6923      	ldr	r3, [r4, #16]
 80093e4:	68a2      	ldr	r2, [r4, #8]
 80093e6:	7da0      	ldrb	r0, [r4, #22]
 80093e8:	3304      	adds	r3, #4
 80093ea:	1b9e      	subs	r6, r3, r6
 80093ec:	4442      	add	r2, r8
 80093ee:	2304      	movs	r3, #4
 80093f0:	f080 0001 	eor.w	r0, r0, #1
 80093f4:	60a2      	str	r2, [r4, #8]
 80093f6:	6126      	str	r6, [r4, #16]
 80093f8:	7563      	strb	r3, [r4, #21]
 80093fa:	b002      	add	sp, #8
 80093fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009400:	2104      	movs	r1, #4
 8009402:	4620      	mov	r0, r4
 8009404:	f000 f8e8 	bl	80095d8 <ucdr_check_final_buffer_behavior>
 8009408:	b1d0      	cbz	r0, 8009440 <ucdr_serialize_int32_t+0xd0>
 800940a:	7d23      	ldrb	r3, [r4, #20]
 800940c:	2b01      	cmp	r3, #1
 800940e:	68a3      	ldr	r3, [r4, #8]
 8009410:	d01c      	beq.n	800944c <ucdr_serialize_int32_t+0xdc>
 8009412:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8009416:	701a      	strb	r2, [r3, #0]
 8009418:	68a3      	ldr	r3, [r4, #8]
 800941a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800941e:	705a      	strb	r2, [r3, #1]
 8009420:	68a3      	ldr	r3, [r4, #8]
 8009422:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8009426:	709a      	strb	r2, [r3, #2]
 8009428:	68a3      	ldr	r3, [r4, #8]
 800942a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800942e:	70da      	strb	r2, [r3, #3]
 8009430:	68a2      	ldr	r2, [r4, #8]
 8009432:	6923      	ldr	r3, [r4, #16]
 8009434:	3204      	adds	r2, #4
 8009436:	3304      	adds	r3, #4
 8009438:	2104      	movs	r1, #4
 800943a:	60a2      	str	r2, [r4, #8]
 800943c:	6123      	str	r3, [r4, #16]
 800943e:	7561      	strb	r1, [r4, #21]
 8009440:	7da0      	ldrb	r0, [r4, #22]
 8009442:	f080 0001 	eor.w	r0, r0, #1
 8009446:	b002      	add	sp, #8
 8009448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800944c:	9a01      	ldr	r2, [sp, #4]
 800944e:	601a      	str	r2, [r3, #0]
 8009450:	e7ee      	b.n	8009430 <ucdr_serialize_int32_t+0xc0>
 8009452:	68a2      	ldr	r2, [r4, #8]
 8009454:	6923      	ldr	r3, [r4, #16]
 8009456:	7da0      	ldrb	r0, [r4, #22]
 8009458:	7567      	strb	r7, [r4, #21]
 800945a:	1b92      	subs	r2, r2, r6
 800945c:	1b9b      	subs	r3, r3, r6
 800945e:	f080 0001 	eor.w	r0, r0, #1
 8009462:	60a2      	str	r2, [r4, #8]
 8009464:	6123      	str	r3, [r4, #16]
 8009466:	b002      	add	sp, #8
 8009468:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800946c:	68a3      	ldr	r3, [r4, #8]
 800946e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8009472:	701a      	strb	r2, [r3, #0]
 8009474:	68a3      	ldr	r3, [r4, #8]
 8009476:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800947a:	701a      	strb	r2, [r3, #0]
 800947c:	68a3      	ldr	r3, [r4, #8]
 800947e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8009482:	701a      	strb	r2, [r3, #0]
 8009484:	e7ad      	b.n	80093e2 <ucdr_serialize_int32_t+0x72>
 8009486:	4628      	mov	r0, r5
 8009488:	ad01      	add	r5, sp, #4
 800948a:	4629      	mov	r1, r5
 800948c:	4632      	mov	r2, r6
 800948e:	f007 fb5e 	bl	8010b4e <memcpy>
 8009492:	68a0      	ldr	r0, [r4, #8]
 8009494:	4642      	mov	r2, r8
 8009496:	19a9      	adds	r1, r5, r6
 8009498:	f007 fb59 	bl	8010b4e <memcpy>
 800949c:	e7a1      	b.n	80093e2 <ucdr_serialize_int32_t+0x72>
 800949e:	bf00      	nop

080094a0 <ucdr_deserialize_int32_t>:
 80094a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094a4:	460d      	mov	r5, r1
 80094a6:	2104      	movs	r1, #4
 80094a8:	4604      	mov	r4, r0
 80094aa:	f000 f8e9 	bl	8009680 <ucdr_buffer_alignment>
 80094ae:	4601      	mov	r1, r0
 80094b0:	4620      	mov	r0, r4
 80094b2:	f894 8015 	ldrb.w	r8, [r4, #21]
 80094b6:	f000 f927 	bl	8009708 <ucdr_advance_buffer>
 80094ba:	2104      	movs	r1, #4
 80094bc:	4620      	mov	r0, r4
 80094be:	f000 f87f 	bl	80095c0 <ucdr_check_buffer_available_for>
 80094c2:	2800      	cmp	r0, #0
 80094c4:	d138      	bne.n	8009538 <ucdr_deserialize_int32_t+0x98>
 80094c6:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 80094ca:	42b7      	cmp	r7, r6
 80094cc:	d92f      	bls.n	800952e <ucdr_deserialize_int32_t+0x8e>
 80094ce:	6923      	ldr	r3, [r4, #16]
 80094d0:	60a7      	str	r7, [r4, #8]
 80094d2:	1bbf      	subs	r7, r7, r6
 80094d4:	443b      	add	r3, r7
 80094d6:	f1c7 0904 	rsb	r9, r7, #4
 80094da:	6123      	str	r3, [r4, #16]
 80094dc:	4649      	mov	r1, r9
 80094de:	4620      	mov	r0, r4
 80094e0:	f000 f87a 	bl	80095d8 <ucdr_check_final_buffer_behavior>
 80094e4:	2800      	cmp	r0, #0
 80094e6:	d046      	beq.n	8009576 <ucdr_deserialize_int32_t+0xd6>
 80094e8:	7d23      	ldrb	r3, [r4, #20]
 80094ea:	2b01      	cmp	r3, #1
 80094ec:	d05c      	beq.n	80095a8 <ucdr_deserialize_int32_t+0x108>
 80094ee:	78f3      	ldrb	r3, [r6, #3]
 80094f0:	702b      	strb	r3, [r5, #0]
 80094f2:	2f00      	cmp	r7, #0
 80094f4:	d04c      	beq.n	8009590 <ucdr_deserialize_int32_t+0xf0>
 80094f6:	78b3      	ldrb	r3, [r6, #2]
 80094f8:	706b      	strb	r3, [r5, #1]
 80094fa:	2f01      	cmp	r7, #1
 80094fc:	f105 0302 	add.w	r3, r5, #2
 8009500:	d04a      	beq.n	8009598 <ucdr_deserialize_int32_t+0xf8>
 8009502:	7873      	ldrb	r3, [r6, #1]
 8009504:	70ab      	strb	r3, [r5, #2]
 8009506:	2f02      	cmp	r7, #2
 8009508:	f105 0303 	add.w	r3, r5, #3
 800950c:	d048      	beq.n	80095a0 <ucdr_deserialize_int32_t+0x100>
 800950e:	7833      	ldrb	r3, [r6, #0]
 8009510:	70eb      	strb	r3, [r5, #3]
 8009512:	6923      	ldr	r3, [r4, #16]
 8009514:	68a2      	ldr	r2, [r4, #8]
 8009516:	7da0      	ldrb	r0, [r4, #22]
 8009518:	2104      	movs	r1, #4
 800951a:	3304      	adds	r3, #4
 800951c:	444a      	add	r2, r9
 800951e:	1bdb      	subs	r3, r3, r7
 8009520:	7561      	strb	r1, [r4, #21]
 8009522:	60a2      	str	r2, [r4, #8]
 8009524:	6123      	str	r3, [r4, #16]
 8009526:	f080 0001 	eor.w	r0, r0, #1
 800952a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800952e:	2104      	movs	r1, #4
 8009530:	4620      	mov	r0, r4
 8009532:	f000 f851 	bl	80095d8 <ucdr_check_final_buffer_behavior>
 8009536:	b1b0      	cbz	r0, 8009566 <ucdr_deserialize_int32_t+0xc6>
 8009538:	7d23      	ldrb	r3, [r4, #20]
 800953a:	2b01      	cmp	r3, #1
 800953c:	68a3      	ldr	r3, [r4, #8]
 800953e:	d017      	beq.n	8009570 <ucdr_deserialize_int32_t+0xd0>
 8009540:	78db      	ldrb	r3, [r3, #3]
 8009542:	702b      	strb	r3, [r5, #0]
 8009544:	68a3      	ldr	r3, [r4, #8]
 8009546:	789b      	ldrb	r3, [r3, #2]
 8009548:	706b      	strb	r3, [r5, #1]
 800954a:	68a3      	ldr	r3, [r4, #8]
 800954c:	785b      	ldrb	r3, [r3, #1]
 800954e:	70ab      	strb	r3, [r5, #2]
 8009550:	68a3      	ldr	r3, [r4, #8]
 8009552:	781b      	ldrb	r3, [r3, #0]
 8009554:	70eb      	strb	r3, [r5, #3]
 8009556:	68a2      	ldr	r2, [r4, #8]
 8009558:	6923      	ldr	r3, [r4, #16]
 800955a:	3204      	adds	r2, #4
 800955c:	3304      	adds	r3, #4
 800955e:	2104      	movs	r1, #4
 8009560:	60a2      	str	r2, [r4, #8]
 8009562:	6123      	str	r3, [r4, #16]
 8009564:	7561      	strb	r1, [r4, #21]
 8009566:	7da0      	ldrb	r0, [r4, #22]
 8009568:	f080 0001 	eor.w	r0, r0, #1
 800956c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	602b      	str	r3, [r5, #0]
 8009574:	e7ef      	b.n	8009556 <ucdr_deserialize_int32_t+0xb6>
 8009576:	68a2      	ldr	r2, [r4, #8]
 8009578:	6923      	ldr	r3, [r4, #16]
 800957a:	7da0      	ldrb	r0, [r4, #22]
 800957c:	f884 8015 	strb.w	r8, [r4, #21]
 8009580:	1bd2      	subs	r2, r2, r7
 8009582:	1bdb      	subs	r3, r3, r7
 8009584:	60a2      	str	r2, [r4, #8]
 8009586:	6123      	str	r3, [r4, #16]
 8009588:	f080 0001 	eor.w	r0, r0, #1
 800958c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009590:	68a3      	ldr	r3, [r4, #8]
 8009592:	789b      	ldrb	r3, [r3, #2]
 8009594:	706b      	strb	r3, [r5, #1]
 8009596:	1cab      	adds	r3, r5, #2
 8009598:	68a2      	ldr	r2, [r4, #8]
 800959a:	7852      	ldrb	r2, [r2, #1]
 800959c:	f803 2b01 	strb.w	r2, [r3], #1
 80095a0:	68a2      	ldr	r2, [r4, #8]
 80095a2:	7812      	ldrb	r2, [r2, #0]
 80095a4:	701a      	strb	r2, [r3, #0]
 80095a6:	e7b4      	b.n	8009512 <ucdr_deserialize_int32_t+0x72>
 80095a8:	4631      	mov	r1, r6
 80095aa:	463a      	mov	r2, r7
 80095ac:	4628      	mov	r0, r5
 80095ae:	f007 face 	bl	8010b4e <memcpy>
 80095b2:	68a1      	ldr	r1, [r4, #8]
 80095b4:	464a      	mov	r2, r9
 80095b6:	19e8      	adds	r0, r5, r7
 80095b8:	f007 fac9 	bl	8010b4e <memcpy>
 80095bc:	e7a9      	b.n	8009512 <ucdr_deserialize_int32_t+0x72>
 80095be:	bf00      	nop

080095c0 <ucdr_check_buffer_available_for>:
 80095c0:	7d83      	ldrb	r3, [r0, #22]
 80095c2:	b93b      	cbnz	r3, 80095d4 <ucdr_check_buffer_available_for+0x14>
 80095c4:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 80095c8:	4419      	add	r1, r3
 80095ca:	4288      	cmp	r0, r1
 80095cc:	bf34      	ite	cc
 80095ce:	2000      	movcc	r0, #0
 80095d0:	2001      	movcs	r0, #1
 80095d2:	4770      	bx	lr
 80095d4:	2000      	movs	r0, #0
 80095d6:	4770      	bx	lr

080095d8 <ucdr_check_final_buffer_behavior>:
 80095d8:	7d83      	ldrb	r3, [r0, #22]
 80095da:	b943      	cbnz	r3, 80095ee <ucdr_check_final_buffer_behavior+0x16>
 80095dc:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 80095e0:	4291      	cmp	r1, r2
 80095e2:	b510      	push	{r4, lr}
 80095e4:	4604      	mov	r4, r0
 80095e6:	d205      	bcs.n	80095f4 <ucdr_check_final_buffer_behavior+0x1c>
 80095e8:	2301      	movs	r3, #1
 80095ea:	4618      	mov	r0, r3
 80095ec:	bd10      	pop	{r4, pc}
 80095ee:	2300      	movs	r3, #0
 80095f0:	4618      	mov	r0, r3
 80095f2:	4770      	bx	lr
 80095f4:	6982      	ldr	r2, [r0, #24]
 80095f6:	b13a      	cbz	r2, 8009608 <ucdr_check_final_buffer_behavior+0x30>
 80095f8:	69c1      	ldr	r1, [r0, #28]
 80095fa:	4790      	blx	r2
 80095fc:	f080 0301 	eor.w	r3, r0, #1
 8009600:	b2db      	uxtb	r3, r3
 8009602:	75a0      	strb	r0, [r4, #22]
 8009604:	4618      	mov	r0, r3
 8009606:	bd10      	pop	{r4, pc}
 8009608:	2001      	movs	r0, #1
 800960a:	75a0      	strb	r0, [r4, #22]
 800960c:	e7fa      	b.n	8009604 <ucdr_check_final_buffer_behavior+0x2c>
 800960e:	bf00      	nop

08009610 <ucdr_set_on_full_buffer_callback>:
 8009610:	e9c0 1206 	strd	r1, r2, [r0, #24]
 8009614:	4770      	bx	lr
 8009616:	bf00      	nop

08009618 <ucdr_init_buffer_origin_offset_endian>:
 8009618:	b410      	push	{r4}
 800961a:	9c01      	ldr	r4, [sp, #4]
 800961c:	6001      	str	r1, [r0, #0]
 800961e:	440a      	add	r2, r1
 8009620:	6042      	str	r2, [r0, #4]
 8009622:	190a      	adds	r2, r1, r4
 8009624:	441c      	add	r4, r3
 8009626:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800962a:	6082      	str	r2, [r0, #8]
 800962c:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8009630:	7503      	strb	r3, [r0, #20]
 8009632:	2200      	movs	r2, #0
 8009634:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8009638:	f85d 4b04 	ldr.w	r4, [sp], #4
 800963c:	7542      	strb	r2, [r0, #21]
 800963e:	7582      	strb	r2, [r0, #22]
 8009640:	4770      	bx	lr
 8009642:	bf00      	nop

08009644 <ucdr_init_buffer_origin_offset>:
 8009644:	b510      	push	{r4, lr}
 8009646:	b082      	sub	sp, #8
 8009648:	9c04      	ldr	r4, [sp, #16]
 800964a:	9400      	str	r4, [sp, #0]
 800964c:	2401      	movs	r4, #1
 800964e:	9401      	str	r4, [sp, #4]
 8009650:	f7ff ffe2 	bl	8009618 <ucdr_init_buffer_origin_offset_endian>
 8009654:	b002      	add	sp, #8
 8009656:	bd10      	pop	{r4, pc}

08009658 <ucdr_init_buffer_origin>:
 8009658:	b510      	push	{r4, lr}
 800965a:	b082      	sub	sp, #8
 800965c:	2400      	movs	r4, #0
 800965e:	9400      	str	r4, [sp, #0]
 8009660:	f7ff fff0 	bl	8009644 <ucdr_init_buffer_origin_offset>
 8009664:	b002      	add	sp, #8
 8009666:	bd10      	pop	{r4, pc}

08009668 <ucdr_init_buffer>:
 8009668:	2300      	movs	r3, #0
 800966a:	f7ff bff5 	b.w	8009658 <ucdr_init_buffer_origin>
 800966e:	bf00      	nop

08009670 <ucdr_alignment>:
 8009670:	fbb0 f3f1 	udiv	r3, r0, r1
 8009674:	fb03 0011 	mls	r0, r3, r1, r0
 8009678:	1a08      	subs	r0, r1, r0
 800967a:	3901      	subs	r1, #1
 800967c:	4008      	ands	r0, r1
 800967e:	4770      	bx	lr

08009680 <ucdr_buffer_alignment>:
 8009680:	7d43      	ldrb	r3, [r0, #21]
 8009682:	428b      	cmp	r3, r1
 8009684:	d208      	bcs.n	8009698 <ucdr_buffer_alignment+0x18>
 8009686:	6900      	ldr	r0, [r0, #16]
 8009688:	fbb0 f3f1 	udiv	r3, r0, r1
 800968c:	fb01 0013 	mls	r0, r1, r3, r0
 8009690:	1a08      	subs	r0, r1, r0
 8009692:	3901      	subs	r1, #1
 8009694:	4008      	ands	r0, r1
 8009696:	4770      	bx	lr
 8009698:	2000      	movs	r0, #0
 800969a:	4770      	bx	lr

0800969c <ucdr_align_to>:
 800969c:	b538      	push	{r3, r4, r5, lr}
 800969e:	4604      	mov	r4, r0
 80096a0:	460d      	mov	r5, r1
 80096a2:	f7ff ffed 	bl	8009680 <ucdr_buffer_alignment>
 80096a6:	68a3      	ldr	r3, [r4, #8]
 80096a8:	6921      	ldr	r1, [r4, #16]
 80096aa:	7565      	strb	r5, [r4, #21]
 80096ac:	181a      	adds	r2, r3, r0
 80096ae:	6863      	ldr	r3, [r4, #4]
 80096b0:	4293      	cmp	r3, r2
 80096b2:	4408      	add	r0, r1
 80096b4:	bf28      	it	cs
 80096b6:	4613      	movcs	r3, r2
 80096b8:	6120      	str	r0, [r4, #16]
 80096ba:	60a3      	str	r3, [r4, #8]
 80096bc:	bd38      	pop	{r3, r4, r5, pc}
 80096be:	bf00      	nop

080096c0 <ucdr_buffer_length>:
 80096c0:	6882      	ldr	r2, [r0, #8]
 80096c2:	6800      	ldr	r0, [r0, #0]
 80096c4:	1a10      	subs	r0, r2, r0
 80096c6:	4770      	bx	lr

080096c8 <ucdr_buffer_remaining>:
 80096c8:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 80096cc:	1a10      	subs	r0, r2, r0
 80096ce:	4770      	bx	lr

080096d0 <ucdr_check_final_buffer_behavior_array>:
 80096d0:	b538      	push	{r3, r4, r5, lr}
 80096d2:	7d83      	ldrb	r3, [r0, #22]
 80096d4:	b963      	cbnz	r3, 80096f0 <ucdr_check_final_buffer_behavior_array+0x20>
 80096d6:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 80096da:	429a      	cmp	r2, r3
 80096dc:	4604      	mov	r4, r0
 80096de:	460d      	mov	r5, r1
 80096e0:	d308      	bcc.n	80096f4 <ucdr_check_final_buffer_behavior_array+0x24>
 80096e2:	b139      	cbz	r1, 80096f4 <ucdr_check_final_buffer_behavior_array+0x24>
 80096e4:	6983      	ldr	r3, [r0, #24]
 80096e6:	b163      	cbz	r3, 8009702 <ucdr_check_final_buffer_behavior_array+0x32>
 80096e8:	69c1      	ldr	r1, [r0, #28]
 80096ea:	4798      	blx	r3
 80096ec:	75a0      	strb	r0, [r4, #22]
 80096ee:	b108      	cbz	r0, 80096f4 <ucdr_check_final_buffer_behavior_array+0x24>
 80096f0:	2000      	movs	r0, #0
 80096f2:	bd38      	pop	{r3, r4, r5, pc}
 80096f4:	4620      	mov	r0, r4
 80096f6:	f7ff ffe7 	bl	80096c8 <ucdr_buffer_remaining>
 80096fa:	42a8      	cmp	r0, r5
 80096fc:	bf28      	it	cs
 80096fe:	4628      	movcs	r0, r5
 8009700:	bd38      	pop	{r3, r4, r5, pc}
 8009702:	2301      	movs	r3, #1
 8009704:	7583      	strb	r3, [r0, #22]
 8009706:	e7f3      	b.n	80096f0 <ucdr_check_final_buffer_behavior_array+0x20>

08009708 <ucdr_advance_buffer>:
 8009708:	b538      	push	{r3, r4, r5, lr}
 800970a:	4604      	mov	r4, r0
 800970c:	460d      	mov	r5, r1
 800970e:	f7ff ff57 	bl	80095c0 <ucdr_check_buffer_available_for>
 8009712:	b178      	cbz	r0, 8009734 <ucdr_advance_buffer+0x2c>
 8009714:	6923      	ldr	r3, [r4, #16]
 8009716:	68a2      	ldr	r2, [r4, #8]
 8009718:	442b      	add	r3, r5
 800971a:	6123      	str	r3, [r4, #16]
 800971c:	2301      	movs	r3, #1
 800971e:	442a      	add	r2, r5
 8009720:	7563      	strb	r3, [r4, #21]
 8009722:	60a2      	str	r2, [r4, #8]
 8009724:	bd38      	pop	{r3, r4, r5, pc}
 8009726:	68a2      	ldr	r2, [r4, #8]
 8009728:	6923      	ldr	r3, [r4, #16]
 800972a:	4402      	add	r2, r0
 800972c:	4403      	add	r3, r0
 800972e:	1a2d      	subs	r5, r5, r0
 8009730:	60a2      	str	r2, [r4, #8]
 8009732:	6123      	str	r3, [r4, #16]
 8009734:	4629      	mov	r1, r5
 8009736:	2201      	movs	r2, #1
 8009738:	4620      	mov	r0, r4
 800973a:	f7ff ffc9 	bl	80096d0 <ucdr_check_final_buffer_behavior_array>
 800973e:	2800      	cmp	r0, #0
 8009740:	d1f1      	bne.n	8009726 <ucdr_advance_buffer+0x1e>
 8009742:	2301      	movs	r3, #1
 8009744:	7563      	strb	r3, [r4, #21]
 8009746:	bd38      	pop	{r3, r4, r5, pc}

08009748 <uxr_buffer_delete_entity>:
 8009748:	b510      	push	{r4, lr}
 800974a:	2300      	movs	r3, #0
 800974c:	b08e      	sub	sp, #56	@ 0x38
 800974e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8009752:	2303      	movs	r3, #3
 8009754:	9300      	str	r3, [sp, #0]
 8009756:	2204      	movs	r2, #4
 8009758:	ab06      	add	r3, sp, #24
 800975a:	4604      	mov	r4, r0
 800975c:	9103      	str	r1, [sp, #12]
 800975e:	f001 f86f 	bl	800a840 <uxr_prepare_stream_to_write_submessage>
 8009762:	b918      	cbnz	r0, 800976c <uxr_buffer_delete_entity+0x24>
 8009764:	4604      	mov	r4, r0
 8009766:	4620      	mov	r0, r4
 8009768:	b00e      	add	sp, #56	@ 0x38
 800976a:	bd10      	pop	{r4, pc}
 800976c:	9902      	ldr	r1, [sp, #8]
 800976e:	aa05      	add	r2, sp, #20
 8009770:	4620      	mov	r0, r4
 8009772:	f001 f99b 	bl	800aaac <uxr_init_base_object_request>
 8009776:	a905      	add	r1, sp, #20
 8009778:	4604      	mov	r4, r0
 800977a:	a806      	add	r0, sp, #24
 800977c:	f002 fb00 	bl	800bd80 <uxr_serialize_DELETE_Payload>
 8009780:	4620      	mov	r0, r4
 8009782:	b00e      	add	sp, #56	@ 0x38
 8009784:	bd10      	pop	{r4, pc}
 8009786:	bf00      	nop

08009788 <uxr_common_create_entity>:
 8009788:	b510      	push	{r4, lr}
 800978a:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800978e:	b08c      	sub	sp, #48	@ 0x30
 8009790:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8009794:	f1bc 0f01 	cmp.w	ip, #1
 8009798:	bf0c      	ite	eq
 800979a:	f003 0201 	andeq.w	r2, r3, #1
 800979e:	2200      	movne	r2, #0
 80097a0:	330e      	adds	r3, #14
 80097a2:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 80097a6:	9101      	str	r1, [sp, #4]
 80097a8:	441a      	add	r2, r3
 80097aa:	2301      	movs	r3, #1
 80097ac:	9300      	str	r3, [sp, #0]
 80097ae:	9903      	ldr	r1, [sp, #12]
 80097b0:	ab04      	add	r3, sp, #16
 80097b2:	b292      	uxth	r2, r2
 80097b4:	4604      	mov	r4, r0
 80097b6:	f001 f843 	bl	800a840 <uxr_prepare_stream_to_write_submessage>
 80097ba:	b918      	cbnz	r0, 80097c4 <uxr_common_create_entity+0x3c>
 80097bc:	4604      	mov	r4, r0
 80097be:	4620      	mov	r0, r4
 80097c0:	b00c      	add	sp, #48	@ 0x30
 80097c2:	bd10      	pop	{r4, pc}
 80097c4:	9902      	ldr	r1, [sp, #8]
 80097c6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80097c8:	4620      	mov	r0, r4
 80097ca:	f001 f96f 	bl	800aaac <uxr_init_base_object_request>
 80097ce:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80097d0:	4604      	mov	r4, r0
 80097d2:	a804      	add	r0, sp, #16
 80097d4:	f002 fa30 	bl	800bc38 <uxr_serialize_CREATE_Payload>
 80097d8:	4620      	mov	r0, r4
 80097da:	b00c      	add	sp, #48	@ 0x30
 80097dc:	bd10      	pop	{r4, pc}
 80097de:	bf00      	nop

080097e0 <uxr_buffer_create_participant_bin>:
 80097e0:	b570      	push	{r4, r5, r6, lr}
 80097e2:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 80097e6:	ac11      	add	r4, sp, #68	@ 0x44
 80097e8:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 80097ec:	2303      	movs	r3, #3
 80097ee:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80097f2:	7223      	strb	r3, [r4, #8]
 80097f4:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 80097f6:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 80097fa:	2201      	movs	r2, #1
 80097fc:	2100      	movs	r1, #0
 80097fe:	4605      	mov	r5, r0
 8009800:	7122      	strb	r2, [r4, #4]
 8009802:	f88d 1014 	strb.w	r1, [sp, #20]
 8009806:	b1cb      	cbz	r3, 800983c <uxr_buffer_create_participant_bin+0x5c>
 8009808:	f88d 201c 	strb.w	r2, [sp, #28]
 800980c:	9308      	str	r3, [sp, #32]
 800980e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009812:	a915      	add	r1, sp, #84	@ 0x54
 8009814:	a809      	add	r0, sp, #36	@ 0x24
 8009816:	f7ff ff27 	bl	8009668 <ucdr_init_buffer>
 800981a:	a905      	add	r1, sp, #20
 800981c:	a809      	add	r0, sp, #36	@ 0x24
 800981e:	f001 fed9 	bl	800b5d4 <uxr_serialize_OBJK_DomainParticipant_Binary>
 8009822:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009824:	9600      	str	r6, [sp, #0]
 8009826:	9401      	str	r4, [sp, #4]
 8009828:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800982c:	60e3      	str	r3, [r4, #12]
 800982e:	4628      	mov	r0, r5
 8009830:	b29b      	uxth	r3, r3
 8009832:	f7ff ffa9 	bl	8009788 <uxr_common_create_entity>
 8009836:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 800983a:	bd70      	pop	{r4, r5, r6, pc}
 800983c:	f88d 301c 	strb.w	r3, [sp, #28]
 8009840:	e7e5      	b.n	800980e <uxr_buffer_create_participant_bin+0x2e>
 8009842:	bf00      	nop

08009844 <uxr_buffer_create_topic_bin>:
 8009844:	b570      	push	{r4, r5, r6, lr}
 8009846:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 800984a:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800984e:	9105      	str	r1, [sp, #20]
 8009850:	4605      	mov	r5, r0
 8009852:	a997      	add	r1, sp, #604	@ 0x25c
 8009854:	4618      	mov	r0, r3
 8009856:	2302      	movs	r3, #2
 8009858:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 800985c:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 8009860:	f000 f8ee 	bl	8009a40 <uxr_object_id_to_raw>
 8009864:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 8009866:	9306      	str	r3, [sp, #24]
 8009868:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 800986a:	930a      	str	r3, [sp, #40]	@ 0x28
 800986c:	2303      	movs	r3, #3
 800986e:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 8009872:	2301      	movs	r3, #1
 8009874:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009878:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800987c:	a917      	add	r1, sp, #92	@ 0x5c
 800987e:	2300      	movs	r3, #0
 8009880:	a80b      	add	r0, sp, #44	@ 0x2c
 8009882:	f88d 301c 	strb.w	r3, [sp, #28]
 8009886:	f7ff feef 	bl	8009668 <ucdr_init_buffer>
 800988a:	a906      	add	r1, sp, #24
 800988c:	a80b      	add	r0, sp, #44	@ 0x2c
 800988e:	f001 fec3 	bl	800b618 <uxr_serialize_OBJK_Topic_Binary>
 8009892:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009894:	9316      	str	r3, [sp, #88]	@ 0x58
 8009896:	ac13      	add	r4, sp, #76	@ 0x4c
 8009898:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800989c:	9600      	str	r6, [sp, #0]
 800989e:	9401      	str	r4, [sp, #4]
 80098a0:	b29b      	uxth	r3, r3
 80098a2:	4628      	mov	r0, r5
 80098a4:	f7ff ff70 	bl	8009788 <uxr_common_create_entity>
 80098a8:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 80098ac:	bd70      	pop	{r4, r5, r6, pc}
 80098ae:	bf00      	nop

080098b0 <uxr_buffer_create_publisher_bin>:
 80098b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80098b2:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 80098b6:	4605      	mov	r5, r0
 80098b8:	9105      	str	r1, [sp, #20]
 80098ba:	4618      	mov	r0, r3
 80098bc:	2603      	movs	r6, #3
 80098be:	a992      	add	r1, sp, #584	@ 0x248
 80098c0:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80098c4:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 80098c8:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 80098cc:	f000 f8b8 	bl	8009a40 <uxr_object_id_to_raw>
 80098d0:	2300      	movs	r3, #0
 80098d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80098d6:	a912      	add	r1, sp, #72	@ 0x48
 80098d8:	a806      	add	r0, sp, #24
 80098da:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 80098de:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 80098e2:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 80098e6:	f7ff febf 	bl	8009668 <ucdr_init_buffer>
 80098ea:	a993      	add	r1, sp, #588	@ 0x24c
 80098ec:	a806      	add	r0, sp, #24
 80098ee:	f001 ff47 	bl	800b780 <uxr_serialize_OBJK_Publisher_Binary>
 80098f2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80098f4:	9311      	str	r3, [sp, #68]	@ 0x44
 80098f6:	ac0e      	add	r4, sp, #56	@ 0x38
 80098f8:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80098fc:	9700      	str	r7, [sp, #0]
 80098fe:	9401      	str	r4, [sp, #4]
 8009900:	b29b      	uxth	r3, r3
 8009902:	4628      	mov	r0, r5
 8009904:	f7ff ff40 	bl	8009788 <uxr_common_create_entity>
 8009908:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 800990c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800990e:	bf00      	nop

08009910 <uxr_buffer_create_datawriter_bin>:
 8009910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009914:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8009918:	ac1d      	add	r4, sp, #116	@ 0x74
 800991a:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800991e:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 8009922:	9105      	str	r1, [sp, #20]
 8009924:	4606      	mov	r6, r0
 8009926:	a9a1      	add	r1, sp, #644	@ 0x284
 8009928:	4618      	mov	r0, r3
 800992a:	2305      	movs	r3, #5
 800992c:	7123      	strb	r3, [r4, #4]
 800992e:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 8009932:	2703      	movs	r7, #3
 8009934:	f000 f884 	bl	8009a40 <uxr_object_id_to_raw>
 8009938:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 800993a:	7227      	strb	r7, [r4, #8]
 800993c:	a90e      	add	r1, sp, #56	@ 0x38
 800993e:	f000 f87f 	bl	8009a40 <uxr_object_id_to_raw>
 8009942:	2300      	movs	r3, #0
 8009944:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 8009948:	f89d 22a5 	ldrb.w	r2, [sp, #677]	@ 0x2a5
 800994c:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 8009950:	3d00      	subs	r5, #0
 8009952:	bf18      	it	ne
 8009954:	2501      	movne	r5, #1
 8009956:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 800995a:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 800995e:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 8009962:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8009966:	2301      	movs	r3, #1
 8009968:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 800996c:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 8009970:	bb8a      	cbnz	r2, 80099d6 <uxr_buffer_create_datawriter_bin+0xc6>
 8009972:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8009976:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 800997a:	f04f 0c13 	mov.w	ip, #19
 800997e:	250b      	movs	r5, #11
 8009980:	2221      	movs	r2, #33	@ 0x21
 8009982:	2111      	movs	r1, #17
 8009984:	2009      	movs	r0, #9
 8009986:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 800998a:	b923      	cbnz	r3, 8009996 <uxr_buffer_create_datawriter_bin+0x86>
 800998c:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 8009990:	4672      	mov	r2, lr
 8009992:	4661      	mov	r1, ip
 8009994:	4628      	mov	r0, r5
 8009996:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 800999a:	2b01      	cmp	r3, #1
 800999c:	d025      	beq.n	80099ea <uxr_buffer_create_datawriter_bin+0xda>
 800999e:	2b03      	cmp	r3, #3
 80099a0:	d029      	beq.n	80099f6 <uxr_buffer_create_datawriter_bin+0xe6>
 80099a2:	b32b      	cbz	r3, 80099f0 <uxr_buffer_create_datawriter_bin+0xe0>
 80099a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80099a8:	a921      	add	r1, sp, #132	@ 0x84
 80099aa:	a806      	add	r0, sp, #24
 80099ac:	f7ff fe5c 	bl	8009668 <ucdr_init_buffer>
 80099b0:	a90e      	add	r1, sp, #56	@ 0x38
 80099b2:	a806      	add	r0, sp, #24
 80099b4:	f001 ff5a 	bl	800b86c <uxr_serialize_OBJK_DataWriter_Binary>
 80099b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80099ba:	f8cd 8000 	str.w	r8, [sp]
 80099be:	9401      	str	r4, [sp, #4]
 80099c0:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80099c4:	60e3      	str	r3, [r4, #12]
 80099c6:	4630      	mov	r0, r6
 80099c8:	b29b      	uxth	r3, r3
 80099ca:	f7ff fedd 	bl	8009788 <uxr_common_create_entity>
 80099ce:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 80099d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099d6:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 80099da:	f04f 0c12 	mov.w	ip, #18
 80099de:	250a      	movs	r5, #10
 80099e0:	2220      	movs	r2, #32
 80099e2:	2110      	movs	r1, #16
 80099e4:	2008      	movs	r0, #8
 80099e6:	2702      	movs	r7, #2
 80099e8:	e7cd      	b.n	8009986 <uxr_buffer_create_datawriter_bin+0x76>
 80099ea:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 80099ee:	e7d9      	b.n	80099a4 <uxr_buffer_create_datawriter_bin+0x94>
 80099f0:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 80099f4:	e7d6      	b.n	80099a4 <uxr_buffer_create_datawriter_bin+0x94>
 80099f6:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 80099fa:	e7d3      	b.n	80099a4 <uxr_buffer_create_datawriter_bin+0x94>

080099fc <uxr_object_id>:
 80099fc:	b082      	sub	sp, #8
 80099fe:	2300      	movs	r3, #0
 8009a00:	f88d 1006 	strb.w	r1, [sp, #6]
 8009a04:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8009a08:	f360 030f 	bfi	r3, r0, #0, #16
 8009a0c:	f362 431f 	bfi	r3, r2, #16, #16
 8009a10:	4618      	mov	r0, r3
 8009a12:	b002      	add	sp, #8
 8009a14:	4770      	bx	lr
 8009a16:	bf00      	nop

08009a18 <uxr_object_id_from_raw>:
 8009a18:	7843      	ldrb	r3, [r0, #1]
 8009a1a:	7801      	ldrb	r1, [r0, #0]
 8009a1c:	b082      	sub	sp, #8
 8009a1e:	f003 020f 	and.w	r2, r3, #15
 8009a22:	f88d 2006 	strb.w	r2, [sp, #6]
 8009a26:	091b      	lsrs	r3, r3, #4
 8009a28:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8009a2c:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8009a30:	2000      	movs	r0, #0
 8009a32:	f363 000f 	bfi	r0, r3, #0, #16
 8009a36:	f362 401f 	bfi	r0, r2, #16, #16
 8009a3a:	b002      	add	sp, #8
 8009a3c:	4770      	bx	lr
 8009a3e:	bf00      	nop

08009a40 <uxr_object_id_to_raw>:
 8009a40:	4602      	mov	r2, r0
 8009a42:	f3c0 4303 	ubfx	r3, r0, #16, #4
 8009a46:	b082      	sub	sp, #8
 8009a48:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 8009a4c:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 8009a50:	f881 c000 	strb.w	ip, [r1]
 8009a54:	7048      	strb	r0, [r1, #1]
 8009a56:	b002      	add	sp, #8
 8009a58:	4770      	bx	lr
 8009a5a:	bf00      	nop

08009a5c <on_get_fragmentation_info>:
 8009a5c:	b500      	push	{lr}
 8009a5e:	b08b      	sub	sp, #44	@ 0x2c
 8009a60:	4601      	mov	r1, r0
 8009a62:	2204      	movs	r2, #4
 8009a64:	a802      	add	r0, sp, #8
 8009a66:	f7ff fdff 	bl	8009668 <ucdr_init_buffer>
 8009a6a:	f10d 0305 	add.w	r3, sp, #5
 8009a6e:	f10d 0206 	add.w	r2, sp, #6
 8009a72:	a901      	add	r1, sp, #4
 8009a74:	a802      	add	r0, sp, #8
 8009a76:	f001 f99b 	bl	800adb0 <uxr_read_submessage_header>
 8009a7a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8009a7e:	2b0d      	cmp	r3, #13
 8009a80:	d003      	beq.n	8009a8a <on_get_fragmentation_info+0x2e>
 8009a82:	2000      	movs	r0, #0
 8009a84:	b00b      	add	sp, #44	@ 0x2c
 8009a86:	f85d fb04 	ldr.w	pc, [sp], #4
 8009a8a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8009a8e:	f013 0f02 	tst.w	r3, #2
 8009a92:	bf14      	ite	ne
 8009a94:	2002      	movne	r0, #2
 8009a96:	2001      	moveq	r0, #1
 8009a98:	b00b      	add	sp, #44	@ 0x2c
 8009a9a:	f85d fb04 	ldr.w	pc, [sp], #4
 8009a9e:	bf00      	nop

08009aa0 <read_submessage_get_info>:
 8009aa0:	b570      	push	{r4, r5, r6, lr}
 8009aa2:	2500      	movs	r5, #0
 8009aa4:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 8009aa8:	4604      	mov	r4, r0
 8009aaa:	f44f 7224 	mov.w	r2, #656	@ 0x290
 8009aae:	460e      	mov	r6, r1
 8009ab0:	a810      	add	r0, sp, #64	@ 0x40
 8009ab2:	4629      	mov	r1, r5
 8009ab4:	e9cd 5503 	strd	r5, r5, [sp, #12]
 8009ab8:	f006 ff80 	bl	80109bc <memset>
 8009abc:	a903      	add	r1, sp, #12
 8009abe:	4630      	mov	r0, r6
 8009ac0:	f002 f94a 	bl	800bd58 <uxr_deserialize_GET_INFO_Payload>
 8009ac4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8009ac8:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8009acc:	4620      	mov	r0, r4
 8009ace:	f000 ffe5 	bl	800aa9c <uxr_session_header_offset>
 8009ad2:	462b      	mov	r3, r5
 8009ad4:	9000      	str	r0, [sp, #0]
 8009ad6:	220c      	movs	r2, #12
 8009ad8:	a905      	add	r1, sp, #20
 8009ada:	a808      	add	r0, sp, #32
 8009adc:	f7ff fdb2 	bl	8009644 <ucdr_init_buffer_origin_offset>
 8009ae0:	a910      	add	r1, sp, #64	@ 0x40
 8009ae2:	a808      	add	r0, sp, #32
 8009ae4:	f002 f9aa 	bl	800be3c <uxr_serialize_INFO_Payload>
 8009ae8:	9b08      	ldr	r3, [sp, #32]
 8009aea:	462a      	mov	r2, r5
 8009aec:	4629      	mov	r1, r5
 8009aee:	4620      	mov	r0, r4
 8009af0:	f000 ff7e 	bl	800a9f0 <uxr_stamp_session_header>
 8009af4:	a808      	add	r0, sp, #32
 8009af6:	f7ff fde3 	bl	80096c0 <ucdr_buffer_length>
 8009afa:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8009afc:	4602      	mov	r2, r0
 8009afe:	a905      	add	r1, sp, #20
 8009b00:	e9d3 0400 	ldrd	r0, r4, [r3]
 8009b04:	47a0      	blx	r4
 8009b06:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 8009b0a:	bd70      	pop	{r4, r5, r6, pc}

08009b0c <write_submessage_acknack.isra.0>:
 8009b0c:	b570      	push	{r4, r5, r6, lr}
 8009b0e:	b092      	sub	sp, #72	@ 0x48
 8009b10:	4605      	mov	r5, r0
 8009b12:	460e      	mov	r6, r1
 8009b14:	4614      	mov	r4, r2
 8009b16:	f000 ffc1 	bl	800aa9c <uxr_session_header_offset>
 8009b1a:	a905      	add	r1, sp, #20
 8009b1c:	9000      	str	r0, [sp, #0]
 8009b1e:	2300      	movs	r3, #0
 8009b20:	a80a      	add	r0, sp, #40	@ 0x28
 8009b22:	2211      	movs	r2, #17
 8009b24:	f7ff fd8e 	bl	8009644 <ucdr_init_buffer_origin_offset>
 8009b28:	2218      	movs	r2, #24
 8009b2a:	fb02 5404 	mla	r4, r2, r4, r5
 8009b2e:	2300      	movs	r3, #0
 8009b30:	2205      	movs	r2, #5
 8009b32:	3450      	adds	r4, #80	@ 0x50
 8009b34:	210a      	movs	r1, #10
 8009b36:	a80a      	add	r0, sp, #40	@ 0x28
 8009b38:	f001 f920 	bl	800ad7c <uxr_buffer_submessage_header>
 8009b3c:	a903      	add	r1, sp, #12
 8009b3e:	4620      	mov	r0, r4
 8009b40:	f004 fdbe 	bl	800e6c0 <uxr_compute_acknack>
 8009b44:	ba40      	rev16	r0, r0
 8009b46:	f8ad 000e 	strh.w	r0, [sp, #14]
 8009b4a:	a903      	add	r1, sp, #12
 8009b4c:	a80a      	add	r0, sp, #40	@ 0x28
 8009b4e:	f88d 6010 	strb.w	r6, [sp, #16]
 8009b52:	f002 f9e3 	bl	800bf1c <uxr_serialize_ACKNACK_Payload>
 8009b56:	2200      	movs	r2, #0
 8009b58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009b5a:	4611      	mov	r1, r2
 8009b5c:	4628      	mov	r0, r5
 8009b5e:	f000 ff47 	bl	800a9f0 <uxr_stamp_session_header>
 8009b62:	a80a      	add	r0, sp, #40	@ 0x28
 8009b64:	f7ff fdac 	bl	80096c0 <ucdr_buffer_length>
 8009b68:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8009b6a:	4602      	mov	r2, r0
 8009b6c:	a905      	add	r1, sp, #20
 8009b6e:	e9d3 0400 	ldrd	r0, r4, [r3]
 8009b72:	47a0      	blx	r4
 8009b74:	b012      	add	sp, #72	@ 0x48
 8009b76:	bd70      	pop	{r4, r5, r6, pc}

08009b78 <uxr_init_session>:
 8009b78:	b510      	push	{r4, lr}
 8009b7a:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 8009bb0 <uxr_init_session+0x38>
 8009b7e:	2300      	movs	r3, #0
 8009b80:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 8009b84:	4604      	mov	r4, r0
 8009b86:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 8009b8a:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 8009b8e:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 8009b92:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 8009b96:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 8009b9a:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 8009b9e:	2181      	movs	r1, #129	@ 0x81
 8009ba0:	f000 fe92 	bl	800a8c8 <uxr_init_session_info>
 8009ba4:	f104 0008 	add.w	r0, r4, #8
 8009ba8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009bac:	f001 b802 	b.w	800abb4 <uxr_init_stream_storage>
	...

08009bb8 <uxr_set_status_callback>:
 8009bb8:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 8009bbc:	4770      	bx	lr
 8009bbe:	bf00      	nop

08009bc0 <uxr_set_topic_callback>:
 8009bc0:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 8009bc4:	4770      	bx	lr
 8009bc6:	bf00      	nop

08009bc8 <uxr_set_request_callback>:
 8009bc8:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 8009bcc:	4770      	bx	lr
 8009bce:	bf00      	nop

08009bd0 <uxr_set_reply_callback>:
 8009bd0:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 8009bd4:	4770      	bx	lr
 8009bd6:	bf00      	nop

08009bd8 <uxr_create_output_best_effort_stream>:
 8009bd8:	b510      	push	{r4, lr}
 8009bda:	b084      	sub	sp, #16
 8009bdc:	e9cd 2100 	strd	r2, r1, [sp]
 8009be0:	4604      	mov	r4, r0
 8009be2:	f000 ff5b 	bl	800aa9c <uxr_session_header_offset>
 8009be6:	e9dd 2100 	ldrd	r2, r1, [sp]
 8009bea:	4603      	mov	r3, r0
 8009bec:	f104 0008 	add.w	r0, r4, #8
 8009bf0:	b004      	add	sp, #16
 8009bf2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009bf6:	f001 b827 	b.w	800ac48 <uxr_add_output_best_effort_buffer>
 8009bfa:	bf00      	nop

08009bfc <uxr_create_output_reliable_stream>:
 8009bfc:	b510      	push	{r4, lr}
 8009bfe:	b088      	sub	sp, #32
 8009c00:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8009c04:	4604      	mov	r4, r0
 8009c06:	9303      	str	r3, [sp, #12]
 8009c08:	f000 ff48 	bl	800aa9c <uxr_session_header_offset>
 8009c0c:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8009c10:	9000      	str	r0, [sp, #0]
 8009c12:	9905      	ldr	r1, [sp, #20]
 8009c14:	f104 0008 	add.w	r0, r4, #8
 8009c18:	f001 f82a 	bl	800ac70 <uxr_add_output_reliable_buffer>
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	b2c3      	uxtb	r3, r0
 8009c20:	f363 0207 	bfi	r2, r3, #0, #8
 8009c24:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8009c28:	f363 220f 	bfi	r2, r3, #8, #8
 8009c2c:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8009c30:	f363 4217 	bfi	r2, r3, #16, #8
 8009c34:	0e03      	lsrs	r3, r0, #24
 8009c36:	f363 621f 	bfi	r2, r3, #24, #8
 8009c3a:	4610      	mov	r0, r2
 8009c3c:	b008      	add	sp, #32
 8009c3e:	bd10      	pop	{r4, pc}

08009c40 <uxr_create_input_best_effort_stream>:
 8009c40:	b082      	sub	sp, #8
 8009c42:	3008      	adds	r0, #8
 8009c44:	b002      	add	sp, #8
 8009c46:	f001 b82d 	b.w	800aca4 <uxr_add_input_best_effort_buffer>
 8009c4a:	bf00      	nop

08009c4c <uxr_create_input_reliable_stream>:
 8009c4c:	b510      	push	{r4, lr}
 8009c4e:	b084      	sub	sp, #16
 8009c50:	4c0b      	ldr	r4, [pc, #44]	@ (8009c80 <uxr_create_input_reliable_stream+0x34>)
 8009c52:	9400      	str	r4, [sp, #0]
 8009c54:	3008      	adds	r0, #8
 8009c56:	f001 f83b 	bl	800acd0 <uxr_add_input_reliable_buffer>
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	b2c3      	uxtb	r3, r0
 8009c5e:	f363 0207 	bfi	r2, r3, #0, #8
 8009c62:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8009c66:	f363 220f 	bfi	r2, r3, #8, #8
 8009c6a:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8009c6e:	f363 4217 	bfi	r2, r3, #16, #8
 8009c72:	0e03      	lsrs	r3, r0, #24
 8009c74:	f363 621f 	bfi	r2, r3, #24, #8
 8009c78:	4610      	mov	r0, r2
 8009c7a:	b004      	add	sp, #16
 8009c7c:	bd10      	pop	{r4, pc}
 8009c7e:	bf00      	nop
 8009c80:	08009a5d 	.word	0x08009a5d

08009c84 <uxr_epoch_nanos>:
 8009c84:	b510      	push	{r4, lr}
 8009c86:	4604      	mov	r4, r0
 8009c88:	f001 f8d8 	bl	800ae3c <uxr_nanos>
 8009c8c:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 8009c90:	1ac0      	subs	r0, r0, r3
 8009c92:	eb61 0102 	sbc.w	r1, r1, r2
 8009c96:	bd10      	pop	{r4, pc}

08009c98 <uxr_flash_output_streams>:
 8009c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c9c:	7e03      	ldrb	r3, [r0, #24]
 8009c9e:	b084      	sub	sp, #16
 8009ca0:	4604      	mov	r4, r0
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d035      	beq.n	8009d12 <uxr_flash_output_streams+0x7a>
 8009ca6:	f04f 0900 	mov.w	r9, #0
 8009caa:	4648      	mov	r0, r9
 8009cac:	f10d 0802 	add.w	r8, sp, #2
 8009cb0:	af03      	add	r7, sp, #12
 8009cb2:	ae02      	add	r6, sp, #8
 8009cb4:	e006      	b.n	8009cc4 <uxr_flash_output_streams+0x2c>
 8009cb6:	7e23      	ldrb	r3, [r4, #24]
 8009cb8:	f109 0901 	add.w	r9, r9, #1
 8009cbc:	fa5f f089 	uxtb.w	r0, r9
 8009cc0:	4283      	cmp	r3, r0
 8009cc2:	d926      	bls.n	8009d12 <uxr_flash_output_streams+0x7a>
 8009cc4:	2201      	movs	r2, #1
 8009cc6:	4611      	mov	r1, r2
 8009cc8:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 8009ccc:	f000 ff1e 	bl	800ab0c <uxr_stream_id>
 8009cd0:	3508      	adds	r5, #8
 8009cd2:	4684      	mov	ip, r0
 8009cd4:	4643      	mov	r3, r8
 8009cd6:	463a      	mov	r2, r7
 8009cd8:	4631      	mov	r1, r6
 8009cda:	4628      	mov	r0, r5
 8009cdc:	f8cd c004 	str.w	ip, [sp, #4]
 8009ce0:	f004 fd74 	bl	800e7cc <uxr_prepare_best_effort_buffer_to_send>
 8009ce4:	2800      	cmp	r0, #0
 8009ce6:	d0e6      	beq.n	8009cb6 <uxr_flash_output_streams+0x1e>
 8009ce8:	9b02      	ldr	r3, [sp, #8]
 8009cea:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8009cee:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8009cf2:	4620      	mov	r0, r4
 8009cf4:	f000 fe7c 	bl	800a9f0 <uxr_stamp_session_header>
 8009cf8:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8009cfa:	9a03      	ldr	r2, [sp, #12]
 8009cfc:	685d      	ldr	r5, [r3, #4]
 8009cfe:	6818      	ldr	r0, [r3, #0]
 8009d00:	9902      	ldr	r1, [sp, #8]
 8009d02:	47a8      	blx	r5
 8009d04:	f109 0901 	add.w	r9, r9, #1
 8009d08:	7e23      	ldrb	r3, [r4, #24]
 8009d0a:	fa5f f089 	uxtb.w	r0, r9
 8009d0e:	4283      	cmp	r3, r0
 8009d10:	d8d8      	bhi.n	8009cc4 <uxr_flash_output_streams+0x2c>
 8009d12:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8009d16:	b38b      	cbz	r3, 8009d7c <uxr_flash_output_streams+0xe4>
 8009d18:	f04f 0900 	mov.w	r9, #0
 8009d1c:	f10d 0802 	add.w	r8, sp, #2
 8009d20:	af03      	add	r7, sp, #12
 8009d22:	ae02      	add	r6, sp, #8
 8009d24:	4648      	mov	r0, r9
 8009d26:	2201      	movs	r2, #1
 8009d28:	2102      	movs	r1, #2
 8009d2a:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 8009d2e:	f000 feed 	bl	800ab0c <uxr_stream_id>
 8009d32:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8009d36:	3520      	adds	r5, #32
 8009d38:	9001      	str	r0, [sp, #4]
 8009d3a:	e00d      	b.n	8009d58 <uxr_flash_output_streams+0xc0>
 8009d3c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8009d40:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8009d44:	9b02      	ldr	r3, [sp, #8]
 8009d46:	f000 fe53 	bl	800a9f0 <uxr_stamp_session_header>
 8009d4a:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8009d4c:	9a03      	ldr	r2, [sp, #12]
 8009d4e:	f8d3 a004 	ldr.w	sl, [r3, #4]
 8009d52:	9902      	ldr	r1, [sp, #8]
 8009d54:	6818      	ldr	r0, [r3, #0]
 8009d56:	47d0      	blx	sl
 8009d58:	4643      	mov	r3, r8
 8009d5a:	463a      	mov	r2, r7
 8009d5c:	4631      	mov	r1, r6
 8009d5e:	4628      	mov	r0, r5
 8009d60:	f004 ff52 	bl	800ec08 <uxr_prepare_next_reliable_buffer_to_send>
 8009d64:	4603      	mov	r3, r0
 8009d66:	4620      	mov	r0, r4
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d1e7      	bne.n	8009d3c <uxr_flash_output_streams+0xa4>
 8009d6c:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8009d70:	f109 0901 	add.w	r9, r9, #1
 8009d74:	fa5f f089 	uxtb.w	r0, r9
 8009d78:	4283      	cmp	r3, r0
 8009d7a:	d8d4      	bhi.n	8009d26 <uxr_flash_output_streams+0x8e>
 8009d7c:	b004      	add	sp, #16
 8009d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d82:	bf00      	nop

08009d84 <read_submessage_info>:
 8009d84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d88:	460d      	mov	r5, r1
 8009d8a:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 8009d8e:	4669      	mov	r1, sp
 8009d90:	4607      	mov	r7, r0
 8009d92:	4628      	mov	r0, r5
 8009d94:	f001 feee 	bl	800bb74 <uxr_deserialize_BaseObjectReply>
 8009d98:	a902      	add	r1, sp, #8
 8009d9a:	4604      	mov	r4, r0
 8009d9c:	4628      	mov	r0, r5
 8009d9e:	f89d 8005 	ldrb.w	r8, [sp, #5]
 8009da2:	f7fe fc9d 	bl	80086e0 <ucdr_deserialize_bool>
 8009da6:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8009daa:	4004      	ands	r4, r0
 8009dac:	b2e4      	uxtb	r4, r4
 8009dae:	b95b      	cbnz	r3, 8009dc8 <read_submessage_info+0x44>
 8009db0:	a987      	add	r1, sp, #540	@ 0x21c
 8009db2:	4628      	mov	r0, r5
 8009db4:	f7fe fc94 	bl	80086e0 <ucdr_deserialize_bool>
 8009db8:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 8009dbc:	4606      	mov	r6, r0
 8009dbe:	b94b      	cbnz	r3, 8009dd4 <read_submessage_info+0x50>
 8009dc0:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 8009dc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009dc8:	a903      	add	r1, sp, #12
 8009dca:	4628      	mov	r0, r5
 8009dcc:	f001 fd7a 	bl	800b8c4 <uxr_deserialize_ObjectVariant>
 8009dd0:	4004      	ands	r4, r0
 8009dd2:	e7ed      	b.n	8009db0 <read_submessage_info+0x2c>
 8009dd4:	a988      	add	r1, sp, #544	@ 0x220
 8009dd6:	4628      	mov	r0, r5
 8009dd8:	f7fe fcb0 	bl	800873c <ucdr_deserialize_uint8_t>
 8009ddc:	4234      	tst	r4, r6
 8009dde:	d0ef      	beq.n	8009dc0 <read_submessage_info+0x3c>
 8009de0:	2800      	cmp	r0, #0
 8009de2:	d0ed      	beq.n	8009dc0 <read_submessage_info+0x3c>
 8009de4:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 8009de8:	2b0d      	cmp	r3, #13
 8009dea:	d1e9      	bne.n	8009dc0 <read_submessage_info+0x3c>
 8009dec:	a98a      	add	r1, sp, #552	@ 0x228
 8009dee:	4628      	mov	r0, r5
 8009df0:	f7ff fa4a 	bl	8009288 <ucdr_deserialize_int16_t>
 8009df4:	b140      	cbz	r0, 8009e08 <read_submessage_info+0x84>
 8009df6:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	dd07      	ble.n	8009e0e <read_submessage_info+0x8a>
 8009dfe:	f1b8 0f00 	cmp.w	r8, #0
 8009e02:	bf14      	ite	ne
 8009e04:	2001      	movne	r0, #1
 8009e06:	2002      	moveq	r0, #2
 8009e08:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 8009e0c:	e7d8      	b.n	8009dc0 <read_submessage_info+0x3c>
 8009e0e:	2000      	movs	r0, #0
 8009e10:	e7fa      	b.n	8009e08 <read_submessage_info+0x84>
 8009e12:	bf00      	nop

08009e14 <read_submessage_list>:
 8009e14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e18:	b097      	sub	sp, #92	@ 0x5c
 8009e1a:	4ec1      	ldr	r6, [pc, #772]	@ (800a120 <read_submessage_list+0x30c>)
 8009e1c:	9209      	str	r2, [sp, #36]	@ 0x24
 8009e1e:	4604      	mov	r4, r0
 8009e20:	460d      	mov	r5, r1
 8009e22:	f04f 0801 	mov.w	r8, #1
 8009e26:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 8009e2a:	aa0c      	add	r2, sp, #48	@ 0x30
 8009e2c:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 8009e30:	4628      	mov	r0, r5
 8009e32:	f000 ffbd 	bl	800adb0 <uxr_read_submessage_header>
 8009e36:	2800      	cmp	r0, #0
 8009e38:	f000 813e 	beq.w	800a0b8 <read_submessage_list+0x2a4>
 8009e3c:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 8009e40:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 8009e44:	3b02      	subs	r3, #2
 8009e46:	2b0d      	cmp	r3, #13
 8009e48:	d8ed      	bhi.n	8009e26 <read_submessage_list+0x12>
 8009e4a:	a101      	add	r1, pc, #4	@ (adr r1, 8009e50 <read_submessage_list+0x3c>)
 8009e4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009e50:	0800a0af 	.word	0x0800a0af
 8009e54:	08009e27 	.word	0x08009e27
 8009e58:	0800a09f 	.word	0x0800a09f
 8009e5c:	0800a03d 	.word	0x0800a03d
 8009e60:	0800a033 	.word	0x0800a033
 8009e64:	08009e27 	.word	0x08009e27
 8009e68:	08009e27 	.word	0x08009e27
 8009e6c:	08009f93 	.word	0x08009f93
 8009e70:	08009f23 	.word	0x08009f23
 8009e74:	08009ee3 	.word	0x08009ee3
 8009e78:	08009e27 	.word	0x08009e27
 8009e7c:	08009e27 	.word	0x08009e27
 8009e80:	08009e27 	.word	0x08009e27
 8009e84:	08009e89 	.word	0x08009e89
 8009e88:	a910      	add	r1, sp, #64	@ 0x40
 8009e8a:	4628      	mov	r0, r5
 8009e8c:	f002 f896 	bl	800bfbc <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 8009e90:	f8d4 9090 	ldr.w	r9, [r4, #144]	@ 0x90
 8009e94:	f1b9 0f00 	cmp.w	r9, #0
 8009e98:	f000 8116 	beq.w	800a0c8 <read_submessage_list+0x2b4>
 8009e9c:	f000 ffce 	bl	800ae3c <uxr_nanos>
 8009ea0:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 8009ea2:	4602      	mov	r2, r0
 8009ea4:	460b      	mov	r3, r1
 8009ea6:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8009ea8:	2100      	movs	r1, #0
 8009eaa:	468c      	mov	ip, r1
 8009eac:	fbc0 7c06 	smlal	r7, ip, r0, r6
 8009eb0:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 8009eb4:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8009eb6:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 8009eb8:	468c      	mov	ip, r1
 8009eba:	fbc0 7c06 	smlal	r7, ip, r0, r6
 8009ebe:	46e2      	mov	sl, ip
 8009ec0:	46bc      	mov	ip, r7
 8009ec2:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 8009ec6:	fbc0 7106 	smlal	r7, r1, r0, r6
 8009eca:	e9cd ca02 	strd	ip, sl, [sp, #8]
 8009ece:	e9cd 7100 	strd	r7, r1, [sp]
 8009ed2:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 8009ed6:	9106      	str	r1, [sp, #24]
 8009ed8:	4620      	mov	r0, r4
 8009eda:	47c8      	blx	r9
 8009edc:	f884 80a0 	strb.w	r8, [r4, #160]	@ 0xa0
 8009ee0:	e7a1      	b.n	8009e26 <read_submessage_list+0x12>
 8009ee2:	a910      	add	r1, sp, #64	@ 0x40
 8009ee4:	4628      	mov	r0, r5
 8009ee6:	f002 f857 	bl	800bf98 <uxr_deserialize_HEARTBEAT_Payload>
 8009eea:	2100      	movs	r1, #0
 8009eec:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8009ef0:	f000 fe36 	bl	800ab60 <uxr_stream_id_from_raw>
 8009ef4:	f3c0 2707 	ubfx	r7, r0, #8, #8
 8009ef8:	900f      	str	r0, [sp, #60]	@ 0x3c
 8009efa:	4639      	mov	r1, r7
 8009efc:	f104 0008 	add.w	r0, r4, #8
 8009f00:	f000 ff1c 	bl	800ad3c <uxr_get_input_reliable_stream>
 8009f04:	2800      	cmp	r0, #0
 8009f06:	d08e      	beq.n	8009e26 <read_submessage_list+0x12>
 8009f08:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 8009f0c:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 8009f10:	f004 fbca 	bl	800e6a8 <uxr_process_heartbeat>
 8009f14:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 8009f18:	463a      	mov	r2, r7
 8009f1a:	4620      	mov	r0, r4
 8009f1c:	f7ff fdf6 	bl	8009b0c <write_submessage_acknack.isra.0>
 8009f20:	e781      	b.n	8009e26 <read_submessage_list+0x12>
 8009f22:	a910      	add	r1, sp, #64	@ 0x40
 8009f24:	4628      	mov	r0, r5
 8009f26:	f002 f80f 	bl	800bf48 <uxr_deserialize_ACKNACK_Payload>
 8009f2a:	2100      	movs	r1, #0
 8009f2c:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8009f30:	f000 fe16 	bl	800ab60 <uxr_stream_id_from_raw>
 8009f34:	900d      	str	r0, [sp, #52]	@ 0x34
 8009f36:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8009f3a:	f104 0008 	add.w	r0, r4, #8
 8009f3e:	f000 fee9 	bl	800ad14 <uxr_get_output_reliable_stream>
 8009f42:	4607      	mov	r7, r0
 8009f44:	2800      	cmp	r0, #0
 8009f46:	f43f af6e 	beq.w	8009e26 <read_submessage_list+0x12>
 8009f4a:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 8009f4e:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 8009f52:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 8009f56:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8009f5a:	b289      	uxth	r1, r1
 8009f5c:	f004 fefe 	bl	800ed5c <uxr_process_acknack>
 8009f60:	4638      	mov	r0, r7
 8009f62:	f004 febb 	bl	800ecdc <uxr_begin_output_nack_buffer_it>
 8009f66:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 8009f6a:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 8009f6e:	e006      	b.n	8009f7e <read_submessage_list+0x16a>
 8009f70:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8009f72:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009f74:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8009f78:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009f7a:	6818      	ldr	r0, [r3, #0]
 8009f7c:	47c8      	blx	r9
 8009f7e:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 8009f82:	aa0f      	add	r2, sp, #60	@ 0x3c
 8009f84:	4651      	mov	r1, sl
 8009f86:	4638      	mov	r0, r7
 8009f88:	f004 feaa 	bl	800ece0 <uxr_next_reliable_nack_buffer_to_send>
 8009f8c:	2800      	cmp	r0, #0
 8009f8e:	d1ef      	bne.n	8009f70 <read_submessage_list+0x15c>
 8009f90:	e749      	b.n	8009e26 <read_submessage_list+0x12>
 8009f92:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 8009f96:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 8009f9a:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 8009f9e:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 8009fa2:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 8009fa6:	4651      	mov	r1, sl
 8009fa8:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8009fac:	f8bd 7030 	ldrh.w	r7, [sp, #48]	@ 0x30
 8009fb0:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 8009fb4:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 8009fb8:	4628      	mov	r0, r5
 8009fba:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 8009fbe:	f001 fd23 	bl	800ba08 <uxr_deserialize_BaseObjectRequest>
 8009fc2:	4650      	mov	r0, sl
 8009fc4:	a90f      	add	r1, sp, #60	@ 0x3c
 8009fc6:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 8009fca:	f000 fd8d 	bl	800aae8 <uxr_parse_base_object_request>
 8009fce:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 8009fd2:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009fd4:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 8009fd8:	9110      	str	r1, [sp, #64]	@ 0x40
 8009fda:	3f04      	subs	r7, #4
 8009fdc:	f009 090e 	and.w	r9, r9, #14
 8009fe0:	b2bf      	uxth	r7, r7
 8009fe2:	f1bb 0f00 	cmp.w	fp, #0
 8009fe6:	d006      	beq.n	8009ff6 <read_submessage_list+0x1e2>
 8009fe8:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8009fec:	9300      	str	r3, [sp, #0]
 8009fee:	4652      	mov	r2, sl
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	4620      	mov	r0, r4
 8009ff4:	47d8      	blx	fp
 8009ff6:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8009ff8:	b16a      	cbz	r2, 800a016 <read_submessage_list+0x202>
 8009ffa:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8009ffc:	2100      	movs	r1, #0
 8009ffe:	3802      	subs	r0, #2
 800a000:	e002      	b.n	800a008 <read_submessage_list+0x1f4>
 800a002:	3101      	adds	r1, #1
 800a004:	4291      	cmp	r1, r2
 800a006:	d006      	beq.n	800a016 <read_submessage_list+0x202>
 800a008:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800a00c:	4553      	cmp	r3, sl
 800a00e:	d1f8      	bne.n	800a002 <read_submessage_list+0x1ee>
 800a010:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800a012:	2200      	movs	r2, #0
 800a014:	545a      	strb	r2, [r3, r1]
 800a016:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 800a01a:	9102      	str	r1, [sp, #8]
 800a01c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a01e:	9101      	str	r1, [sp, #4]
 800a020:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800a022:	9100      	str	r1, [sp, #0]
 800a024:	464b      	mov	r3, r9
 800a026:	463a      	mov	r2, r7
 800a028:	4629      	mov	r1, r5
 800a02a:	4620      	mov	r0, r4
 800a02c:	f004 ff1a 	bl	800ee64 <read_submessage_format>
 800a030:	e6f9      	b.n	8009e26 <read_submessage_list+0x12>
 800a032:	4629      	mov	r1, r5
 800a034:	4620      	mov	r0, r4
 800a036:	f7ff fea5 	bl	8009d84 <read_submessage_info>
 800a03a:	e6f4      	b.n	8009e26 <read_submessage_list+0x12>
 800a03c:	2a00      	cmp	r2, #0
 800a03e:	d03e      	beq.n	800a0be <read_submessage_list+0x2aa>
 800a040:	a910      	add	r1, sp, #64	@ 0x40
 800a042:	4628      	mov	r0, r5
 800a044:	f001 fedc 	bl	800be00 <uxr_deserialize_STATUS_Payload>
 800a048:	a90e      	add	r1, sp, #56	@ 0x38
 800a04a:	aa0d      	add	r2, sp, #52	@ 0x34
 800a04c:	a810      	add	r0, sp, #64	@ 0x40
 800a04e:	f000 fd4b 	bl	800aae8 <uxr_parse_base_object_request>
 800a052:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 800a056:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a058:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 800a05c:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 800a060:	910f      	str	r1, [sp, #60]	@ 0x3c
 800a062:	f1ba 0f00 	cmp.w	sl, #0
 800a066:	d006      	beq.n	800a076 <read_submessage_list+0x262>
 800a068:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800a06c:	9300      	str	r3, [sp, #0]
 800a06e:	463a      	mov	r2, r7
 800a070:	464b      	mov	r3, r9
 800a072:	4620      	mov	r0, r4
 800a074:	47d0      	blx	sl
 800a076:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800a078:	2a00      	cmp	r2, #0
 800a07a:	f43f aed4 	beq.w	8009e26 <read_submessage_list+0x12>
 800a07e:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800a080:	2100      	movs	r1, #0
 800a082:	3802      	subs	r0, #2
 800a084:	e003      	b.n	800a08e <read_submessage_list+0x27a>
 800a086:	3101      	adds	r1, #1
 800a088:	4291      	cmp	r1, r2
 800a08a:	f43f aecc 	beq.w	8009e26 <read_submessage_list+0x12>
 800a08e:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800a092:	42bb      	cmp	r3, r7
 800a094:	d1f7      	bne.n	800a086 <read_submessage_list+0x272>
 800a096:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800a098:	f803 9001 	strb.w	r9, [r3, r1]
 800a09c:	e6c3      	b.n	8009e26 <read_submessage_list+0x12>
 800a09e:	2a00      	cmp	r2, #0
 800a0a0:	f47f aec1 	bne.w	8009e26 <read_submessage_list+0x12>
 800a0a4:	4629      	mov	r1, r5
 800a0a6:	4620      	mov	r0, r4
 800a0a8:	f000 fc64 	bl	800a974 <uxr_read_create_session_status>
 800a0ac:	e6bb      	b.n	8009e26 <read_submessage_list+0x12>
 800a0ae:	4629      	mov	r1, r5
 800a0b0:	4620      	mov	r0, r4
 800a0b2:	f7ff fcf5 	bl	8009aa0 <read_submessage_get_info>
 800a0b6:	e6b6      	b.n	8009e26 <read_submessage_list+0x12>
 800a0b8:	b017      	add	sp, #92	@ 0x5c
 800a0ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0be:	4629      	mov	r1, r5
 800a0c0:	4620      	mov	r0, r4
 800a0c2:	f000 fc63 	bl	800a98c <uxr_read_delete_session_status>
 800a0c6:	e6ae      	b.n	8009e26 <read_submessage_list+0x12>
 800a0c8:	f000 feb8 	bl	800ae3c <uxr_nanos>
 800a0cc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a0ce:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800a0d0:	464f      	mov	r7, r9
 800a0d2:	fbc3 2706 	smlal	r2, r7, r3, r6
 800a0d6:	1812      	adds	r2, r2, r0
 800a0d8:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a0da:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800a0dc:	eb47 0101 	adc.w	r1, r7, r1
 800a0e0:	464f      	mov	r7, r9
 800a0e2:	fbc3 0706 	smlal	r0, r7, r3, r6
 800a0e6:	463b      	mov	r3, r7
 800a0e8:	4684      	mov	ip, r0
 800a0ea:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 800a0ee:	fbc7 0906 	smlal	r0, r9, r7, r6
 800a0f2:	eb1c 0c00 	adds.w	ip, ip, r0
 800a0f6:	464f      	mov	r7, r9
 800a0f8:	eb43 0307 	adc.w	r3, r3, r7
 800a0fc:	ebb2 0c0c 	subs.w	ip, r2, ip
 800a100:	eb61 0303 	sbc.w	r3, r1, r3
 800a104:	0fda      	lsrs	r2, r3, #31
 800a106:	eb12 020c 	adds.w	r2, r2, ip
 800a10a:	f143 0300 	adc.w	r3, r3, #0
 800a10e:	0852      	lsrs	r2, r2, #1
 800a110:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 800a114:	105b      	asrs	r3, r3, #1
 800a116:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 800a11a:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 800a11e:	e6dd      	b.n	8009edc <read_submessage_list+0xc8>
 800a120:	3b9aca00 	.word	0x3b9aca00

0800a124 <listen_message_reliably>:
 800a124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a128:	1e0b      	subs	r3, r1, #0
 800a12a:	b09d      	sub	sp, #116	@ 0x74
 800a12c:	bfb8      	it	lt
 800a12e:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 800a132:	4680      	mov	r8, r0
 800a134:	9305      	str	r3, [sp, #20]
 800a136:	f000 fe67 	bl	800ae08 <uxr_millis>
 800a13a:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 800a13e:	4681      	mov	r9, r0
 800a140:	2a00      	cmp	r2, #0
 800a142:	f000 80a1 	beq.w	800a288 <listen_message_reliably+0x164>
 800a146:	2600      	movs	r6, #0
 800a148:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800a14c:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800a150:	9303      	str	r3, [sp, #12]
 800a152:	4630      	mov	r0, r6
 800a154:	460f      	mov	r7, r1
 800a156:	e00f      	b.n	800a178 <listen_message_reliably+0x54>
 800a158:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800a15c:	9903      	ldr	r1, [sp, #12]
 800a15e:	455a      	cmp	r2, fp
 800a160:	f106 0601 	add.w	r6, r6, #1
 800a164:	eb73 0101 	sbcs.w	r1, r3, r1
 800a168:	b2f0      	uxtb	r0, r6
 800a16a:	da01      	bge.n	800a170 <listen_message_reliably+0x4c>
 800a16c:	4693      	mov	fp, r2
 800a16e:	9303      	str	r3, [sp, #12]
 800a170:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 800a174:	4283      	cmp	r3, r0
 800a176:	d960      	bls.n	800a23a <listen_message_reliably+0x116>
 800a178:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 800a17c:	2102      	movs	r1, #2
 800a17e:	2201      	movs	r2, #1
 800a180:	f000 fcc4 	bl	800ab0c <uxr_stream_id>
 800a184:	00e4      	lsls	r4, r4, #3
 800a186:	f104 0520 	add.w	r5, r4, #32
 800a18a:	4445      	add	r5, r8
 800a18c:	4601      	mov	r1, r0
 800a18e:	463b      	mov	r3, r7
 800a190:	464a      	mov	r2, r9
 800a192:	4628      	mov	r0, r5
 800a194:	9109      	str	r1, [sp, #36]	@ 0x24
 800a196:	f004 fd77 	bl	800ec88 <uxr_update_output_stream_heartbeat_timestamp>
 800a19a:	eb08 0304 	add.w	r3, r8, r4
 800a19e:	2800      	cmp	r0, #0
 800a1a0:	d0da      	beq.n	800a158 <listen_message_reliably+0x34>
 800a1a2:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800a1a6:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 800a1aa:	9304      	str	r3, [sp, #16]
 800a1ac:	4640      	mov	r0, r8
 800a1ae:	f000 fc75 	bl	800aa9c <uxr_session_header_offset>
 800a1b2:	3501      	adds	r5, #1
 800a1b4:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 800a1b8:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800a1bc:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	2211      	movs	r2, #17
 800a1c4:	9000      	str	r0, [sp, #0]
 800a1c6:	a90c      	add	r1, sp, #48	@ 0x30
 800a1c8:	4650      	mov	r0, sl
 800a1ca:	f7ff fa3b 	bl	8009644 <ucdr_init_buffer_origin_offset>
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	2205      	movs	r2, #5
 800a1d2:	210b      	movs	r1, #11
 800a1d4:	4650      	mov	r0, sl
 800a1d6:	f000 fdd1 	bl	800ad7c <uxr_buffer_submessage_header>
 800a1da:	8968      	ldrh	r0, [r5, #10]
 800a1dc:	2101      	movs	r1, #1
 800a1de:	f004 ff0b 	bl	800eff8 <uxr_seq_num_add>
 800a1e2:	892b      	ldrh	r3, [r5, #8]
 800a1e4:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 800a1e8:	4602      	mov	r2, r0
 800a1ea:	9b04      	ldr	r3, [sp, #16]
 800a1ec:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 800a1f0:	a90a      	add	r1, sp, #40	@ 0x28
 800a1f2:	4650      	mov	r0, sl
 800a1f4:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 800a1f8:	f001 feba 	bl	800bf70 <uxr_serialize_HEARTBEAT_Payload>
 800a1fc:	2200      	movs	r2, #0
 800a1fe:	4611      	mov	r1, r2
 800a200:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a202:	4640      	mov	r0, r8
 800a204:	f000 fbf4 	bl	800a9f0 <uxr_stamp_session_header>
 800a208:	4650      	mov	r0, sl
 800a20a:	f7ff fa59 	bl	80096c0 <ucdr_buffer_length>
 800a20e:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 800a212:	4602      	mov	r2, r0
 800a214:	a90c      	add	r1, sp, #48	@ 0x30
 800a216:	e9d3 0500 	ldrd	r0, r5, [r3]
 800a21a:	4444      	add	r4, r8
 800a21c:	47a8      	blx	r5
 800a21e:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 800a222:	9903      	ldr	r1, [sp, #12]
 800a224:	455a      	cmp	r2, fp
 800a226:	f106 0601 	add.w	r6, r6, #1
 800a22a:	eb73 0101 	sbcs.w	r1, r3, r1
 800a22e:	b2f0      	uxtb	r0, r6
 800a230:	db9c      	blt.n	800a16c <listen_message_reliably+0x48>
 800a232:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 800a236:	4283      	cmp	r3, r0
 800a238:	d89e      	bhi.n	800a178 <listen_message_reliably+0x54>
 800a23a:	9a03      	ldr	r2, [sp, #12]
 800a23c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800a240:	429a      	cmp	r2, r3
 800a242:	bf08      	it	eq
 800a244:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 800a248:	d01e      	beq.n	800a288 <listen_message_reliably+0x164>
 800a24a:	ebab 0309 	sub.w	r3, fp, r9
 800a24e:	9905      	ldr	r1, [sp, #20]
 800a250:	f8d8 2070 	ldr.w	r2, [r8, #112]	@ 0x70
 800a254:	2b00      	cmp	r3, #0
 800a256:	bf08      	it	eq
 800a258:	2301      	moveq	r3, #1
 800a25a:	4299      	cmp	r1, r3
 800a25c:	bfa8      	it	ge
 800a25e:	4619      	movge	r1, r3
 800a260:	6894      	ldr	r4, [r2, #8]
 800a262:	6810      	ldr	r0, [r2, #0]
 800a264:	4689      	mov	r9, r1
 800a266:	460b      	mov	r3, r1
 800a268:	aa08      	add	r2, sp, #32
 800a26a:	a907      	add	r1, sp, #28
 800a26c:	47a0      	blx	r4
 800a26e:	b968      	cbnz	r0, 800a28c <listen_message_reliably+0x168>
 800a270:	9b05      	ldr	r3, [sp, #20]
 800a272:	eba3 0309 	sub.w	r3, r3, r9
 800a276:	2b00      	cmp	r3, #0
 800a278:	9305      	str	r3, [sp, #20]
 800a27a:	f73f af5c 	bgt.w	800a136 <listen_message_reliably+0x12>
 800a27e:	4604      	mov	r4, r0
 800a280:	4620      	mov	r0, r4
 800a282:	b01d      	add	sp, #116	@ 0x74
 800a284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a288:	9b05      	ldr	r3, [sp, #20]
 800a28a:	e7e0      	b.n	800a24e <listen_message_reliably+0x12a>
 800a28c:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800a290:	4604      	mov	r4, r0
 800a292:	a80c      	add	r0, sp, #48	@ 0x30
 800a294:	f7ff f9e8 	bl	8009668 <ucdr_init_buffer>
 800a298:	2500      	movs	r5, #0
 800a29a:	f10d 031a 	add.w	r3, sp, #26
 800a29e:	aa06      	add	r2, sp, #24
 800a2a0:	a90c      	add	r1, sp, #48	@ 0x30
 800a2a2:	4640      	mov	r0, r8
 800a2a4:	f88d 5018 	strb.w	r5, [sp, #24]
 800a2a8:	f000 fbb6 	bl	800aa18 <uxr_read_session_header>
 800a2ac:	b918      	cbnz	r0, 800a2b6 <listen_message_reliably+0x192>
 800a2ae:	4620      	mov	r0, r4
 800a2b0:	b01d      	add	sp, #116	@ 0x74
 800a2b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2b6:	4629      	mov	r1, r5
 800a2b8:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800a2bc:	f000 fc50 	bl	800ab60 <uxr_stream_id_from_raw>
 800a2c0:	f3c0 4507 	ubfx	r5, r0, #16, #8
 800a2c4:	2d01      	cmp	r5, #1
 800a2c6:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 800a2ca:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 800a2ce:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800a2d2:	d04b      	beq.n	800a36c <listen_message_reliably+0x248>
 800a2d4:	2d02      	cmp	r5, #2
 800a2d6:	d00f      	beq.n	800a2f8 <listen_message_reliably+0x1d4>
 800a2d8:	2d00      	cmp	r5, #0
 800a2da:	d1e8      	bne.n	800a2ae <listen_message_reliably+0x18a>
 800a2dc:	4629      	mov	r1, r5
 800a2de:	4628      	mov	r0, r5
 800a2e0:	f000 fc3e 	bl	800ab60 <uxr_stream_id_from_raw>
 800a2e4:	a90c      	add	r1, sp, #48	@ 0x30
 800a2e6:	4602      	mov	r2, r0
 800a2e8:	4640      	mov	r0, r8
 800a2ea:	920a      	str	r2, [sp, #40]	@ 0x28
 800a2ec:	f7ff fd92 	bl	8009e14 <read_submessage_list>
 800a2f0:	4620      	mov	r0, r4
 800a2f2:	b01d      	add	sp, #116	@ 0x74
 800a2f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2f8:	4631      	mov	r1, r6
 800a2fa:	f108 0008 	add.w	r0, r8, #8
 800a2fe:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 800a302:	f000 fd1b 	bl	800ad3c <uxr_get_input_reliable_stream>
 800a306:	4607      	mov	r7, r0
 800a308:	b338      	cbz	r0, 800a35a <listen_message_reliably+0x236>
 800a30a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a30c:	9203      	str	r2, [sp, #12]
 800a30e:	a80c      	add	r0, sp, #48	@ 0x30
 800a310:	f7ff f9da 	bl	80096c8 <ucdr_buffer_remaining>
 800a314:	4603      	mov	r3, r0
 800a316:	f10d 0019 	add.w	r0, sp, #25
 800a31a:	9000      	str	r0, [sp, #0]
 800a31c:	9a03      	ldr	r2, [sp, #12]
 800a31e:	4651      	mov	r1, sl
 800a320:	4638      	mov	r0, r7
 800a322:	f004 f8c7 	bl	800e4b4 <uxr_receive_reliable_message>
 800a326:	b1c0      	cbz	r0, 800a35a <listen_message_reliably+0x236>
 800a328:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800a32c:	b393      	cbz	r3, 800a394 <listen_message_reliably+0x270>
 800a32e:	ad14      	add	r5, sp, #80	@ 0x50
 800a330:	f04f 0a02 	mov.w	sl, #2
 800a334:	e00a      	b.n	800a34c <listen_message_reliably+0x228>
 800a336:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 800a33a:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 800a33e:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 800a342:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a344:	4629      	mov	r1, r5
 800a346:	4640      	mov	r0, r8
 800a348:	f7ff fd64 	bl	8009e14 <read_submessage_list>
 800a34c:	2204      	movs	r2, #4
 800a34e:	4629      	mov	r1, r5
 800a350:	4638      	mov	r0, r7
 800a352:	f004 f92f 	bl	800e5b4 <uxr_next_input_reliable_buffer_available>
 800a356:	2800      	cmp	r0, #0
 800a358:	d1ed      	bne.n	800a336 <listen_message_reliably+0x212>
 800a35a:	4640      	mov	r0, r8
 800a35c:	4632      	mov	r2, r6
 800a35e:	4649      	mov	r1, r9
 800a360:	f7ff fbd4 	bl	8009b0c <write_submessage_acknack.isra.0>
 800a364:	4620      	mov	r0, r4
 800a366:	b01d      	add	sp, #116	@ 0x74
 800a368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a36c:	4631      	mov	r1, r6
 800a36e:	f108 0008 	add.w	r0, r8, #8
 800a372:	f000 fcd9 	bl	800ad28 <uxr_get_input_best_effort_stream>
 800a376:	2800      	cmp	r0, #0
 800a378:	d099      	beq.n	800a2ae <listen_message_reliably+0x18a>
 800a37a:	4651      	mov	r1, sl
 800a37c:	f004 f806 	bl	800e38c <uxr_receive_best_effort_message>
 800a380:	2800      	cmp	r0, #0
 800a382:	d094      	beq.n	800a2ae <listen_message_reliably+0x18a>
 800a384:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 800a388:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a38a:	a90c      	add	r1, sp, #48	@ 0x30
 800a38c:	4640      	mov	r0, r8
 800a38e:	f7ff fd41 	bl	8009e14 <read_submessage_list>
 800a392:	e78c      	b.n	800a2ae <listen_message_reliably+0x18a>
 800a394:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 800a398:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a39a:	a90c      	add	r1, sp, #48	@ 0x30
 800a39c:	4640      	mov	r0, r8
 800a39e:	f7ff fd39 	bl	8009e14 <read_submessage_list>
 800a3a2:	e7c4      	b.n	800a32e <listen_message_reliably+0x20a>

0800a3a4 <uxr_run_session_until_confirm_delivery>:
 800a3a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3a8:	4606      	mov	r6, r0
 800a3aa:	460d      	mov	r5, r1
 800a3ac:	f000 fd2c 	bl	800ae08 <uxr_millis>
 800a3b0:	4607      	mov	r7, r0
 800a3b2:	4630      	mov	r0, r6
 800a3b4:	f7ff fc70 	bl	8009c98 <uxr_flash_output_streams>
 800a3b8:	2d00      	cmp	r5, #0
 800a3ba:	f106 0808 	add.w	r8, r6, #8
 800a3be:	bfa8      	it	ge
 800a3c0:	462c      	movge	r4, r5
 800a3c2:	da07      	bge.n	800a3d4 <uxr_run_session_until_confirm_delivery+0x30>
 800a3c4:	e00e      	b.n	800a3e4 <uxr_run_session_until_confirm_delivery+0x40>
 800a3c6:	f7ff fead 	bl	800a124 <listen_message_reliably>
 800a3ca:	f000 fd1d 	bl	800ae08 <uxr_millis>
 800a3ce:	1bc3      	subs	r3, r0, r7
 800a3d0:	1aec      	subs	r4, r5, r3
 800a3d2:	d407      	bmi.n	800a3e4 <uxr_run_session_until_confirm_delivery+0x40>
 800a3d4:	4640      	mov	r0, r8
 800a3d6:	f000 fcbb 	bl	800ad50 <uxr_output_streams_confirmed>
 800a3da:	4603      	mov	r3, r0
 800a3dc:	4621      	mov	r1, r4
 800a3de:	4630      	mov	r0, r6
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d0f0      	beq.n	800a3c6 <uxr_run_session_until_confirm_delivery+0x22>
 800a3e4:	4640      	mov	r0, r8
 800a3e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a3ea:	f000 bcb1 	b.w	800ad50 <uxr_output_streams_confirmed>
 800a3ee:	bf00      	nop

0800a3f0 <uxr_run_session_until_all_status>:
 800a3f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a3f4:	9c08      	ldr	r4, [sp, #32]
 800a3f6:	4606      	mov	r6, r0
 800a3f8:	460f      	mov	r7, r1
 800a3fa:	4691      	mov	r9, r2
 800a3fc:	461d      	mov	r5, r3
 800a3fe:	f7ff fc4b 	bl	8009c98 <uxr_flash_output_streams>
 800a402:	b124      	cbz	r4, 800a40e <uxr_run_session_until_all_status+0x1e>
 800a404:	4622      	mov	r2, r4
 800a406:	21ff      	movs	r1, #255	@ 0xff
 800a408:	4628      	mov	r0, r5
 800a40a:	f006 fad7 	bl	80109bc <memset>
 800a40e:	e9c6 951d 	strd	r9, r5, [r6, #116]	@ 0x74
 800a412:	67f4      	str	r4, [r6, #124]	@ 0x7c
 800a414:	f000 fcf8 	bl	800ae08 <uxr_millis>
 800a418:	3d01      	subs	r5, #1
 800a41a:	f1a9 0902 	sub.w	r9, r9, #2
 800a41e:	4680      	mov	r8, r0
 800a420:	4639      	mov	r1, r7
 800a422:	4630      	mov	r0, r6
 800a424:	f7ff fe7e 	bl	800a124 <listen_message_reliably>
 800a428:	f000 fcee 	bl	800ae08 <uxr_millis>
 800a42c:	eba0 0008 	sub.w	r0, r0, r8
 800a430:	1a39      	subs	r1, r7, r0
 800a432:	b344      	cbz	r4, 800a486 <uxr_run_session_until_all_status+0x96>
 800a434:	4628      	mov	r0, r5
 800a436:	46ac      	mov	ip, r5
 800a438:	2301      	movs	r3, #1
 800a43a:	e002      	b.n	800a442 <uxr_run_session_until_all_status+0x52>
 800a43c:	42a3      	cmp	r3, r4
 800a43e:	d20d      	bcs.n	800a45c <uxr_run_session_until_all_status+0x6c>
 800a440:	3301      	adds	r3, #1
 800a442:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 800a446:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 800a44a:	d1f7      	bne.n	800a43c <uxr_run_session_until_all_status+0x4c>
 800a44c:	42a3      	cmp	r3, r4
 800a44e:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 800a452:	d213      	bcs.n	800a47c <uxr_run_session_until_all_status+0x8c>
 800a454:	2a00      	cmp	r2, #0
 800a456:	d0f3      	beq.n	800a440 <uxr_run_session_until_all_status+0x50>
 800a458:	2900      	cmp	r1, #0
 800a45a:	dce2      	bgt.n	800a422 <uxr_run_session_until_all_status+0x32>
 800a45c:	2300      	movs	r3, #0
 800a45e:	67f3      	str	r3, [r6, #124]	@ 0x7c
 800a460:	442c      	add	r4, r5
 800a462:	e001      	b.n	800a468 <uxr_run_session_until_all_status+0x78>
 800a464:	2b01      	cmp	r3, #1
 800a466:	d812      	bhi.n	800a48e <uxr_run_session_until_all_status+0x9e>
 800a468:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800a46c:	4284      	cmp	r4, r0
 800a46e:	d1f9      	bne.n	800a464 <uxr_run_session_until_all_status+0x74>
 800a470:	2b01      	cmp	r3, #1
 800a472:	bf8c      	ite	hi
 800a474:	2000      	movhi	r0, #0
 800a476:	2001      	movls	r0, #1
 800a478:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a47c:	2900      	cmp	r1, #0
 800a47e:	dded      	ble.n	800a45c <uxr_run_session_until_all_status+0x6c>
 800a480:	2a00      	cmp	r2, #0
 800a482:	d1ce      	bne.n	800a422 <uxr_run_session_until_all_status+0x32>
 800a484:	e7ea      	b.n	800a45c <uxr_run_session_until_all_status+0x6c>
 800a486:	67f4      	str	r4, [r6, #124]	@ 0x7c
 800a488:	2001      	movs	r0, #1
 800a48a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a48e:	2000      	movs	r0, #0
 800a490:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800a494 <wait_session_status>:
 800a494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a498:	4604      	mov	r4, r0
 800a49a:	b09d      	sub	sp, #116	@ 0x74
 800a49c:	20ff      	movs	r0, #255	@ 0xff
 800a49e:	7160      	strb	r0, [r4, #5]
 800a4a0:	9303      	str	r3, [sp, #12]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	f000 80b6 	beq.w	800a614 <wait_session_status+0x180>
 800a4a8:	468a      	mov	sl, r1
 800a4aa:	4691      	mov	r9, r2
 800a4ac:	f04f 0b00 	mov.w	fp, #0
 800a4b0:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800a4b2:	464a      	mov	r2, r9
 800a4b4:	e9d3 0500 	ldrd	r0, r5, [r3]
 800a4b8:	4651      	mov	r1, sl
 800a4ba:	47a8      	blx	r5
 800a4bc:	f000 fca4 	bl	800ae08 <uxr_millis>
 800a4c0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800a4c4:	4605      	mov	r5, r0
 800a4c6:	e009      	b.n	800a4dc <wait_session_status+0x48>
 800a4c8:	f000 fc9e 	bl	800ae08 <uxr_millis>
 800a4cc:	1b40      	subs	r0, r0, r5
 800a4ce:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	dd40      	ble.n	800a558 <wait_session_status+0xc4>
 800a4d6:	7960      	ldrb	r0, [r4, #5]
 800a4d8:	28ff      	cmp	r0, #255	@ 0xff
 800a4da:	d145      	bne.n	800a568 <wait_session_status+0xd4>
 800a4dc:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800a4de:	a908      	add	r1, sp, #32
 800a4e0:	6896      	ldr	r6, [r2, #8]
 800a4e2:	6810      	ldr	r0, [r2, #0]
 800a4e4:	aa09      	add	r2, sp, #36	@ 0x24
 800a4e6:	47b0      	blx	r6
 800a4e8:	2800      	cmp	r0, #0
 800a4ea:	d0ed      	beq.n	800a4c8 <wait_session_status+0x34>
 800a4ec:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800a4f0:	a80c      	add	r0, sp, #48	@ 0x30
 800a4f2:	f7ff f8b9 	bl	8009668 <ucdr_init_buffer>
 800a4f6:	2600      	movs	r6, #0
 800a4f8:	f10d 031e 	add.w	r3, sp, #30
 800a4fc:	aa07      	add	r2, sp, #28
 800a4fe:	a90c      	add	r1, sp, #48	@ 0x30
 800a500:	4620      	mov	r0, r4
 800a502:	f88d 601c 	strb.w	r6, [sp, #28]
 800a506:	f000 fa87 	bl	800aa18 <uxr_read_session_header>
 800a50a:	2800      	cmp	r0, #0
 800a50c:	d0dc      	beq.n	800a4c8 <wait_session_status+0x34>
 800a50e:	4631      	mov	r1, r6
 800a510:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800a514:	f000 fb24 	bl	800ab60 <uxr_stream_id_from_raw>
 800a518:	f3c0 4707 	ubfx	r7, r0, #16, #8
 800a51c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800a520:	9302      	str	r3, [sp, #8]
 800a522:	2f01      	cmp	r7, #1
 800a524:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 800a528:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800a52c:	d05c      	beq.n	800a5e8 <wait_session_status+0x154>
 800a52e:	2f02      	cmp	r7, #2
 800a530:	d020      	beq.n	800a574 <wait_session_status+0xe0>
 800a532:	2f00      	cmp	r7, #0
 800a534:	d1c8      	bne.n	800a4c8 <wait_session_status+0x34>
 800a536:	4639      	mov	r1, r7
 800a538:	4638      	mov	r0, r7
 800a53a:	f000 fb11 	bl	800ab60 <uxr_stream_id_from_raw>
 800a53e:	a90c      	add	r1, sp, #48	@ 0x30
 800a540:	4602      	mov	r2, r0
 800a542:	900b      	str	r0, [sp, #44]	@ 0x2c
 800a544:	4620      	mov	r0, r4
 800a546:	f7ff fc65 	bl	8009e14 <read_submessage_list>
 800a54a:	f000 fc5d 	bl	800ae08 <uxr_millis>
 800a54e:	1b40      	subs	r0, r0, r5
 800a550:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800a554:	2b00      	cmp	r3, #0
 800a556:	dcbe      	bgt.n	800a4d6 <wait_session_status+0x42>
 800a558:	9b03      	ldr	r3, [sp, #12]
 800a55a:	7960      	ldrb	r0, [r4, #5]
 800a55c:	f10b 0b01 	add.w	fp, fp, #1
 800a560:	455b      	cmp	r3, fp
 800a562:	d001      	beq.n	800a568 <wait_session_status+0xd4>
 800a564:	28ff      	cmp	r0, #255	@ 0xff
 800a566:	d0a3      	beq.n	800a4b0 <wait_session_status+0x1c>
 800a568:	38ff      	subs	r0, #255	@ 0xff
 800a56a:	bf18      	it	ne
 800a56c:	2001      	movne	r0, #1
 800a56e:	b01d      	add	sp, #116	@ 0x74
 800a570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a574:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 800a578:	9304      	str	r3, [sp, #16]
 800a57a:	4631      	mov	r1, r6
 800a57c:	f104 0008 	add.w	r0, r4, #8
 800a580:	f000 fbdc 	bl	800ad3c <uxr_get_input_reliable_stream>
 800a584:	4680      	mov	r8, r0
 800a586:	b348      	cbz	r0, 800a5dc <wait_session_status+0x148>
 800a588:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a58a:	9205      	str	r2, [sp, #20]
 800a58c:	a80c      	add	r0, sp, #48	@ 0x30
 800a58e:	f7ff f89b 	bl	80096c8 <ucdr_buffer_remaining>
 800a592:	4603      	mov	r3, r0
 800a594:	f10d 001d 	add.w	r0, sp, #29
 800a598:	9000      	str	r0, [sp, #0]
 800a59a:	9a05      	ldr	r2, [sp, #20]
 800a59c:	9902      	ldr	r1, [sp, #8]
 800a59e:	4640      	mov	r0, r8
 800a5a0:	f003 ff88 	bl	800e4b4 <uxr_receive_reliable_message>
 800a5a4:	b1d0      	cbz	r0, 800a5dc <wait_session_status+0x148>
 800a5a6:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d03a      	beq.n	800a624 <wait_session_status+0x190>
 800a5ae:	9f04      	ldr	r7, [sp, #16]
 800a5b0:	e00a      	b.n	800a5c8 <wait_session_status+0x134>
 800a5b2:	f04f 0302 	mov.w	r3, #2
 800a5b6:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 800a5ba:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 800a5be:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 800a5c2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a5c4:	f7ff fc26 	bl	8009e14 <read_submessage_list>
 800a5c8:	a914      	add	r1, sp, #80	@ 0x50
 800a5ca:	2204      	movs	r2, #4
 800a5cc:	4640      	mov	r0, r8
 800a5ce:	f003 fff1 	bl	800e5b4 <uxr_next_input_reliable_buffer_available>
 800a5d2:	4603      	mov	r3, r0
 800a5d4:	a914      	add	r1, sp, #80	@ 0x50
 800a5d6:	4620      	mov	r0, r4
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d1ea      	bne.n	800a5b2 <wait_session_status+0x11e>
 800a5dc:	9904      	ldr	r1, [sp, #16]
 800a5de:	4632      	mov	r2, r6
 800a5e0:	4620      	mov	r0, r4
 800a5e2:	f7ff fa93 	bl	8009b0c <write_submessage_acknack.isra.0>
 800a5e6:	e76f      	b.n	800a4c8 <wait_session_status+0x34>
 800a5e8:	4631      	mov	r1, r6
 800a5ea:	f104 0008 	add.w	r0, r4, #8
 800a5ee:	f000 fb9b 	bl	800ad28 <uxr_get_input_best_effort_stream>
 800a5f2:	2800      	cmp	r0, #0
 800a5f4:	f43f af68 	beq.w	800a4c8 <wait_session_status+0x34>
 800a5f8:	9902      	ldr	r1, [sp, #8]
 800a5fa:	f003 fec7 	bl	800e38c <uxr_receive_best_effort_message>
 800a5fe:	2800      	cmp	r0, #0
 800a600:	f43f af62 	beq.w	800a4c8 <wait_session_status+0x34>
 800a604:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 800a608:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a60a:	a90c      	add	r1, sp, #48	@ 0x30
 800a60c:	4620      	mov	r0, r4
 800a60e:	f7ff fc01 	bl	8009e14 <read_submessage_list>
 800a612:	e759      	b.n	800a4c8 <wait_session_status+0x34>
 800a614:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800a616:	e9d3 0400 	ldrd	r0, r4, [r3]
 800a61a:	47a0      	blx	r4
 800a61c:	2001      	movs	r0, #1
 800a61e:	b01d      	add	sp, #116	@ 0x74
 800a620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a624:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 800a628:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a62a:	a90c      	add	r1, sp, #48	@ 0x30
 800a62c:	4620      	mov	r0, r4
 800a62e:	f7ff fbf1 	bl	8009e14 <read_submessage_list>
 800a632:	e7bc      	b.n	800a5ae <wait_session_status+0x11a>

0800a634 <uxr_delete_session_retries>:
 800a634:	b530      	push	{r4, r5, lr}
 800a636:	b08f      	sub	sp, #60	@ 0x3c
 800a638:	4604      	mov	r4, r0
 800a63a:	460d      	mov	r5, r1
 800a63c:	f000 fa2e 	bl	800aa9c <uxr_session_header_offset>
 800a640:	2300      	movs	r3, #0
 800a642:	2210      	movs	r2, #16
 800a644:	9000      	str	r0, [sp, #0]
 800a646:	a902      	add	r1, sp, #8
 800a648:	a806      	add	r0, sp, #24
 800a64a:	f7fe fffb 	bl	8009644 <ucdr_init_buffer_origin_offset>
 800a64e:	a906      	add	r1, sp, #24
 800a650:	4620      	mov	r0, r4
 800a652:	f000 f973 	bl	800a93c <uxr_buffer_delete_session>
 800a656:	2200      	movs	r2, #0
 800a658:	4611      	mov	r1, r2
 800a65a:	9b06      	ldr	r3, [sp, #24]
 800a65c:	4620      	mov	r0, r4
 800a65e:	f000 f9c7 	bl	800a9f0 <uxr_stamp_session_header>
 800a662:	a806      	add	r0, sp, #24
 800a664:	f7ff f82c 	bl	80096c0 <ucdr_buffer_length>
 800a668:	462b      	mov	r3, r5
 800a66a:	4602      	mov	r2, r0
 800a66c:	a902      	add	r1, sp, #8
 800a66e:	4620      	mov	r0, r4
 800a670:	f7ff ff10 	bl	800a494 <wait_session_status>
 800a674:	b118      	cbz	r0, 800a67e <uxr_delete_session_retries+0x4a>
 800a676:	7960      	ldrb	r0, [r4, #5]
 800a678:	fab0 f080 	clz	r0, r0
 800a67c:	0940      	lsrs	r0, r0, #5
 800a67e:	b00f      	add	sp, #60	@ 0x3c
 800a680:	bd30      	pop	{r4, r5, pc}
 800a682:	bf00      	nop

0800a684 <uxr_create_session>:
 800a684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a688:	f100 0b08 	add.w	fp, r0, #8
 800a68c:	b0ab      	sub	sp, #172	@ 0xac
 800a68e:	4604      	mov	r4, r0
 800a690:	4658      	mov	r0, fp
 800a692:	f000 fa99 	bl	800abc8 <uxr_reset_stream_storage>
 800a696:	4620      	mov	r0, r4
 800a698:	f000 fa00 	bl	800aa9c <uxr_session_header_offset>
 800a69c:	2300      	movs	r3, #0
 800a69e:	9000      	str	r0, [sp, #0]
 800a6a0:	221c      	movs	r2, #28
 800a6a2:	a90b      	add	r1, sp, #44	@ 0x2c
 800a6a4:	a812      	add	r0, sp, #72	@ 0x48
 800a6a6:	f7fe ffcd 	bl	8009644 <ucdr_init_buffer_origin_offset>
 800a6aa:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800a6ac:	8a1a      	ldrh	r2, [r3, #16]
 800a6ae:	3a04      	subs	r2, #4
 800a6b0:	b292      	uxth	r2, r2
 800a6b2:	a912      	add	r1, sp, #72	@ 0x48
 800a6b4:	4620      	mov	r0, r4
 800a6b6:	f000 f917 	bl	800a8e8 <uxr_buffer_create_session>
 800a6ba:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800a6bc:	4620      	mov	r0, r4
 800a6be:	f000 f983 	bl	800a9c8 <uxr_stamp_create_session_header>
 800a6c2:	a812      	add	r0, sp, #72	@ 0x48
 800a6c4:	f7fe fffc 	bl	80096c0 <ucdr_buffer_length>
 800a6c8:	23ff      	movs	r3, #255	@ 0xff
 800a6ca:	7163      	strb	r3, [r4, #5]
 800a6cc:	230a      	movs	r3, #10
 800a6ce:	46da      	mov	sl, fp
 800a6d0:	9303      	str	r3, [sp, #12]
 800a6d2:	4683      	mov	fp, r0
 800a6d4:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800a6d6:	465a      	mov	r2, fp
 800a6d8:	e9d3 0500 	ldrd	r0, r5, [r3]
 800a6dc:	a90b      	add	r1, sp, #44	@ 0x2c
 800a6de:	47a8      	blx	r5
 800a6e0:	f000 fb92 	bl	800ae08 <uxr_millis>
 800a6e4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800a6e8:	4605      	mov	r5, r0
 800a6ea:	e009      	b.n	800a700 <uxr_create_session+0x7c>
 800a6ec:	f000 fb8c 	bl	800ae08 <uxr_millis>
 800a6f0:	1b40      	subs	r0, r0, r5
 800a6f2:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	7962      	ldrb	r2, [r4, #5]
 800a6fa:	dd38      	ble.n	800a76e <uxr_create_session+0xea>
 800a6fc:	2aff      	cmp	r2, #255	@ 0xff
 800a6fe:	d13c      	bne.n	800a77a <uxr_create_session+0xf6>
 800a700:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800a702:	a907      	add	r1, sp, #28
 800a704:	6896      	ldr	r6, [r2, #8]
 800a706:	6810      	ldr	r0, [r2, #0]
 800a708:	aa08      	add	r2, sp, #32
 800a70a:	47b0      	blx	r6
 800a70c:	2800      	cmp	r0, #0
 800a70e:	d0ed      	beq.n	800a6ec <uxr_create_session+0x68>
 800a710:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800a714:	a81a      	add	r0, sp, #104	@ 0x68
 800a716:	f7fe ffa7 	bl	8009668 <ucdr_init_buffer>
 800a71a:	2600      	movs	r6, #0
 800a71c:	f10d 031a 	add.w	r3, sp, #26
 800a720:	aa06      	add	r2, sp, #24
 800a722:	a91a      	add	r1, sp, #104	@ 0x68
 800a724:	4620      	mov	r0, r4
 800a726:	f88d 6018 	strb.w	r6, [sp, #24]
 800a72a:	f000 f975 	bl	800aa18 <uxr_read_session_header>
 800a72e:	2800      	cmp	r0, #0
 800a730:	d0dc      	beq.n	800a6ec <uxr_create_session+0x68>
 800a732:	4631      	mov	r1, r6
 800a734:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800a738:	f000 fa12 	bl	800ab60 <uxr_stream_id_from_raw>
 800a73c:	f3c0 4607 	ubfx	r6, r0, #16, #8
 800a740:	2e01      	cmp	r6, #1
 800a742:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 800a746:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 800a74a:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800a74e:	d053      	beq.n	800a7f8 <uxr_create_session+0x174>
 800a750:	2e02      	cmp	r6, #2
 800a752:	d018      	beq.n	800a786 <uxr_create_session+0x102>
 800a754:	2e00      	cmp	r6, #0
 800a756:	d1c9      	bne.n	800a6ec <uxr_create_session+0x68>
 800a758:	4631      	mov	r1, r6
 800a75a:	4630      	mov	r0, r6
 800a75c:	f000 fa00 	bl	800ab60 <uxr_stream_id_from_raw>
 800a760:	a91a      	add	r1, sp, #104	@ 0x68
 800a762:	4602      	mov	r2, r0
 800a764:	900a      	str	r0, [sp, #40]	@ 0x28
 800a766:	4620      	mov	r0, r4
 800a768:	f7ff fb54 	bl	8009e14 <read_submessage_list>
 800a76c:	e7be      	b.n	800a6ec <uxr_create_session+0x68>
 800a76e:	9b03      	ldr	r3, [sp, #12]
 800a770:	3b01      	subs	r3, #1
 800a772:	9303      	str	r3, [sp, #12]
 800a774:	d001      	beq.n	800a77a <uxr_create_session+0xf6>
 800a776:	2aff      	cmp	r2, #255	@ 0xff
 800a778:	d0ac      	beq.n	800a6d4 <uxr_create_session+0x50>
 800a77a:	2a00      	cmp	r2, #0
 800a77c:	d051      	beq.n	800a822 <uxr_create_session+0x19e>
 800a77e:	2000      	movs	r0, #0
 800a780:	b02b      	add	sp, #172	@ 0xac
 800a782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a786:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800a78a:	9304      	str	r3, [sp, #16]
 800a78c:	4639      	mov	r1, r7
 800a78e:	4650      	mov	r0, sl
 800a790:	f000 fad4 	bl	800ad3c <uxr_get_input_reliable_stream>
 800a794:	4680      	mov	r8, r0
 800a796:	b348      	cbz	r0, 800a7ec <uxr_create_session+0x168>
 800a798:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800a79a:	9205      	str	r2, [sp, #20]
 800a79c:	a81a      	add	r0, sp, #104	@ 0x68
 800a79e:	f7fe ff93 	bl	80096c8 <ucdr_buffer_remaining>
 800a7a2:	4603      	mov	r3, r0
 800a7a4:	f10d 0019 	add.w	r0, sp, #25
 800a7a8:	9000      	str	r0, [sp, #0]
 800a7aa:	9a05      	ldr	r2, [sp, #20]
 800a7ac:	4649      	mov	r1, r9
 800a7ae:	4640      	mov	r0, r8
 800a7b0:	f003 fe80 	bl	800e4b4 <uxr_receive_reliable_message>
 800a7b4:	b1d0      	cbz	r0, 800a7ec <uxr_create_session+0x168>
 800a7b6:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d038      	beq.n	800a830 <uxr_create_session+0x1ac>
 800a7be:	9e04      	ldr	r6, [sp, #16]
 800a7c0:	e00a      	b.n	800a7d8 <uxr_create_session+0x154>
 800a7c2:	f04f 0302 	mov.w	r3, #2
 800a7c6:	f88d 6028 	strb.w	r6, [sp, #40]	@ 0x28
 800a7ca:	f88d 7029 	strb.w	r7, [sp, #41]	@ 0x29
 800a7ce:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a7d2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a7d4:	f7ff fb1e 	bl	8009e14 <read_submessage_list>
 800a7d8:	a922      	add	r1, sp, #136	@ 0x88
 800a7da:	2204      	movs	r2, #4
 800a7dc:	4640      	mov	r0, r8
 800a7de:	f003 fee9 	bl	800e5b4 <uxr_next_input_reliable_buffer_available>
 800a7e2:	4603      	mov	r3, r0
 800a7e4:	a922      	add	r1, sp, #136	@ 0x88
 800a7e6:	4620      	mov	r0, r4
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d1ea      	bne.n	800a7c2 <uxr_create_session+0x13e>
 800a7ec:	9904      	ldr	r1, [sp, #16]
 800a7ee:	463a      	mov	r2, r7
 800a7f0:	4620      	mov	r0, r4
 800a7f2:	f7ff f98b 	bl	8009b0c <write_submessage_acknack.isra.0>
 800a7f6:	e779      	b.n	800a6ec <uxr_create_session+0x68>
 800a7f8:	4639      	mov	r1, r7
 800a7fa:	4650      	mov	r0, sl
 800a7fc:	f000 fa94 	bl	800ad28 <uxr_get_input_best_effort_stream>
 800a800:	2800      	cmp	r0, #0
 800a802:	f43f af73 	beq.w	800a6ec <uxr_create_session+0x68>
 800a806:	4649      	mov	r1, r9
 800a808:	f003 fdc0 	bl	800e38c <uxr_receive_best_effort_message>
 800a80c:	2800      	cmp	r0, #0
 800a80e:	f43f af6d 	beq.w	800a6ec <uxr_create_session+0x68>
 800a812:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 800a816:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a818:	a91a      	add	r1, sp, #104	@ 0x68
 800a81a:	4620      	mov	r0, r4
 800a81c:	f7ff fafa 	bl	8009e14 <read_submessage_list>
 800a820:	e764      	b.n	800a6ec <uxr_create_session+0x68>
 800a822:	4650      	mov	r0, sl
 800a824:	f000 f9d0 	bl	800abc8 <uxr_reset_stream_storage>
 800a828:	2001      	movs	r0, #1
 800a82a:	b02b      	add	sp, #172	@ 0xac
 800a82c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a830:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 800a834:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a836:	a91a      	add	r1, sp, #104	@ 0x68
 800a838:	4620      	mov	r0, r4
 800a83a:	f7ff faeb 	bl	8009e14 <read_submessage_list>
 800a83e:	e7be      	b.n	800a7be <uxr_create_session+0x13a>

0800a840 <uxr_prepare_stream_to_write_submessage>:
 800a840:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a844:	b082      	sub	sp, #8
 800a846:	4682      	mov	sl, r0
 800a848:	4610      	mov	r0, r2
 800a84a:	4615      	mov	r5, r2
 800a84c:	461e      	mov	r6, r3
 800a84e:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 800a852:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 800a856:	9101      	str	r1, [sp, #4]
 800a858:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800a85c:	f000 face 	bl	800adfc <uxr_submessage_padding>
 800a860:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800a864:	f105 0904 	add.w	r9, r5, #4
 800a868:	2b01      	cmp	r3, #1
 800a86a:	4481      	add	r9, r0
 800a86c:	d01d      	beq.n	800a8aa <uxr_prepare_stream_to_write_submessage+0x6a>
 800a86e:	2b02      	cmp	r3, #2
 800a870:	d116      	bne.n	800a8a0 <uxr_prepare_stream_to_write_submessage+0x60>
 800a872:	4621      	mov	r1, r4
 800a874:	f10a 0008 	add.w	r0, sl, #8
 800a878:	f000 fa4c 	bl	800ad14 <uxr_get_output_reliable_stream>
 800a87c:	4604      	mov	r4, r0
 800a87e:	b158      	cbz	r0, 800a898 <uxr_prepare_stream_to_write_submessage+0x58>
 800a880:	4649      	mov	r1, r9
 800a882:	4632      	mov	r2, r6
 800a884:	f004 f852 	bl	800e92c <uxr_prepare_reliable_buffer_to_write>
 800a888:	4604      	mov	r4, r0
 800a88a:	b12c      	cbz	r4, 800a898 <uxr_prepare_stream_to_write_submessage+0x58>
 800a88c:	4643      	mov	r3, r8
 800a88e:	b2aa      	uxth	r2, r5
 800a890:	4639      	mov	r1, r7
 800a892:	4630      	mov	r0, r6
 800a894:	f000 fa72 	bl	800ad7c <uxr_buffer_submessage_header>
 800a898:	4620      	mov	r0, r4
 800a89a:	b002      	add	sp, #8
 800a89c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8a0:	2400      	movs	r4, #0
 800a8a2:	4620      	mov	r0, r4
 800a8a4:	b002      	add	sp, #8
 800a8a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8aa:	4621      	mov	r1, r4
 800a8ac:	f10a 0008 	add.w	r0, sl, #8
 800a8b0:	f000 fa28 	bl	800ad04 <uxr_get_output_best_effort_stream>
 800a8b4:	4604      	mov	r4, r0
 800a8b6:	2800      	cmp	r0, #0
 800a8b8:	d0ee      	beq.n	800a898 <uxr_prepare_stream_to_write_submessage+0x58>
 800a8ba:	4649      	mov	r1, r9
 800a8bc:	4632      	mov	r2, r6
 800a8be:	f003 ff65 	bl	800e78c <uxr_prepare_best_effort_buffer_to_write>
 800a8c2:	4604      	mov	r4, r0
 800a8c4:	e7e1      	b.n	800a88a <uxr_prepare_stream_to_write_submessage+0x4a>
 800a8c6:	bf00      	nop

0800a8c8 <uxr_init_session_info>:
 800a8c8:	0e13      	lsrs	r3, r2, #24
 800a8ca:	7043      	strb	r3, [r0, #1]
 800a8cc:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800a8d0:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800a8d4:	7001      	strb	r1, [r0, #0]
 800a8d6:	70c3      	strb	r3, [r0, #3]
 800a8d8:	2109      	movs	r1, #9
 800a8da:	23ff      	movs	r3, #255	@ 0xff
 800a8dc:	f880 c002 	strb.w	ip, [r0, #2]
 800a8e0:	7102      	strb	r2, [r0, #4]
 800a8e2:	80c1      	strh	r1, [r0, #6]
 800a8e4:	7143      	strb	r3, [r0, #5]
 800a8e6:	4770      	bx	lr

0800a8e8 <uxr_buffer_create_session>:
 800a8e8:	b530      	push	{r4, r5, lr}
 800a8ea:	b089      	sub	sp, #36	@ 0x24
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	4d12      	ldr	r5, [pc, #72]	@ (800a938 <uxr_buffer_create_session+0x50>)
 800a8f0:	9307      	str	r3, [sp, #28]
 800a8f2:	f8ad 201c 	strh.w	r2, [sp, #28]
 800a8f6:	2201      	movs	r2, #1
 800a8f8:	9301      	str	r3, [sp, #4]
 800a8fa:	80c2      	strh	r2, [r0, #6]
 800a8fc:	f88d 2004 	strb.w	r2, [sp, #4]
 800a900:	682a      	ldr	r2, [r5, #0]
 800a902:	9200      	str	r2, [sp, #0]
 800a904:	88aa      	ldrh	r2, [r5, #4]
 800a906:	f8ad 2006 	strh.w	r2, [sp, #6]
 800a90a:	f8d0 2001 	ldr.w	r2, [r0, #1]
 800a90e:	9202      	str	r2, [sp, #8]
 800a910:	460c      	mov	r4, r1
 800a912:	7802      	ldrb	r2, [r0, #0]
 800a914:	9303      	str	r3, [sp, #12]
 800a916:	4619      	mov	r1, r3
 800a918:	f88d 200c 	strb.w	r2, [sp, #12]
 800a91c:	4620      	mov	r0, r4
 800a91e:	2210      	movs	r2, #16
 800a920:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800a924:	9306      	str	r3, [sp, #24]
 800a926:	f000 fa29 	bl	800ad7c <uxr_buffer_submessage_header>
 800a92a:	4669      	mov	r1, sp
 800a92c:	4620      	mov	r0, r4
 800a92e:	f001 f981 	bl	800bc34 <uxr_serialize_CREATE_CLIENT_Payload>
 800a932:	b009      	add	sp, #36	@ 0x24
 800a934:	bd30      	pop	{r4, r5, pc}
 800a936:	bf00      	nop
 800a938:	080119cc 	.word	0x080119cc

0800a93c <uxr_buffer_delete_session>:
 800a93c:	b510      	push	{r4, lr}
 800a93e:	4b0c      	ldr	r3, [pc, #48]	@ (800a970 <uxr_buffer_delete_session+0x34>)
 800a940:	b082      	sub	sp, #8
 800a942:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 800a946:	f8ad c006 	strh.w	ip, [sp, #6]
 800a94a:	460c      	mov	r4, r1
 800a94c:	2202      	movs	r2, #2
 800a94e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a952:	80c2      	strh	r2, [r0, #6]
 800a954:	f8ad 3004 	strh.w	r3, [sp, #4]
 800a958:	2204      	movs	r2, #4
 800a95a:	2300      	movs	r3, #0
 800a95c:	2103      	movs	r1, #3
 800a95e:	4620      	mov	r0, r4
 800a960:	f000 fa0c 	bl	800ad7c <uxr_buffer_submessage_header>
 800a964:	a901      	add	r1, sp, #4
 800a966:	4620      	mov	r0, r4
 800a968:	f001 fa0a 	bl	800bd80 <uxr_serialize_DELETE_Payload>
 800a96c:	b002      	add	sp, #8
 800a96e:	bd10      	pop	{r4, pc}
 800a970:	080119cc 	.word	0x080119cc

0800a974 <uxr_read_create_session_status>:
 800a974:	b510      	push	{r4, lr}
 800a976:	b088      	sub	sp, #32
 800a978:	4604      	mov	r4, r0
 800a97a:	4608      	mov	r0, r1
 800a97c:	a901      	add	r1, sp, #4
 800a97e:	f001 fa0f 	bl	800bda0 <uxr_deserialize_STATUS_AGENT_Payload>
 800a982:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800a986:	7163      	strb	r3, [r4, #5]
 800a988:	b008      	add	sp, #32
 800a98a:	bd10      	pop	{r4, pc}

0800a98c <uxr_read_delete_session_status>:
 800a98c:	b510      	push	{r4, lr}
 800a98e:	4604      	mov	r4, r0
 800a990:	b084      	sub	sp, #16
 800a992:	4608      	mov	r0, r1
 800a994:	a902      	add	r1, sp, #8
 800a996:	f001 fa33 	bl	800be00 <uxr_deserialize_STATUS_Payload>
 800a99a:	88e3      	ldrh	r3, [r4, #6]
 800a99c:	2b02      	cmp	r3, #2
 800a99e:	d001      	beq.n	800a9a4 <uxr_read_delete_session_status+0x18>
 800a9a0:	b004      	add	sp, #16
 800a9a2:	bd10      	pop	{r4, pc}
 800a9a4:	f10d 000a 	add.w	r0, sp, #10
 800a9a8:	f7ff f836 	bl	8009a18 <uxr_object_id_from_raw>
 800a9ac:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800a9b0:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800a9b4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800a9b8:	b29b      	uxth	r3, r3
 800a9ba:	2b02      	cmp	r3, #2
 800a9bc:	bf04      	itt	eq
 800a9be:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 800a9c2:	7163      	strbeq	r3, [r4, #5]
 800a9c4:	b004      	add	sp, #16
 800a9c6:	bd10      	pop	{r4, pc}

0800a9c8 <uxr_stamp_create_session_header>:
 800a9c8:	b510      	push	{r4, lr}
 800a9ca:	2208      	movs	r2, #8
 800a9cc:	b08a      	sub	sp, #40	@ 0x28
 800a9ce:	4604      	mov	r4, r0
 800a9d0:	eb0d 0002 	add.w	r0, sp, r2
 800a9d4:	f7fe fe48 	bl	8009668 <ucdr_init_buffer>
 800a9d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9dc:	9400      	str	r4, [sp, #0]
 800a9de:	2300      	movs	r3, #0
 800a9e0:	461a      	mov	r2, r3
 800a9e2:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 800a9e6:	a802      	add	r0, sp, #8
 800a9e8:	f000 fbc2 	bl	800b170 <uxr_serialize_message_header>
 800a9ec:	b00a      	add	sp, #40	@ 0x28
 800a9ee:	bd10      	pop	{r4, pc}

0800a9f0 <uxr_stamp_session_header>:
 800a9f0:	b530      	push	{r4, r5, lr}
 800a9f2:	b08d      	sub	sp, #52	@ 0x34
 800a9f4:	4604      	mov	r4, r0
 800a9f6:	460d      	mov	r5, r1
 800a9f8:	9203      	str	r2, [sp, #12]
 800a9fa:	4619      	mov	r1, r3
 800a9fc:	a804      	add	r0, sp, #16
 800a9fe:	2208      	movs	r2, #8
 800aa00:	f7fe fe32 	bl	8009668 <ucdr_init_buffer>
 800aa04:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa08:	9b03      	ldr	r3, [sp, #12]
 800aa0a:	9400      	str	r4, [sp, #0]
 800aa0c:	462a      	mov	r2, r5
 800aa0e:	a804      	add	r0, sp, #16
 800aa10:	f000 fbae 	bl	800b170 <uxr_serialize_message_header>
 800aa14:	b00d      	add	sp, #52	@ 0x34
 800aa16:	bd30      	pop	{r4, r5, pc}

0800aa18 <uxr_read_session_header>:
 800aa18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa1c:	4607      	mov	r7, r0
 800aa1e:	b084      	sub	sp, #16
 800aa20:	4608      	mov	r0, r1
 800aa22:	460c      	mov	r4, r1
 800aa24:	4615      	mov	r5, r2
 800aa26:	461e      	mov	r6, r3
 800aa28:	f7fe fe4e 	bl	80096c8 <ucdr_buffer_remaining>
 800aa2c:	2808      	cmp	r0, #8
 800aa2e:	d803      	bhi.n	800aa38 <uxr_read_session_header+0x20>
 800aa30:	2000      	movs	r0, #0
 800aa32:	b004      	add	sp, #16
 800aa34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa38:	f10d 080c 	add.w	r8, sp, #12
 800aa3c:	4633      	mov	r3, r6
 800aa3e:	462a      	mov	r2, r5
 800aa40:	f8cd 8000 	str.w	r8, [sp]
 800aa44:	4620      	mov	r0, r4
 800aa46:	f10d 010b 	add.w	r1, sp, #11
 800aa4a:	f000 fbaf 	bl	800b1ac <uxr_deserialize_message_header>
 800aa4e:	783a      	ldrb	r2, [r7, #0]
 800aa50:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800aa54:	4293      	cmp	r3, r2
 800aa56:	d1eb      	bne.n	800aa30 <uxr_read_session_header+0x18>
 800aa58:	061b      	lsls	r3, r3, #24
 800aa5a:	d41c      	bmi.n	800aa96 <uxr_read_session_header+0x7e>
 800aa5c:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800aa60:	787b      	ldrb	r3, [r7, #1]
 800aa62:	429a      	cmp	r2, r3
 800aa64:	d003      	beq.n	800aa6e <uxr_read_session_header+0x56>
 800aa66:	2001      	movs	r0, #1
 800aa68:	f080 0001 	eor.w	r0, r0, #1
 800aa6c:	e7e1      	b.n	800aa32 <uxr_read_session_header+0x1a>
 800aa6e:	f89d 200d 	ldrb.w	r2, [sp, #13]
 800aa72:	78bb      	ldrb	r3, [r7, #2]
 800aa74:	429a      	cmp	r2, r3
 800aa76:	f107 0102 	add.w	r1, r7, #2
 800aa7a:	d1f4      	bne.n	800aa66 <uxr_read_session_header+0x4e>
 800aa7c:	f89d 200e 	ldrb.w	r2, [sp, #14]
 800aa80:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800aa84:	429a      	cmp	r2, r3
 800aa86:	d1ee      	bne.n	800aa66 <uxr_read_session_header+0x4e>
 800aa88:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800aa8c:	784b      	ldrb	r3, [r1, #1]
 800aa8e:	429a      	cmp	r2, r3
 800aa90:	d1e9      	bne.n	800aa66 <uxr_read_session_header+0x4e>
 800aa92:	2000      	movs	r0, #0
 800aa94:	e7e8      	b.n	800aa68 <uxr_read_session_header+0x50>
 800aa96:	2001      	movs	r0, #1
 800aa98:	e7cb      	b.n	800aa32 <uxr_read_session_header+0x1a>
 800aa9a:	bf00      	nop

0800aa9c <uxr_session_header_offset>:
 800aa9c:	f990 3000 	ldrsb.w	r3, [r0]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	bfac      	ite	ge
 800aaa4:	2008      	movge	r0, #8
 800aaa6:	2004      	movlt	r0, #4
 800aaa8:	4770      	bx	lr
 800aaaa:	bf00      	nop

0800aaac <uxr_init_base_object_request>:
 800aaac:	b510      	push	{r4, lr}
 800aaae:	88c3      	ldrh	r3, [r0, #6]
 800aab0:	b082      	sub	sp, #8
 800aab2:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 800aab6:	9101      	str	r1, [sp, #4]
 800aab8:	f1a3 010a 	sub.w	r1, r3, #10
 800aabc:	b289      	uxth	r1, r1
 800aabe:	42a1      	cmp	r1, r4
 800aac0:	d80e      	bhi.n	800aae0 <uxr_init_base_object_request+0x34>
 800aac2:	3301      	adds	r3, #1
 800aac4:	b29c      	uxth	r4, r3
 800aac6:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800aaca:	b2db      	uxtb	r3, r3
 800aacc:	80c4      	strh	r4, [r0, #6]
 800aace:	9801      	ldr	r0, [sp, #4]
 800aad0:	7011      	strb	r1, [r2, #0]
 800aad2:	7053      	strb	r3, [r2, #1]
 800aad4:	1c91      	adds	r1, r2, #2
 800aad6:	f7fe ffb3 	bl	8009a40 <uxr_object_id_to_raw>
 800aada:	4620      	mov	r0, r4
 800aadc:	b002      	add	sp, #8
 800aade:	bd10      	pop	{r4, pc}
 800aae0:	230a      	movs	r3, #10
 800aae2:	2100      	movs	r1, #0
 800aae4:	461c      	mov	r4, r3
 800aae6:	e7f1      	b.n	800aacc <uxr_init_base_object_request+0x20>

0800aae8 <uxr_parse_base_object_request>:
 800aae8:	b570      	push	{r4, r5, r6, lr}
 800aaea:	4604      	mov	r4, r0
 800aaec:	3002      	adds	r0, #2
 800aaee:	460d      	mov	r5, r1
 800aaf0:	4616      	mov	r6, r2
 800aaf2:	f7fe ff91 	bl	8009a18 <uxr_object_id_from_raw>
 800aaf6:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800aafa:	8028      	strh	r0, [r5, #0]
 800aafc:	806b      	strh	r3, [r5, #2]
 800aafe:	7822      	ldrb	r2, [r4, #0]
 800ab00:	7863      	ldrb	r3, [r4, #1]
 800ab02:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800ab06:	8033      	strh	r3, [r6, #0]
 800ab08:	bd70      	pop	{r4, r5, r6, pc}
 800ab0a:	bf00      	nop

0800ab0c <uxr_stream_id>:
 800ab0c:	2901      	cmp	r1, #1
 800ab0e:	b082      	sub	sp, #8
 800ab10:	d01d      	beq.n	800ab4e <uxr_stream_id+0x42>
 800ab12:	2902      	cmp	r1, #2
 800ab14:	f04f 0c00 	mov.w	ip, #0
 800ab18:	d01e      	beq.n	800ab58 <uxr_stream_id+0x4c>
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	f36c 0307 	bfi	r3, ip, #0, #8
 800ab20:	f360 230f 	bfi	r3, r0, #8, #8
 800ab24:	f361 4317 	bfi	r3, r1, #16, #8
 800ab28:	f362 631f 	bfi	r3, r2, #24, #8
 800ab2c:	b2da      	uxtb	r2, r3
 800ab2e:	2000      	movs	r0, #0
 800ab30:	f362 0007 	bfi	r0, r2, #0, #8
 800ab34:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800ab38:	f362 200f 	bfi	r0, r2, #8, #8
 800ab3c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800ab40:	f362 4017 	bfi	r0, r2, #16, #8
 800ab44:	0e1b      	lsrs	r3, r3, #24
 800ab46:	f363 601f 	bfi	r0, r3, #24, #8
 800ab4a:	b002      	add	sp, #8
 800ab4c:	4770      	bx	lr
 800ab4e:	f100 0c01 	add.w	ip, r0, #1
 800ab52:	fa5f fc8c 	uxtb.w	ip, ip
 800ab56:	e7e0      	b.n	800ab1a <uxr_stream_id+0xe>
 800ab58:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 800ab5c:	e7dd      	b.n	800ab1a <uxr_stream_id+0xe>
 800ab5e:	bf00      	nop

0800ab60 <uxr_stream_id_from_raw>:
 800ab60:	b082      	sub	sp, #8
 800ab62:	b130      	cbz	r0, 800ab72 <uxr_stream_id_from_raw+0x12>
 800ab64:	0603      	lsls	r3, r0, #24
 800ab66:	d420      	bmi.n	800abaa <uxr_stream_id_from_raw+0x4a>
 800ab68:	1e42      	subs	r2, r0, #1
 800ab6a:	b2d2      	uxtb	r2, r2
 800ab6c:	f04f 0c01 	mov.w	ip, #1
 800ab70:	e001      	b.n	800ab76 <uxr_stream_id_from_raw+0x16>
 800ab72:	4684      	mov	ip, r0
 800ab74:	4602      	mov	r2, r0
 800ab76:	2300      	movs	r3, #0
 800ab78:	f360 0307 	bfi	r3, r0, #0, #8
 800ab7c:	f362 230f 	bfi	r3, r2, #8, #8
 800ab80:	f36c 4317 	bfi	r3, ip, #16, #8
 800ab84:	f361 631f 	bfi	r3, r1, #24, #8
 800ab88:	b2da      	uxtb	r2, r3
 800ab8a:	2000      	movs	r0, #0
 800ab8c:	f362 0007 	bfi	r0, r2, #0, #8
 800ab90:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800ab94:	f362 200f 	bfi	r0, r2, #8, #8
 800ab98:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800ab9c:	f362 4017 	bfi	r0, r2, #16, #8
 800aba0:	0e1b      	lsrs	r3, r3, #24
 800aba2:	f363 601f 	bfi	r0, r3, #24, #8
 800aba6:	b002      	add	sp, #8
 800aba8:	4770      	bx	lr
 800abaa:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 800abae:	f04f 0c02 	mov.w	ip, #2
 800abb2:	e7e0      	b.n	800ab76 <uxr_stream_id_from_raw+0x16>

0800abb4 <uxr_init_stream_storage>:
 800abb4:	2300      	movs	r3, #0
 800abb6:	7403      	strb	r3, [r0, #16]
 800abb8:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 800abbc:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 800abc0:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 800abc4:	4770      	bx	lr
 800abc6:	bf00      	nop

0800abc8 <uxr_reset_stream_storage>:
 800abc8:	b570      	push	{r4, r5, r6, lr}
 800abca:	7c03      	ldrb	r3, [r0, #16]
 800abcc:	4604      	mov	r4, r0
 800abce:	b153      	cbz	r3, 800abe6 <uxr_reset_stream_storage+0x1e>
 800abd0:	4606      	mov	r6, r0
 800abd2:	2500      	movs	r5, #0
 800abd4:	4630      	mov	r0, r6
 800abd6:	f003 fdd3 	bl	800e780 <uxr_reset_output_best_effort_stream>
 800abda:	7c23      	ldrb	r3, [r4, #16]
 800abdc:	3501      	adds	r5, #1
 800abde:	42ab      	cmp	r3, r5
 800abe0:	f106 0610 	add.w	r6, r6, #16
 800abe4:	d8f6      	bhi.n	800abd4 <uxr_reset_stream_storage+0xc>
 800abe6:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800abea:	b163      	cbz	r3, 800ac06 <uxr_reset_stream_storage+0x3e>
 800abec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800abf0:	2500      	movs	r5, #0
 800abf2:	4630      	mov	r0, r6
 800abf4:	f003 fbc6 	bl	800e384 <uxr_reset_input_best_effort_stream>
 800abf8:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800abfc:	3501      	adds	r5, #1
 800abfe:	42ab      	cmp	r3, r5
 800ac00:	f106 0602 	add.w	r6, r6, #2
 800ac04:	d8f5      	bhi.n	800abf2 <uxr_reset_stream_storage+0x2a>
 800ac06:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800ac0a:	b163      	cbz	r3, 800ac26 <uxr_reset_stream_storage+0x5e>
 800ac0c:	f104 0618 	add.w	r6, r4, #24
 800ac10:	2500      	movs	r5, #0
 800ac12:	4630      	mov	r0, r6
 800ac14:	f003 fe60 	bl	800e8d8 <uxr_reset_output_reliable_stream>
 800ac18:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800ac1c:	3501      	adds	r5, #1
 800ac1e:	42ab      	cmp	r3, r5
 800ac20:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 800ac24:	d8f5      	bhi.n	800ac12 <uxr_reset_stream_storage+0x4a>
 800ac26:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 800ac2a:	b163      	cbz	r3, 800ac46 <uxr_reset_stream_storage+0x7e>
 800ac2c:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 800ac30:	2500      	movs	r5, #0
 800ac32:	4630      	mov	r0, r6
 800ac34:	f003 fc1a 	bl	800e46c <uxr_reset_input_reliable_stream>
 800ac38:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 800ac3c:	3501      	adds	r5, #1
 800ac3e:	42ab      	cmp	r3, r5
 800ac40:	f106 0618 	add.w	r6, r6, #24
 800ac44:	d8f5      	bhi.n	800ac32 <uxr_reset_stream_storage+0x6a>
 800ac46:	bd70      	pop	{r4, r5, r6, pc}

0800ac48 <uxr_add_output_best_effort_buffer>:
 800ac48:	b510      	push	{r4, lr}
 800ac4a:	7c04      	ldrb	r4, [r0, #16]
 800ac4c:	f104 0c01 	add.w	ip, r4, #1
 800ac50:	b082      	sub	sp, #8
 800ac52:	f880 c010 	strb.w	ip, [r0, #16]
 800ac56:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 800ac5a:	f003 fd87 	bl	800e76c <uxr_init_output_best_effort_stream>
 800ac5e:	2201      	movs	r2, #1
 800ac60:	4611      	mov	r1, r2
 800ac62:	4620      	mov	r0, r4
 800ac64:	b002      	add	sp, #8
 800ac66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac6a:	f7ff bf4f 	b.w	800ab0c <uxr_stream_id>
 800ac6e:	bf00      	nop

0800ac70 <uxr_add_output_reliable_buffer>:
 800ac70:	b510      	push	{r4, lr}
 800ac72:	b084      	sub	sp, #16
 800ac74:	4684      	mov	ip, r0
 800ac76:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800ac7a:	9000      	str	r0, [sp, #0]
 800ac7c:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 800ac80:	2028      	movs	r0, #40	@ 0x28
 800ac82:	fb00 c004 	mla	r0, r0, r4, ip
 800ac86:	f104 0e01 	add.w	lr, r4, #1
 800ac8a:	3018      	adds	r0, #24
 800ac8c:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 800ac90:	f003 fdea 	bl	800e868 <uxr_init_output_reliable_stream>
 800ac94:	2201      	movs	r2, #1
 800ac96:	2102      	movs	r1, #2
 800ac98:	4620      	mov	r0, r4
 800ac9a:	b004      	add	sp, #16
 800ac9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aca0:	f7ff bf34 	b.w	800ab0c <uxr_stream_id>

0800aca4 <uxr_add_input_best_effort_buffer>:
 800aca4:	b510      	push	{r4, lr}
 800aca6:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 800acaa:	4603      	mov	r3, r0
 800acac:	1c62      	adds	r2, r4, #1
 800acae:	f104 0021 	add.w	r0, r4, #33	@ 0x21
 800acb2:	b082      	sub	sp, #8
 800acb4:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800acb8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800acbc:	f003 fb5e 	bl	800e37c <uxr_init_input_best_effort_stream>
 800acc0:	2200      	movs	r2, #0
 800acc2:	2101      	movs	r1, #1
 800acc4:	4620      	mov	r0, r4
 800acc6:	b002      	add	sp, #8
 800acc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800accc:	f7ff bf1e 	b.w	800ab0c <uxr_stream_id>

0800acd0 <uxr_add_input_reliable_buffer>:
 800acd0:	b510      	push	{r4, lr}
 800acd2:	b084      	sub	sp, #16
 800acd4:	4684      	mov	ip, r0
 800acd6:	9806      	ldr	r0, [sp, #24]
 800acd8:	9000      	str	r0, [sp, #0]
 800acda:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 800acde:	2018      	movs	r0, #24
 800ace0:	fb00 c004 	mla	r0, r0, r4, ip
 800ace4:	f104 0e01 	add.w	lr, r4, #1
 800ace8:	3048      	adds	r0, #72	@ 0x48
 800acea:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 800acee:	f003 fb91 	bl	800e414 <uxr_init_input_reliable_stream>
 800acf2:	2200      	movs	r2, #0
 800acf4:	2102      	movs	r1, #2
 800acf6:	4620      	mov	r0, r4
 800acf8:	b004      	add	sp, #16
 800acfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800acfe:	f7ff bf05 	b.w	800ab0c <uxr_stream_id>
 800ad02:	bf00      	nop

0800ad04 <uxr_get_output_best_effort_stream>:
 800ad04:	7c03      	ldrb	r3, [r0, #16]
 800ad06:	428b      	cmp	r3, r1
 800ad08:	bf8c      	ite	hi
 800ad0a:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 800ad0e:	2000      	movls	r0, #0
 800ad10:	4770      	bx	lr
 800ad12:	bf00      	nop

0800ad14 <uxr_get_output_reliable_stream>:
 800ad14:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800ad18:	428b      	cmp	r3, r1
 800ad1a:	bf83      	ittte	hi
 800ad1c:	2328      	movhi	r3, #40	@ 0x28
 800ad1e:	fb03 0001 	mlahi	r0, r3, r1, r0
 800ad22:	3018      	addhi	r0, #24
 800ad24:	2000      	movls	r0, #0
 800ad26:	4770      	bx	lr

0800ad28 <uxr_get_input_best_effort_stream>:
 800ad28:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800ad2c:	428b      	cmp	r3, r1
 800ad2e:	bf86      	itte	hi
 800ad30:	3121      	addhi	r1, #33	@ 0x21
 800ad32:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 800ad36:	2000      	movls	r0, #0
 800ad38:	4770      	bx	lr
 800ad3a:	bf00      	nop

0800ad3c <uxr_get_input_reliable_stream>:
 800ad3c:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 800ad40:	428b      	cmp	r3, r1
 800ad42:	bf83      	ittte	hi
 800ad44:	2318      	movhi	r3, #24
 800ad46:	fb03 0001 	mlahi	r0, r3, r1, r0
 800ad4a:	3048      	addhi	r0, #72	@ 0x48
 800ad4c:	2000      	movls	r0, #0
 800ad4e:	4770      	bx	lr

0800ad50 <uxr_output_streams_confirmed>:
 800ad50:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800ad54:	b183      	cbz	r3, 800ad78 <uxr_output_streams_confirmed+0x28>
 800ad56:	b570      	push	{r4, r5, r6, lr}
 800ad58:	4606      	mov	r6, r0
 800ad5a:	f100 0518 	add.w	r5, r0, #24
 800ad5e:	2400      	movs	r4, #0
 800ad60:	e001      	b.n	800ad66 <uxr_output_streams_confirmed+0x16>
 800ad62:	3528      	adds	r5, #40	@ 0x28
 800ad64:	b138      	cbz	r0, 800ad76 <uxr_output_streams_confirmed+0x26>
 800ad66:	4628      	mov	r0, r5
 800ad68:	f004 f826 	bl	800edb8 <uxr_is_output_up_to_date>
 800ad6c:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 800ad70:	3401      	adds	r4, #1
 800ad72:	42a3      	cmp	r3, r4
 800ad74:	d8f5      	bhi.n	800ad62 <uxr_output_streams_confirmed+0x12>
 800ad76:	bd70      	pop	{r4, r5, r6, pc}
 800ad78:	2001      	movs	r0, #1
 800ad7a:	4770      	bx	lr

0800ad7c <uxr_buffer_submessage_header>:
 800ad7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad7e:	4604      	mov	r4, r0
 800ad80:	460e      	mov	r6, r1
 800ad82:	2104      	movs	r1, #4
 800ad84:	4615      	mov	r5, r2
 800ad86:	461f      	mov	r7, r3
 800ad88:	f7fe fc88 	bl	800969c <ucdr_align_to>
 800ad8c:	2301      	movs	r3, #1
 800ad8e:	ea47 0203 	orr.w	r2, r7, r3
 800ad92:	4631      	mov	r1, r6
 800ad94:	7523      	strb	r3, [r4, #20]
 800ad96:	4620      	mov	r0, r4
 800ad98:	462b      	mov	r3, r5
 800ad9a:	f000 fa27 	bl	800b1ec <uxr_serialize_submessage_header>
 800ad9e:	4620      	mov	r0, r4
 800ada0:	f7fe fc92 	bl	80096c8 <ucdr_buffer_remaining>
 800ada4:	42a8      	cmp	r0, r5
 800ada6:	bf34      	ite	cc
 800ada8:	2000      	movcc	r0, #0
 800adaa:	2001      	movcs	r0, #1
 800adac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800adae:	bf00      	nop

0800adb0 <uxr_read_submessage_header>:
 800adb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800adb4:	4604      	mov	r4, r0
 800adb6:	460d      	mov	r5, r1
 800adb8:	2104      	movs	r1, #4
 800adba:	4616      	mov	r6, r2
 800adbc:	4698      	mov	r8, r3
 800adbe:	f7fe fc6d 	bl	800969c <ucdr_align_to>
 800adc2:	4620      	mov	r0, r4
 800adc4:	f7fe fc80 	bl	80096c8 <ucdr_buffer_remaining>
 800adc8:	2803      	cmp	r0, #3
 800adca:	bf8c      	ite	hi
 800adcc:	2701      	movhi	r7, #1
 800adce:	2700      	movls	r7, #0
 800add0:	d802      	bhi.n	800add8 <uxr_read_submessage_header+0x28>
 800add2:	4638      	mov	r0, r7
 800add4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800add8:	4633      	mov	r3, r6
 800adda:	4642      	mov	r2, r8
 800addc:	4620      	mov	r0, r4
 800adde:	4629      	mov	r1, r5
 800ade0:	f000 fa18 	bl	800b214 <uxr_deserialize_submessage_header>
 800ade4:	f898 3000 	ldrb.w	r3, [r8]
 800ade8:	f003 0201 	and.w	r2, r3, #1
 800adec:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800adf0:	f888 3000 	strb.w	r3, [r8]
 800adf4:	7522      	strb	r2, [r4, #20]
 800adf6:	4638      	mov	r0, r7
 800adf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800adfc <uxr_submessage_padding>:
 800adfc:	f010 0003 	ands.w	r0, r0, #3
 800ae00:	bf18      	it	ne
 800ae02:	f1c0 0004 	rsbne	r0, r0, #4
 800ae06:	4770      	bx	lr

0800ae08 <uxr_millis>:
 800ae08:	b510      	push	{r4, lr}
 800ae0a:	b084      	sub	sp, #16
 800ae0c:	4669      	mov	r1, sp
 800ae0e:	2001      	movs	r0, #1
 800ae10:	f7f6 f97a 	bl	8001108 <clock_gettime>
 800ae14:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 800ae18:	4906      	ldr	r1, [pc, #24]	@ (800ae34 <uxr_millis+0x2c>)
 800ae1a:	fba0 0301 	umull	r0, r3, r0, r1
 800ae1e:	1900      	adds	r0, r0, r4
 800ae20:	fb01 3102 	mla	r1, r1, r2, r3
 800ae24:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 800ae28:	4a03      	ldr	r2, [pc, #12]	@ (800ae38 <uxr_millis+0x30>)
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	f7f5 fa58 	bl	80002e0 <__aeabi_ldivmod>
 800ae30:	b004      	add	sp, #16
 800ae32:	bd10      	pop	{r4, pc}
 800ae34:	3b9aca00 	.word	0x3b9aca00
 800ae38:	000f4240 	.word	0x000f4240

0800ae3c <uxr_nanos>:
 800ae3c:	b510      	push	{r4, lr}
 800ae3e:	b084      	sub	sp, #16
 800ae40:	4669      	mov	r1, sp
 800ae42:	2001      	movs	r0, #1
 800ae44:	f7f6 f960 	bl	8001108 <clock_gettime>
 800ae48:	4a06      	ldr	r2, [pc, #24]	@ (800ae64 <uxr_nanos+0x28>)
 800ae4a:	9800      	ldr	r0, [sp, #0]
 800ae4c:	9902      	ldr	r1, [sp, #8]
 800ae4e:	9c01      	ldr	r4, [sp, #4]
 800ae50:	fba0 0302 	umull	r0, r3, r0, r2
 800ae54:	1840      	adds	r0, r0, r1
 800ae56:	fb02 3304 	mla	r3, r2, r4, r3
 800ae5a:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 800ae5e:	b004      	add	sp, #16
 800ae60:	bd10      	pop	{r4, pc}
 800ae62:	bf00      	nop
 800ae64:	3b9aca00 	.word	0x3b9aca00

0800ae68 <on_full_output_buffer_fragmented>:
 800ae68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae6c:	460c      	mov	r4, r1
 800ae6e:	b08a      	sub	sp, #40	@ 0x28
 800ae70:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 800ae74:	4606      	mov	r6, r0
 800ae76:	f104 0008 	add.w	r0, r4, #8
 800ae7a:	f7ff ff4b 	bl	800ad14 <uxr_get_output_reliable_stream>
 800ae7e:	4605      	mov	r5, r0
 800ae80:	f003 ffa4 	bl	800edcc <get_available_free_slots>
 800ae84:	b968      	cbnz	r0, 800aea2 <on_full_output_buffer_fragmented+0x3a>
 800ae86:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 800ae8a:	4620      	mov	r0, r4
 800ae8c:	4798      	blx	r3
 800ae8e:	b918      	cbnz	r0, 800ae98 <on_full_output_buffer_fragmented+0x30>
 800ae90:	2001      	movs	r0, #1
 800ae92:	b00a      	add	sp, #40	@ 0x28
 800ae94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae98:	4628      	mov	r0, r5
 800ae9a:	f003 ff97 	bl	800edcc <get_available_free_slots>
 800ae9e:	2800      	cmp	r0, #0
 800aea0:	d0f6      	beq.n	800ae90 <on_full_output_buffer_fragmented+0x28>
 800aea2:	8929      	ldrh	r1, [r5, #8]
 800aea4:	89eb      	ldrh	r3, [r5, #14]
 800aea6:	7b28      	ldrb	r0, [r5, #12]
 800aea8:	686a      	ldr	r2, [r5, #4]
 800aeaa:	fbb2 f8f1 	udiv	r8, r2, r1
 800aeae:	fbb3 f2f1 	udiv	r2, r3, r1
 800aeb2:	fb01 3112 	mls	r1, r1, r2, r3
 800aeb6:	f5c0 407f 	rsb	r0, r0, #65280	@ 0xff00
 800aeba:	b289      	uxth	r1, r1
 800aebc:	fb08 f101 	mul.w	r1, r8, r1
 800aec0:	30fc      	adds	r0, #252	@ 0xfc
 800aec2:	f1a8 0804 	sub.w	r8, r8, #4
 800aec6:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 800aeca:	4440      	add	r0, r8
 800aecc:	b287      	uxth	r7, r0
 800aece:	1bdb      	subs	r3, r3, r7
 800aed0:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 800aed4:	682b      	ldr	r3, [r5, #0]
 800aed6:	3104      	adds	r1, #4
 800aed8:	4419      	add	r1, r3
 800aeda:	4642      	mov	r2, r8
 800aedc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aee0:	9300      	str	r3, [sp, #0]
 800aee2:	a802      	add	r0, sp, #8
 800aee4:	2300      	movs	r3, #0
 800aee6:	f7fe fbad 	bl	8009644 <ucdr_init_buffer_origin_offset>
 800aeea:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 800aeee:	f102 0308 	add.w	r3, r2, #8
 800aef2:	4543      	cmp	r3, r8
 800aef4:	d928      	bls.n	800af48 <on_full_output_buffer_fragmented+0xe0>
 800aef6:	463a      	mov	r2, r7
 800aef8:	2300      	movs	r3, #0
 800aefa:	210d      	movs	r1, #13
 800aefc:	a802      	add	r0, sp, #8
 800aefe:	f7ff ff3d 	bl	800ad7c <uxr_buffer_submessage_header>
 800af02:	8929      	ldrh	r1, [r5, #8]
 800af04:	89eb      	ldrh	r3, [r5, #14]
 800af06:	fbb3 f2f1 	udiv	r2, r3, r1
 800af0a:	fb01 3312 	mls	r3, r1, r2, r3
 800af0e:	b29b      	uxth	r3, r3
 800af10:	686a      	ldr	r2, [r5, #4]
 800af12:	fbb2 f2f1 	udiv	r2, r2, r1
 800af16:	fb02 f303 	mul.w	r3, r2, r3
 800af1a:	682a      	ldr	r2, [r5, #0]
 800af1c:	f842 8003 	str.w	r8, [r2, r3]
 800af20:	89e8      	ldrh	r0, [r5, #14]
 800af22:	2101      	movs	r1, #1
 800af24:	f004 f868 	bl	800eff8 <uxr_seq_num_add>
 800af28:	9904      	ldr	r1, [sp, #16]
 800af2a:	9a03      	ldr	r2, [sp, #12]
 800af2c:	81e8      	strh	r0, [r5, #14]
 800af2e:	1a52      	subs	r2, r2, r1
 800af30:	4630      	mov	r0, r6
 800af32:	f7fe fb99 	bl	8009668 <ucdr_init_buffer>
 800af36:	4630      	mov	r0, r6
 800af38:	490f      	ldr	r1, [pc, #60]	@ (800af78 <on_full_output_buffer_fragmented+0x110>)
 800af3a:	4622      	mov	r2, r4
 800af3c:	f7fe fb68 	bl	8009610 <ucdr_set_on_full_buffer_callback>
 800af40:	2000      	movs	r0, #0
 800af42:	b00a      	add	sp, #40	@ 0x28
 800af44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af48:	b292      	uxth	r2, r2
 800af4a:	2302      	movs	r3, #2
 800af4c:	210d      	movs	r1, #13
 800af4e:	a802      	add	r0, sp, #8
 800af50:	f7ff ff14 	bl	800ad7c <uxr_buffer_submessage_header>
 800af54:	8928      	ldrh	r0, [r5, #8]
 800af56:	89eb      	ldrh	r3, [r5, #14]
 800af58:	fbb3 f1f0 	udiv	r1, r3, r0
 800af5c:	fb00 3311 	mls	r3, r0, r1, r3
 800af60:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 800af64:	6869      	ldr	r1, [r5, #4]
 800af66:	fbb1 f1f0 	udiv	r1, r1, r0
 800af6a:	b29b      	uxth	r3, r3
 800af6c:	fb01 f303 	mul.w	r3, r1, r3
 800af70:	6829      	ldr	r1, [r5, #0]
 800af72:	3208      	adds	r2, #8
 800af74:	50ca      	str	r2, [r1, r3]
 800af76:	e7d3      	b.n	800af20 <on_full_output_buffer_fragmented+0xb8>
 800af78:	0800ae69 	.word	0x0800ae69

0800af7c <uxr_prepare_output_stream>:
 800af7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800af7e:	b087      	sub	sp, #28
 800af80:	2707      	movs	r7, #7
 800af82:	9202      	str	r2, [sp, #8]
 800af84:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800af86:	9103      	str	r1, [sp, #12]
 800af88:	2500      	movs	r5, #0
 800af8a:	3204      	adds	r2, #4
 800af8c:	e9cd 7500 	strd	r7, r5, [sp]
 800af90:	461c      	mov	r4, r3
 800af92:	4606      	mov	r6, r0
 800af94:	f7ff fc54 	bl	800a840 <uxr_prepare_stream_to_write_submessage>
 800af98:	f080 0201 	eor.w	r2, r0, #1
 800af9c:	b2d2      	uxtb	r2, r2
 800af9e:	75a2      	strb	r2, [r4, #22]
 800afa0:	b112      	cbz	r2, 800afa8 <uxr_prepare_output_stream+0x2c>
 800afa2:	4628      	mov	r0, r5
 800afa4:	b007      	add	sp, #28
 800afa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800afa8:	aa05      	add	r2, sp, #20
 800afaa:	9902      	ldr	r1, [sp, #8]
 800afac:	4630      	mov	r0, r6
 800afae:	f7ff fd7d 	bl	800aaac <uxr_init_base_object_request>
 800afb2:	a905      	add	r1, sp, #20
 800afb4:	4605      	mov	r5, r0
 800afb6:	4620      	mov	r0, r4
 800afb8:	f000 ffa0 	bl	800befc <uxr_serialize_WRITE_DATA_Payload_Data>
 800afbc:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 800afc0:	69a6      	ldr	r6, [r4, #24]
 800afc2:	69e7      	ldr	r7, [r4, #28]
 800afc4:	1a52      	subs	r2, r2, r1
 800afc6:	4620      	mov	r0, r4
 800afc8:	f7fe fb4e 	bl	8009668 <ucdr_init_buffer>
 800afcc:	4620      	mov	r0, r4
 800afce:	463a      	mov	r2, r7
 800afd0:	4631      	mov	r1, r6
 800afd2:	f7fe fb1d 	bl	8009610 <ucdr_set_on_full_buffer_callback>
 800afd6:	4628      	mov	r0, r5
 800afd8:	b007      	add	sp, #28
 800afda:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800afdc <uxr_prepare_output_stream_fragmented>:
 800afdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afe0:	b091      	sub	sp, #68	@ 0x44
 800afe2:	4605      	mov	r5, r0
 800afe4:	9105      	str	r1, [sp, #20]
 800afe6:	3008      	adds	r0, #8
 800afe8:	f3c1 2107 	ubfx	r1, r1, #8, #8
 800afec:	461e      	mov	r6, r3
 800afee:	9204      	str	r2, [sp, #16]
 800aff0:	f7ff fe90 	bl	800ad14 <uxr_get_output_reliable_stream>
 800aff4:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800aff8:	2b01      	cmp	r3, #1
 800affa:	f000 8091 	beq.w	800b120 <uxr_prepare_output_stream_fragmented+0x144>
 800affe:	4604      	mov	r4, r0
 800b000:	2800      	cmp	r0, #0
 800b002:	f000 808d 	beq.w	800b120 <uxr_prepare_output_stream_fragmented+0x144>
 800b006:	f003 fee1 	bl	800edcc <get_available_free_slots>
 800b00a:	2800      	cmp	r0, #0
 800b00c:	f000 8083 	beq.w	800b116 <uxr_prepare_output_stream_fragmented+0x13a>
 800b010:	8922      	ldrh	r2, [r4, #8]
 800b012:	89e7      	ldrh	r7, [r4, #14]
 800b014:	fbb7 f9f2 	udiv	r9, r7, r2
 800b018:	fb02 7919 	mls	r9, r2, r9, r7
 800b01c:	fa1f f989 	uxth.w	r9, r9
 800b020:	6863      	ldr	r3, [r4, #4]
 800b022:	fbb3 f2f2 	udiv	r2, r3, r2
 800b026:	6823      	ldr	r3, [r4, #0]
 800b028:	9203      	str	r2, [sp, #12]
 800b02a:	fb02 f909 	mul.w	r9, r2, r9
 800b02e:	f109 0904 	add.w	r9, r9, #4
 800b032:	4499      	add	r9, r3
 800b034:	7b23      	ldrb	r3, [r4, #12]
 800b036:	f859 8c04 	ldr.w	r8, [r9, #-4]
 800b03a:	4543      	cmp	r3, r8
 800b03c:	f1a2 0b04 	sub.w	fp, r2, #4
 800b040:	d37a      	bcc.n	800b138 <uxr_prepare_output_stream_fragmented+0x15c>
 800b042:	f1ab 0a04 	sub.w	sl, fp, #4
 800b046:	ebaa 0a03 	sub.w	sl, sl, r3
 800b04a:	465a      	mov	r2, fp
 800b04c:	2300      	movs	r3, #0
 800b04e:	4649      	mov	r1, r9
 800b050:	a808      	add	r0, sp, #32
 800b052:	f8cd 8000 	str.w	r8, [sp]
 800b056:	f7fe faf5 	bl	8009644 <ucdr_init_buffer_origin_offset>
 800b05a:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800b05c:	fa1f fa8a 	uxth.w	sl, sl
 800b060:	4652      	mov	r2, sl
 800b062:	f103 0a08 	add.w	sl, r3, #8
 800b066:	45da      	cmp	sl, fp
 800b068:	bf34      	ite	cc
 800b06a:	2302      	movcc	r3, #2
 800b06c:	2300      	movcs	r3, #0
 800b06e:	210d      	movs	r1, #13
 800b070:	a808      	add	r0, sp, #32
 800b072:	f7ff fe83 	bl	800ad7c <uxr_buffer_submessage_header>
 800b076:	8921      	ldrh	r1, [r4, #8]
 800b078:	fbb7 f2f1 	udiv	r2, r7, r1
 800b07c:	fb01 7212 	mls	r2, r1, r2, r7
 800b080:	b292      	uxth	r2, r2
 800b082:	6863      	ldr	r3, [r4, #4]
 800b084:	fbb3 f3f1 	udiv	r3, r3, r1
 800b088:	fb02 f303 	mul.w	r3, r2, r3
 800b08c:	6822      	ldr	r2, [r4, #0]
 800b08e:	4638      	mov	r0, r7
 800b090:	f842 b003 	str.w	fp, [r2, r3]
 800b094:	2101      	movs	r1, #1
 800b096:	f003 ffaf 	bl	800eff8 <uxr_seq_num_add>
 800b09a:	9b03      	ldr	r3, [sp, #12]
 800b09c:	f108 0104 	add.w	r1, r8, #4
 800b0a0:	f1a3 0208 	sub.w	r2, r3, #8
 800b0a4:	eba2 0208 	sub.w	r2, r2, r8
 800b0a8:	4449      	add	r1, r9
 800b0aa:	4607      	mov	r7, r0
 800b0ac:	4630      	mov	r0, r6
 800b0ae:	f7fe fadb 	bl	8009668 <ucdr_init_buffer>
 800b0b2:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800b0b4:	81e7      	strh	r7, [r4, #14]
 800b0b6:	1d1a      	adds	r2, r3, #4
 800b0b8:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800b0bc:	bf28      	it	cs
 800b0be:	2200      	movcs	r2, #0
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	b292      	uxth	r2, r2
 800b0c4:	2107      	movs	r1, #7
 800b0c6:	4630      	mov	r0, r6
 800b0c8:	f7ff fe58 	bl	800ad7c <uxr_buffer_submessage_header>
 800b0cc:	9904      	ldr	r1, [sp, #16]
 800b0ce:	aa07      	add	r2, sp, #28
 800b0d0:	4628      	mov	r0, r5
 800b0d2:	f7ff fceb 	bl	800aaac <uxr_init_base_object_request>
 800b0d6:	4604      	mov	r4, r0
 800b0d8:	b318      	cbz	r0, 800b122 <uxr_prepare_output_stream_fragmented+0x146>
 800b0da:	a907      	add	r1, sp, #28
 800b0dc:	4630      	mov	r0, r6
 800b0de:	f000 ff0d 	bl	800befc <uxr_serialize_WRITE_DATA_Payload_Data>
 800b0e2:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 800b0e6:	4630      	mov	r0, r6
 800b0e8:	1a52      	subs	r2, r2, r1
 800b0ea:	f7fe fabd 	bl	8009668 <ucdr_init_buffer>
 800b0ee:	9b05      	ldr	r3, [sp, #20]
 800b0f0:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 800b0f4:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800b0f6:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 800b0fa:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 800b0fc:	491b      	ldr	r1, [pc, #108]	@ (800b16c <uxr_prepare_output_stream_fragmented+0x190>)
 800b0fe:	f8c5 a0c4 	str.w	sl, [r5, #196]	@ 0xc4
 800b102:	4630      	mov	r0, r6
 800b104:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 800b108:	462a      	mov	r2, r5
 800b10a:	f7fe fa81 	bl	8009610 <ucdr_set_on_full_buffer_callback>
 800b10e:	4620      	mov	r0, r4
 800b110:	b011      	add	sp, #68	@ 0x44
 800b112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b116:	991c      	ldr	r1, [sp, #112]	@ 0x70
 800b118:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800b11a:	4628      	mov	r0, r5
 800b11c:	4798      	blx	r3
 800b11e:	b920      	cbnz	r0, 800b12a <uxr_prepare_output_stream_fragmented+0x14e>
 800b120:	2400      	movs	r4, #0
 800b122:	4620      	mov	r0, r4
 800b124:	b011      	add	sp, #68	@ 0x44
 800b126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b12a:	4620      	mov	r0, r4
 800b12c:	f003 fe4e 	bl	800edcc <get_available_free_slots>
 800b130:	2800      	cmp	r0, #0
 800b132:	f47f af6d 	bne.w	800b010 <uxr_prepare_output_stream_fragmented+0x34>
 800b136:	e7f3      	b.n	800b120 <uxr_prepare_output_stream_fragmented+0x144>
 800b138:	4638      	mov	r0, r7
 800b13a:	2101      	movs	r1, #1
 800b13c:	f003 ff5c 	bl	800eff8 <uxr_seq_num_add>
 800b140:	8921      	ldrh	r1, [r4, #8]
 800b142:	fbb0 f2f1 	udiv	r2, r0, r1
 800b146:	fb01 0912 	mls	r9, r1, r2, r0
 800b14a:	fa1f f289 	uxth.w	r2, r9
 800b14e:	6863      	ldr	r3, [r4, #4]
 800b150:	fbb3 f9f1 	udiv	r9, r3, r1
 800b154:	6823      	ldr	r3, [r4, #0]
 800b156:	fb02 f909 	mul.w	r9, r2, r9
 800b15a:	f109 0904 	add.w	r9, r9, #4
 800b15e:	4499      	add	r9, r3
 800b160:	4607      	mov	r7, r0
 800b162:	7b23      	ldrb	r3, [r4, #12]
 800b164:	f859 8c04 	ldr.w	r8, [r9, #-4]
 800b168:	e76b      	b.n	800b042 <uxr_prepare_output_stream_fragmented+0x66>
 800b16a:	bf00      	nop
 800b16c:	0800ae69 	.word	0x0800ae69

0800b170 <uxr_serialize_message_header>:
 800b170:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b172:	b083      	sub	sp, #12
 800b174:	4616      	mov	r6, r2
 800b176:	4604      	mov	r4, r0
 800b178:	9301      	str	r3, [sp, #4]
 800b17a:	460d      	mov	r5, r1
 800b17c:	9f08      	ldr	r7, [sp, #32]
 800b17e:	f7fd fac7 	bl	8008710 <ucdr_serialize_uint8_t>
 800b182:	4631      	mov	r1, r6
 800b184:	4620      	mov	r0, r4
 800b186:	f7fd fac3 	bl	8008710 <ucdr_serialize_uint8_t>
 800b18a:	9a01      	ldr	r2, [sp, #4]
 800b18c:	2101      	movs	r1, #1
 800b18e:	4620      	mov	r0, r4
 800b190:	f7fd fb6a 	bl	8008868 <ucdr_serialize_endian_uint16_t>
 800b194:	062b      	lsls	r3, r5, #24
 800b196:	d501      	bpl.n	800b19c <uxr_serialize_message_header+0x2c>
 800b198:	b003      	add	sp, #12
 800b19a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b19c:	2204      	movs	r2, #4
 800b19e:	4639      	mov	r1, r7
 800b1a0:	4620      	mov	r0, r4
 800b1a2:	b003      	add	sp, #12
 800b1a4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800b1a8:	f002 beee 	b.w	800df88 <ucdr_serialize_array_uint8_t>

0800b1ac <uxr_deserialize_message_header>:
 800b1ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b1ae:	b083      	sub	sp, #12
 800b1b0:	4616      	mov	r6, r2
 800b1b2:	4604      	mov	r4, r0
 800b1b4:	9301      	str	r3, [sp, #4]
 800b1b6:	460d      	mov	r5, r1
 800b1b8:	9f08      	ldr	r7, [sp, #32]
 800b1ba:	f7fd fabf 	bl	800873c <ucdr_deserialize_uint8_t>
 800b1be:	4631      	mov	r1, r6
 800b1c0:	4620      	mov	r0, r4
 800b1c2:	f7fd fabb 	bl	800873c <ucdr_deserialize_uint8_t>
 800b1c6:	9a01      	ldr	r2, [sp, #4]
 800b1c8:	2101      	movs	r1, #1
 800b1ca:	4620      	mov	r0, r4
 800b1cc:	f7fd fc40 	bl	8008a50 <ucdr_deserialize_endian_uint16_t>
 800b1d0:	f995 3000 	ldrsb.w	r3, [r5]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	da01      	bge.n	800b1dc <uxr_deserialize_message_header+0x30>
 800b1d8:	b003      	add	sp, #12
 800b1da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b1dc:	2204      	movs	r2, #4
 800b1de:	4639      	mov	r1, r7
 800b1e0:	4620      	mov	r0, r4
 800b1e2:	b003      	add	sp, #12
 800b1e4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800b1e8:	f002 bf32 	b.w	800e050 <ucdr_deserialize_array_uint8_t>

0800b1ec <uxr_serialize_submessage_header>:
 800b1ec:	b530      	push	{r4, r5, lr}
 800b1ee:	b083      	sub	sp, #12
 800b1f0:	4615      	mov	r5, r2
 800b1f2:	4604      	mov	r4, r0
 800b1f4:	9301      	str	r3, [sp, #4]
 800b1f6:	f7fd fa8b 	bl	8008710 <ucdr_serialize_uint8_t>
 800b1fa:	4629      	mov	r1, r5
 800b1fc:	4620      	mov	r0, r4
 800b1fe:	f7fd fa87 	bl	8008710 <ucdr_serialize_uint8_t>
 800b202:	9a01      	ldr	r2, [sp, #4]
 800b204:	2101      	movs	r1, #1
 800b206:	4620      	mov	r0, r4
 800b208:	b003      	add	sp, #12
 800b20a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b20e:	f7fd bb2b 	b.w	8008868 <ucdr_serialize_endian_uint16_t>
 800b212:	bf00      	nop

0800b214 <uxr_deserialize_submessage_header>:
 800b214:	b530      	push	{r4, r5, lr}
 800b216:	b083      	sub	sp, #12
 800b218:	4615      	mov	r5, r2
 800b21a:	4604      	mov	r4, r0
 800b21c:	9301      	str	r3, [sp, #4]
 800b21e:	f7fd fa8d 	bl	800873c <ucdr_deserialize_uint8_t>
 800b222:	4629      	mov	r1, r5
 800b224:	4620      	mov	r0, r4
 800b226:	f7fd fa89 	bl	800873c <ucdr_deserialize_uint8_t>
 800b22a:	9a01      	ldr	r2, [sp, #4]
 800b22c:	2101      	movs	r1, #1
 800b22e:	4620      	mov	r0, r4
 800b230:	b003      	add	sp, #12
 800b232:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b236:	f7fd bc0b 	b.w	8008a50 <ucdr_deserialize_endian_uint16_t>
 800b23a:	bf00      	nop

0800b23c <uxr_serialize_CLIENT_Representation>:
 800b23c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b240:	2204      	movs	r2, #4
 800b242:	460e      	mov	r6, r1
 800b244:	4605      	mov	r5, r0
 800b246:	f002 fe9f 	bl	800df88 <ucdr_serialize_array_uint8_t>
 800b24a:	2202      	movs	r2, #2
 800b24c:	4607      	mov	r7, r0
 800b24e:	1d31      	adds	r1, r6, #4
 800b250:	4628      	mov	r0, r5
 800b252:	f002 fe99 	bl	800df88 <ucdr_serialize_array_uint8_t>
 800b256:	4038      	ands	r0, r7
 800b258:	2202      	movs	r2, #2
 800b25a:	1db1      	adds	r1, r6, #6
 800b25c:	b2c7      	uxtb	r7, r0
 800b25e:	4628      	mov	r0, r5
 800b260:	f002 fe92 	bl	800df88 <ucdr_serialize_array_uint8_t>
 800b264:	2204      	movs	r2, #4
 800b266:	4007      	ands	r7, r0
 800b268:	f106 0108 	add.w	r1, r6, #8
 800b26c:	4628      	mov	r0, r5
 800b26e:	f002 fe8b 	bl	800df88 <ucdr_serialize_array_uint8_t>
 800b272:	7b31      	ldrb	r1, [r6, #12]
 800b274:	4007      	ands	r7, r0
 800b276:	4628      	mov	r0, r5
 800b278:	f7fd fa4a 	bl	8008710 <ucdr_serialize_uint8_t>
 800b27c:	7b71      	ldrb	r1, [r6, #13]
 800b27e:	4007      	ands	r7, r0
 800b280:	4628      	mov	r0, r5
 800b282:	f7fd fa17 	bl	80086b4 <ucdr_serialize_bool>
 800b286:	7b73      	ldrb	r3, [r6, #13]
 800b288:	ea07 0800 	and.w	r8, r7, r0
 800b28c:	b93b      	cbnz	r3, 800b29e <uxr_serialize_CLIENT_Representation+0x62>
 800b28e:	8bb1      	ldrh	r1, [r6, #28]
 800b290:	4628      	mov	r0, r5
 800b292:	f7fd fa69 	bl	8008768 <ucdr_serialize_uint16_t>
 800b296:	ea08 0000 	and.w	r0, r8, r0
 800b29a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b29e:	6931      	ldr	r1, [r6, #16]
 800b2a0:	4628      	mov	r0, r5
 800b2a2:	f7fd fc4b 	bl	8008b3c <ucdr_serialize_uint32_t>
 800b2a6:	6933      	ldr	r3, [r6, #16]
 800b2a8:	b1e3      	cbz	r3, 800b2e4 <uxr_serialize_CLIENT_Representation+0xa8>
 800b2aa:	b1c0      	cbz	r0, 800b2de <uxr_serialize_CLIENT_Representation+0xa2>
 800b2ac:	4637      	mov	r7, r6
 800b2ae:	f04f 0900 	mov.w	r9, #0
 800b2b2:	e001      	b.n	800b2b8 <uxr_serialize_CLIENT_Representation+0x7c>
 800b2b4:	3708      	adds	r7, #8
 800b2b6:	b194      	cbz	r4, 800b2de <uxr_serialize_CLIENT_Representation+0xa2>
 800b2b8:	6979      	ldr	r1, [r7, #20]
 800b2ba:	4628      	mov	r0, r5
 800b2bc:	f002 ff84 	bl	800e1c8 <ucdr_serialize_string>
 800b2c0:	69b9      	ldr	r1, [r7, #24]
 800b2c2:	4604      	mov	r4, r0
 800b2c4:	4628      	mov	r0, r5
 800b2c6:	f002 ff7f 	bl	800e1c8 <ucdr_serialize_string>
 800b2ca:	6933      	ldr	r3, [r6, #16]
 800b2cc:	f109 0901 	add.w	r9, r9, #1
 800b2d0:	4004      	ands	r4, r0
 800b2d2:	4599      	cmp	r9, r3
 800b2d4:	b2e4      	uxtb	r4, r4
 800b2d6:	d3ed      	bcc.n	800b2b4 <uxr_serialize_CLIENT_Representation+0x78>
 800b2d8:	ea08 0804 	and.w	r8, r8, r4
 800b2dc:	e7d7      	b.n	800b28e <uxr_serialize_CLIENT_Representation+0x52>
 800b2de:	f04f 0800 	mov.w	r8, #0
 800b2e2:	e7d4      	b.n	800b28e <uxr_serialize_CLIENT_Representation+0x52>
 800b2e4:	ea08 0800 	and.w	r8, r8, r0
 800b2e8:	e7d1      	b.n	800b28e <uxr_serialize_CLIENT_Representation+0x52>
 800b2ea:	bf00      	nop

0800b2ec <uxr_deserialize_CLIENT_Representation>:
 800b2ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b2f0:	2204      	movs	r2, #4
 800b2f2:	460c      	mov	r4, r1
 800b2f4:	4605      	mov	r5, r0
 800b2f6:	f002 feab 	bl	800e050 <ucdr_deserialize_array_uint8_t>
 800b2fa:	2202      	movs	r2, #2
 800b2fc:	4607      	mov	r7, r0
 800b2fe:	1d21      	adds	r1, r4, #4
 800b300:	4628      	mov	r0, r5
 800b302:	f002 fea5 	bl	800e050 <ucdr_deserialize_array_uint8_t>
 800b306:	4038      	ands	r0, r7
 800b308:	2202      	movs	r2, #2
 800b30a:	1da1      	adds	r1, r4, #6
 800b30c:	b2c6      	uxtb	r6, r0
 800b30e:	4628      	mov	r0, r5
 800b310:	f002 fe9e 	bl	800e050 <ucdr_deserialize_array_uint8_t>
 800b314:	2204      	movs	r2, #4
 800b316:	4006      	ands	r6, r0
 800b318:	f104 0108 	add.w	r1, r4, #8
 800b31c:	4628      	mov	r0, r5
 800b31e:	f002 fe97 	bl	800e050 <ucdr_deserialize_array_uint8_t>
 800b322:	f104 010c 	add.w	r1, r4, #12
 800b326:	4006      	ands	r6, r0
 800b328:	4628      	mov	r0, r5
 800b32a:	f7fd fa07 	bl	800873c <ucdr_deserialize_uint8_t>
 800b32e:	f104 010d 	add.w	r1, r4, #13
 800b332:	ea06 0700 	and.w	r7, r6, r0
 800b336:	4628      	mov	r0, r5
 800b338:	f7fd f9d2 	bl	80086e0 <ucdr_deserialize_bool>
 800b33c:	7b63      	ldrb	r3, [r4, #13]
 800b33e:	4007      	ands	r7, r0
 800b340:	b93b      	cbnz	r3, 800b352 <uxr_deserialize_CLIENT_Representation+0x66>
 800b342:	f104 011c 	add.w	r1, r4, #28
 800b346:	4628      	mov	r0, r5
 800b348:	f7fd fb0e 	bl	8008968 <ucdr_deserialize_uint16_t>
 800b34c:	4038      	ands	r0, r7
 800b34e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b352:	f104 0110 	add.w	r1, r4, #16
 800b356:	4628      	mov	r0, r5
 800b358:	f7fd fd20 	bl	8008d9c <ucdr_deserialize_uint32_t>
 800b35c:	6923      	ldr	r3, [r4, #16]
 800b35e:	2b01      	cmp	r3, #1
 800b360:	d903      	bls.n	800b36a <uxr_deserialize_CLIENT_Representation+0x7e>
 800b362:	2301      	movs	r3, #1
 800b364:	75ab      	strb	r3, [r5, #22]
 800b366:	2700      	movs	r7, #0
 800b368:	e7eb      	b.n	800b342 <uxr_deserialize_CLIENT_Representation+0x56>
 800b36a:	b30b      	cbz	r3, 800b3b0 <uxr_deserialize_CLIENT_Representation+0xc4>
 800b36c:	2800      	cmp	r0, #0
 800b36e:	d0fa      	beq.n	800b366 <uxr_deserialize_CLIENT_Representation+0x7a>
 800b370:	46a0      	mov	r8, r4
 800b372:	f04f 0900 	mov.w	r9, #0
 800b376:	e001      	b.n	800b37c <uxr_deserialize_CLIENT_Representation+0x90>
 800b378:	2e00      	cmp	r6, #0
 800b37a:	d0f4      	beq.n	800b366 <uxr_deserialize_CLIENT_Representation+0x7a>
 800b37c:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800b380:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b384:	4628      	mov	r0, r5
 800b386:	f002 ff2f 	bl	800e1e8 <ucdr_deserialize_string>
 800b38a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b38e:	4606      	mov	r6, r0
 800b390:	f8d8 1018 	ldr.w	r1, [r8, #24]
 800b394:	4628      	mov	r0, r5
 800b396:	f002 ff27 	bl	800e1e8 <ucdr_deserialize_string>
 800b39a:	6923      	ldr	r3, [r4, #16]
 800b39c:	f109 0901 	add.w	r9, r9, #1
 800b3a0:	4006      	ands	r6, r0
 800b3a2:	4599      	cmp	r9, r3
 800b3a4:	f108 0808 	add.w	r8, r8, #8
 800b3a8:	b2f6      	uxtb	r6, r6
 800b3aa:	d3e5      	bcc.n	800b378 <uxr_deserialize_CLIENT_Representation+0x8c>
 800b3ac:	4037      	ands	r7, r6
 800b3ae:	e7c8      	b.n	800b342 <uxr_deserialize_CLIENT_Representation+0x56>
 800b3b0:	4007      	ands	r7, r0
 800b3b2:	e7c6      	b.n	800b342 <uxr_deserialize_CLIENT_Representation+0x56>

0800b3b4 <uxr_serialize_AGENT_Representation>:
 800b3b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b3b8:	2204      	movs	r2, #4
 800b3ba:	460f      	mov	r7, r1
 800b3bc:	4605      	mov	r5, r0
 800b3be:	f002 fde3 	bl	800df88 <ucdr_serialize_array_uint8_t>
 800b3c2:	2202      	movs	r2, #2
 800b3c4:	4604      	mov	r4, r0
 800b3c6:	1d39      	adds	r1, r7, #4
 800b3c8:	4628      	mov	r0, r5
 800b3ca:	f002 fddd 	bl	800df88 <ucdr_serialize_array_uint8_t>
 800b3ce:	4020      	ands	r0, r4
 800b3d0:	2202      	movs	r2, #2
 800b3d2:	1db9      	adds	r1, r7, #6
 800b3d4:	b2c4      	uxtb	r4, r0
 800b3d6:	4628      	mov	r0, r5
 800b3d8:	f002 fdd6 	bl	800df88 <ucdr_serialize_array_uint8_t>
 800b3dc:	7a39      	ldrb	r1, [r7, #8]
 800b3de:	4004      	ands	r4, r0
 800b3e0:	4628      	mov	r0, r5
 800b3e2:	f7fd f967 	bl	80086b4 <ucdr_serialize_bool>
 800b3e6:	7a3b      	ldrb	r3, [r7, #8]
 800b3e8:	ea00 0804 	and.w	r8, r0, r4
 800b3ec:	b913      	cbnz	r3, 800b3f4 <uxr_serialize_AGENT_Representation+0x40>
 800b3ee:	4640      	mov	r0, r8
 800b3f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b3f4:	68f9      	ldr	r1, [r7, #12]
 800b3f6:	4628      	mov	r0, r5
 800b3f8:	f7fd fba0 	bl	8008b3c <ucdr_serialize_uint32_t>
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	b303      	cbz	r3, 800b442 <uxr_serialize_AGENT_Representation+0x8e>
 800b400:	b1d0      	cbz	r0, 800b438 <uxr_serialize_AGENT_Representation+0x84>
 800b402:	463e      	mov	r6, r7
 800b404:	f04f 0900 	mov.w	r9, #0
 800b408:	e001      	b.n	800b40e <uxr_serialize_AGENT_Representation+0x5a>
 800b40a:	3608      	adds	r6, #8
 800b40c:	b1a4      	cbz	r4, 800b438 <uxr_serialize_AGENT_Representation+0x84>
 800b40e:	6931      	ldr	r1, [r6, #16]
 800b410:	4628      	mov	r0, r5
 800b412:	f002 fed9 	bl	800e1c8 <ucdr_serialize_string>
 800b416:	6971      	ldr	r1, [r6, #20]
 800b418:	4604      	mov	r4, r0
 800b41a:	4628      	mov	r0, r5
 800b41c:	f002 fed4 	bl	800e1c8 <ucdr_serialize_string>
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	f109 0901 	add.w	r9, r9, #1
 800b426:	4004      	ands	r4, r0
 800b428:	4599      	cmp	r9, r3
 800b42a:	b2e4      	uxtb	r4, r4
 800b42c:	d3ed      	bcc.n	800b40a <uxr_serialize_AGENT_Representation+0x56>
 800b42e:	ea08 0804 	and.w	r8, r8, r4
 800b432:	4640      	mov	r0, r8
 800b434:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b438:	f04f 0800 	mov.w	r8, #0
 800b43c:	4640      	mov	r0, r8
 800b43e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b442:	ea08 0800 	and.w	r8, r8, r0
 800b446:	e7d2      	b.n	800b3ee <uxr_serialize_AGENT_Representation+0x3a>

0800b448 <uxr_serialize_DATAWRITER_Representation>:
 800b448:	b570      	push	{r4, r5, r6, lr}
 800b44a:	460d      	mov	r5, r1
 800b44c:	7809      	ldrb	r1, [r1, #0]
 800b44e:	4606      	mov	r6, r0
 800b450:	f7fd f95e 	bl	8008710 <ucdr_serialize_uint8_t>
 800b454:	4604      	mov	r4, r0
 800b456:	b130      	cbz	r0, 800b466 <uxr_serialize_DATAWRITER_Representation+0x1e>
 800b458:	782b      	ldrb	r3, [r5, #0]
 800b45a:	2b02      	cmp	r3, #2
 800b45c:	d00c      	beq.n	800b478 <uxr_serialize_DATAWRITER_Representation+0x30>
 800b45e:	2b03      	cmp	r3, #3
 800b460:	d010      	beq.n	800b484 <uxr_serialize_DATAWRITER_Representation+0x3c>
 800b462:	2b01      	cmp	r3, #1
 800b464:	d008      	beq.n	800b478 <uxr_serialize_DATAWRITER_Representation+0x30>
 800b466:	2202      	movs	r2, #2
 800b468:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 800b46c:	4630      	mov	r0, r6
 800b46e:	f002 fd8b 	bl	800df88 <ucdr_serialize_array_uint8_t>
 800b472:	4020      	ands	r0, r4
 800b474:	b2c0      	uxtb	r0, r0
 800b476:	bd70      	pop	{r4, r5, r6, pc}
 800b478:	6869      	ldr	r1, [r5, #4]
 800b47a:	4630      	mov	r0, r6
 800b47c:	f002 fea4 	bl	800e1c8 <ucdr_serialize_string>
 800b480:	4604      	mov	r4, r0
 800b482:	e7f0      	b.n	800b466 <uxr_serialize_DATAWRITER_Representation+0x1e>
 800b484:	4629      	mov	r1, r5
 800b486:	4630      	mov	r0, r6
 800b488:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800b48c:	3104      	adds	r1, #4
 800b48e:	f002 fe6f 	bl	800e170 <ucdr_serialize_sequence_uint8_t>
 800b492:	4604      	mov	r4, r0
 800b494:	e7e7      	b.n	800b466 <uxr_serialize_DATAWRITER_Representation+0x1e>
 800b496:	bf00      	nop

0800b498 <uxr_serialize_ObjectVariant.part.0>:
 800b498:	b570      	push	{r4, r5, r6, lr}
 800b49a:	780b      	ldrb	r3, [r1, #0]
 800b49c:	3b01      	subs	r3, #1
 800b49e:	460c      	mov	r4, r1
 800b4a0:	4605      	mov	r5, r0
 800b4a2:	2b0d      	cmp	r3, #13
 800b4a4:	d854      	bhi.n	800b550 <uxr_serialize_ObjectVariant.part.0+0xb8>
 800b4a6:	e8df f003 	tbb	[pc, r3]
 800b4aa:	0730      	.short	0x0730
 800b4ac:	07071b1b 	.word	0x07071b1b
 800b4b0:	0c530707 	.word	0x0c530707
 800b4b4:	494e0c0c 	.word	0x494e0c0c
 800b4b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b4bc:	3104      	adds	r1, #4
 800b4be:	f7ff bfc3 	b.w	800b448 <uxr_serialize_DATAWRITER_Representation>
 800b4c2:	7909      	ldrb	r1, [r1, #4]
 800b4c4:	f7fd f924 	bl	8008710 <ucdr_serialize_uint8_t>
 800b4c8:	b1e8      	cbz	r0, 800b506 <uxr_serialize_ObjectVariant.part.0+0x6e>
 800b4ca:	7923      	ldrb	r3, [r4, #4]
 800b4cc:	2b01      	cmp	r3, #1
 800b4ce:	d001      	beq.n	800b4d4 <uxr_serialize_ObjectVariant.part.0+0x3c>
 800b4d0:	2b02      	cmp	r3, #2
 800b4d2:	d13d      	bne.n	800b550 <uxr_serialize_ObjectVariant.part.0+0xb8>
 800b4d4:	68a1      	ldr	r1, [r4, #8]
 800b4d6:	4628      	mov	r0, r5
 800b4d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b4dc:	f002 be74 	b.w	800e1c8 <ucdr_serialize_string>
 800b4e0:	7909      	ldrb	r1, [r1, #4]
 800b4e2:	f7fd f915 	bl	8008710 <ucdr_serialize_uint8_t>
 800b4e6:	4606      	mov	r6, r0
 800b4e8:	b120      	cbz	r0, 800b4f4 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800b4ea:	7923      	ldrb	r3, [r4, #4]
 800b4ec:	2b02      	cmp	r3, #2
 800b4ee:	d039      	beq.n	800b564 <uxr_serialize_ObjectVariant.part.0+0xcc>
 800b4f0:	2b03      	cmp	r3, #3
 800b4f2:	d02f      	beq.n	800b554 <uxr_serialize_ObjectVariant.part.0+0xbc>
 800b4f4:	2202      	movs	r2, #2
 800b4f6:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 800b4fa:	4628      	mov	r0, r5
 800b4fc:	f002 fd44 	bl	800df88 <ucdr_serialize_array_uint8_t>
 800b500:	4030      	ands	r0, r6
 800b502:	b2c0      	uxtb	r0, r0
 800b504:	bd70      	pop	{r4, r5, r6, pc}
 800b506:	2000      	movs	r0, #0
 800b508:	bd70      	pop	{r4, r5, r6, pc}
 800b50a:	7909      	ldrb	r1, [r1, #4]
 800b50c:	f7fd f900 	bl	8008710 <ucdr_serialize_uint8_t>
 800b510:	4606      	mov	r6, r0
 800b512:	b158      	cbz	r0, 800b52c <uxr_serialize_ObjectVariant.part.0+0x94>
 800b514:	7923      	ldrb	r3, [r4, #4]
 800b516:	2b02      	cmp	r3, #2
 800b518:	d003      	beq.n	800b522 <uxr_serialize_ObjectVariant.part.0+0x8a>
 800b51a:	2b03      	cmp	r3, #3
 800b51c:	d028      	beq.n	800b570 <uxr_serialize_ObjectVariant.part.0+0xd8>
 800b51e:	2b01      	cmp	r3, #1
 800b520:	d104      	bne.n	800b52c <uxr_serialize_ObjectVariant.part.0+0x94>
 800b522:	68a1      	ldr	r1, [r4, #8]
 800b524:	4628      	mov	r0, r5
 800b526:	f002 fe4f 	bl	800e1c8 <ucdr_serialize_string>
 800b52a:	4606      	mov	r6, r0
 800b52c:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 800b530:	4628      	mov	r0, r5
 800b532:	f7fd fe29 	bl	8009188 <ucdr_serialize_int16_t>
 800b536:	4030      	ands	r0, r6
 800b538:	b2c0      	uxtb	r0, r0
 800b53a:	bd70      	pop	{r4, r5, r6, pc}
 800b53c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b540:	3104      	adds	r1, #4
 800b542:	f7ff be7b 	b.w	800b23c <uxr_serialize_CLIENT_Representation>
 800b546:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b54a:	3104      	adds	r1, #4
 800b54c:	f7ff bf32 	b.w	800b3b4 <uxr_serialize_AGENT_Representation>
 800b550:	2001      	movs	r0, #1
 800b552:	bd70      	pop	{r4, r5, r6, pc}
 800b554:	68a2      	ldr	r2, [r4, #8]
 800b556:	f104 010c 	add.w	r1, r4, #12
 800b55a:	4628      	mov	r0, r5
 800b55c:	f002 fe08 	bl	800e170 <ucdr_serialize_sequence_uint8_t>
 800b560:	4606      	mov	r6, r0
 800b562:	e7c7      	b.n	800b4f4 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800b564:	68a1      	ldr	r1, [r4, #8]
 800b566:	4628      	mov	r0, r5
 800b568:	f002 fe2e 	bl	800e1c8 <ucdr_serialize_string>
 800b56c:	4606      	mov	r6, r0
 800b56e:	e7c1      	b.n	800b4f4 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800b570:	68a2      	ldr	r2, [r4, #8]
 800b572:	f104 010c 	add.w	r1, r4, #12
 800b576:	4628      	mov	r0, r5
 800b578:	f002 fdfa 	bl	800e170 <ucdr_serialize_sequence_uint8_t>
 800b57c:	4606      	mov	r6, r0
 800b57e:	e7d5      	b.n	800b52c <uxr_serialize_ObjectVariant.part.0+0x94>

0800b580 <uxr_deserialize_DATAWRITER_Representation>:
 800b580:	b570      	push	{r4, r5, r6, lr}
 800b582:	4606      	mov	r6, r0
 800b584:	460d      	mov	r5, r1
 800b586:	f7fd f8d9 	bl	800873c <ucdr_deserialize_uint8_t>
 800b58a:	4604      	mov	r4, r0
 800b58c:	b130      	cbz	r0, 800b59c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800b58e:	782b      	ldrb	r3, [r5, #0]
 800b590:	2b02      	cmp	r3, #2
 800b592:	d00c      	beq.n	800b5ae <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800b594:	2b03      	cmp	r3, #3
 800b596:	d012      	beq.n	800b5be <uxr_deserialize_DATAWRITER_Representation+0x3e>
 800b598:	2b01      	cmp	r3, #1
 800b59a:	d008      	beq.n	800b5ae <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800b59c:	2202      	movs	r2, #2
 800b59e:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 800b5a2:	4630      	mov	r0, r6
 800b5a4:	f002 fd54 	bl	800e050 <ucdr_deserialize_array_uint8_t>
 800b5a8:	4020      	ands	r0, r4
 800b5aa:	b2c0      	uxtb	r0, r0
 800b5ac:	bd70      	pop	{r4, r5, r6, pc}
 800b5ae:	6869      	ldr	r1, [r5, #4]
 800b5b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b5b4:	4630      	mov	r0, r6
 800b5b6:	f002 fe17 	bl	800e1e8 <ucdr_deserialize_string>
 800b5ba:	4604      	mov	r4, r0
 800b5bc:	e7ee      	b.n	800b59c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800b5be:	1d2b      	adds	r3, r5, #4
 800b5c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b5c4:	f105 0108 	add.w	r1, r5, #8
 800b5c8:	4630      	mov	r0, r6
 800b5ca:	f002 fde3 	bl	800e194 <ucdr_deserialize_sequence_uint8_t>
 800b5ce:	4604      	mov	r4, r0
 800b5d0:	e7e4      	b.n	800b59c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800b5d2:	bf00      	nop

0800b5d4 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 800b5d4:	b570      	push	{r4, r5, r6, lr}
 800b5d6:	460d      	mov	r5, r1
 800b5d8:	7809      	ldrb	r1, [r1, #0]
 800b5da:	4606      	mov	r6, r0
 800b5dc:	f7fd f86a 	bl	80086b4 <ucdr_serialize_bool>
 800b5e0:	782b      	ldrb	r3, [r5, #0]
 800b5e2:	4604      	mov	r4, r0
 800b5e4:	b94b      	cbnz	r3, 800b5fa <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 800b5e6:	7a29      	ldrb	r1, [r5, #8]
 800b5e8:	4630      	mov	r0, r6
 800b5ea:	f7fd f863 	bl	80086b4 <ucdr_serialize_bool>
 800b5ee:	7a2b      	ldrb	r3, [r5, #8]
 800b5f0:	4004      	ands	r4, r0
 800b5f2:	b2e4      	uxtb	r4, r4
 800b5f4:	b943      	cbnz	r3, 800b608 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 800b5f6:	4620      	mov	r0, r4
 800b5f8:	bd70      	pop	{r4, r5, r6, pc}
 800b5fa:	6869      	ldr	r1, [r5, #4]
 800b5fc:	4630      	mov	r0, r6
 800b5fe:	f002 fde3 	bl	800e1c8 <ucdr_serialize_string>
 800b602:	4004      	ands	r4, r0
 800b604:	b2e4      	uxtb	r4, r4
 800b606:	e7ee      	b.n	800b5e6 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 800b608:	68e9      	ldr	r1, [r5, #12]
 800b60a:	4630      	mov	r0, r6
 800b60c:	f002 fddc 	bl	800e1c8 <ucdr_serialize_string>
 800b610:	4004      	ands	r4, r0
 800b612:	4620      	mov	r0, r4
 800b614:	bd70      	pop	{r4, r5, r6, pc}
 800b616:	bf00      	nop

0800b618 <uxr_serialize_OBJK_Topic_Binary>:
 800b618:	b570      	push	{r4, r5, r6, lr}
 800b61a:	460d      	mov	r5, r1
 800b61c:	6809      	ldr	r1, [r1, #0]
 800b61e:	4606      	mov	r6, r0
 800b620:	f002 fdd2 	bl	800e1c8 <ucdr_serialize_string>
 800b624:	7929      	ldrb	r1, [r5, #4]
 800b626:	4604      	mov	r4, r0
 800b628:	4630      	mov	r0, r6
 800b62a:	f7fd f843 	bl	80086b4 <ucdr_serialize_bool>
 800b62e:	792b      	ldrb	r3, [r5, #4]
 800b630:	4004      	ands	r4, r0
 800b632:	b2e4      	uxtb	r4, r4
 800b634:	b943      	cbnz	r3, 800b648 <uxr_serialize_OBJK_Topic_Binary+0x30>
 800b636:	7b29      	ldrb	r1, [r5, #12]
 800b638:	4630      	mov	r0, r6
 800b63a:	f7fd f83b 	bl	80086b4 <ucdr_serialize_bool>
 800b63e:	7b2b      	ldrb	r3, [r5, #12]
 800b640:	4004      	ands	r4, r0
 800b642:	b93b      	cbnz	r3, 800b654 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 800b644:	4620      	mov	r0, r4
 800b646:	bd70      	pop	{r4, r5, r6, pc}
 800b648:	68a9      	ldr	r1, [r5, #8]
 800b64a:	4630      	mov	r0, r6
 800b64c:	f002 fdbc 	bl	800e1c8 <ucdr_serialize_string>
 800b650:	4004      	ands	r4, r0
 800b652:	e7f0      	b.n	800b636 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 800b654:	6929      	ldr	r1, [r5, #16]
 800b656:	4630      	mov	r0, r6
 800b658:	f002 fdb6 	bl	800e1c8 <ucdr_serialize_string>
 800b65c:	4004      	ands	r4, r0
 800b65e:	b2e4      	uxtb	r4, r4
 800b660:	4620      	mov	r0, r4
 800b662:	bd70      	pop	{r4, r5, r6, pc}

0800b664 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 800b664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b668:	460c      	mov	r4, r1
 800b66a:	7809      	ldrb	r1, [r1, #0]
 800b66c:	4606      	mov	r6, r0
 800b66e:	f7fd f821 	bl	80086b4 <ucdr_serialize_bool>
 800b672:	7823      	ldrb	r3, [r4, #0]
 800b674:	4605      	mov	r5, r0
 800b676:	b96b      	cbnz	r3, 800b694 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 800b678:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 800b67c:	4630      	mov	r0, r6
 800b67e:	f7fd f819 	bl	80086b4 <ucdr_serialize_bool>
 800b682:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800b686:	4005      	ands	r5, r0
 800b688:	b2ed      	uxtb	r5, r5
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d169      	bne.n	800b762 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 800b68e:	4628      	mov	r0, r5
 800b690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b694:	6861      	ldr	r1, [r4, #4]
 800b696:	4630      	mov	r0, r6
 800b698:	f7fd fa50 	bl	8008b3c <ucdr_serialize_uint32_t>
 800b69c:	6863      	ldr	r3, [r4, #4]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d06b      	beq.n	800b77a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 800b6a2:	2800      	cmp	r0, #0
 800b6a4:	d067      	beq.n	800b776 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800b6a6:	68a1      	ldr	r1, [r4, #8]
 800b6a8:	4630      	mov	r0, r6
 800b6aa:	f002 fd8d 	bl	800e1c8 <ucdr_serialize_string>
 800b6ae:	6863      	ldr	r3, [r4, #4]
 800b6b0:	2b01      	cmp	r3, #1
 800b6b2:	d953      	bls.n	800b75c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800b6b4:	2800      	cmp	r0, #0
 800b6b6:	d05e      	beq.n	800b776 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800b6b8:	68e1      	ldr	r1, [r4, #12]
 800b6ba:	4630      	mov	r0, r6
 800b6bc:	f002 fd84 	bl	800e1c8 <ucdr_serialize_string>
 800b6c0:	6863      	ldr	r3, [r4, #4]
 800b6c2:	2b02      	cmp	r3, #2
 800b6c4:	d94a      	bls.n	800b75c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800b6c6:	2800      	cmp	r0, #0
 800b6c8:	d055      	beq.n	800b776 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800b6ca:	6921      	ldr	r1, [r4, #16]
 800b6cc:	4630      	mov	r0, r6
 800b6ce:	f002 fd7b 	bl	800e1c8 <ucdr_serialize_string>
 800b6d2:	6863      	ldr	r3, [r4, #4]
 800b6d4:	2b03      	cmp	r3, #3
 800b6d6:	d941      	bls.n	800b75c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800b6d8:	2800      	cmp	r0, #0
 800b6da:	d04c      	beq.n	800b776 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800b6dc:	6961      	ldr	r1, [r4, #20]
 800b6de:	4630      	mov	r0, r6
 800b6e0:	f002 fd72 	bl	800e1c8 <ucdr_serialize_string>
 800b6e4:	6863      	ldr	r3, [r4, #4]
 800b6e6:	2b04      	cmp	r3, #4
 800b6e8:	d938      	bls.n	800b75c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800b6ea:	2800      	cmp	r0, #0
 800b6ec:	d043      	beq.n	800b776 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800b6ee:	69a1      	ldr	r1, [r4, #24]
 800b6f0:	4630      	mov	r0, r6
 800b6f2:	f002 fd69 	bl	800e1c8 <ucdr_serialize_string>
 800b6f6:	6863      	ldr	r3, [r4, #4]
 800b6f8:	2b05      	cmp	r3, #5
 800b6fa:	d92f      	bls.n	800b75c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800b6fc:	2800      	cmp	r0, #0
 800b6fe:	d03a      	beq.n	800b776 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800b700:	69e1      	ldr	r1, [r4, #28]
 800b702:	4630      	mov	r0, r6
 800b704:	f002 fd60 	bl	800e1c8 <ucdr_serialize_string>
 800b708:	6863      	ldr	r3, [r4, #4]
 800b70a:	2b06      	cmp	r3, #6
 800b70c:	d926      	bls.n	800b75c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800b70e:	b390      	cbz	r0, 800b776 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800b710:	6a21      	ldr	r1, [r4, #32]
 800b712:	4630      	mov	r0, r6
 800b714:	f002 fd58 	bl	800e1c8 <ucdr_serialize_string>
 800b718:	6863      	ldr	r3, [r4, #4]
 800b71a:	2b07      	cmp	r3, #7
 800b71c:	d91e      	bls.n	800b75c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800b71e:	b350      	cbz	r0, 800b776 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800b720:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800b722:	4630      	mov	r0, r6
 800b724:	f002 fd50 	bl	800e1c8 <ucdr_serialize_string>
 800b728:	6863      	ldr	r3, [r4, #4]
 800b72a:	2b08      	cmp	r3, #8
 800b72c:	d916      	bls.n	800b75c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800b72e:	b310      	cbz	r0, 800b776 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800b730:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800b732:	4630      	mov	r0, r6
 800b734:	f002 fd48 	bl	800e1c8 <ucdr_serialize_string>
 800b738:	6863      	ldr	r3, [r4, #4]
 800b73a:	2b09      	cmp	r3, #9
 800b73c:	d90e      	bls.n	800b75c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800b73e:	b1d0      	cbz	r0, 800b776 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800b740:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 800b744:	2709      	movs	r7, #9
 800b746:	e000      	b.n	800b74a <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 800b748:	b1a8      	cbz	r0, 800b776 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800b74a:	f858 1b04 	ldr.w	r1, [r8], #4
 800b74e:	4630      	mov	r0, r6
 800b750:	f002 fd3a 	bl	800e1c8 <ucdr_serialize_string>
 800b754:	6862      	ldr	r2, [r4, #4]
 800b756:	3701      	adds	r7, #1
 800b758:	4297      	cmp	r7, r2
 800b75a:	d3f5      	bcc.n	800b748 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 800b75c:	4005      	ands	r5, r0
 800b75e:	b2ed      	uxtb	r5, r5
 800b760:	e78a      	b.n	800b678 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800b762:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800b764:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800b768:	4630      	mov	r0, r6
 800b76a:	f002 fd01 	bl	800e170 <ucdr_serialize_sequence_uint8_t>
 800b76e:	4005      	ands	r5, r0
 800b770:	4628      	mov	r0, r5
 800b772:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b776:	2500      	movs	r5, #0
 800b778:	e77e      	b.n	800b678 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800b77a:	4028      	ands	r0, r5
 800b77c:	b2c5      	uxtb	r5, r0
 800b77e:	e77b      	b.n	800b678 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

0800b780 <uxr_serialize_OBJK_Publisher_Binary>:
 800b780:	b570      	push	{r4, r5, r6, lr}
 800b782:	460d      	mov	r5, r1
 800b784:	7809      	ldrb	r1, [r1, #0]
 800b786:	4606      	mov	r6, r0
 800b788:	f7fc ff94 	bl	80086b4 <ucdr_serialize_bool>
 800b78c:	782b      	ldrb	r3, [r5, #0]
 800b78e:	4604      	mov	r4, r0
 800b790:	b94b      	cbnz	r3, 800b7a6 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 800b792:	7a29      	ldrb	r1, [r5, #8]
 800b794:	4630      	mov	r0, r6
 800b796:	f7fc ff8d 	bl	80086b4 <ucdr_serialize_bool>
 800b79a:	7a2b      	ldrb	r3, [r5, #8]
 800b79c:	4004      	ands	r4, r0
 800b79e:	b2e4      	uxtb	r4, r4
 800b7a0:	b943      	cbnz	r3, 800b7b4 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 800b7a2:	4620      	mov	r0, r4
 800b7a4:	bd70      	pop	{r4, r5, r6, pc}
 800b7a6:	6869      	ldr	r1, [r5, #4]
 800b7a8:	4630      	mov	r0, r6
 800b7aa:	f002 fd0d 	bl	800e1c8 <ucdr_serialize_string>
 800b7ae:	4004      	ands	r4, r0
 800b7b0:	b2e4      	uxtb	r4, r4
 800b7b2:	e7ee      	b.n	800b792 <uxr_serialize_OBJK_Publisher_Binary+0x12>
 800b7b4:	f105 010c 	add.w	r1, r5, #12
 800b7b8:	4630      	mov	r0, r6
 800b7ba:	f7ff ff53 	bl	800b664 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 800b7be:	4004      	ands	r4, r0
 800b7c0:	4620      	mov	r0, r4
 800b7c2:	bd70      	pop	{r4, r5, r6, pc}

0800b7c4 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 800b7c4:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 800b7c8:	4688      	mov	r8, r1
 800b7ca:	8809      	ldrh	r1, [r1, #0]
 800b7cc:	4681      	mov	r9, r0
 800b7ce:	f7fc ffcb 	bl	8008768 <ucdr_serialize_uint16_t>
 800b7d2:	f898 1002 	ldrb.w	r1, [r8, #2]
 800b7d6:	4606      	mov	r6, r0
 800b7d8:	4648      	mov	r0, r9
 800b7da:	f7fc ff6b 	bl	80086b4 <ucdr_serialize_bool>
 800b7de:	f898 3002 	ldrb.w	r3, [r8, #2]
 800b7e2:	4006      	ands	r6, r0
 800b7e4:	b2f5      	uxtb	r5, r6
 800b7e6:	b9eb      	cbnz	r3, 800b824 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 800b7e8:	f898 1006 	ldrb.w	r1, [r8, #6]
 800b7ec:	4648      	mov	r0, r9
 800b7ee:	f7fc ff61 	bl	80086b4 <ucdr_serialize_bool>
 800b7f2:	f898 3006 	ldrb.w	r3, [r8, #6]
 800b7f6:	4005      	ands	r5, r0
 800b7f8:	bb7b      	cbnz	r3, 800b85a <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 800b7fa:	f898 100c 	ldrb.w	r1, [r8, #12]
 800b7fe:	4648      	mov	r0, r9
 800b800:	f7fc ff58 	bl	80086b4 <ucdr_serialize_bool>
 800b804:	f898 300c 	ldrb.w	r3, [r8, #12]
 800b808:	4005      	ands	r5, r0
 800b80a:	b9f3      	cbnz	r3, 800b84a <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 800b80c:	f898 1014 	ldrb.w	r1, [r8, #20]
 800b810:	4648      	mov	r0, r9
 800b812:	f7fc ff4f 	bl	80086b4 <ucdr_serialize_bool>
 800b816:	f898 3014 	ldrb.w	r3, [r8, #20]
 800b81a:	4005      	ands	r5, r0
 800b81c:	b94b      	cbnz	r3, 800b832 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 800b81e:	4628      	mov	r0, r5
 800b820:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 800b824:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 800b828:	4648      	mov	r0, r9
 800b82a:	f7fc ff9d 	bl	8008768 <ucdr_serialize_uint16_t>
 800b82e:	4005      	ands	r5, r0
 800b830:	e7da      	b.n	800b7e8 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 800b832:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800b836:	f108 011c 	add.w	r1, r8, #28
 800b83a:	4648      	mov	r0, r9
 800b83c:	f002 fc98 	bl	800e170 <ucdr_serialize_sequence_uint8_t>
 800b840:	4028      	ands	r0, r5
 800b842:	b2c5      	uxtb	r5, r0
 800b844:	4628      	mov	r0, r5
 800b846:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 800b84a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800b84e:	4648      	mov	r0, r9
 800b850:	f7fd f974 	bl	8008b3c <ucdr_serialize_uint32_t>
 800b854:	4028      	ands	r0, r5
 800b856:	b2c5      	uxtb	r5, r0
 800b858:	e7d8      	b.n	800b80c <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 800b85a:	f8d8 1008 	ldr.w	r1, [r8, #8]
 800b85e:	4648      	mov	r0, r9
 800b860:	f7fd f96c 	bl	8008b3c <ucdr_serialize_uint32_t>
 800b864:	4028      	ands	r0, r5
 800b866:	b2c5      	uxtb	r5, r0
 800b868:	e7c7      	b.n	800b7fa <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 800b86a:	bf00      	nop

0800b86c <uxr_serialize_OBJK_DataWriter_Binary>:
 800b86c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b86e:	2202      	movs	r2, #2
 800b870:	460d      	mov	r5, r1
 800b872:	4606      	mov	r6, r0
 800b874:	f002 fb88 	bl	800df88 <ucdr_serialize_array_uint8_t>
 800b878:	78a9      	ldrb	r1, [r5, #2]
 800b87a:	4604      	mov	r4, r0
 800b87c:	4630      	mov	r0, r6
 800b87e:	f7fc ff19 	bl	80086b4 <ucdr_serialize_bool>
 800b882:	78ab      	ldrb	r3, [r5, #2]
 800b884:	4004      	ands	r4, r0
 800b886:	b2e4      	uxtb	r4, r4
 800b888:	b90b      	cbnz	r3, 800b88e <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 800b88a:	4620      	mov	r0, r4
 800b88c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b88e:	f105 0108 	add.w	r1, r5, #8
 800b892:	4630      	mov	r0, r6
 800b894:	f7ff ff96 	bl	800b7c4 <uxr_serialize_OBJK_Endpoint_QosBinary>
 800b898:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 800b89c:	4607      	mov	r7, r0
 800b89e:	4630      	mov	r0, r6
 800b8a0:	f7fc ff08 	bl	80086b4 <ucdr_serialize_bool>
 800b8a4:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 800b8a8:	4038      	ands	r0, r7
 800b8aa:	b2c7      	uxtb	r7, r0
 800b8ac:	b913      	cbnz	r3, 800b8b4 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 800b8ae:	403c      	ands	r4, r7
 800b8b0:	4620      	mov	r0, r4
 800b8b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b8b4:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 800b8b8:	4630      	mov	r0, r6
 800b8ba:	f7fd fb95 	bl	8008fe8 <ucdr_serialize_uint64_t>
 800b8be:	4007      	ands	r7, r0
 800b8c0:	e7f5      	b.n	800b8ae <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 800b8c2:	bf00      	nop

0800b8c4 <uxr_deserialize_ObjectVariant>:
 800b8c4:	b570      	push	{r4, r5, r6, lr}
 800b8c6:	4605      	mov	r5, r0
 800b8c8:	460e      	mov	r6, r1
 800b8ca:	f7fc ff37 	bl	800873c <ucdr_deserialize_uint8_t>
 800b8ce:	b168      	cbz	r0, 800b8ec <uxr_deserialize_ObjectVariant+0x28>
 800b8d0:	7833      	ldrb	r3, [r6, #0]
 800b8d2:	3b01      	subs	r3, #1
 800b8d4:	4604      	mov	r4, r0
 800b8d6:	2b0d      	cmp	r3, #13
 800b8d8:	d809      	bhi.n	800b8ee <uxr_deserialize_ObjectVariant+0x2a>
 800b8da:	e8df f003 	tbb	[pc, r3]
 800b8de:	0a41      	.short	0x0a41
 800b8e0:	0a0a2323 	.word	0x0a0a2323
 800b8e4:	10080a0a 	.word	0x10080a0a
 800b8e8:	565c1010 	.word	0x565c1010
 800b8ec:	2400      	movs	r4, #0
 800b8ee:	4620      	mov	r0, r4
 800b8f0:	bd70      	pop	{r4, r5, r6, pc}
 800b8f2:	1d31      	adds	r1, r6, #4
 800b8f4:	4628      	mov	r0, r5
 800b8f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b8fa:	f7ff be41 	b.w	800b580 <uxr_deserialize_DATAWRITER_Representation>
 800b8fe:	1d31      	adds	r1, r6, #4
 800b900:	4628      	mov	r0, r5
 800b902:	f7fc ff1b 	bl	800873c <ucdr_deserialize_uint8_t>
 800b906:	2800      	cmp	r0, #0
 800b908:	d0f0      	beq.n	800b8ec <uxr_deserialize_ObjectVariant+0x28>
 800b90a:	7933      	ldrb	r3, [r6, #4]
 800b90c:	2b01      	cmp	r3, #1
 800b90e:	d001      	beq.n	800b914 <uxr_deserialize_ObjectVariant+0x50>
 800b910:	2b02      	cmp	r3, #2
 800b912:	d1ec      	bne.n	800b8ee <uxr_deserialize_ObjectVariant+0x2a>
 800b914:	68b1      	ldr	r1, [r6, #8]
 800b916:	4628      	mov	r0, r5
 800b918:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b91c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b920:	f002 bc62 	b.w	800e1e8 <ucdr_deserialize_string>
 800b924:	1d31      	adds	r1, r6, #4
 800b926:	4628      	mov	r0, r5
 800b928:	f7fc ff08 	bl	800873c <ucdr_deserialize_uint8_t>
 800b92c:	4604      	mov	r4, r0
 800b92e:	b170      	cbz	r0, 800b94e <uxr_deserialize_ObjectVariant+0x8a>
 800b930:	7933      	ldrb	r3, [r6, #4]
 800b932:	2b02      	cmp	r3, #2
 800b934:	d04c      	beq.n	800b9d0 <uxr_deserialize_ObjectVariant+0x10c>
 800b936:	2b03      	cmp	r3, #3
 800b938:	d109      	bne.n	800b94e <uxr_deserialize_ObjectVariant+0x8a>
 800b93a:	f106 0308 	add.w	r3, r6, #8
 800b93e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b942:	f106 010c 	add.w	r1, r6, #12
 800b946:	4628      	mov	r0, r5
 800b948:	f002 fc24 	bl	800e194 <ucdr_deserialize_sequence_uint8_t>
 800b94c:	4604      	mov	r4, r0
 800b94e:	2202      	movs	r2, #2
 800b950:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 800b954:	4628      	mov	r0, r5
 800b956:	f002 fb7b 	bl	800e050 <ucdr_deserialize_array_uint8_t>
 800b95a:	4020      	ands	r0, r4
 800b95c:	b2c4      	uxtb	r4, r0
 800b95e:	e7c6      	b.n	800b8ee <uxr_deserialize_ObjectVariant+0x2a>
 800b960:	1d31      	adds	r1, r6, #4
 800b962:	4628      	mov	r0, r5
 800b964:	f7fc feea 	bl	800873c <ucdr_deserialize_uint8_t>
 800b968:	4604      	mov	r4, r0
 800b96a:	b130      	cbz	r0, 800b97a <uxr_deserialize_ObjectVariant+0xb6>
 800b96c:	7933      	ldrb	r3, [r6, #4]
 800b96e:	2b02      	cmp	r3, #2
 800b970:	d036      	beq.n	800b9e0 <uxr_deserialize_ObjectVariant+0x11c>
 800b972:	2b03      	cmp	r3, #3
 800b974:	d03c      	beq.n	800b9f0 <uxr_deserialize_ObjectVariant+0x12c>
 800b976:	2b01      	cmp	r3, #1
 800b978:	d032      	beq.n	800b9e0 <uxr_deserialize_ObjectVariant+0x11c>
 800b97a:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 800b97e:	4628      	mov	r0, r5
 800b980:	f7fd fc82 	bl	8009288 <ucdr_deserialize_int16_t>
 800b984:	4020      	ands	r0, r4
 800b986:	b2c4      	uxtb	r4, r0
 800b988:	e7b1      	b.n	800b8ee <uxr_deserialize_ObjectVariant+0x2a>
 800b98a:	1d31      	adds	r1, r6, #4
 800b98c:	4628      	mov	r0, r5
 800b98e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b992:	f7ff bcab 	b.w	800b2ec <uxr_deserialize_CLIENT_Representation>
 800b996:	2204      	movs	r2, #4
 800b998:	18b1      	adds	r1, r6, r2
 800b99a:	4628      	mov	r0, r5
 800b99c:	f002 fb58 	bl	800e050 <ucdr_deserialize_array_uint8_t>
 800b9a0:	2202      	movs	r2, #2
 800b9a2:	f106 0108 	add.w	r1, r6, #8
 800b9a6:	4604      	mov	r4, r0
 800b9a8:	4628      	mov	r0, r5
 800b9aa:	f002 fb51 	bl	800e050 <ucdr_deserialize_array_uint8_t>
 800b9ae:	2202      	movs	r2, #2
 800b9b0:	4004      	ands	r4, r0
 800b9b2:	f106 010a 	add.w	r1, r6, #10
 800b9b6:	4628      	mov	r0, r5
 800b9b8:	f002 fb4a 	bl	800e050 <ucdr_deserialize_array_uint8_t>
 800b9bc:	b2e4      	uxtb	r4, r4
 800b9be:	4603      	mov	r3, r0
 800b9c0:	f106 010c 	add.w	r1, r6, #12
 800b9c4:	4628      	mov	r0, r5
 800b9c6:	401c      	ands	r4, r3
 800b9c8:	f7fc fe8a 	bl	80086e0 <ucdr_deserialize_bool>
 800b9cc:	4004      	ands	r4, r0
 800b9ce:	e78e      	b.n	800b8ee <uxr_deserialize_ObjectVariant+0x2a>
 800b9d0:	68b1      	ldr	r1, [r6, #8]
 800b9d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b9d6:	4628      	mov	r0, r5
 800b9d8:	f002 fc06 	bl	800e1e8 <ucdr_deserialize_string>
 800b9dc:	4604      	mov	r4, r0
 800b9de:	e7b6      	b.n	800b94e <uxr_deserialize_ObjectVariant+0x8a>
 800b9e0:	68b1      	ldr	r1, [r6, #8]
 800b9e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b9e6:	4628      	mov	r0, r5
 800b9e8:	f002 fbfe 	bl	800e1e8 <ucdr_deserialize_string>
 800b9ec:	4604      	mov	r4, r0
 800b9ee:	e7c4      	b.n	800b97a <uxr_deserialize_ObjectVariant+0xb6>
 800b9f0:	f106 0308 	add.w	r3, r6, #8
 800b9f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b9f8:	f106 010c 	add.w	r1, r6, #12
 800b9fc:	4628      	mov	r0, r5
 800b9fe:	f002 fbc9 	bl	800e194 <ucdr_deserialize_sequence_uint8_t>
 800ba02:	4604      	mov	r4, r0
 800ba04:	e7b9      	b.n	800b97a <uxr_deserialize_ObjectVariant+0xb6>
 800ba06:	bf00      	nop

0800ba08 <uxr_deserialize_BaseObjectRequest>:
 800ba08:	b570      	push	{r4, r5, r6, lr}
 800ba0a:	2202      	movs	r2, #2
 800ba0c:	4605      	mov	r5, r0
 800ba0e:	460e      	mov	r6, r1
 800ba10:	f002 fb1e 	bl	800e050 <ucdr_deserialize_array_uint8_t>
 800ba14:	2202      	movs	r2, #2
 800ba16:	4604      	mov	r4, r0
 800ba18:	18b1      	adds	r1, r6, r2
 800ba1a:	4628      	mov	r0, r5
 800ba1c:	f002 fb18 	bl	800e050 <ucdr_deserialize_array_uint8_t>
 800ba20:	4020      	ands	r0, r4
 800ba22:	b2c0      	uxtb	r0, r0
 800ba24:	bd70      	pop	{r4, r5, r6, pc}
 800ba26:	bf00      	nop

0800ba28 <uxr_serialize_ActivityInfoVariant>:
 800ba28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba2c:	460d      	mov	r5, r1
 800ba2e:	7809      	ldrb	r1, [r1, #0]
 800ba30:	4607      	mov	r7, r0
 800ba32:	f7fc fe6d 	bl	8008710 <ucdr_serialize_uint8_t>
 800ba36:	4681      	mov	r9, r0
 800ba38:	b138      	cbz	r0, 800ba4a <uxr_serialize_ActivityInfoVariant+0x22>
 800ba3a:	782b      	ldrb	r3, [r5, #0]
 800ba3c:	2b06      	cmp	r3, #6
 800ba3e:	f000 8082 	beq.w	800bb46 <uxr_serialize_ActivityInfoVariant+0x11e>
 800ba42:	2b0d      	cmp	r3, #13
 800ba44:	d016      	beq.n	800ba74 <uxr_serialize_ActivityInfoVariant+0x4c>
 800ba46:	2b05      	cmp	r3, #5
 800ba48:	d002      	beq.n	800ba50 <uxr_serialize_ActivityInfoVariant+0x28>
 800ba4a:	4648      	mov	r0, r9
 800ba4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba50:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800ba54:	4638      	mov	r0, r7
 800ba56:	f7fd fb97 	bl	8009188 <ucdr_serialize_int16_t>
 800ba5a:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 800ba5e:	4681      	mov	r9, r0
 800ba60:	4638      	mov	r0, r7
 800ba62:	f7fd fac1 	bl	8008fe8 <ucdr_serialize_uint64_t>
 800ba66:	ea09 0000 	and.w	r0, r9, r0
 800ba6a:	fa5f f980 	uxtb.w	r9, r0
 800ba6e:	4648      	mov	r0, r9
 800ba70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba74:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800ba78:	4638      	mov	r0, r7
 800ba7a:	f7fd fb85 	bl	8009188 <ucdr_serialize_int16_t>
 800ba7e:	68e9      	ldr	r1, [r5, #12]
 800ba80:	4681      	mov	r9, r0
 800ba82:	4638      	mov	r0, r7
 800ba84:	f7fd f85a 	bl	8008b3c <ucdr_serialize_uint32_t>
 800ba88:	68eb      	ldr	r3, [r5, #12]
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d0eb      	beq.n	800ba66 <uxr_serialize_ActivityInfoVariant+0x3e>
 800ba8e:	b320      	cbz	r0, 800bada <uxr_serialize_ActivityInfoVariant+0xb2>
 800ba90:	f105 080c 	add.w	r8, r5, #12
 800ba94:	2600      	movs	r6, #0
 800ba96:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 800ba9a:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 800ba9e:	f89a 1010 	ldrb.w	r1, [sl, #16]
 800baa2:	4638      	mov	r0, r7
 800baa4:	f7fc fe34 	bl	8008710 <ucdr_serialize_uint8_t>
 800baa8:	2800      	cmp	r0, #0
 800baaa:	d053      	beq.n	800bb54 <uxr_serialize_ActivityInfoVariant+0x12c>
 800baac:	f89a 3010 	ldrb.w	r3, [sl, #16]
 800bab0:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 800bab4:	0074      	lsls	r4, r6, #1
 800bab6:	00c9      	lsls	r1, r1, #3
 800bab8:	2b03      	cmp	r3, #3
 800baba:	d854      	bhi.n	800bb66 <uxr_serialize_ActivityInfoVariant+0x13e>
 800babc:	e8df f003 	tbb	[pc, r3]
 800bac0:	02102132 	.word	0x02102132
 800bac4:	4441      	add	r1, r8
 800bac6:	4638      	mov	r0, r7
 800bac8:	6889      	ldr	r1, [r1, #8]
 800baca:	f002 fb7d 	bl	800e1c8 <ucdr_serialize_string>
 800bace:	68ea      	ldr	r2, [r5, #12]
 800bad0:	3601      	adds	r6, #1
 800bad2:	4296      	cmp	r6, r2
 800bad4:	d242      	bcs.n	800bb5c <uxr_serialize_ActivityInfoVariant+0x134>
 800bad6:	2800      	cmp	r0, #0
 800bad8:	d1dd      	bne.n	800ba96 <uxr_serialize_ActivityInfoVariant+0x6e>
 800bada:	f04f 0900 	mov.w	r9, #0
 800bade:	e7b4      	b.n	800ba4a <uxr_serialize_ActivityInfoVariant+0x22>
 800bae0:	3108      	adds	r1, #8
 800bae2:	4441      	add	r1, r8
 800bae4:	2210      	movs	r2, #16
 800bae6:	4638      	mov	r0, r7
 800bae8:	f002 fa4e 	bl	800df88 <ucdr_serialize_array_uint8_t>
 800baec:	4434      	add	r4, r6
 800baee:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800baf2:	4604      	mov	r4, r0
 800baf4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800baf6:	4638      	mov	r0, r7
 800baf8:	f7fd f820 	bl	8008b3c <ucdr_serialize_uint32_t>
 800bafc:	4020      	ands	r0, r4
 800bafe:	b2c0      	uxtb	r0, r0
 800bb00:	e7e5      	b.n	800bace <uxr_serialize_ActivityInfoVariant+0xa6>
 800bb02:	3108      	adds	r1, #8
 800bb04:	4441      	add	r1, r8
 800bb06:	2204      	movs	r2, #4
 800bb08:	4638      	mov	r0, r7
 800bb0a:	f002 fa3d 	bl	800df88 <ucdr_serialize_array_uint8_t>
 800bb0e:	4434      	add	r4, r6
 800bb10:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800bb14:	4604      	mov	r4, r0
 800bb16:	8b19      	ldrh	r1, [r3, #24]
 800bb18:	4638      	mov	r0, r7
 800bb1a:	f7fc fe25 	bl	8008768 <ucdr_serialize_uint16_t>
 800bb1e:	4020      	ands	r0, r4
 800bb20:	b2c0      	uxtb	r0, r0
 800bb22:	e7d4      	b.n	800bace <uxr_serialize_ActivityInfoVariant+0xa6>
 800bb24:	3108      	adds	r1, #8
 800bb26:	4441      	add	r1, r8
 800bb28:	2202      	movs	r2, #2
 800bb2a:	4638      	mov	r0, r7
 800bb2c:	f002 fa2c 	bl	800df88 <ucdr_serialize_array_uint8_t>
 800bb30:	4434      	add	r4, r6
 800bb32:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800bb36:	4604      	mov	r4, r0
 800bb38:	7d99      	ldrb	r1, [r3, #22]
 800bb3a:	4638      	mov	r0, r7
 800bb3c:	f7fc fde8 	bl	8008710 <ucdr_serialize_uint8_t>
 800bb40:	4020      	ands	r0, r4
 800bb42:	b2c0      	uxtb	r0, r0
 800bb44:	e7c3      	b.n	800bace <uxr_serialize_ActivityInfoVariant+0xa6>
 800bb46:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800bb4a:	4638      	mov	r0, r7
 800bb4c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb50:	f7fd bb1a 	b.w	8009188 <ucdr_serialize_int16_t>
 800bb54:	68ea      	ldr	r2, [r5, #12]
 800bb56:	3601      	adds	r6, #1
 800bb58:	42b2      	cmp	r2, r6
 800bb5a:	d8be      	bhi.n	800bada <uxr_serialize_ActivityInfoVariant+0xb2>
 800bb5c:	ea09 0900 	and.w	r9, r9, r0
 800bb60:	fa5f f989 	uxtb.w	r9, r9
 800bb64:	e771      	b.n	800ba4a <uxr_serialize_ActivityInfoVariant+0x22>
 800bb66:	68eb      	ldr	r3, [r5, #12]
 800bb68:	3601      	adds	r6, #1
 800bb6a:	429e      	cmp	r6, r3
 800bb6c:	f10a 0a18 	add.w	sl, sl, #24
 800bb70:	d395      	bcc.n	800ba9e <uxr_serialize_ActivityInfoVariant+0x76>
 800bb72:	e76a      	b.n	800ba4a <uxr_serialize_ActivityInfoVariant+0x22>

0800bb74 <uxr_deserialize_BaseObjectReply>:
 800bb74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb78:	2202      	movs	r2, #2
 800bb7a:	4606      	mov	r6, r0
 800bb7c:	460f      	mov	r7, r1
 800bb7e:	f002 fa67 	bl	800e050 <ucdr_deserialize_array_uint8_t>
 800bb82:	2202      	movs	r2, #2
 800bb84:	18b9      	adds	r1, r7, r2
 800bb86:	4605      	mov	r5, r0
 800bb88:	4630      	mov	r0, r6
 800bb8a:	f002 fa61 	bl	800e050 <ucdr_deserialize_array_uint8_t>
 800bb8e:	1d39      	adds	r1, r7, #4
 800bb90:	4680      	mov	r8, r0
 800bb92:	4630      	mov	r0, r6
 800bb94:	f7fc fdd2 	bl	800873c <ucdr_deserialize_uint8_t>
 800bb98:	1d79      	adds	r1, r7, #5
 800bb9a:	4604      	mov	r4, r0
 800bb9c:	4630      	mov	r0, r6
 800bb9e:	f7fc fdcd 	bl	800873c <ucdr_deserialize_uint8_t>
 800bba2:	ea05 0508 	and.w	r5, r5, r8
 800bba6:	402c      	ands	r4, r5
 800bba8:	4020      	ands	r0, r4
 800bbaa:	b2c0      	uxtb	r0, r0
 800bbac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800bbb0 <uxr_serialize_ReadSpecification>:
 800bbb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbb4:	460e      	mov	r6, r1
 800bbb6:	7809      	ldrb	r1, [r1, #0]
 800bbb8:	4607      	mov	r7, r0
 800bbba:	f7fc fda9 	bl	8008710 <ucdr_serialize_uint8_t>
 800bbbe:	7871      	ldrb	r1, [r6, #1]
 800bbc0:	4604      	mov	r4, r0
 800bbc2:	4638      	mov	r0, r7
 800bbc4:	f7fc fda4 	bl	8008710 <ucdr_serialize_uint8_t>
 800bbc8:	78b1      	ldrb	r1, [r6, #2]
 800bbca:	4004      	ands	r4, r0
 800bbcc:	4638      	mov	r0, r7
 800bbce:	f7fc fd71 	bl	80086b4 <ucdr_serialize_bool>
 800bbd2:	78b3      	ldrb	r3, [r6, #2]
 800bbd4:	b2e4      	uxtb	r4, r4
 800bbd6:	4004      	ands	r4, r0
 800bbd8:	b94b      	cbnz	r3, 800bbee <uxr_serialize_ReadSpecification+0x3e>
 800bbda:	7a31      	ldrb	r1, [r6, #8]
 800bbdc:	4638      	mov	r0, r7
 800bbde:	f7fc fd69 	bl	80086b4 <ucdr_serialize_bool>
 800bbe2:	7a33      	ldrb	r3, [r6, #8]
 800bbe4:	4004      	ands	r4, r0
 800bbe6:	b943      	cbnz	r3, 800bbfa <uxr_serialize_ReadSpecification+0x4a>
 800bbe8:	4620      	mov	r0, r4
 800bbea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbee:	6871      	ldr	r1, [r6, #4]
 800bbf0:	4638      	mov	r0, r7
 800bbf2:	f002 fae9 	bl	800e1c8 <ucdr_serialize_string>
 800bbf6:	4004      	ands	r4, r0
 800bbf8:	e7ef      	b.n	800bbda <uxr_serialize_ReadSpecification+0x2a>
 800bbfa:	8971      	ldrh	r1, [r6, #10]
 800bbfc:	4638      	mov	r0, r7
 800bbfe:	f7fc fdb3 	bl	8008768 <ucdr_serialize_uint16_t>
 800bc02:	89b1      	ldrh	r1, [r6, #12]
 800bc04:	4605      	mov	r5, r0
 800bc06:	4638      	mov	r0, r7
 800bc08:	f7fc fdae 	bl	8008768 <ucdr_serialize_uint16_t>
 800bc0c:	89f1      	ldrh	r1, [r6, #14]
 800bc0e:	4005      	ands	r5, r0
 800bc10:	4638      	mov	r0, r7
 800bc12:	f7fc fda9 	bl	8008768 <ucdr_serialize_uint16_t>
 800bc16:	8a31      	ldrh	r1, [r6, #16]
 800bc18:	4680      	mov	r8, r0
 800bc1a:	4638      	mov	r0, r7
 800bc1c:	f7fc fda4 	bl	8008768 <ucdr_serialize_uint16_t>
 800bc20:	b2ed      	uxtb	r5, r5
 800bc22:	4025      	ands	r5, r4
 800bc24:	ea08 0505 	and.w	r5, r8, r5
 800bc28:	ea00 0405 	and.w	r4, r0, r5
 800bc2c:	4620      	mov	r0, r4
 800bc2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc32:	bf00      	nop

0800bc34 <uxr_serialize_CREATE_CLIENT_Payload>:
 800bc34:	f7ff bb02 	b.w	800b23c <uxr_serialize_CLIENT_Representation>

0800bc38 <uxr_serialize_CREATE_Payload>:
 800bc38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc3a:	2202      	movs	r2, #2
 800bc3c:	4607      	mov	r7, r0
 800bc3e:	460e      	mov	r6, r1
 800bc40:	f002 f9a2 	bl	800df88 <ucdr_serialize_array_uint8_t>
 800bc44:	2202      	movs	r2, #2
 800bc46:	18b1      	adds	r1, r6, r2
 800bc48:	4605      	mov	r5, r0
 800bc4a:	4638      	mov	r0, r7
 800bc4c:	f002 f99c 	bl	800df88 <ucdr_serialize_array_uint8_t>
 800bc50:	7931      	ldrb	r1, [r6, #4]
 800bc52:	4604      	mov	r4, r0
 800bc54:	4638      	mov	r0, r7
 800bc56:	f7fc fd5b 	bl	8008710 <ucdr_serialize_uint8_t>
 800bc5a:	b170      	cbz	r0, 800bc7a <uxr_serialize_CREATE_Payload+0x42>
 800bc5c:	7933      	ldrb	r3, [r6, #4]
 800bc5e:	402c      	ands	r4, r5
 800bc60:	3b01      	subs	r3, #1
 800bc62:	b2e4      	uxtb	r4, r4
 800bc64:	2b0d      	cmp	r3, #13
 800bc66:	d809      	bhi.n	800bc7c <uxr_serialize_CREATE_Payload+0x44>
 800bc68:	e8df f003 	tbb	[pc, r3]
 800bc6c:	23230a4c 	.word	0x23230a4c
 800bc70:	0a0a0a0a 	.word	0x0a0a0a0a
 800bc74:	12121208 	.word	0x12121208
 800bc78:	3e45      	.short	0x3e45
 800bc7a:	2400      	movs	r4, #0
 800bc7c:	4620      	mov	r0, r4
 800bc7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bc80:	f106 0108 	add.w	r1, r6, #8
 800bc84:	4638      	mov	r0, r7
 800bc86:	f7ff fbdf 	bl	800b448 <uxr_serialize_DATAWRITER_Representation>
 800bc8a:	4004      	ands	r4, r0
 800bc8c:	4620      	mov	r0, r4
 800bc8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bc90:	7a31      	ldrb	r1, [r6, #8]
 800bc92:	4638      	mov	r0, r7
 800bc94:	f7fc fd3c 	bl	8008710 <ucdr_serialize_uint8_t>
 800bc98:	2800      	cmp	r0, #0
 800bc9a:	d0ee      	beq.n	800bc7a <uxr_serialize_CREATE_Payload+0x42>
 800bc9c:	7a33      	ldrb	r3, [r6, #8]
 800bc9e:	2b01      	cmp	r3, #1
 800bca0:	d001      	beq.n	800bca6 <uxr_serialize_CREATE_Payload+0x6e>
 800bca2:	2b02      	cmp	r3, #2
 800bca4:	d1ea      	bne.n	800bc7c <uxr_serialize_CREATE_Payload+0x44>
 800bca6:	68f1      	ldr	r1, [r6, #12]
 800bca8:	4638      	mov	r0, r7
 800bcaa:	f002 fa8d 	bl	800e1c8 <ucdr_serialize_string>
 800bcae:	4004      	ands	r4, r0
 800bcb0:	e7e4      	b.n	800bc7c <uxr_serialize_CREATE_Payload+0x44>
 800bcb2:	7a31      	ldrb	r1, [r6, #8]
 800bcb4:	4638      	mov	r0, r7
 800bcb6:	f7fc fd2b 	bl	8008710 <ucdr_serialize_uint8_t>
 800bcba:	4605      	mov	r5, r0
 800bcbc:	b158      	cbz	r0, 800bcd6 <uxr_serialize_CREATE_Payload+0x9e>
 800bcbe:	7a33      	ldrb	r3, [r6, #8]
 800bcc0:	2b02      	cmp	r3, #2
 800bcc2:	d034      	beq.n	800bd2e <uxr_serialize_CREATE_Payload+0xf6>
 800bcc4:	2b03      	cmp	r3, #3
 800bcc6:	d106      	bne.n	800bcd6 <uxr_serialize_CREATE_Payload+0x9e>
 800bcc8:	68f2      	ldr	r2, [r6, #12]
 800bcca:	f106 0110 	add.w	r1, r6, #16
 800bcce:	4638      	mov	r0, r7
 800bcd0:	f002 fa4e 	bl	800e170 <ucdr_serialize_sequence_uint8_t>
 800bcd4:	4605      	mov	r5, r0
 800bcd6:	2202      	movs	r2, #2
 800bcd8:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 800bcdc:	4638      	mov	r0, r7
 800bcde:	f002 f953 	bl	800df88 <ucdr_serialize_array_uint8_t>
 800bce2:	4028      	ands	r0, r5
 800bce4:	4004      	ands	r4, r0
 800bce6:	e7c9      	b.n	800bc7c <uxr_serialize_CREATE_Payload+0x44>
 800bce8:	f106 0108 	add.w	r1, r6, #8
 800bcec:	4638      	mov	r0, r7
 800bcee:	f7ff faa5 	bl	800b23c <uxr_serialize_CLIENT_Representation>
 800bcf2:	4004      	ands	r4, r0
 800bcf4:	e7c2      	b.n	800bc7c <uxr_serialize_CREATE_Payload+0x44>
 800bcf6:	f106 0108 	add.w	r1, r6, #8
 800bcfa:	4638      	mov	r0, r7
 800bcfc:	f7ff fb5a 	bl	800b3b4 <uxr_serialize_AGENT_Representation>
 800bd00:	4004      	ands	r4, r0
 800bd02:	e7bb      	b.n	800bc7c <uxr_serialize_CREATE_Payload+0x44>
 800bd04:	7a31      	ldrb	r1, [r6, #8]
 800bd06:	4638      	mov	r0, r7
 800bd08:	f7fc fd02 	bl	8008710 <ucdr_serialize_uint8_t>
 800bd0c:	4605      	mov	r5, r0
 800bd0e:	b130      	cbz	r0, 800bd1e <uxr_serialize_CREATE_Payload+0xe6>
 800bd10:	7a33      	ldrb	r3, [r6, #8]
 800bd12:	2b02      	cmp	r3, #2
 800bd14:	d011      	beq.n	800bd3a <uxr_serialize_CREATE_Payload+0x102>
 800bd16:	2b03      	cmp	r3, #3
 800bd18:	d015      	beq.n	800bd46 <uxr_serialize_CREATE_Payload+0x10e>
 800bd1a:	2b01      	cmp	r3, #1
 800bd1c:	d00d      	beq.n	800bd3a <uxr_serialize_CREATE_Payload+0x102>
 800bd1e:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 800bd22:	4638      	mov	r0, r7
 800bd24:	f7fd fa30 	bl	8009188 <ucdr_serialize_int16_t>
 800bd28:	4028      	ands	r0, r5
 800bd2a:	4004      	ands	r4, r0
 800bd2c:	e7a6      	b.n	800bc7c <uxr_serialize_CREATE_Payload+0x44>
 800bd2e:	68f1      	ldr	r1, [r6, #12]
 800bd30:	4638      	mov	r0, r7
 800bd32:	f002 fa49 	bl	800e1c8 <ucdr_serialize_string>
 800bd36:	4605      	mov	r5, r0
 800bd38:	e7cd      	b.n	800bcd6 <uxr_serialize_CREATE_Payload+0x9e>
 800bd3a:	68f1      	ldr	r1, [r6, #12]
 800bd3c:	4638      	mov	r0, r7
 800bd3e:	f002 fa43 	bl	800e1c8 <ucdr_serialize_string>
 800bd42:	4605      	mov	r5, r0
 800bd44:	e7eb      	b.n	800bd1e <uxr_serialize_CREATE_Payload+0xe6>
 800bd46:	68f2      	ldr	r2, [r6, #12]
 800bd48:	f106 0110 	add.w	r1, r6, #16
 800bd4c:	4638      	mov	r0, r7
 800bd4e:	f002 fa0f 	bl	800e170 <ucdr_serialize_sequence_uint8_t>
 800bd52:	4605      	mov	r5, r0
 800bd54:	e7e3      	b.n	800bd1e <uxr_serialize_CREATE_Payload+0xe6>
 800bd56:	bf00      	nop

0800bd58 <uxr_deserialize_GET_INFO_Payload>:
 800bd58:	b570      	push	{r4, r5, r6, lr}
 800bd5a:	2202      	movs	r2, #2
 800bd5c:	4605      	mov	r5, r0
 800bd5e:	460e      	mov	r6, r1
 800bd60:	f002 f976 	bl	800e050 <ucdr_deserialize_array_uint8_t>
 800bd64:	2202      	movs	r2, #2
 800bd66:	18b1      	adds	r1, r6, r2
 800bd68:	4604      	mov	r4, r0
 800bd6a:	4628      	mov	r0, r5
 800bd6c:	f002 f970 	bl	800e050 <ucdr_deserialize_array_uint8_t>
 800bd70:	1d31      	adds	r1, r6, #4
 800bd72:	4004      	ands	r4, r0
 800bd74:	4628      	mov	r0, r5
 800bd76:	f7fd f811 	bl	8008d9c <ucdr_deserialize_uint32_t>
 800bd7a:	b2e4      	uxtb	r4, r4
 800bd7c:	4020      	ands	r0, r4
 800bd7e:	bd70      	pop	{r4, r5, r6, pc}

0800bd80 <uxr_serialize_DELETE_Payload>:
 800bd80:	b570      	push	{r4, r5, r6, lr}
 800bd82:	2202      	movs	r2, #2
 800bd84:	4605      	mov	r5, r0
 800bd86:	460e      	mov	r6, r1
 800bd88:	f002 f8fe 	bl	800df88 <ucdr_serialize_array_uint8_t>
 800bd8c:	2202      	movs	r2, #2
 800bd8e:	4604      	mov	r4, r0
 800bd90:	18b1      	adds	r1, r6, r2
 800bd92:	4628      	mov	r0, r5
 800bd94:	f002 f8f8 	bl	800df88 <ucdr_serialize_array_uint8_t>
 800bd98:	4020      	ands	r0, r4
 800bd9a:	b2c0      	uxtb	r0, r0
 800bd9c:	bd70      	pop	{r4, r5, r6, pc}
 800bd9e:	bf00      	nop

0800bda0 <uxr_deserialize_STATUS_AGENT_Payload>:
 800bda0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bda4:	4605      	mov	r5, r0
 800bda6:	460e      	mov	r6, r1
 800bda8:	f7fc fcc8 	bl	800873c <ucdr_deserialize_uint8_t>
 800bdac:	1c71      	adds	r1, r6, #1
 800bdae:	4604      	mov	r4, r0
 800bdb0:	4628      	mov	r0, r5
 800bdb2:	f7fc fcc3 	bl	800873c <ucdr_deserialize_uint8_t>
 800bdb6:	2204      	movs	r2, #4
 800bdb8:	18b1      	adds	r1, r6, r2
 800bdba:	4680      	mov	r8, r0
 800bdbc:	4628      	mov	r0, r5
 800bdbe:	f002 f947 	bl	800e050 <ucdr_deserialize_array_uint8_t>
 800bdc2:	f106 0108 	add.w	r1, r6, #8
 800bdc6:	4607      	mov	r7, r0
 800bdc8:	2202      	movs	r2, #2
 800bdca:	4628      	mov	r0, r5
 800bdcc:	f002 f940 	bl	800e050 <ucdr_deserialize_array_uint8_t>
 800bdd0:	ea04 0308 	and.w	r3, r4, r8
 800bdd4:	b2db      	uxtb	r3, r3
 800bdd6:	ea03 0407 	and.w	r4, r3, r7
 800bdda:	2202      	movs	r2, #2
 800bddc:	4607      	mov	r7, r0
 800bdde:	f106 010a 	add.w	r1, r6, #10
 800bde2:	4628      	mov	r0, r5
 800bde4:	f002 f934 	bl	800e050 <ucdr_deserialize_array_uint8_t>
 800bde8:	f106 010c 	add.w	r1, r6, #12
 800bdec:	4603      	mov	r3, r0
 800bdee:	4628      	mov	r0, r5
 800bdf0:	461d      	mov	r5, r3
 800bdf2:	f7fc fc75 	bl	80086e0 <ucdr_deserialize_bool>
 800bdf6:	403c      	ands	r4, r7
 800bdf8:	4025      	ands	r5, r4
 800bdfa:	4028      	ands	r0, r5
 800bdfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800be00 <uxr_deserialize_STATUS_Payload>:
 800be00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be04:	2202      	movs	r2, #2
 800be06:	4606      	mov	r6, r0
 800be08:	460f      	mov	r7, r1
 800be0a:	f002 f921 	bl	800e050 <ucdr_deserialize_array_uint8_t>
 800be0e:	2202      	movs	r2, #2
 800be10:	18b9      	adds	r1, r7, r2
 800be12:	4605      	mov	r5, r0
 800be14:	4630      	mov	r0, r6
 800be16:	f002 f91b 	bl	800e050 <ucdr_deserialize_array_uint8_t>
 800be1a:	1d39      	adds	r1, r7, #4
 800be1c:	4680      	mov	r8, r0
 800be1e:	4630      	mov	r0, r6
 800be20:	f7fc fc8c 	bl	800873c <ucdr_deserialize_uint8_t>
 800be24:	1d79      	adds	r1, r7, #5
 800be26:	4604      	mov	r4, r0
 800be28:	4630      	mov	r0, r6
 800be2a:	f7fc fc87 	bl	800873c <ucdr_deserialize_uint8_t>
 800be2e:	ea05 0508 	and.w	r5, r5, r8
 800be32:	402c      	ands	r4, r5
 800be34:	4020      	ands	r0, r4
 800be36:	b2c0      	uxtb	r0, r0
 800be38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800be3c <uxr_serialize_INFO_Payload>:
 800be3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be40:	2202      	movs	r2, #2
 800be42:	460c      	mov	r4, r1
 800be44:	4605      	mov	r5, r0
 800be46:	f002 f89f 	bl	800df88 <ucdr_serialize_array_uint8_t>
 800be4a:	2202      	movs	r2, #2
 800be4c:	18a1      	adds	r1, r4, r2
 800be4e:	4680      	mov	r8, r0
 800be50:	4628      	mov	r0, r5
 800be52:	f002 f899 	bl	800df88 <ucdr_serialize_array_uint8_t>
 800be56:	7921      	ldrb	r1, [r4, #4]
 800be58:	4607      	mov	r7, r0
 800be5a:	4628      	mov	r0, r5
 800be5c:	f7fc fc58 	bl	8008710 <ucdr_serialize_uint8_t>
 800be60:	7961      	ldrb	r1, [r4, #5]
 800be62:	4606      	mov	r6, r0
 800be64:	4628      	mov	r0, r5
 800be66:	f7fc fc53 	bl	8008710 <ucdr_serialize_uint8_t>
 800be6a:	ea08 0807 	and.w	r8, r8, r7
 800be6e:	ea06 0608 	and.w	r6, r6, r8
 800be72:	4006      	ands	r6, r0
 800be74:	7a21      	ldrb	r1, [r4, #8]
 800be76:	4628      	mov	r0, r5
 800be78:	f7fc fc1c 	bl	80086b4 <ucdr_serialize_bool>
 800be7c:	7a23      	ldrb	r3, [r4, #8]
 800be7e:	b2f7      	uxtb	r7, r6
 800be80:	4606      	mov	r6, r0
 800be82:	b96b      	cbnz	r3, 800bea0 <uxr_serialize_INFO_Payload+0x64>
 800be84:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 800be88:	4628      	mov	r0, r5
 800be8a:	f7fc fc13 	bl	80086b4 <ucdr_serialize_bool>
 800be8e:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 800be92:	4030      	ands	r0, r6
 800be94:	b2c6      	uxtb	r6, r0
 800be96:	b983      	cbnz	r3, 800beba <uxr_serialize_INFO_Payload+0x7e>
 800be98:	ea06 0007 	and.w	r0, r6, r7
 800be9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bea0:	7b21      	ldrb	r1, [r4, #12]
 800bea2:	4628      	mov	r0, r5
 800bea4:	f7fc fc34 	bl	8008710 <ucdr_serialize_uint8_t>
 800bea8:	b188      	cbz	r0, 800bece <uxr_serialize_INFO_Payload+0x92>
 800beaa:	f104 010c 	add.w	r1, r4, #12
 800beae:	4628      	mov	r0, r5
 800beb0:	f7ff faf2 	bl	800b498 <uxr_serialize_ObjectVariant.part.0>
 800beb4:	4030      	ands	r0, r6
 800beb6:	b2c6      	uxtb	r6, r0
 800beb8:	e7e4      	b.n	800be84 <uxr_serialize_INFO_Payload+0x48>
 800beba:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 800bebe:	4628      	mov	r0, r5
 800bec0:	f7ff fdb2 	bl	800ba28 <uxr_serialize_ActivityInfoVariant>
 800bec4:	4006      	ands	r6, r0
 800bec6:	ea06 0007 	and.w	r0, r6, r7
 800beca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bece:	4606      	mov	r6, r0
 800bed0:	e7d8      	b.n	800be84 <uxr_serialize_INFO_Payload+0x48>
 800bed2:	bf00      	nop

0800bed4 <uxr_serialize_READ_DATA_Payload>:
 800bed4:	b570      	push	{r4, r5, r6, lr}
 800bed6:	2202      	movs	r2, #2
 800bed8:	4605      	mov	r5, r0
 800beda:	460e      	mov	r6, r1
 800bedc:	f002 f854 	bl	800df88 <ucdr_serialize_array_uint8_t>
 800bee0:	2202      	movs	r2, #2
 800bee2:	18b1      	adds	r1, r6, r2
 800bee4:	4604      	mov	r4, r0
 800bee6:	4628      	mov	r0, r5
 800bee8:	f002 f84e 	bl	800df88 <ucdr_serialize_array_uint8_t>
 800beec:	1d31      	adds	r1, r6, #4
 800beee:	4004      	ands	r4, r0
 800bef0:	4628      	mov	r0, r5
 800bef2:	f7ff fe5d 	bl	800bbb0 <uxr_serialize_ReadSpecification>
 800bef6:	b2e4      	uxtb	r4, r4
 800bef8:	4020      	ands	r0, r4
 800befa:	bd70      	pop	{r4, r5, r6, pc}

0800befc <uxr_serialize_WRITE_DATA_Payload_Data>:
 800befc:	b570      	push	{r4, r5, r6, lr}
 800befe:	2202      	movs	r2, #2
 800bf00:	4605      	mov	r5, r0
 800bf02:	460e      	mov	r6, r1
 800bf04:	f002 f840 	bl	800df88 <ucdr_serialize_array_uint8_t>
 800bf08:	2202      	movs	r2, #2
 800bf0a:	4604      	mov	r4, r0
 800bf0c:	18b1      	adds	r1, r6, r2
 800bf0e:	4628      	mov	r0, r5
 800bf10:	f002 f83a 	bl	800df88 <ucdr_serialize_array_uint8_t>
 800bf14:	4020      	ands	r0, r4
 800bf16:	b2c0      	uxtb	r0, r0
 800bf18:	bd70      	pop	{r4, r5, r6, pc}
 800bf1a:	bf00      	nop

0800bf1c <uxr_serialize_ACKNACK_Payload>:
 800bf1c:	b570      	push	{r4, r5, r6, lr}
 800bf1e:	460c      	mov	r4, r1
 800bf20:	460e      	mov	r6, r1
 800bf22:	f834 1b02 	ldrh.w	r1, [r4], #2
 800bf26:	4605      	mov	r5, r0
 800bf28:	f7fc fc1e 	bl	8008768 <ucdr_serialize_uint16_t>
 800bf2c:	2202      	movs	r2, #2
 800bf2e:	4621      	mov	r1, r4
 800bf30:	4604      	mov	r4, r0
 800bf32:	4628      	mov	r0, r5
 800bf34:	f002 f828 	bl	800df88 <ucdr_serialize_array_uint8_t>
 800bf38:	7931      	ldrb	r1, [r6, #4]
 800bf3a:	4004      	ands	r4, r0
 800bf3c:	4628      	mov	r0, r5
 800bf3e:	f7fc fbe7 	bl	8008710 <ucdr_serialize_uint8_t>
 800bf42:	b2e4      	uxtb	r4, r4
 800bf44:	4020      	ands	r0, r4
 800bf46:	bd70      	pop	{r4, r5, r6, pc}

0800bf48 <uxr_deserialize_ACKNACK_Payload>:
 800bf48:	b570      	push	{r4, r5, r6, lr}
 800bf4a:	4605      	mov	r5, r0
 800bf4c:	460e      	mov	r6, r1
 800bf4e:	f7fc fd0b 	bl	8008968 <ucdr_deserialize_uint16_t>
 800bf52:	2202      	movs	r2, #2
 800bf54:	18b1      	adds	r1, r6, r2
 800bf56:	4604      	mov	r4, r0
 800bf58:	4628      	mov	r0, r5
 800bf5a:	f002 f879 	bl	800e050 <ucdr_deserialize_array_uint8_t>
 800bf5e:	1d31      	adds	r1, r6, #4
 800bf60:	4004      	ands	r4, r0
 800bf62:	4628      	mov	r0, r5
 800bf64:	f7fc fbea 	bl	800873c <ucdr_deserialize_uint8_t>
 800bf68:	b2e4      	uxtb	r4, r4
 800bf6a:	4020      	ands	r0, r4
 800bf6c:	bd70      	pop	{r4, r5, r6, pc}
 800bf6e:	bf00      	nop

0800bf70 <uxr_serialize_HEARTBEAT_Payload>:
 800bf70:	b570      	push	{r4, r5, r6, lr}
 800bf72:	460d      	mov	r5, r1
 800bf74:	8809      	ldrh	r1, [r1, #0]
 800bf76:	4606      	mov	r6, r0
 800bf78:	f7fc fbf6 	bl	8008768 <ucdr_serialize_uint16_t>
 800bf7c:	8869      	ldrh	r1, [r5, #2]
 800bf7e:	4604      	mov	r4, r0
 800bf80:	4630      	mov	r0, r6
 800bf82:	f7fc fbf1 	bl	8008768 <ucdr_serialize_uint16_t>
 800bf86:	7929      	ldrb	r1, [r5, #4]
 800bf88:	4004      	ands	r4, r0
 800bf8a:	4630      	mov	r0, r6
 800bf8c:	f7fc fbc0 	bl	8008710 <ucdr_serialize_uint8_t>
 800bf90:	b2e4      	uxtb	r4, r4
 800bf92:	4020      	ands	r0, r4
 800bf94:	bd70      	pop	{r4, r5, r6, pc}
 800bf96:	bf00      	nop

0800bf98 <uxr_deserialize_HEARTBEAT_Payload>:
 800bf98:	b570      	push	{r4, r5, r6, lr}
 800bf9a:	4605      	mov	r5, r0
 800bf9c:	460e      	mov	r6, r1
 800bf9e:	f7fc fce3 	bl	8008968 <ucdr_deserialize_uint16_t>
 800bfa2:	1cb1      	adds	r1, r6, #2
 800bfa4:	4604      	mov	r4, r0
 800bfa6:	4628      	mov	r0, r5
 800bfa8:	f7fc fcde 	bl	8008968 <ucdr_deserialize_uint16_t>
 800bfac:	1d31      	adds	r1, r6, #4
 800bfae:	4004      	ands	r4, r0
 800bfb0:	4628      	mov	r0, r5
 800bfb2:	f7fc fbc3 	bl	800873c <ucdr_deserialize_uint8_t>
 800bfb6:	b2e4      	uxtb	r4, r4
 800bfb8:	4020      	ands	r0, r4
 800bfba:	bd70      	pop	{r4, r5, r6, pc}

0800bfbc <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 800bfbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfc0:	4605      	mov	r5, r0
 800bfc2:	460e      	mov	r6, r1
 800bfc4:	f7fd fa6c 	bl	80094a0 <ucdr_deserialize_int32_t>
 800bfc8:	1d31      	adds	r1, r6, #4
 800bfca:	4607      	mov	r7, r0
 800bfcc:	4628      	mov	r0, r5
 800bfce:	f7fc fee5 	bl	8008d9c <ucdr_deserialize_uint32_t>
 800bfd2:	f106 0108 	add.w	r1, r6, #8
 800bfd6:	4680      	mov	r8, r0
 800bfd8:	4628      	mov	r0, r5
 800bfda:	f7fd fa61 	bl	80094a0 <ucdr_deserialize_int32_t>
 800bfde:	f106 010c 	add.w	r1, r6, #12
 800bfe2:	4604      	mov	r4, r0
 800bfe4:	4628      	mov	r0, r5
 800bfe6:	f7fc fed9 	bl	8008d9c <ucdr_deserialize_uint32_t>
 800bfea:	ea07 0708 	and.w	r7, r7, r8
 800bfee:	403c      	ands	r4, r7
 800bff0:	f106 0110 	add.w	r1, r6, #16
 800bff4:	4004      	ands	r4, r0
 800bff6:	4628      	mov	r0, r5
 800bff8:	f7fd fa52 	bl	80094a0 <ucdr_deserialize_int32_t>
 800bffc:	f106 0114 	add.w	r1, r6, #20
 800c000:	4607      	mov	r7, r0
 800c002:	4628      	mov	r0, r5
 800c004:	f7fc feca 	bl	8008d9c <ucdr_deserialize_uint32_t>
 800c008:	b2e4      	uxtb	r4, r4
 800c00a:	403c      	ands	r4, r7
 800c00c:	4020      	ands	r0, r4
 800c00e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c012:	bf00      	nop

0800c014 <uxr_deserialize_SampleIdentity>:
 800c014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c018:	220c      	movs	r2, #12
 800c01a:	4604      	mov	r4, r0
 800c01c:	460d      	mov	r5, r1
 800c01e:	f002 f817 	bl	800e050 <ucdr_deserialize_array_uint8_t>
 800c022:	2203      	movs	r2, #3
 800c024:	f105 010c 	add.w	r1, r5, #12
 800c028:	4607      	mov	r7, r0
 800c02a:	4620      	mov	r0, r4
 800c02c:	f002 f810 	bl	800e050 <ucdr_deserialize_array_uint8_t>
 800c030:	f105 010f 	add.w	r1, r5, #15
 800c034:	4680      	mov	r8, r0
 800c036:	4620      	mov	r0, r4
 800c038:	f7fc fb80 	bl	800873c <ucdr_deserialize_uint8_t>
 800c03c:	f105 0110 	add.w	r1, r5, #16
 800c040:	4606      	mov	r6, r0
 800c042:	4620      	mov	r0, r4
 800c044:	f7fd fa2c 	bl	80094a0 <ucdr_deserialize_int32_t>
 800c048:	f105 0114 	add.w	r1, r5, #20
 800c04c:	4603      	mov	r3, r0
 800c04e:	4620      	mov	r0, r4
 800c050:	ea07 0708 	and.w	r7, r7, r8
 800c054:	461c      	mov	r4, r3
 800c056:	f7fc fea1 	bl	8008d9c <ucdr_deserialize_uint32_t>
 800c05a:	403e      	ands	r6, r7
 800c05c:	4034      	ands	r4, r6
 800c05e:	4020      	ands	r0, r4
 800c060:	b2c0      	uxtb	r0, r0
 800c062:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c066:	bf00      	nop

0800c068 <rcl_convert_rmw_ret_to_rcl_ret>:
 800c068:	280b      	cmp	r0, #11
 800c06a:	dc0d      	bgt.n	800c088 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 800c06c:	2800      	cmp	r0, #0
 800c06e:	db09      	blt.n	800c084 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 800c070:	280b      	cmp	r0, #11
 800c072:	d807      	bhi.n	800c084 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 800c074:	e8df f000 	tbb	[pc, r0]
 800c078:	07060607 	.word	0x07060607
 800c07c:	06060606 	.word	0x06060606
 800c080:	07070606 	.word	0x07070606
 800c084:	2001      	movs	r0, #1
 800c086:	4770      	bx	lr
 800c088:	28cb      	cmp	r0, #203	@ 0xcb
 800c08a:	bf18      	it	ne
 800c08c:	2001      	movne	r0, #1
 800c08e:	4770      	bx	lr

0800c090 <rcl_get_zero_initialized_context>:
 800c090:	4a03      	ldr	r2, [pc, #12]	@ (800c0a0 <rcl_get_zero_initialized_context+0x10>)
 800c092:	4603      	mov	r3, r0
 800c094:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c098:	e883 0003 	stmia.w	r3, {r0, r1}
 800c09c:	4618      	mov	r0, r3
 800c09e:	4770      	bx	lr
 800c0a0:	0801201c 	.word	0x0801201c

0800c0a4 <rcl_context_is_valid>:
 800c0a4:	b118      	cbz	r0, 800c0ae <rcl_context_is_valid+0xa>
 800c0a6:	6840      	ldr	r0, [r0, #4]
 800c0a8:	3800      	subs	r0, #0
 800c0aa:	bf18      	it	ne
 800c0ac:	2001      	movne	r0, #1
 800c0ae:	4770      	bx	lr

0800c0b0 <__cleanup_context>:
 800c0b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c0b4:	4606      	mov	r6, r0
 800c0b6:	6800      	ldr	r0, [r0, #0]
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	6073      	str	r3, [r6, #4]
 800c0bc:	2800      	cmp	r0, #0
 800c0be:	d049      	beq.n	800c154 <__cleanup_context+0xa4>
 800c0c0:	6947      	ldr	r7, [r0, #20]
 800c0c2:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800c0c6:	f8d0 9010 	ldr.w	r9, [r0, #16]
 800c0ca:	b137      	cbz	r7, 800c0da <__cleanup_context+0x2a>
 800c0cc:	3014      	adds	r0, #20
 800c0ce:	f000 f9a5 	bl	800c41c <rcl_init_options_fini>
 800c0d2:	4607      	mov	r7, r0
 800c0d4:	2800      	cmp	r0, #0
 800c0d6:	d144      	bne.n	800c162 <__cleanup_context+0xb2>
 800c0d8:	6830      	ldr	r0, [r6, #0]
 800c0da:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800c0dc:	b143      	cbz	r3, 800c0f0 <__cleanup_context+0x40>
 800c0de:	3028      	adds	r0, #40	@ 0x28
 800c0e0:	f001 fc38 	bl	800d954 <rmw_context_fini>
 800c0e4:	b118      	cbz	r0, 800c0ee <__cleanup_context+0x3e>
 800c0e6:	2f00      	cmp	r7, #0
 800c0e8:	d03e      	beq.n	800c168 <__cleanup_context+0xb8>
 800c0ea:	f7fb fde5 	bl	8007cb8 <rcutils_reset_error>
 800c0ee:	6830      	ldr	r0, [r6, #0]
 800c0f0:	6a03      	ldr	r3, [r0, #32]
 800c0f2:	b1db      	cbz	r3, 800c12c <__cleanup_context+0x7c>
 800c0f4:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 800c0f8:	2a01      	cmp	r2, #1
 800c0fa:	f17c 0100 	sbcs.w	r1, ip, #0
 800c0fe:	db11      	blt.n	800c124 <__cleanup_context+0x74>
 800c100:	2400      	movs	r4, #0
 800c102:	4625      	mov	r5, r4
 800c104:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800c108:	4649      	mov	r1, r9
 800c10a:	b1b8      	cbz	r0, 800c13c <__cleanup_context+0x8c>
 800c10c:	47c0      	blx	r8
 800c10e:	6833      	ldr	r3, [r6, #0]
 800c110:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 800c114:	3401      	adds	r4, #1
 800c116:	f145 0500 	adc.w	r5, r5, #0
 800c11a:	4294      	cmp	r4, r2
 800c11c:	eb75 010c 	sbcs.w	r1, r5, ip
 800c120:	6a1b      	ldr	r3, [r3, #32]
 800c122:	dbef      	blt.n	800c104 <__cleanup_context+0x54>
 800c124:	4618      	mov	r0, r3
 800c126:	4649      	mov	r1, r9
 800c128:	47c0      	blx	r8
 800c12a:	6830      	ldr	r0, [r6, #0]
 800c12c:	4649      	mov	r1, r9
 800c12e:	47c0      	blx	r8
 800c130:	2300      	movs	r3, #0
 800c132:	e9c6 3300 	strd	r3, r3, [r6]
 800c136:	4638      	mov	r0, r7
 800c138:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c13c:	3401      	adds	r4, #1
 800c13e:	f145 0500 	adc.w	r5, r5, #0
 800c142:	4294      	cmp	r4, r2
 800c144:	eb75 010c 	sbcs.w	r1, r5, ip
 800c148:	dbdc      	blt.n	800c104 <__cleanup_context+0x54>
 800c14a:	4618      	mov	r0, r3
 800c14c:	4649      	mov	r1, r9
 800c14e:	47c0      	blx	r8
 800c150:	6830      	ldr	r0, [r6, #0]
 800c152:	e7eb      	b.n	800c12c <__cleanup_context+0x7c>
 800c154:	4607      	mov	r7, r0
 800c156:	2300      	movs	r3, #0
 800c158:	e9c6 3300 	strd	r3, r3, [r6]
 800c15c:	4638      	mov	r0, r7
 800c15e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c162:	f7fb fda9 	bl	8007cb8 <rcutils_reset_error>
 800c166:	e7b7      	b.n	800c0d8 <__cleanup_context+0x28>
 800c168:	f7ff ff7e 	bl	800c068 <rcl_convert_rmw_ret_to_rcl_ret>
 800c16c:	4607      	mov	r7, r0
 800c16e:	e7bc      	b.n	800c0ea <__cleanup_context+0x3a>

0800c170 <rcl_init>:
 800c170:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c174:	1e05      	subs	r5, r0, #0
 800c176:	b09c      	sub	sp, #112	@ 0x70
 800c178:	460e      	mov	r6, r1
 800c17a:	4690      	mov	r8, r2
 800c17c:	461f      	mov	r7, r3
 800c17e:	f340 8099 	ble.w	800c2b4 <rcl_init+0x144>
 800c182:	2900      	cmp	r1, #0
 800c184:	f000 8099 	beq.w	800c2ba <rcl_init+0x14a>
 800c188:	f1a1 0e04 	sub.w	lr, r1, #4
 800c18c:	f04f 0c00 	mov.w	ip, #0
 800c190:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 800c194:	f10c 0c01 	add.w	ip, ip, #1
 800c198:	2c00      	cmp	r4, #0
 800c19a:	f000 808e 	beq.w	800c2ba <rcl_init+0x14a>
 800c19e:	4565      	cmp	r5, ip
 800c1a0:	d1f6      	bne.n	800c190 <rcl_init+0x20>
 800c1a2:	f1b8 0f00 	cmp.w	r8, #0
 800c1a6:	f000 8088 	beq.w	800c2ba <rcl_init+0x14a>
 800c1aa:	f8d8 4000 	ldr.w	r4, [r8]
 800c1ae:	2c00      	cmp	r4, #0
 800c1b0:	f000 8083 	beq.w	800c2ba <rcl_init+0x14a>
 800c1b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c1b6:	f10d 0c5c 	add.w	ip, sp, #92	@ 0x5c
 800c1ba:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c1be:	6823      	ldr	r3, [r4, #0]
 800c1c0:	f8cc 3000 	str.w	r3, [ip]
 800c1c4:	a817      	add	r0, sp, #92	@ 0x5c
 800c1c6:	f7fb fd51 	bl	8007c6c <rcutils_allocator_is_valid>
 800c1ca:	2800      	cmp	r0, #0
 800c1cc:	d075      	beq.n	800c2ba <rcl_init+0x14a>
 800c1ce:	2f00      	cmp	r7, #0
 800c1d0:	d073      	beq.n	800c2ba <rcl_init+0x14a>
 800c1d2:	683b      	ldr	r3, [r7, #0]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d175      	bne.n	800c2c4 <rcl_init+0x154>
 800c1d8:	e9dd 321a 	ldrd	r3, r2, [sp, #104]	@ 0x68
 800c1dc:	2178      	movs	r1, #120	@ 0x78
 800c1de:	2001      	movs	r0, #1
 800c1e0:	4798      	blx	r3
 800c1e2:	4604      	mov	r4, r0
 800c1e4:	6038      	str	r0, [r7, #0]
 800c1e6:	2800      	cmp	r0, #0
 800c1e8:	f000 80a0 	beq.w	800c32c <rcl_init+0x1bc>
 800c1ec:	a802      	add	r0, sp, #8
 800c1ee:	f000 ffcb 	bl	800d188 <rmw_get_zero_initialized_context>
 800c1f2:	a902      	add	r1, sp, #8
 800c1f4:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800c1f8:	2250      	movs	r2, #80	@ 0x50
 800c1fa:	ac17      	add	r4, sp, #92	@ 0x5c
 800c1fc:	f004 fca7 	bl	8010b4e <memcpy>
 800c200:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c202:	f8d7 e000 	ldr.w	lr, [r7]
 800c206:	46f4      	mov	ip, lr
 800c208:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c20c:	6823      	ldr	r3, [r4, #0]
 800c20e:	f8cc 3000 	str.w	r3, [ip]
 800c212:	f10e 0114 	add.w	r1, lr, #20
 800c216:	4640      	mov	r0, r8
 800c218:	f000 f92a 	bl	800c470 <rcl_init_options_copy>
 800c21c:	4604      	mov	r4, r0
 800c21e:	2800      	cmp	r0, #0
 800c220:	d144      	bne.n	800c2ac <rcl_init+0x13c>
 800c222:	f8d7 9000 	ldr.w	r9, [r7]
 800c226:	ea4f 78e5 	mov.w	r8, r5, asr #31
 800c22a:	f8c9 0020 	str.w	r0, [r9, #32]
 800c22e:	f8c9 5018 	str.w	r5, [r9, #24]
 800c232:	f8c9 801c 	str.w	r8, [r9, #28]
 800c236:	2d00      	cmp	r5, #0
 800c238:	d04b      	beq.n	800c2d2 <rcl_init+0x162>
 800c23a:	2e00      	cmp	r6, #0
 800c23c:	d049      	beq.n	800c2d2 <rcl_init+0x162>
 800c23e:	e9dd 321a 	ldrd	r3, r2, [sp, #104]	@ 0x68
 800c242:	2104      	movs	r1, #4
 800c244:	4628      	mov	r0, r5
 800c246:	4798      	blx	r3
 800c248:	f8c9 0020 	str.w	r0, [r9, #32]
 800c24c:	f8d7 9000 	ldr.w	r9, [r7]
 800c250:	f8d9 3020 	ldr.w	r3, [r9, #32]
 800c254:	46ca      	mov	sl, r9
 800c256:	b343      	cbz	r3, 800c2aa <rcl_init+0x13a>
 800c258:	2d01      	cmp	r5, #1
 800c25a:	f178 0300 	sbcs.w	r3, r8, #0
 800c25e:	db38      	blt.n	800c2d2 <rcl_init+0x162>
 800c260:	2400      	movs	r4, #0
 800c262:	3e04      	subs	r6, #4
 800c264:	46a1      	mov	r9, r4
 800c266:	e00b      	b.n	800c280 <rcl_init+0x110>
 800c268:	6831      	ldr	r1, [r6, #0]
 800c26a:	f004 fc70 	bl	8010b4e <memcpy>
 800c26e:	3401      	adds	r4, #1
 800c270:	f149 0900 	adc.w	r9, r9, #0
 800c274:	45c8      	cmp	r8, r9
 800c276:	bf08      	it	eq
 800c278:	42a5      	cmpeq	r5, r4
 800c27a:	d028      	beq.n	800c2ce <rcl_init+0x15e>
 800c27c:	f8d7 a000 	ldr.w	sl, [r7]
 800c280:	f856 0f04 	ldr.w	r0, [r6, #4]!
 800c284:	f7f3 ffce 	bl	8000224 <strlen>
 800c288:	1c42      	adds	r2, r0, #1
 800c28a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c28c:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 800c28e:	f8da a020 	ldr.w	sl, [sl, #32]
 800c292:	9201      	str	r2, [sp, #4]
 800c294:	4610      	mov	r0, r2
 800c296:	4798      	blx	r3
 800c298:	683b      	ldr	r3, [r7, #0]
 800c29a:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 800c29e:	6a1b      	ldr	r3, [r3, #32]
 800c2a0:	9a01      	ldr	r2, [sp, #4]
 800c2a2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800c2a6:	2800      	cmp	r0, #0
 800c2a8:	d1de      	bne.n	800c268 <rcl_init+0xf8>
 800c2aa:	240a      	movs	r4, #10
 800c2ac:	4638      	mov	r0, r7
 800c2ae:	f7ff feff 	bl	800c0b0 <__cleanup_context>
 800c2b2:	e003      	b.n	800c2bc <rcl_init+0x14c>
 800c2b4:	2900      	cmp	r1, #0
 800c2b6:	f43f af74 	beq.w	800c1a2 <rcl_init+0x32>
 800c2ba:	240b      	movs	r4, #11
 800c2bc:	4620      	mov	r0, r4
 800c2be:	b01c      	add	sp, #112	@ 0x70
 800c2c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2c4:	2464      	movs	r4, #100	@ 0x64
 800c2c6:	4620      	mov	r0, r4
 800c2c8:	b01c      	add	sp, #112	@ 0x70
 800c2ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2ce:	f8d7 9000 	ldr.w	r9, [r7]
 800c2d2:	491d      	ldr	r1, [pc, #116]	@ (800c348 <rcl_init+0x1d8>)
 800c2d4:	680b      	ldr	r3, [r1, #0]
 800c2d6:	3301      	adds	r3, #1
 800c2d8:	d023      	beq.n	800c322 <rcl_init+0x1b2>
 800c2da:	600b      	str	r3, [r1, #0]
 800c2dc:	461a      	mov	r2, r3
 800c2de:	2400      	movs	r4, #0
 800c2e0:	f8d9 0014 	ldr.w	r0, [r9, #20]
 800c2e4:	607b      	str	r3, [r7, #4]
 800c2e6:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800c2e8:	6182      	str	r2, [r0, #24]
 800c2ea:	3301      	adds	r3, #1
 800c2ec:	61c4      	str	r4, [r0, #28]
 800c2ee:	d01f      	beq.n	800c330 <rcl_init+0x1c0>
 800c2f0:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 800c2f4:	b94b      	cbnz	r3, 800c30a <rcl_init+0x19a>
 800c2f6:	3030      	adds	r0, #48	@ 0x30
 800c2f8:	f000 f926 	bl	800c548 <rcl_get_localhost_only>
 800c2fc:	4604      	mov	r4, r0
 800c2fe:	2800      	cmp	r0, #0
 800c300:	d1d4      	bne.n	800c2ac <rcl_init+0x13c>
 800c302:	f8d7 9000 	ldr.w	r9, [r7]
 800c306:	f8d9 0014 	ldr.w	r0, [r9, #20]
 800c30a:	f109 0128 	add.w	r1, r9, #40	@ 0x28
 800c30e:	3018      	adds	r0, #24
 800c310:	f001 f9ea 	bl	800d6e8 <rmw_init>
 800c314:	4604      	mov	r4, r0
 800c316:	2800      	cmp	r0, #0
 800c318:	d0d0      	beq.n	800c2bc <rcl_init+0x14c>
 800c31a:	f7ff fea5 	bl	800c068 <rcl_convert_rmw_ret_to_rcl_ret>
 800c31e:	4604      	mov	r4, r0
 800c320:	e7c4      	b.n	800c2ac <rcl_init+0x13c>
 800c322:	2201      	movs	r2, #1
 800c324:	461c      	mov	r4, r3
 800c326:	600a      	str	r2, [r1, #0]
 800c328:	4613      	mov	r3, r2
 800c32a:	e7d9      	b.n	800c2e0 <rcl_init+0x170>
 800c32c:	240a      	movs	r4, #10
 800c32e:	e7c5      	b.n	800c2bc <rcl_init+0x14c>
 800c330:	3024      	adds	r0, #36	@ 0x24
 800c332:	f003 fb13 	bl	800f95c <rcl_get_default_domain_id>
 800c336:	4604      	mov	r4, r0
 800c338:	2800      	cmp	r0, #0
 800c33a:	d1b7      	bne.n	800c2ac <rcl_init+0x13c>
 800c33c:	f8d7 9000 	ldr.w	r9, [r7]
 800c340:	f8d9 0014 	ldr.w	r0, [r9, #20]
 800c344:	e7d4      	b.n	800c2f0 <rcl_init+0x180>
 800c346:	bf00      	nop
 800c348:	2000d9fc 	.word	0x2000d9fc

0800c34c <rcl_get_zero_initialized_init_options>:
 800c34c:	2000      	movs	r0, #0
 800c34e:	4770      	bx	lr

0800c350 <rcl_init_options_init>:
 800c350:	b084      	sub	sp, #16
 800c352:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c354:	b097      	sub	sp, #92	@ 0x5c
 800c356:	ae1d      	add	r6, sp, #116	@ 0x74
 800c358:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 800c35c:	2800      	cmp	r0, #0
 800c35e:	d058      	beq.n	800c412 <rcl_init_options_init+0xc2>
 800c360:	6803      	ldr	r3, [r0, #0]
 800c362:	4605      	mov	r5, r0
 800c364:	b133      	cbz	r3, 800c374 <rcl_init_options_init+0x24>
 800c366:	2464      	movs	r4, #100	@ 0x64
 800c368:	4620      	mov	r0, r4
 800c36a:	b017      	add	sp, #92	@ 0x5c
 800c36c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800c370:	b004      	add	sp, #16
 800c372:	4770      	bx	lr
 800c374:	4630      	mov	r0, r6
 800c376:	f7fb fc79 	bl	8007c6c <rcutils_allocator_is_valid>
 800c37a:	2800      	cmp	r0, #0
 800c37c:	d049      	beq.n	800c412 <rcl_init_options_init+0xc2>
 800c37e:	46b4      	mov	ip, r6
 800c380:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c384:	ac11      	add	r4, sp, #68	@ 0x44
 800c386:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c388:	f8dc 3000 	ldr.w	r3, [ip]
 800c38c:	6023      	str	r3, [r4, #0]
 800c38e:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800c390:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c392:	2050      	movs	r0, #80	@ 0x50
 800c394:	4798      	blx	r3
 800c396:	4604      	mov	r4, r0
 800c398:	6028      	str	r0, [r5, #0]
 800c39a:	2800      	cmp	r0, #0
 800c39c:	d03b      	beq.n	800c416 <rcl_init_options_init+0xc6>
 800c39e:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 800c3a2:	4686      	mov	lr, r0
 800c3a4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c3a8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c3ac:	f8dc 3000 	ldr.w	r3, [ip]
 800c3b0:	f8ce 3000 	str.w	r3, [lr]
 800c3b4:	a802      	add	r0, sp, #8
 800c3b6:	f000 fef7 	bl	800d1a8 <rmw_get_zero_initialized_init_options>
 800c3ba:	f10d 0e08 	add.w	lr, sp, #8
 800c3be:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c3c2:	f104 0c18 	add.w	ip, r4, #24
 800c3c6:	682f      	ldr	r7, [r5, #0]
 800c3c8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c3cc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c3d0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c3d4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c3d8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c3dc:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800c3e0:	ac20      	add	r4, sp, #128	@ 0x80
 800c3e2:	e88c 0003 	stmia.w	ip, {r0, r1}
 800c3e6:	e894 0003 	ldmia.w	r4, {r0, r1}
 800c3ea:	e88d 0003 	stmia.w	sp, {r0, r1}
 800c3ee:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800c3f2:	f107 0018 	add.w	r0, r7, #24
 800c3f6:	f001 f855 	bl	800d4a4 <rmw_init_options_init>
 800c3fa:	4604      	mov	r4, r0
 800c3fc:	2800      	cmp	r0, #0
 800c3fe:	d0b3      	beq.n	800c368 <rcl_init_options_init+0x18>
 800c400:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800c402:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800c404:	6828      	ldr	r0, [r5, #0]
 800c406:	4798      	blx	r3
 800c408:	4620      	mov	r0, r4
 800c40a:	f7ff fe2d 	bl	800c068 <rcl_convert_rmw_ret_to_rcl_ret>
 800c40e:	4604      	mov	r4, r0
 800c410:	e7aa      	b.n	800c368 <rcl_init_options_init+0x18>
 800c412:	240b      	movs	r4, #11
 800c414:	e7a8      	b.n	800c368 <rcl_init_options_init+0x18>
 800c416:	240a      	movs	r4, #10
 800c418:	e7a6      	b.n	800c368 <rcl_init_options_init+0x18>
 800c41a:	bf00      	nop

0800c41c <rcl_init_options_fini>:
 800c41c:	b530      	push	{r4, r5, lr}
 800c41e:	b087      	sub	sp, #28
 800c420:	b1f0      	cbz	r0, 800c460 <rcl_init_options_fini+0x44>
 800c422:	6803      	ldr	r3, [r0, #0]
 800c424:	4604      	mov	r4, r0
 800c426:	b1db      	cbz	r3, 800c460 <rcl_init_options_fini+0x44>
 800c428:	469c      	mov	ip, r3
 800c42a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c42e:	f10d 0e04 	add.w	lr, sp, #4
 800c432:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c436:	f8dc 3000 	ldr.w	r3, [ip]
 800c43a:	f8ce 3000 	str.w	r3, [lr]
 800c43e:	a801      	add	r0, sp, #4
 800c440:	f7fb fc14 	bl	8007c6c <rcutils_allocator_is_valid>
 800c444:	b160      	cbz	r0, 800c460 <rcl_init_options_fini+0x44>
 800c446:	6820      	ldr	r0, [r4, #0]
 800c448:	3018      	adds	r0, #24
 800c44a:	f001 f901 	bl	800d650 <rmw_init_options_fini>
 800c44e:	4605      	mov	r5, r0
 800c450:	b950      	cbnz	r0, 800c468 <rcl_init_options_fini+0x4c>
 800c452:	6820      	ldr	r0, [r4, #0]
 800c454:	9b02      	ldr	r3, [sp, #8]
 800c456:	9905      	ldr	r1, [sp, #20]
 800c458:	4798      	blx	r3
 800c45a:	4628      	mov	r0, r5
 800c45c:	b007      	add	sp, #28
 800c45e:	bd30      	pop	{r4, r5, pc}
 800c460:	250b      	movs	r5, #11
 800c462:	4628      	mov	r0, r5
 800c464:	b007      	add	sp, #28
 800c466:	bd30      	pop	{r4, r5, pc}
 800c468:	f7ff fdfe 	bl	800c068 <rcl_convert_rmw_ret_to_rcl_ret>
 800c46c:	4605      	mov	r5, r0
 800c46e:	e7f8      	b.n	800c462 <rcl_init_options_fini+0x46>

0800c470 <rcl_init_options_copy>:
 800c470:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c474:	b094      	sub	sp, #80	@ 0x50
 800c476:	2800      	cmp	r0, #0
 800c478:	d058      	beq.n	800c52c <rcl_init_options_copy+0xbc>
 800c47a:	4604      	mov	r4, r0
 800c47c:	6800      	ldr	r0, [r0, #0]
 800c47e:	2800      	cmp	r0, #0
 800c480:	d054      	beq.n	800c52c <rcl_init_options_copy+0xbc>
 800c482:	460e      	mov	r6, r1
 800c484:	f7fb fbf2 	bl	8007c6c <rcutils_allocator_is_valid>
 800c488:	2800      	cmp	r0, #0
 800c48a:	d04f      	beq.n	800c52c <rcl_init_options_copy+0xbc>
 800c48c:	2e00      	cmp	r6, #0
 800c48e:	d04d      	beq.n	800c52c <rcl_init_options_copy+0xbc>
 800c490:	6833      	ldr	r3, [r6, #0]
 800c492:	b123      	cbz	r3, 800c49e <rcl_init_options_copy+0x2e>
 800c494:	2464      	movs	r4, #100	@ 0x64
 800c496:	4620      	mov	r0, r4
 800c498:	b014      	add	sp, #80	@ 0x50
 800c49a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c49e:	6827      	ldr	r7, [r4, #0]
 800c4a0:	46bc      	mov	ip, r7
 800c4a2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c4a6:	ad0f      	add	r5, sp, #60	@ 0x3c
 800c4a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c4aa:	f8dc 3000 	ldr.w	r3, [ip]
 800c4ae:	f8d7 8000 	ldr.w	r8, [r7]
 800c4b2:	602b      	str	r3, [r5, #0]
 800c4b4:	4619      	mov	r1, r3
 800c4b6:	2050      	movs	r0, #80	@ 0x50
 800c4b8:	47c0      	blx	r8
 800c4ba:	4605      	mov	r5, r0
 800c4bc:	6030      	str	r0, [r6, #0]
 800c4be:	b3d0      	cbz	r0, 800c536 <rcl_init_options_copy+0xc6>
 800c4c0:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 800c4c4:	4686      	mov	lr, r0
 800c4c6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c4ca:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c4ce:	f8dc 3000 	ldr.w	r3, [ip]
 800c4d2:	f8ce 3000 	str.w	r3, [lr]
 800c4d6:	4668      	mov	r0, sp
 800c4d8:	f000 fe66 	bl	800d1a8 <rmw_get_zero_initialized_init_options>
 800c4dc:	46ee      	mov	lr, sp
 800c4de:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c4e2:	f105 0c18 	add.w	ip, r5, #24
 800c4e6:	6824      	ldr	r4, [r4, #0]
 800c4e8:	6835      	ldr	r5, [r6, #0]
 800c4ea:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c4ee:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c4f2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c4f6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c4fa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c4fe:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800c502:	e88c 0003 	stmia.w	ip, {r0, r1}
 800c506:	f104 0018 	add.w	r0, r4, #24
 800c50a:	f105 0118 	add.w	r1, r5, #24
 800c50e:	f001 f82b 	bl	800d568 <rmw_init_options_copy>
 800c512:	4604      	mov	r4, r0
 800c514:	2800      	cmp	r0, #0
 800c516:	d0be      	beq.n	800c496 <rcl_init_options_copy+0x26>
 800c518:	f7fb fbb6 	bl	8007c88 <rcutils_get_error_string>
 800c51c:	f7fb fbcc 	bl	8007cb8 <rcutils_reset_error>
 800c520:	4630      	mov	r0, r6
 800c522:	f7ff ff7b 	bl	800c41c <rcl_init_options_fini>
 800c526:	b140      	cbz	r0, 800c53a <rcl_init_options_copy+0xca>
 800c528:	4604      	mov	r4, r0
 800c52a:	e7b4      	b.n	800c496 <rcl_init_options_copy+0x26>
 800c52c:	240b      	movs	r4, #11
 800c52e:	4620      	mov	r0, r4
 800c530:	b014      	add	sp, #80	@ 0x50
 800c532:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c536:	240a      	movs	r4, #10
 800c538:	e7ad      	b.n	800c496 <rcl_init_options_copy+0x26>
 800c53a:	4620      	mov	r0, r4
 800c53c:	b014      	add	sp, #80	@ 0x50
 800c53e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c542:	f7ff bd91 	b.w	800c068 <rcl_convert_rmw_ret_to_rcl_ret>
 800c546:	bf00      	nop

0800c548 <rcl_get_localhost_only>:
 800c548:	b510      	push	{r4, lr}
 800c54a:	b082      	sub	sp, #8
 800c54c:	2300      	movs	r3, #0
 800c54e:	9301      	str	r3, [sp, #4]
 800c550:	b1b8      	cbz	r0, 800c582 <rcl_get_localhost_only+0x3a>
 800c552:	4604      	mov	r4, r0
 800c554:	a901      	add	r1, sp, #4
 800c556:	480c      	ldr	r0, [pc, #48]	@ (800c588 <rcl_get_localhost_only+0x40>)
 800c558:	f000 fb2a 	bl	800cbb0 <rcutils_get_env>
 800c55c:	b110      	cbz	r0, 800c564 <rcl_get_localhost_only+0x1c>
 800c55e:	2001      	movs	r0, #1
 800c560:	b002      	add	sp, #8
 800c562:	bd10      	pop	{r4, pc}
 800c564:	9b01      	ldr	r3, [sp, #4]
 800c566:	b113      	cbz	r3, 800c56e <rcl_get_localhost_only+0x26>
 800c568:	781a      	ldrb	r2, [r3, #0]
 800c56a:	2a31      	cmp	r2, #49	@ 0x31
 800c56c:	d004      	beq.n	800c578 <rcl_get_localhost_only+0x30>
 800c56e:	2302      	movs	r3, #2
 800c570:	2000      	movs	r0, #0
 800c572:	7023      	strb	r3, [r4, #0]
 800c574:	b002      	add	sp, #8
 800c576:	bd10      	pop	{r4, pc}
 800c578:	785b      	ldrb	r3, [r3, #1]
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d1f7      	bne.n	800c56e <rcl_get_localhost_only+0x26>
 800c57e:	2301      	movs	r3, #1
 800c580:	e7f6      	b.n	800c570 <rcl_get_localhost_only+0x28>
 800c582:	200b      	movs	r0, #11
 800c584:	b002      	add	sp, #8
 800c586:	bd10      	pop	{r4, pc}
 800c588:	08011c30 	.word	0x08011c30

0800c58c <rcl_get_zero_initialized_node>:
 800c58c:	4a03      	ldr	r2, [pc, #12]	@ (800c59c <rcl_get_zero_initialized_node+0x10>)
 800c58e:	4603      	mov	r3, r0
 800c590:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c594:	e883 0003 	stmia.w	r3, {r0, r1}
 800c598:	4618      	mov	r0, r3
 800c59a:	4770      	bx	lr
 800c59c:	08012024 	.word	0x08012024

0800c5a0 <rcl_node_init>:
 800c5a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5a4:	b0a9      	sub	sp, #164	@ 0xa4
 800c5a6:	4604      	mov	r4, r0
 800c5a8:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 800c5ac:	a823      	add	r0, sp, #140	@ 0x8c
 800c5ae:	460e      	mov	r6, r1
 800c5b0:	4615      	mov	r5, r2
 800c5b2:	461f      	mov	r7, r3
 800c5b4:	f003 fbfa 	bl	800fdac <rcl_guard_condition_get_default_options>
 800c5b8:	f1b8 0f00 	cmp.w	r8, #0
 800c5bc:	f000 80e6 	beq.w	800c78c <rcl_node_init+0x1ec>
 800c5c0:	4640      	mov	r0, r8
 800c5c2:	f7fb fb53 	bl	8007c6c <rcutils_allocator_is_valid>
 800c5c6:	2800      	cmp	r0, #0
 800c5c8:	f000 80e0 	beq.w	800c78c <rcl_node_init+0x1ec>
 800c5cc:	2e00      	cmp	r6, #0
 800c5ce:	f000 80dd 	beq.w	800c78c <rcl_node_init+0x1ec>
 800c5d2:	2d00      	cmp	r5, #0
 800c5d4:	f000 80da 	beq.w	800c78c <rcl_node_init+0x1ec>
 800c5d8:	2c00      	cmp	r4, #0
 800c5da:	f000 80d7 	beq.w	800c78c <rcl_node_init+0x1ec>
 800c5de:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800c5e2:	f1b9 0f00 	cmp.w	r9, #0
 800c5e6:	f040 80fd 	bne.w	800c7e4 <rcl_node_init+0x244>
 800c5ea:	2f00      	cmp	r7, #0
 800c5ec:	f000 80ce 	beq.w	800c78c <rcl_node_init+0x1ec>
 800c5f0:	4638      	mov	r0, r7
 800c5f2:	f7ff fd57 	bl	800c0a4 <rcl_context_is_valid>
 800c5f6:	4682      	mov	sl, r0
 800c5f8:	2800      	cmp	r0, #0
 800c5fa:	f000 80cd 	beq.w	800c798 <rcl_node_init+0x1f8>
 800c5fe:	464a      	mov	r2, r9
 800c600:	a922      	add	r1, sp, #136	@ 0x88
 800c602:	4630      	mov	r0, r6
 800c604:	f8cd 9088 	str.w	r9, [sp, #136]	@ 0x88
 800c608:	f000 fec4 	bl	800d394 <rmw_validate_node_name>
 800c60c:	4681      	mov	r9, r0
 800c60e:	2800      	cmp	r0, #0
 800c610:	f040 80be 	bne.w	800c790 <rcl_node_init+0x1f0>
 800c614:	9822      	ldr	r0, [sp, #136]	@ 0x88
 800c616:	2800      	cmp	r0, #0
 800c618:	f040 80f0 	bne.w	800c7fc <rcl_node_init+0x25c>
 800c61c:	4628      	mov	r0, r5
 800c61e:	f7f3 fe01 	bl	8000224 <strlen>
 800c622:	2800      	cmp	r0, #0
 800c624:	f040 80bb 	bne.w	800c79e <rcl_node_init+0x1fe>
 800c628:	4d7c      	ldr	r5, [pc, #496]	@ (800c81c <rcl_node_init+0x27c>)
 800c62a:	a922      	add	r1, sp, #136	@ 0x88
 800c62c:	2200      	movs	r2, #0
 800c62e:	4628      	mov	r0, r5
 800c630:	f000 fe92 	bl	800d358 <rmw_validate_namespace>
 800c634:	4681      	mov	r9, r0
 800c636:	2800      	cmp	r0, #0
 800c638:	f040 80aa 	bne.w	800c790 <rcl_node_init+0x1f0>
 800c63c:	4682      	mov	sl, r0
 800c63e:	9822      	ldr	r0, [sp, #136]	@ 0x88
 800c640:	2800      	cmp	r0, #0
 800c642:	f040 80e0 	bne.w	800c806 <rcl_node_init+0x266>
 800c646:	f8d8 3000 	ldr.w	r3, [r8]
 800c64a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800c64e:	2078      	movs	r0, #120	@ 0x78
 800c650:	4798      	blx	r3
 800c652:	4681      	mov	r9, r0
 800c654:	6060      	str	r0, [r4, #4]
 800c656:	2800      	cmp	r0, #0
 800c658:	f000 80ca 	beq.w	800c7f0 <rcl_node_init+0x250>
 800c65c:	2200      	movs	r2, #0
 800c65e:	2300      	movs	r3, #0
 800c660:	e9c9 231a 	strd	r2, r3, [r9, #104]	@ 0x68
 800c664:	e9c9 231c 	strd	r2, r3, [r9, #112]	@ 0x70
 800c668:	a808      	add	r0, sp, #32
 800c66a:	f000 f907 	bl	800c87c <rcl_node_get_default_options>
 800c66e:	a908      	add	r1, sp, #32
 800c670:	4648      	mov	r0, r9
 800c672:	2268      	movs	r2, #104	@ 0x68
 800c674:	f004 fa6b 	bl	8010b4e <memcpy>
 800c678:	6861      	ldr	r1, [r4, #4]
 800c67a:	6027      	str	r7, [r4, #0]
 800c67c:	4640      	mov	r0, r8
 800c67e:	f000 f90b 	bl	800c898 <rcl_node_options_copy>
 800c682:	2800      	cmp	r0, #0
 800c684:	d158      	bne.n	800c738 <rcl_node_init+0x198>
 800c686:	4628      	mov	r0, r5
 800c688:	f7f3 fdcc 	bl	8000224 <strlen>
 800c68c:	4428      	add	r0, r5
 800c68e:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 800c692:	e9cd 5603 	strd	r5, r6, [sp, #12]
 800c696:	2b2f      	cmp	r3, #47	@ 0x2f
 800c698:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800c69c:	9300      	str	r3, [sp, #0]
 800c69e:	bf0c      	ite	eq
 800c6a0:	4b5f      	ldreq	r3, [pc, #380]	@ (800c820 <rcl_node_init+0x280>)
 800c6a2:	4b60      	ldrne	r3, [pc, #384]	@ (800c824 <rcl_node_init+0x284>)
 800c6a4:	9302      	str	r3, [sp, #8]
 800c6a6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c6aa:	9301      	str	r3, [sp, #4]
 800c6ac:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800c6b0:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800c6b4:	f000 fa94 	bl	800cbe0 <rcutils_format_string_limit>
 800c6b8:	6823      	ldr	r3, [r4, #0]
 800c6ba:	f8c9 0074 	str.w	r0, [r9, #116]	@ 0x74
 800c6be:	6818      	ldr	r0, [r3, #0]
 800c6c0:	4631      	mov	r1, r6
 800c6c2:	3028      	adds	r0, #40	@ 0x28
 800c6c4:	462a      	mov	r2, r5
 800c6c6:	6866      	ldr	r6, [r4, #4]
 800c6c8:	f001 fa62 	bl	800db90 <rmw_create_node>
 800c6cc:	6863      	ldr	r3, [r4, #4]
 800c6ce:	66b0      	str	r0, [r6, #104]	@ 0x68
 800c6d0:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800c6d2:	2800      	cmp	r0, #0
 800c6d4:	d032      	beq.n	800c73c <rcl_node_init+0x19c>
 800c6d6:	f001 faef 	bl	800dcb8 <rmw_node_get_graph_guard_condition>
 800c6da:	4681      	mov	r9, r0
 800c6dc:	b360      	cbz	r0, 800c738 <rcl_node_init+0x198>
 800c6de:	f8d8 3000 	ldr.w	r3, [r8]
 800c6e2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800c6e6:	6866      	ldr	r6, [r4, #4]
 800c6e8:	2008      	movs	r0, #8
 800c6ea:	4798      	blx	r3
 800c6ec:	6863      	ldr	r3, [r4, #4]
 800c6ee:	66f0      	str	r0, [r6, #108]	@ 0x6c
 800c6f0:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 800c6f4:	f1bb 0f00 	cmp.w	fp, #0
 800c6f8:	d020      	beq.n	800c73c <rcl_node_init+0x19c>
 800c6fa:	a806      	add	r0, sp, #24
 800c6fc:	f003 fac6 	bl	800fc8c <rcl_get_zero_initialized_guard_condition>
 800c700:	a806      	add	r0, sp, #24
 800c702:	c803      	ldmia	r0, {r0, r1}
 800c704:	6863      	ldr	r3, [r4, #4]
 800c706:	46c4      	mov	ip, r8
 800c708:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 800c70c:	e88b 0003 	stmia.w	fp, {r0, r1}
 800c710:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c714:	ae23      	add	r6, sp, #140	@ 0x8c
 800c716:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800c718:	f8dc 3000 	ldr.w	r3, [ip]
 800c71c:	6033      	str	r3, [r6, #0]
 800c71e:	ab28      	add	r3, sp, #160	@ 0xa0
 800c720:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800c724:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800c728:	4649      	mov	r1, r9
 800c72a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c72c:	463a      	mov	r2, r7
 800c72e:	4670      	mov	r0, lr
 800c730:	f003 fab6 	bl	800fca0 <rcl_guard_condition_init_from_rmw>
 800c734:	4681      	mov	r9, r0
 800c736:	b328      	cbz	r0, 800c784 <rcl_node_init+0x1e4>
 800c738:	6863      	ldr	r3, [r4, #4]
 800c73a:	b1f3      	cbz	r3, 800c77a <rcl_node_init+0x1da>
 800c73c:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800c73e:	b128      	cbz	r0, 800c74c <rcl_node_init+0x1ac>
 800c740:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c744:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800c748:	4798      	blx	r3
 800c74a:	6863      	ldr	r3, [r4, #4]
 800c74c:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 800c74e:	b110      	cbz	r0, 800c756 <rcl_node_init+0x1b6>
 800c750:	f001 fa36 	bl	800dbc0 <rmw_destroy_node>
 800c754:	6863      	ldr	r3, [r4, #4]
 800c756:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800c758:	b148      	cbz	r0, 800c76e <rcl_node_init+0x1ce>
 800c75a:	f003 fb01 	bl	800fd60 <rcl_guard_condition_fini>
 800c75e:	6863      	ldr	r3, [r4, #4]
 800c760:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800c764:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800c766:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c76a:	4798      	blx	r3
 800c76c:	6863      	ldr	r3, [r4, #4]
 800c76e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800c772:	4618      	mov	r0, r3
 800c774:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c778:	4798      	blx	r3
 800c77a:	2300      	movs	r3, #0
 800c77c:	e9c4 3300 	strd	r3, r3, [r4]
 800c780:	f04f 0901 	mov.w	r9, #1
 800c784:	f1ba 0f00 	cmp.w	sl, #0
 800c788:	d125      	bne.n	800c7d6 <rcl_node_init+0x236>
 800c78a:	e001      	b.n	800c790 <rcl_node_init+0x1f0>
 800c78c:	f04f 090b 	mov.w	r9, #11
 800c790:	4648      	mov	r0, r9
 800c792:	b029      	add	sp, #164	@ 0xa4
 800c794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c798:	f04f 0965 	mov.w	r9, #101	@ 0x65
 800c79c:	e7f8      	b.n	800c790 <rcl_node_init+0x1f0>
 800c79e:	782b      	ldrb	r3, [r5, #0]
 800c7a0:	2b2f      	cmp	r3, #47	@ 0x2f
 800c7a2:	f43f af42 	beq.w	800c62a <rcl_node_init+0x8a>
 800c7a6:	9503      	str	r5, [sp, #12]
 800c7a8:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800c7ac:	9300      	str	r3, [sp, #0]
 800c7ae:	4b1e      	ldr	r3, [pc, #120]	@ (800c828 <rcl_node_init+0x288>)
 800c7b0:	9302      	str	r3, [sp, #8]
 800c7b2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c7b6:	9301      	str	r3, [sp, #4]
 800c7b8:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800c7bc:	f000 fa10 	bl	800cbe0 <rcutils_format_string_limit>
 800c7c0:	4605      	mov	r5, r0
 800c7c2:	b340      	cbz	r0, 800c816 <rcl_node_init+0x276>
 800c7c4:	2200      	movs	r2, #0
 800c7c6:	a922      	add	r1, sp, #136	@ 0x88
 800c7c8:	9222      	str	r2, [sp, #136]	@ 0x88
 800c7ca:	f000 fdc5 	bl	800d358 <rmw_validate_namespace>
 800c7ce:	4681      	mov	r9, r0
 800c7d0:	2800      	cmp	r0, #0
 800c7d2:	f43f af34 	beq.w	800c63e <rcl_node_init+0x9e>
 800c7d6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c7da:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800c7de:	4628      	mov	r0, r5
 800c7e0:	4798      	blx	r3
 800c7e2:	e7d5      	b.n	800c790 <rcl_node_init+0x1f0>
 800c7e4:	f04f 0964 	mov.w	r9, #100	@ 0x64
 800c7e8:	4648      	mov	r0, r9
 800c7ea:	b029      	add	sp, #164	@ 0xa4
 800c7ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7f0:	f04f 090a 	mov.w	r9, #10
 800c7f4:	f1ba 0f00 	cmp.w	sl, #0
 800c7f8:	d1ed      	bne.n	800c7d6 <rcl_node_init+0x236>
 800c7fa:	e7c9      	b.n	800c790 <rcl_node_init+0x1f0>
 800c7fc:	f000 fe1c 	bl	800d438 <rmw_node_name_validation_result_string>
 800c800:	f04f 09c9 	mov.w	r9, #201	@ 0xc9
 800c804:	e7c4      	b.n	800c790 <rcl_node_init+0x1f0>
 800c806:	f000 fdb9 	bl	800d37c <rmw_namespace_validation_result_string>
 800c80a:	f04f 09ca 	mov.w	r9, #202	@ 0xca
 800c80e:	f1ba 0f00 	cmp.w	sl, #0
 800c812:	d1e0      	bne.n	800c7d6 <rcl_node_init+0x236>
 800c814:	e7bc      	b.n	800c790 <rcl_node_init+0x1f0>
 800c816:	f04f 090a 	mov.w	r9, #10
 800c81a:	e7b9      	b.n	800c790 <rcl_node_init+0x1f0>
 800c81c:	08011c48 	.word	0x08011c48
 800c820:	08011b18 	.word	0x08011b18
 800c824:	08011c50 	.word	0x08011c50
 800c828:	08011c4c 	.word	0x08011c4c

0800c82c <rcl_node_is_valid>:
 800c82c:	b130      	cbz	r0, 800c83c <rcl_node_is_valid+0x10>
 800c82e:	6843      	ldr	r3, [r0, #4]
 800c830:	b123      	cbz	r3, 800c83c <rcl_node_is_valid+0x10>
 800c832:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c834:	b113      	cbz	r3, 800c83c <rcl_node_is_valid+0x10>
 800c836:	6800      	ldr	r0, [r0, #0]
 800c838:	f7ff bc34 	b.w	800c0a4 <rcl_context_is_valid>
 800c83c:	2000      	movs	r0, #0
 800c83e:	4770      	bx	lr

0800c840 <rcl_node_get_name>:
 800c840:	b120      	cbz	r0, 800c84c <rcl_node_get_name+0xc>
 800c842:	6840      	ldr	r0, [r0, #4]
 800c844:	b110      	cbz	r0, 800c84c <rcl_node_get_name+0xc>
 800c846:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800c848:	b100      	cbz	r0, 800c84c <rcl_node_get_name+0xc>
 800c84a:	6880      	ldr	r0, [r0, #8]
 800c84c:	4770      	bx	lr
 800c84e:	bf00      	nop

0800c850 <rcl_node_get_namespace>:
 800c850:	b120      	cbz	r0, 800c85c <rcl_node_get_namespace+0xc>
 800c852:	6840      	ldr	r0, [r0, #4]
 800c854:	b110      	cbz	r0, 800c85c <rcl_node_get_namespace+0xc>
 800c856:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800c858:	b100      	cbz	r0, 800c85c <rcl_node_get_namespace+0xc>
 800c85a:	68c0      	ldr	r0, [r0, #12]
 800c85c:	4770      	bx	lr
 800c85e:	bf00      	nop

0800c860 <rcl_node_get_options>:
 800c860:	b128      	cbz	r0, 800c86e <rcl_node_get_options+0xe>
 800c862:	6840      	ldr	r0, [r0, #4]
 800c864:	b118      	cbz	r0, 800c86e <rcl_node_get_options+0xe>
 800c866:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 800c868:	2b00      	cmp	r3, #0
 800c86a:	bf08      	it	eq
 800c86c:	2000      	moveq	r0, #0
 800c86e:	4770      	bx	lr

0800c870 <rcl_node_get_rmw_handle>:
 800c870:	b110      	cbz	r0, 800c878 <rcl_node_get_rmw_handle+0x8>
 800c872:	6840      	ldr	r0, [r0, #4]
 800c874:	b100      	cbz	r0, 800c878 <rcl_node_get_rmw_handle+0x8>
 800c876:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 800c878:	4770      	bx	lr
 800c87a:	bf00      	nop

0800c87c <rcl_node_get_default_options>:
 800c87c:	b510      	push	{r4, lr}
 800c87e:	2268      	movs	r2, #104	@ 0x68
 800c880:	4604      	mov	r4, r0
 800c882:	2100      	movs	r1, #0
 800c884:	f004 f89a 	bl	80109bc <memset>
 800c888:	4620      	mov	r0, r4
 800c88a:	f7fb f9e1 	bl	8007c50 <rcutils_get_default_allocator>
 800c88e:	2301      	movs	r3, #1
 800c890:	7523      	strb	r3, [r4, #20]
 800c892:	4620      	mov	r0, r4
 800c894:	bd10      	pop	{r4, pc}
 800c896:	bf00      	nop

0800c898 <rcl_node_options_copy>:
 800c898:	b1d0      	cbz	r0, 800c8d0 <rcl_node_options_copy+0x38>
 800c89a:	b570      	push	{r4, r5, r6, lr}
 800c89c:	460c      	mov	r4, r1
 800c89e:	b1a9      	cbz	r1, 800c8cc <rcl_node_options_copy+0x34>
 800c8a0:	4288      	cmp	r0, r1
 800c8a2:	4684      	mov	ip, r0
 800c8a4:	d012      	beq.n	800c8cc <rcl_node_options_copy+0x34>
 800c8a6:	4605      	mov	r5, r0
 800c8a8:	8a86      	ldrh	r6, [r0, #20]
 800c8aa:	468e      	mov	lr, r1
 800c8ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c8ae:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c8b2:	682b      	ldr	r3, [r5, #0]
 800c8b4:	f8ce 3000 	str.w	r3, [lr]
 800c8b8:	f10c 0118 	add.w	r1, ip, #24
 800c8bc:	2250      	movs	r2, #80	@ 0x50
 800c8be:	82a6      	strh	r6, [r4, #20]
 800c8c0:	f104 0018 	add.w	r0, r4, #24
 800c8c4:	f004 f943 	bl	8010b4e <memcpy>
 800c8c8:	2000      	movs	r0, #0
 800c8ca:	bd70      	pop	{r4, r5, r6, pc}
 800c8cc:	200b      	movs	r0, #11
 800c8ce:	bd70      	pop	{r4, r5, r6, pc}
 800c8d0:	200b      	movs	r0, #11
 800c8d2:	4770      	bx	lr

0800c8d4 <rcl_node_resolve_name>:
 800c8d4:	b082      	sub	sp, #8
 800c8d6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8da:	b091      	sub	sp, #68	@ 0x44
 800c8dc:	ac1a      	add	r4, sp, #104	@ 0x68
 800c8de:	e884 000c 	stmia.w	r4, {r2, r3}
 800c8e2:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 800c8e6:	2800      	cmp	r0, #0
 800c8e8:	d03b      	beq.n	800c962 <rcl_node_resolve_name+0x8e>
 800c8ea:	460c      	mov	r4, r1
 800c8ec:	4605      	mov	r5, r0
 800c8ee:	f7ff ffb7 	bl	800c860 <rcl_node_get_options>
 800c8f2:	2800      	cmp	r0, #0
 800c8f4:	d037      	beq.n	800c966 <rcl_node_resolve_name+0x92>
 800c8f6:	4628      	mov	r0, r5
 800c8f8:	f7ff ffa2 	bl	800c840 <rcl_node_get_name>
 800c8fc:	4606      	mov	r6, r0
 800c8fe:	4628      	mov	r0, r5
 800c900:	f7ff ffa6 	bl	800c850 <rcl_node_get_namespace>
 800c904:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 800c908:	4681      	mov	r9, r0
 800c90a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c90e:	ad0b      	add	r5, sp, #44	@ 0x2c
 800c910:	46ac      	mov	ip, r5
 800c912:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c916:	f8de 3000 	ldr.w	r3, [lr]
 800c91a:	f8cc 3000 	str.w	r3, [ip]
 800c91e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c920:	b1fb      	cbz	r3, 800c962 <rcl_node_resolve_name+0x8e>
 800c922:	468a      	mov	sl, r1
 800c924:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 800c928:	f000 fab2 	bl	800ce90 <rcutils_get_zero_initialized_string_map>
 800c92c:	ab10      	add	r3, sp, #64	@ 0x40
 800c92e:	9008      	str	r0, [sp, #32]
 800c930:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800c934:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800c938:	2100      	movs	r1, #0
 800c93a:	e895 000c 	ldmia.w	r5, {r2, r3}
 800c93e:	a808      	add	r0, sp, #32
 800c940:	f000 fb1e 	bl	800cf80 <rcutils_string_map_init>
 800c944:	4607      	mov	r7, r0
 800c946:	b180      	cbz	r0, 800c96a <rcl_node_resolve_name+0x96>
 800c948:	f7fb f99e 	bl	8007c88 <rcutils_get_error_string>
 800c94c:	f7fb f9b4 	bl	8007cb8 <rcutils_reset_error>
 800c950:	2f0a      	cmp	r7, #10
 800c952:	bf18      	it	ne
 800c954:	2701      	movne	r7, #1
 800c956:	4638      	mov	r0, r7
 800c958:	b011      	add	sp, #68	@ 0x44
 800c95a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c95e:	b002      	add	sp, #8
 800c960:	4770      	bx	lr
 800c962:	270b      	movs	r7, #11
 800c964:	e7f7      	b.n	800c956 <rcl_node_resolve_name+0x82>
 800c966:	2701      	movs	r7, #1
 800c968:	e7f5      	b.n	800c956 <rcl_node_resolve_name+0x82>
 800c96a:	9009      	str	r0, [sp, #36]	@ 0x24
 800c96c:	9007      	str	r0, [sp, #28]
 800c96e:	a808      	add	r0, sp, #32
 800c970:	f003 f986 	bl	800fc80 <rcl_get_default_topic_name_substitutions>
 800c974:	4607      	mov	r7, r0
 800c976:	b1a8      	cbz	r0, 800c9a4 <rcl_node_resolve_name+0xd0>
 800c978:	280a      	cmp	r0, #10
 800c97a:	9c07      	ldr	r4, [sp, #28]
 800c97c:	d000      	beq.n	800c980 <rcl_node_resolve_name+0xac>
 800c97e:	2701      	movs	r7, #1
 800c980:	a808      	add	r0, sp, #32
 800c982:	f000 fb3d 	bl	800d000 <rcutils_string_map_fini>
 800c986:	2800      	cmp	r0, #0
 800c988:	d13d      	bne.n	800ca06 <rcl_node_resolve_name+0x132>
 800c98a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c98c:	4659      	mov	r1, fp
 800c98e:	47d0      	blx	sl
 800c990:	4659      	mov	r1, fp
 800c992:	4620      	mov	r0, r4
 800c994:	47d0      	blx	sl
 800c996:	f1b8 0f00 	cmp.w	r8, #0
 800c99a:	d0dc      	beq.n	800c956 <rcl_node_resolve_name+0x82>
 800c99c:	2f67      	cmp	r7, #103	@ 0x67
 800c99e:	bf08      	it	eq
 800c9a0:	2768      	moveq	r7, #104	@ 0x68
 800c9a2:	e7d8      	b.n	800c956 <rcl_node_resolve_name+0x82>
 800c9a4:	ab09      	add	r3, sp, #36	@ 0x24
 800c9a6:	9305      	str	r3, [sp, #20]
 800c9a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c9aa:	46ec      	mov	ip, sp
 800c9ac:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c9b0:	682b      	ldr	r3, [r5, #0]
 800c9b2:	f8cc 3000 	str.w	r3, [ip]
 800c9b6:	464a      	mov	r2, r9
 800c9b8:	4631      	mov	r1, r6
 800c9ba:	4620      	mov	r0, r4
 800c9bc:	ab08      	add	r3, sp, #32
 800c9be:	f003 f801 	bl	800f9c4 <rcl_expand_topic_name>
 800c9c2:	4607      	mov	r7, r0
 800c9c4:	b9b8      	cbnz	r0, 800c9f6 <rcl_node_resolve_name+0x122>
 800c9c6:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800c9c8:	9009      	str	r0, [sp, #36]	@ 0x24
 800c9ca:	4602      	mov	r2, r0
 800c9cc:	a90a      	add	r1, sp, #40	@ 0x28
 800c9ce:	4620      	mov	r0, r4
 800c9d0:	f000 fbfe 	bl	800d1d0 <rmw_validate_full_topic_name>
 800c9d4:	b988      	cbnz	r0, 800c9fa <rcl_node_resolve_name+0x126>
 800c9d6:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800c9d8:	b9d5      	cbnz	r5, 800ca10 <rcl_node_resolve_name+0x13c>
 800c9da:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c9dc:	a808      	add	r0, sp, #32
 800c9de:	601c      	str	r4, [r3, #0]
 800c9e0:	f000 fb0e 	bl	800d000 <rcutils_string_map_fini>
 800c9e4:	4607      	mov	r7, r0
 800c9e6:	b1a8      	cbz	r0, 800ca14 <rcl_node_resolve_name+0x140>
 800c9e8:	f7fb f94e 	bl	8007c88 <rcutils_get_error_string>
 800c9ec:	462c      	mov	r4, r5
 800c9ee:	f7fb f963 	bl	8007cb8 <rcutils_reset_error>
 800c9f2:	2701      	movs	r7, #1
 800c9f4:	e7c9      	b.n	800c98a <rcl_node_resolve_name+0xb6>
 800c9f6:	9c07      	ldr	r4, [sp, #28]
 800c9f8:	e7c2      	b.n	800c980 <rcl_node_resolve_name+0xac>
 800c9fa:	f7fb f945 	bl	8007c88 <rcutils_get_error_string>
 800c9fe:	2701      	movs	r7, #1
 800ca00:	f7fb f95a 	bl	8007cb8 <rcutils_reset_error>
 800ca04:	e7bc      	b.n	800c980 <rcl_node_resolve_name+0xac>
 800ca06:	f7fb f93f 	bl	8007c88 <rcutils_get_error_string>
 800ca0a:	f7fb f955 	bl	8007cb8 <rcutils_reset_error>
 800ca0e:	e7bc      	b.n	800c98a <rcl_node_resolve_name+0xb6>
 800ca10:	2767      	movs	r7, #103	@ 0x67
 800ca12:	e7b5      	b.n	800c980 <rcl_node_resolve_name+0xac>
 800ca14:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ca16:	4659      	mov	r1, fp
 800ca18:	47d0      	blx	sl
 800ca1a:	4659      	mov	r1, fp
 800ca1c:	4638      	mov	r0, r7
 800ca1e:	47d0      	blx	sl
 800ca20:	e799      	b.n	800c956 <rcl_node_resolve_name+0x82>
 800ca22:	bf00      	nop

0800ca24 <rcl_get_system_time>:
 800ca24:	4608      	mov	r0, r1
 800ca26:	f000 bb5f 	b.w	800d0e8 <rcutils_system_time_now>
 800ca2a:	bf00      	nop

0800ca2c <rcl_get_steady_time>:
 800ca2c:	4608      	mov	r0, r1
 800ca2e:	f000 bb83 	b.w	800d138 <rcutils_steady_time_now>
 800ca32:	bf00      	nop

0800ca34 <rcl_get_ros_time>:
 800ca34:	7a03      	ldrb	r3, [r0, #8]
 800ca36:	b510      	push	{r4, lr}
 800ca38:	460c      	mov	r4, r1
 800ca3a:	b133      	cbz	r3, 800ca4a <rcl_get_ros_time+0x16>
 800ca3c:	2105      	movs	r1, #5
 800ca3e:	f000 f881 	bl	800cb44 <__atomic_load_8>
 800ca42:	e9c4 0100 	strd	r0, r1, [r4]
 800ca46:	2000      	movs	r0, #0
 800ca48:	bd10      	pop	{r4, pc}
 800ca4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ca4e:	4608      	mov	r0, r1
 800ca50:	f000 bb4a 	b.w	800d0e8 <rcutils_system_time_now>

0800ca54 <rcl_clock_init>:
 800ca54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca56:	4605      	mov	r5, r0
 800ca58:	4610      	mov	r0, r2
 800ca5a:	4614      	mov	r4, r2
 800ca5c:	460e      	mov	r6, r1
 800ca5e:	f7fb f905 	bl	8007c6c <rcutils_allocator_is_valid>
 800ca62:	b128      	cbz	r0, 800ca70 <rcl_clock_init+0x1c>
 800ca64:	2d03      	cmp	r5, #3
 800ca66:	d803      	bhi.n	800ca70 <rcl_clock_init+0x1c>
 800ca68:	e8df f005 	tbb	[pc, r5]
 800ca6c:	06532e1d 	.word	0x06532e1d
 800ca70:	f04f 0c0b 	mov.w	ip, #11
 800ca74:	4660      	mov	r0, ip
 800ca76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ca78:	2e00      	cmp	r6, #0
 800ca7a:	d0f9      	beq.n	800ca70 <rcl_clock_init+0x1c>
 800ca7c:	2c00      	cmp	r4, #0
 800ca7e:	d0f7      	beq.n	800ca70 <rcl_clock_init+0x1c>
 800ca80:	2300      	movs	r3, #0
 800ca82:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800ca86:	f8df e0b4 	ldr.w	lr, [pc, #180]	@ 800cb3c <rcl_clock_init+0xe8>
 800ca8a:	6133      	str	r3, [r6, #16]
 800ca8c:	f106 0514 	add.w	r5, r6, #20
 800ca90:	469c      	mov	ip, r3
 800ca92:	2703      	movs	r7, #3
 800ca94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ca96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ca98:	6823      	ldr	r3, [r4, #0]
 800ca9a:	602b      	str	r3, [r5, #0]
 800ca9c:	7037      	strb	r7, [r6, #0]
 800ca9e:	f8c6 e00c 	str.w	lr, [r6, #12]
 800caa2:	4660      	mov	r0, ip
 800caa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800caa6:	2e00      	cmp	r6, #0
 800caa8:	d0e2      	beq.n	800ca70 <rcl_clock_init+0x1c>
 800caaa:	2300      	movs	r3, #0
 800caac:	7033      	strb	r3, [r6, #0]
 800caae:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800cab2:	e9c6 3303 	strd	r3, r3, [r6, #12]
 800cab6:	469c      	mov	ip, r3
 800cab8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800caba:	f106 0514 	add.w	r5, r6, #20
 800cabe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cac0:	6823      	ldr	r3, [r4, #0]
 800cac2:	602b      	str	r3, [r5, #0]
 800cac4:	4660      	mov	r0, ip
 800cac6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cac8:	2e00      	cmp	r6, #0
 800caca:	d0d1      	beq.n	800ca70 <rcl_clock_init+0x1c>
 800cacc:	2c00      	cmp	r4, #0
 800cace:	d0cf      	beq.n	800ca70 <rcl_clock_init+0x1c>
 800cad0:	2700      	movs	r7, #0
 800cad2:	7037      	strb	r7, [r6, #0]
 800cad4:	46a4      	mov	ip, r4
 800cad6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800cada:	f106 0514 	add.w	r5, r6, #20
 800cade:	e9c6 7701 	strd	r7, r7, [r6, #4]
 800cae2:	e9c6 7703 	strd	r7, r7, [r6, #12]
 800cae6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cae8:	f8dc 3000 	ldr.w	r3, [ip]
 800caec:	602b      	str	r3, [r5, #0]
 800caee:	6921      	ldr	r1, [r4, #16]
 800caf0:	6823      	ldr	r3, [r4, #0]
 800caf2:	2010      	movs	r0, #16
 800caf4:	4798      	blx	r3
 800caf6:	6130      	str	r0, [r6, #16]
 800caf8:	b1d0      	cbz	r0, 800cb30 <rcl_clock_init+0xdc>
 800cafa:	2200      	movs	r2, #0
 800cafc:	2300      	movs	r3, #0
 800cafe:	e9c0 2300 	strd	r2, r3, [r0]
 800cb02:	2301      	movs	r3, #1
 800cb04:	7207      	strb	r7, [r0, #8]
 800cb06:	4a0c      	ldr	r2, [pc, #48]	@ (800cb38 <rcl_clock_init+0xe4>)
 800cb08:	7033      	strb	r3, [r6, #0]
 800cb0a:	46bc      	mov	ip, r7
 800cb0c:	60f2      	str	r2, [r6, #12]
 800cb0e:	4660      	mov	r0, ip
 800cb10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cb12:	2e00      	cmp	r6, #0
 800cb14:	d0ac      	beq.n	800ca70 <rcl_clock_init+0x1c>
 800cb16:	2c00      	cmp	r4, #0
 800cb18:	d0aa      	beq.n	800ca70 <rcl_clock_init+0x1c>
 800cb1a:	2300      	movs	r3, #0
 800cb1c:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800cb20:	f8df e01c 	ldr.w	lr, [pc, #28]	@ 800cb40 <rcl_clock_init+0xec>
 800cb24:	6133      	str	r3, [r6, #16]
 800cb26:	f106 0514 	add.w	r5, r6, #20
 800cb2a:	469c      	mov	ip, r3
 800cb2c:	2702      	movs	r7, #2
 800cb2e:	e7b1      	b.n	800ca94 <rcl_clock_init+0x40>
 800cb30:	f04f 0c0a 	mov.w	ip, #10
 800cb34:	e79e      	b.n	800ca74 <rcl_clock_init+0x20>
 800cb36:	bf00      	nop
 800cb38:	0800ca35 	.word	0x0800ca35
 800cb3c:	0800ca2d 	.word	0x0800ca2d
 800cb40:	0800ca25 	.word	0x0800ca25

0800cb44 <__atomic_load_8>:
 800cb44:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 800cb48:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 800cb4c:	4a15      	ldr	r2, [pc, #84]	@ (800cba4 <__atomic_load_8+0x60>)
 800cb4e:	4b16      	ldr	r3, [pc, #88]	@ (800cba8 <__atomic_load_8+0x64>)
 800cb50:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800cb54:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 800cb58:	fb02 f101 	mul.w	r1, r2, r1
 800cb5c:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 800cb60:	fba3 2301 	umull	r2, r3, r3, r1
 800cb64:	091b      	lsrs	r3, r3, #4
 800cb66:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800cb6a:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 800cb6e:	b4d0      	push	{r4, r6, r7}
 800cb70:	4c0e      	ldr	r4, [pc, #56]	@ (800cbac <__atomic_load_8+0x68>)
 800cb72:	1ac9      	subs	r1, r1, r3
 800cb74:	1862      	adds	r2, r4, r1
 800cb76:	f04f 0c01 	mov.w	ip, #1
 800cb7a:	e8d2 3f4f 	ldrexb	r3, [r2]
 800cb7e:	e8c2 cf46 	strexb	r6, ip, [r2]
 800cb82:	2e00      	cmp	r6, #0
 800cb84:	d1f9      	bne.n	800cb7a <__atomic_load_8+0x36>
 800cb86:	f3bf 8f5b 	dmb	ish
 800cb8a:	b2db      	uxtb	r3, r3
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d1f4      	bne.n	800cb7a <__atomic_load_8+0x36>
 800cb90:	e9d0 6700 	ldrd	r6, r7, [r0]
 800cb94:	f3bf 8f5b 	dmb	ish
 800cb98:	5463      	strb	r3, [r4, r1]
 800cb9a:	4630      	mov	r0, r6
 800cb9c:	4639      	mov	r1, r7
 800cb9e:	bcd0      	pop	{r4, r6, r7}
 800cba0:	4770      	bx	lr
 800cba2:	bf00      	nop
 800cba4:	27d4eb2d 	.word	0x27d4eb2d
 800cba8:	b21642c9 	.word	0xb21642c9
 800cbac:	2000da00 	.word	0x2000da00

0800cbb0 <rcutils_get_env>:
 800cbb0:	b168      	cbz	r0, 800cbce <rcutils_get_env+0x1e>
 800cbb2:	b510      	push	{r4, lr}
 800cbb4:	460c      	mov	r4, r1
 800cbb6:	b129      	cbz	r1, 800cbc4 <rcutils_get_env+0x14>
 800cbb8:	f003 fb56 	bl	8010268 <getenv>
 800cbbc:	b120      	cbz	r0, 800cbc8 <rcutils_get_env+0x18>
 800cbbe:	6020      	str	r0, [r4, #0]
 800cbc0:	2000      	movs	r0, #0
 800cbc2:	bd10      	pop	{r4, pc}
 800cbc4:	4803      	ldr	r0, [pc, #12]	@ (800cbd4 <rcutils_get_env+0x24>)
 800cbc6:	bd10      	pop	{r4, pc}
 800cbc8:	4b03      	ldr	r3, [pc, #12]	@ (800cbd8 <rcutils_get_env+0x28>)
 800cbca:	6023      	str	r3, [r4, #0]
 800cbcc:	bd10      	pop	{r4, pc}
 800cbce:	4803      	ldr	r0, [pc, #12]	@ (800cbdc <rcutils_get_env+0x2c>)
 800cbd0:	4770      	bx	lr
 800cbd2:	bf00      	nop
 800cbd4:	08011c74 	.word	0x08011c74
 800cbd8:	08011d98 	.word	0x08011d98
 800cbdc:	08011c58 	.word	0x08011c58

0800cbe0 <rcutils_format_string_limit>:
 800cbe0:	b40f      	push	{r0, r1, r2, r3}
 800cbe2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cbe4:	b083      	sub	sp, #12
 800cbe6:	ac08      	add	r4, sp, #32
 800cbe8:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 800cbea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800cbee:	b34e      	cbz	r6, 800cc44 <rcutils_format_string_limit+0x64>
 800cbf0:	a808      	add	r0, sp, #32
 800cbf2:	f7fb f83b 	bl	8007c6c <rcutils_allocator_is_valid>
 800cbf6:	b328      	cbz	r0, 800cc44 <rcutils_format_string_limit+0x64>
 800cbf8:	2100      	movs	r1, #0
 800cbfa:	ab0f      	add	r3, sp, #60	@ 0x3c
 800cbfc:	4632      	mov	r2, r6
 800cbfe:	4608      	mov	r0, r1
 800cc00:	e9cd 3300 	strd	r3, r3, [sp]
 800cc04:	f000 f8f4 	bl	800cdf0 <rcutils_vsnprintf>
 800cc08:	1c43      	adds	r3, r0, #1
 800cc0a:	4605      	mov	r5, r0
 800cc0c:	d01a      	beq.n	800cc44 <rcutils_format_string_limit+0x64>
 800cc0e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cc10:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800cc12:	1c47      	adds	r7, r0, #1
 800cc14:	429f      	cmp	r7, r3
 800cc16:	bf84      	itt	hi
 800cc18:	461f      	movhi	r7, r3
 800cc1a:	f103 35ff 	addhi.w	r5, r3, #4294967295	@ 0xffffffff
 800cc1e:	4638      	mov	r0, r7
 800cc20:	9b08      	ldr	r3, [sp, #32]
 800cc22:	4798      	blx	r3
 800cc24:	4604      	mov	r4, r0
 800cc26:	b168      	cbz	r0, 800cc44 <rcutils_format_string_limit+0x64>
 800cc28:	9b01      	ldr	r3, [sp, #4]
 800cc2a:	4632      	mov	r2, r6
 800cc2c:	4639      	mov	r1, r7
 800cc2e:	f000 f8df 	bl	800cdf0 <rcutils_vsnprintf>
 800cc32:	2800      	cmp	r0, #0
 800cc34:	db02      	blt.n	800cc3c <rcutils_format_string_limit+0x5c>
 800cc36:	2300      	movs	r3, #0
 800cc38:	5563      	strb	r3, [r4, r5]
 800cc3a:	e004      	b.n	800cc46 <rcutils_format_string_limit+0x66>
 800cc3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc3e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800cc40:	4620      	mov	r0, r4
 800cc42:	4798      	blx	r3
 800cc44:	2400      	movs	r4, #0
 800cc46:	4620      	mov	r0, r4
 800cc48:	b003      	add	sp, #12
 800cc4a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800cc4e:	b004      	add	sp, #16
 800cc50:	4770      	bx	lr
 800cc52:	bf00      	nop

0800cc54 <rcutils_repl_str>:
 800cc54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc58:	ed2d 8b02 	vpush	{d8}
 800cc5c:	b087      	sub	sp, #28
 800cc5e:	4680      	mov	r8, r0
 800cc60:	4608      	mov	r0, r1
 800cc62:	f8cd 8004 	str.w	r8, [sp, #4]
 800cc66:	ee08 2a10 	vmov	s16, r2
 800cc6a:	468a      	mov	sl, r1
 800cc6c:	4699      	mov	r9, r3
 800cc6e:	f7f3 fad9 	bl	8000224 <strlen>
 800cc72:	2600      	movs	r6, #0
 800cc74:	4647      	mov	r7, r8
 800cc76:	9002      	str	r0, [sp, #8]
 800cc78:	46b3      	mov	fp, r6
 800cc7a:	2510      	movs	r5, #16
 800cc7c:	46b0      	mov	r8, r6
 800cc7e:	e01d      	b.n	800ccbc <rcutils_repl_str+0x68>
 800cc80:	f10b 0b01 	add.w	fp, fp, #1
 800cc84:	455e      	cmp	r6, fp
 800cc86:	d211      	bcs.n	800ccac <rcutils_repl_str+0x58>
 800cc88:	442e      	add	r6, r5
 800cc8a:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800cc8e:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800cc92:	00b1      	lsls	r1, r6, #2
 800cc94:	4798      	blx	r3
 800cc96:	2800      	cmp	r0, #0
 800cc98:	f000 8088 	beq.w	800cdac <rcutils_repl_str+0x158>
 800cc9c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cca0:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 800cca4:	4680      	mov	r8, r0
 800cca6:	bf28      	it	cs
 800cca8:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 800ccac:	9a01      	ldr	r2, [sp, #4]
 800ccae:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 800ccb2:	1aa2      	subs	r2, r4, r2
 800ccb4:	f843 2c04 	str.w	r2, [r3, #-4]
 800ccb8:	9b02      	ldr	r3, [sp, #8]
 800ccba:	18e7      	adds	r7, r4, r3
 800ccbc:	4651      	mov	r1, sl
 800ccbe:	4638      	mov	r0, r7
 800ccc0:	f003 fea3 	bl	8010a0a <strstr>
 800ccc4:	4604      	mov	r4, r0
 800ccc6:	4640      	mov	r0, r8
 800ccc8:	2c00      	cmp	r4, #0
 800ccca:	d1d9      	bne.n	800cc80 <rcutils_repl_str+0x2c>
 800cccc:	46b8      	mov	r8, r7
 800ccce:	4607      	mov	r7, r0
 800ccd0:	4640      	mov	r0, r8
 800ccd2:	f7f3 faa7 	bl	8000224 <strlen>
 800ccd6:	9b01      	ldr	r3, [sp, #4]
 800ccd8:	eba8 0303 	sub.w	r3, r8, r3
 800ccdc:	181c      	adds	r4, r3, r0
 800ccde:	9404      	str	r4, [sp, #16]
 800cce0:	f1bb 0f00 	cmp.w	fp, #0
 800cce4:	d04a      	beq.n	800cd7c <rcutils_repl_str+0x128>
 800cce6:	ee18 0a10 	vmov	r0, s16
 800ccea:	f7f3 fa9b 	bl	8000224 <strlen>
 800ccee:	9b02      	ldr	r3, [sp, #8]
 800ccf0:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800ccf4:	1ac3      	subs	r3, r0, r3
 800ccf6:	fb0b 4303 	mla	r3, fp, r3, r4
 800ccfa:	461a      	mov	r2, r3
 800ccfc:	9305      	str	r3, [sp, #20]
 800ccfe:	4606      	mov	r6, r0
 800cd00:	f8d9 3000 	ldr.w	r3, [r9]
 800cd04:	1c50      	adds	r0, r2, #1
 800cd06:	4798      	blx	r3
 800cd08:	9003      	str	r0, [sp, #12]
 800cd0a:	2800      	cmp	r0, #0
 800cd0c:	d04f      	beq.n	800cdae <rcutils_repl_str+0x15a>
 800cd0e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800cd12:	683a      	ldr	r2, [r7, #0]
 800cd14:	4641      	mov	r1, r8
 800cd16:	f003 ff1a 	bl	8010b4e <memcpy>
 800cd1a:	683d      	ldr	r5, [r7, #0]
 800cd1c:	9b03      	ldr	r3, [sp, #12]
 800cd1e:	9701      	str	r7, [sp, #4]
 800cd20:	46ba      	mov	sl, r7
 800cd22:	441d      	add	r5, r3
 800cd24:	9f02      	ldr	r7, [sp, #8]
 800cd26:	f8cd 9008 	str.w	r9, [sp, #8]
 800cd2a:	2401      	movs	r4, #1
 800cd2c:	46d1      	mov	r9, sl
 800cd2e:	ee18 aa10 	vmov	sl, s16
 800cd32:	e00a      	b.n	800cd4a <rcutils_repl_str+0xf6>
 800cd34:	f8d9 5000 	ldr.w	r5, [r9]
 800cd38:	1aaa      	subs	r2, r5, r2
 800cd3a:	1885      	adds	r5, r0, r2
 800cd3c:	f003 ff07 	bl	8010b4e <memcpy>
 800cd40:	45a3      	cmp	fp, r4
 800cd42:	f104 0201 	add.w	r2, r4, #1
 800cd46:	d935      	bls.n	800cdb4 <rcutils_repl_str+0x160>
 800cd48:	4614      	mov	r4, r2
 800cd4a:	4632      	mov	r2, r6
 800cd4c:	4651      	mov	r1, sl
 800cd4e:	4628      	mov	r0, r5
 800cd50:	f003 fefd 	bl	8010b4e <memcpy>
 800cd54:	f859 2b04 	ldr.w	r2, [r9], #4
 800cd58:	45a3      	cmp	fp, r4
 800cd5a:	443a      	add	r2, r7
 800cd5c:	eb05 0006 	add.w	r0, r5, r6
 800cd60:	eb08 0102 	add.w	r1, r8, r2
 800cd64:	d1e6      	bne.n	800cd34 <rcutils_repl_str+0xe0>
 800cd66:	9b04      	ldr	r3, [sp, #16]
 800cd68:	1a9a      	subs	r2, r3, r2
 800cd6a:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 800cd6e:	f003 feee 	bl	8010b4e <memcpy>
 800cd72:	9a03      	ldr	r2, [sp, #12]
 800cd74:	9905      	ldr	r1, [sp, #20]
 800cd76:	2300      	movs	r3, #0
 800cd78:	5453      	strb	r3, [r2, r1]
 800cd7a:	e00b      	b.n	800cd94 <rcutils_repl_str+0x140>
 800cd7c:	4620      	mov	r0, r4
 800cd7e:	f8d9 3000 	ldr.w	r3, [r9]
 800cd82:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800cd86:	3001      	adds	r0, #1
 800cd88:	4798      	blx	r3
 800cd8a:	9003      	str	r0, [sp, #12]
 800cd8c:	b110      	cbz	r0, 800cd94 <rcutils_repl_str+0x140>
 800cd8e:	9901      	ldr	r1, [sp, #4]
 800cd90:	f003 fed5 	bl	8010b3e <strcpy>
 800cd94:	4638      	mov	r0, r7
 800cd96:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800cd9a:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800cd9e:	4798      	blx	r3
 800cda0:	9803      	ldr	r0, [sp, #12]
 800cda2:	b007      	add	sp, #28
 800cda4:	ecbd 8b02 	vpop	{d8}
 800cda8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdac:	4647      	mov	r7, r8
 800cdae:	2300      	movs	r3, #0
 800cdb0:	9303      	str	r3, [sp, #12]
 800cdb2:	e7ef      	b.n	800cd94 <rcutils_repl_str+0x140>
 800cdb4:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 800cdb8:	e7db      	b.n	800cd72 <rcutils_repl_str+0x11e>
 800cdba:	bf00      	nop

0800cdbc <rcutils_snprintf>:
 800cdbc:	b40c      	push	{r2, r3}
 800cdbe:	b530      	push	{r4, r5, lr}
 800cdc0:	b083      	sub	sp, #12
 800cdc2:	ab06      	add	r3, sp, #24
 800cdc4:	f853 2b04 	ldr.w	r2, [r3], #4
 800cdc8:	9301      	str	r3, [sp, #4]
 800cdca:	b152      	cbz	r2, 800cde2 <rcutils_snprintf+0x26>
 800cdcc:	b138      	cbz	r0, 800cdde <rcutils_snprintf+0x22>
 800cdce:	b141      	cbz	r1, 800cde2 <rcutils_snprintf+0x26>
 800cdd0:	f003 fde6 	bl	80109a0 <vsniprintf>
 800cdd4:	b003      	add	sp, #12
 800cdd6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cdda:	b002      	add	sp, #8
 800cddc:	4770      	bx	lr
 800cdde:	2900      	cmp	r1, #0
 800cde0:	d0f6      	beq.n	800cdd0 <rcutils_snprintf+0x14>
 800cde2:	f003 fe7f 	bl	8010ae4 <__errno>
 800cde6:	2316      	movs	r3, #22
 800cde8:	6003      	str	r3, [r0, #0]
 800cdea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cdee:	e7f1      	b.n	800cdd4 <rcutils_snprintf+0x18>

0800cdf0 <rcutils_vsnprintf>:
 800cdf0:	b570      	push	{r4, r5, r6, lr}
 800cdf2:	b13a      	cbz	r2, 800ce04 <rcutils_vsnprintf+0x14>
 800cdf4:	b120      	cbz	r0, 800ce00 <rcutils_vsnprintf+0x10>
 800cdf6:	b129      	cbz	r1, 800ce04 <rcutils_vsnprintf+0x14>
 800cdf8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cdfc:	f003 bdd0 	b.w	80109a0 <vsniprintf>
 800ce00:	2900      	cmp	r1, #0
 800ce02:	d0f9      	beq.n	800cdf8 <rcutils_vsnprintf+0x8>
 800ce04:	f003 fe6e 	bl	8010ae4 <__errno>
 800ce08:	2316      	movs	r3, #22
 800ce0a:	6003      	str	r3, [r0, #0]
 800ce0c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ce10:	bd70      	pop	{r4, r5, r6, pc}
 800ce12:	bf00      	nop

0800ce14 <rcutils_strdup>:
 800ce14:	b084      	sub	sp, #16
 800ce16:	b570      	push	{r4, r5, r6, lr}
 800ce18:	b082      	sub	sp, #8
 800ce1a:	ac07      	add	r4, sp, #28
 800ce1c:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 800ce20:	4605      	mov	r5, r0
 800ce22:	b1b0      	cbz	r0, 800ce52 <rcutils_strdup+0x3e>
 800ce24:	f7f3 f9fe 	bl	8000224 <strlen>
 800ce28:	1c42      	adds	r2, r0, #1
 800ce2a:	9b07      	ldr	r3, [sp, #28]
 800ce2c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ce2e:	9201      	str	r2, [sp, #4]
 800ce30:	4606      	mov	r6, r0
 800ce32:	4610      	mov	r0, r2
 800ce34:	4798      	blx	r3
 800ce36:	4604      	mov	r4, r0
 800ce38:	b128      	cbz	r0, 800ce46 <rcutils_strdup+0x32>
 800ce3a:	9a01      	ldr	r2, [sp, #4]
 800ce3c:	4629      	mov	r1, r5
 800ce3e:	f003 fe86 	bl	8010b4e <memcpy>
 800ce42:	2300      	movs	r3, #0
 800ce44:	55a3      	strb	r3, [r4, r6]
 800ce46:	4620      	mov	r0, r4
 800ce48:	b002      	add	sp, #8
 800ce4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ce4e:	b004      	add	sp, #16
 800ce50:	4770      	bx	lr
 800ce52:	4604      	mov	r4, r0
 800ce54:	e7f7      	b.n	800ce46 <rcutils_strdup+0x32>
 800ce56:	bf00      	nop

0800ce58 <rcutils_strndup>:
 800ce58:	b082      	sub	sp, #8
 800ce5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce5c:	ac06      	add	r4, sp, #24
 800ce5e:	e884 000c 	stmia.w	r4, {r2, r3}
 800ce62:	4605      	mov	r5, r0
 800ce64:	b188      	cbz	r0, 800ce8a <rcutils_strndup+0x32>
 800ce66:	1c4f      	adds	r7, r1, #1
 800ce68:	460e      	mov	r6, r1
 800ce6a:	4638      	mov	r0, r7
 800ce6c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ce6e:	4790      	blx	r2
 800ce70:	4604      	mov	r4, r0
 800ce72:	b128      	cbz	r0, 800ce80 <rcutils_strndup+0x28>
 800ce74:	463a      	mov	r2, r7
 800ce76:	4629      	mov	r1, r5
 800ce78:	f003 fe69 	bl	8010b4e <memcpy>
 800ce7c:	2300      	movs	r3, #0
 800ce7e:	55a3      	strb	r3, [r4, r6]
 800ce80:	4620      	mov	r0, r4
 800ce82:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ce86:	b002      	add	sp, #8
 800ce88:	4770      	bx	lr
 800ce8a:	4604      	mov	r4, r0
 800ce8c:	e7f8      	b.n	800ce80 <rcutils_strndup+0x28>
 800ce8e:	bf00      	nop

0800ce90 <rcutils_get_zero_initialized_string_map>:
 800ce90:	4b01      	ldr	r3, [pc, #4]	@ (800ce98 <rcutils_get_zero_initialized_string_map+0x8>)
 800ce92:	2000      	movs	r0, #0
 800ce94:	6018      	str	r0, [r3, #0]
 800ce96:	4770      	bx	lr
 800ce98:	2000da18 	.word	0x2000da18

0800ce9c <rcutils_string_map_reserve>:
 800ce9c:	2800      	cmp	r0, #0
 800ce9e:	d05f      	beq.n	800cf60 <rcutils_string_map_reserve+0xc4>
 800cea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cea4:	460c      	mov	r4, r1
 800cea6:	6801      	ldr	r1, [r0, #0]
 800cea8:	b082      	sub	sp, #8
 800ceaa:	4605      	mov	r5, r0
 800ceac:	b129      	cbz	r1, 800ceba <rcutils_string_map_reserve+0x1e>
 800ceae:	68cb      	ldr	r3, [r1, #12]
 800ceb0:	42a3      	cmp	r3, r4
 800ceb2:	d906      	bls.n	800cec2 <rcutils_string_map_reserve+0x26>
 800ceb4:	461c      	mov	r4, r3
 800ceb6:	2900      	cmp	r1, #0
 800ceb8:	d1f9      	bne.n	800ceae <rcutils_string_map_reserve+0x12>
 800ceba:	201f      	movs	r0, #31
 800cebc:	b002      	add	sp, #8
 800cebe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cec2:	688b      	ldr	r3, [r1, #8]
 800cec4:	42a3      	cmp	r3, r4
 800cec6:	d047      	beq.n	800cf58 <rcutils_string_map_reserve+0xbc>
 800cec8:	6a0e      	ldr	r6, [r1, #32]
 800ceca:	2c00      	cmp	r4, #0
 800cecc:	d034      	beq.n	800cf38 <rcutils_string_map_reserve+0x9c>
 800cece:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 800ced2:	d243      	bcs.n	800cf5c <rcutils_string_map_reserve+0xc0>
 800ced4:	00a7      	lsls	r7, r4, #2
 800ced6:	f8d1 8018 	ldr.w	r8, [r1, #24]
 800ceda:	6808      	ldr	r0, [r1, #0]
 800cedc:	4632      	mov	r2, r6
 800cede:	4639      	mov	r1, r7
 800cee0:	47c0      	blx	r8
 800cee2:	2800      	cmp	r0, #0
 800cee4:	d03a      	beq.n	800cf5c <rcutils_string_map_reserve+0xc0>
 800cee6:	682b      	ldr	r3, [r5, #0]
 800cee8:	4632      	mov	r2, r6
 800ceea:	6018      	str	r0, [r3, #0]
 800ceec:	4639      	mov	r1, r7
 800ceee:	6858      	ldr	r0, [r3, #4]
 800cef0:	47c0      	blx	r8
 800cef2:	2800      	cmp	r0, #0
 800cef4:	d032      	beq.n	800cf5c <rcutils_string_map_reserve+0xc0>
 800cef6:	682d      	ldr	r5, [r5, #0]
 800cef8:	68ab      	ldr	r3, [r5, #8]
 800cefa:	6068      	str	r0, [r5, #4]
 800cefc:	42a3      	cmp	r3, r4
 800cefe:	d226      	bcs.n	800cf4e <rcutils_string_map_reserve+0xb2>
 800cf00:	682a      	ldr	r2, [r5, #0]
 800cf02:	eb00 0c07 	add.w	ip, r0, r7
 800cf06:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 800cf0a:	45e6      	cmp	lr, ip
 800cf0c:	ea4f 0183 	mov.w	r1, r3, lsl #2
 800cf10:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 800cf14:	d203      	bcs.n	800cf1e <rcutils_string_map_reserve+0x82>
 800cf16:	eb02 0c07 	add.w	ip, r2, r7
 800cf1a:	4566      	cmp	r6, ip
 800cf1c:	d322      	bcc.n	800cf64 <rcutils_string_map_reserve+0xc8>
 800cf1e:	1ae3      	subs	r3, r4, r3
 800cf20:	009a      	lsls	r2, r3, #2
 800cf22:	4670      	mov	r0, lr
 800cf24:	2100      	movs	r1, #0
 800cf26:	9201      	str	r2, [sp, #4]
 800cf28:	f003 fd48 	bl	80109bc <memset>
 800cf2c:	9a01      	ldr	r2, [sp, #4]
 800cf2e:	2100      	movs	r1, #0
 800cf30:	4630      	mov	r0, r6
 800cf32:	f003 fd43 	bl	80109bc <memset>
 800cf36:	e00a      	b.n	800cf4e <rcutils_string_map_reserve+0xb2>
 800cf38:	694f      	ldr	r7, [r1, #20]
 800cf3a:	6808      	ldr	r0, [r1, #0]
 800cf3c:	4631      	mov	r1, r6
 800cf3e:	47b8      	blx	r7
 800cf40:	682b      	ldr	r3, [r5, #0]
 800cf42:	4631      	mov	r1, r6
 800cf44:	6858      	ldr	r0, [r3, #4]
 800cf46:	601c      	str	r4, [r3, #0]
 800cf48:	47b8      	blx	r7
 800cf4a:	682d      	ldr	r5, [r5, #0]
 800cf4c:	606c      	str	r4, [r5, #4]
 800cf4e:	2000      	movs	r0, #0
 800cf50:	60ac      	str	r4, [r5, #8]
 800cf52:	b002      	add	sp, #8
 800cf54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf58:	2000      	movs	r0, #0
 800cf5a:	e7af      	b.n	800cebc <rcutils_string_map_reserve+0x20>
 800cf5c:	200a      	movs	r0, #10
 800cf5e:	e7ad      	b.n	800cebc <rcutils_string_map_reserve+0x20>
 800cf60:	200b      	movs	r0, #11
 800cf62:	4770      	bx	lr
 800cf64:	1f0b      	subs	r3, r1, #4
 800cf66:	4418      	add	r0, r3
 800cf68:	4413      	add	r3, r2
 800cf6a:	3a04      	subs	r2, #4
 800cf6c:	4417      	add	r7, r2
 800cf6e:	2200      	movs	r2, #0
 800cf70:	f843 2f04 	str.w	r2, [r3, #4]!
 800cf74:	42bb      	cmp	r3, r7
 800cf76:	f840 2f04 	str.w	r2, [r0, #4]!
 800cf7a:	d1f9      	bne.n	800cf70 <rcutils_string_map_reserve+0xd4>
 800cf7c:	e7e7      	b.n	800cf4e <rcutils_string_map_reserve+0xb2>
 800cf7e:	bf00      	nop

0800cf80 <rcutils_string_map_init>:
 800cf80:	b082      	sub	sp, #8
 800cf82:	b570      	push	{r4, r5, r6, lr}
 800cf84:	ac04      	add	r4, sp, #16
 800cf86:	e884 000c 	stmia.w	r4, {r2, r3}
 800cf8a:	b380      	cbz	r0, 800cfee <rcutils_string_map_init+0x6e>
 800cf8c:	6806      	ldr	r6, [r0, #0]
 800cf8e:	4604      	mov	r4, r0
 800cf90:	b12e      	cbz	r6, 800cf9e <rcutils_string_map_init+0x1e>
 800cf92:	251e      	movs	r5, #30
 800cf94:	4628      	mov	r0, r5
 800cf96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cf9a:	b002      	add	sp, #8
 800cf9c:	4770      	bx	lr
 800cf9e:	a804      	add	r0, sp, #16
 800cfa0:	460d      	mov	r5, r1
 800cfa2:	f7fa fe63 	bl	8007c6c <rcutils_allocator_is_valid>
 800cfa6:	b310      	cbz	r0, 800cfee <rcutils_string_map_init+0x6e>
 800cfa8:	9b04      	ldr	r3, [sp, #16]
 800cfaa:	9908      	ldr	r1, [sp, #32]
 800cfac:	2024      	movs	r0, #36	@ 0x24
 800cfae:	4798      	blx	r3
 800cfb0:	6020      	str	r0, [r4, #0]
 800cfb2:	b310      	cbz	r0, 800cffa <rcutils_string_map_init+0x7a>
 800cfb4:	f10d 0e10 	add.w	lr, sp, #16
 800cfb8:	e9c0 6600 	strd	r6, r6, [r0]
 800cfbc:	e9c0 6602 	strd	r6, r6, [r0, #8]
 800cfc0:	f100 0c10 	add.w	ip, r0, #16
 800cfc4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800cfc8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cfcc:	f8de 3000 	ldr.w	r3, [lr]
 800cfd0:	f8cc 3000 	str.w	r3, [ip]
 800cfd4:	4629      	mov	r1, r5
 800cfd6:	4620      	mov	r0, r4
 800cfd8:	f7ff ff60 	bl	800ce9c <rcutils_string_map_reserve>
 800cfdc:	4605      	mov	r5, r0
 800cfde:	2800      	cmp	r0, #0
 800cfe0:	d0d8      	beq.n	800cf94 <rcutils_string_map_init+0x14>
 800cfe2:	9b05      	ldr	r3, [sp, #20]
 800cfe4:	9908      	ldr	r1, [sp, #32]
 800cfe6:	6820      	ldr	r0, [r4, #0]
 800cfe8:	4798      	blx	r3
 800cfea:	6026      	str	r6, [r4, #0]
 800cfec:	e7d2      	b.n	800cf94 <rcutils_string_map_init+0x14>
 800cfee:	250b      	movs	r5, #11
 800cff0:	4628      	mov	r0, r5
 800cff2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cff6:	b002      	add	sp, #8
 800cff8:	4770      	bx	lr
 800cffa:	250a      	movs	r5, #10
 800cffc:	e7ca      	b.n	800cf94 <rcutils_string_map_init+0x14>
 800cffe:	bf00      	nop

0800d000 <rcutils_string_map_fini>:
 800d000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d004:	b082      	sub	sp, #8
 800d006:	2800      	cmp	r0, #0
 800d008:	d03a      	beq.n	800d080 <rcutils_string_map_fini+0x80>
 800d00a:	6804      	ldr	r4, [r0, #0]
 800d00c:	4606      	mov	r6, r0
 800d00e:	2c00      	cmp	r4, #0
 800d010:	d032      	beq.n	800d078 <rcutils_string_map_fini+0x78>
 800d012:	68a3      	ldr	r3, [r4, #8]
 800d014:	b32b      	cbz	r3, 800d062 <rcutils_string_map_fini+0x62>
 800d016:	2500      	movs	r5, #0
 800d018:	6822      	ldr	r2, [r4, #0]
 800d01a:	462f      	mov	r7, r5
 800d01c:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800d020:	b1e0      	cbz	r0, 800d05c <rcutils_string_map_fini+0x5c>
 800d022:	6a21      	ldr	r1, [r4, #32]
 800d024:	f8d4 8014 	ldr.w	r8, [r4, #20]
 800d028:	9101      	str	r1, [sp, #4]
 800d02a:	47c0      	blx	r8
 800d02c:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d030:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 800d034:	9901      	ldr	r1, [sp, #4]
 800d036:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d03a:	47c0      	blx	r8
 800d03c:	68e3      	ldr	r3, [r4, #12]
 800d03e:	6862      	ldr	r2, [r4, #4]
 800d040:	3b01      	subs	r3, #1
 800d042:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 800d046:	60e3      	str	r3, [r4, #12]
 800d048:	6834      	ldr	r4, [r6, #0]
 800d04a:	68a3      	ldr	r3, [r4, #8]
 800d04c:	3501      	adds	r5, #1
 800d04e:	429d      	cmp	r5, r3
 800d050:	d207      	bcs.n	800d062 <rcutils_string_map_fini+0x62>
 800d052:	6822      	ldr	r2, [r4, #0]
 800d054:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800d058:	2800      	cmp	r0, #0
 800d05a:	d1e2      	bne.n	800d022 <rcutils_string_map_fini+0x22>
 800d05c:	3501      	adds	r5, #1
 800d05e:	429d      	cmp	r5, r3
 800d060:	d3dc      	bcc.n	800d01c <rcutils_string_map_fini+0x1c>
 800d062:	2100      	movs	r1, #0
 800d064:	4630      	mov	r0, r6
 800d066:	f7ff ff19 	bl	800ce9c <rcutils_string_map_reserve>
 800d06a:	4604      	mov	r4, r0
 800d06c:	b920      	cbnz	r0, 800d078 <rcutils_string_map_fini+0x78>
 800d06e:	6830      	ldr	r0, [r6, #0]
 800d070:	6943      	ldr	r3, [r0, #20]
 800d072:	6a01      	ldr	r1, [r0, #32]
 800d074:	4798      	blx	r3
 800d076:	6034      	str	r4, [r6, #0]
 800d078:	4620      	mov	r0, r4
 800d07a:	b002      	add	sp, #8
 800d07c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d080:	240b      	movs	r4, #11
 800d082:	4620      	mov	r0, r4
 800d084:	b002      	add	sp, #8
 800d086:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d08a:	bf00      	nop

0800d08c <rcutils_string_map_getn>:
 800d08c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d090:	b300      	cbz	r0, 800d0d4 <rcutils_string_map_getn+0x48>
 800d092:	6807      	ldr	r7, [r0, #0]
 800d094:	b1ff      	cbz	r7, 800d0d6 <rcutils_string_map_getn+0x4a>
 800d096:	4688      	mov	r8, r1
 800d098:	b1e1      	cbz	r1, 800d0d4 <rcutils_string_map_getn+0x48>
 800d09a:	f8d7 a008 	ldr.w	sl, [r7, #8]
 800d09e:	683e      	ldr	r6, [r7, #0]
 800d0a0:	f1ba 0f00 	cmp.w	sl, #0
 800d0a4:	d016      	beq.n	800d0d4 <rcutils_string_map_getn+0x48>
 800d0a6:	4691      	mov	r9, r2
 800d0a8:	3e04      	subs	r6, #4
 800d0aa:	2400      	movs	r4, #0
 800d0ac:	f856 5f04 	ldr.w	r5, [r6, #4]!
 800d0b0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d0b4:	4628      	mov	r0, r5
 800d0b6:	3401      	adds	r4, #1
 800d0b8:	b155      	cbz	r5, 800d0d0 <rcutils_string_map_getn+0x44>
 800d0ba:	f7f3 f8b3 	bl	8000224 <strlen>
 800d0be:	4548      	cmp	r0, r9
 800d0c0:	4602      	mov	r2, r0
 800d0c2:	4629      	mov	r1, r5
 800d0c4:	bf38      	it	cc
 800d0c6:	464a      	movcc	r2, r9
 800d0c8:	4640      	mov	r0, r8
 800d0ca:	f003 fc8c 	bl	80109e6 <strncmp>
 800d0ce:	b128      	cbz	r0, 800d0dc <rcutils_string_map_getn+0x50>
 800d0d0:	45a2      	cmp	sl, r4
 800d0d2:	d1eb      	bne.n	800d0ac <rcutils_string_map_getn+0x20>
 800d0d4:	2700      	movs	r7, #0
 800d0d6:	4638      	mov	r0, r7
 800d0d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	f853 700b 	ldr.w	r7, [r3, fp]
 800d0e2:	4638      	mov	r0, r7
 800d0e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d0e8 <rcutils_system_time_now>:
 800d0e8:	b308      	cbz	r0, 800d12e <rcutils_system_time_now+0x46>
 800d0ea:	b570      	push	{r4, r5, r6, lr}
 800d0ec:	b084      	sub	sp, #16
 800d0ee:	4604      	mov	r4, r0
 800d0f0:	4669      	mov	r1, sp
 800d0f2:	2001      	movs	r0, #1
 800d0f4:	f7f4 f808 	bl	8001108 <clock_gettime>
 800d0f8:	e9dd 3500 	ldrd	r3, r5, [sp]
 800d0fc:	2d00      	cmp	r5, #0
 800d0fe:	db13      	blt.n	800d128 <rcutils_system_time_now+0x40>
 800d100:	9902      	ldr	r1, [sp, #8]
 800d102:	2900      	cmp	r1, #0
 800d104:	db0d      	blt.n	800d122 <rcutils_system_time_now+0x3a>
 800d106:	4e0b      	ldr	r6, [pc, #44]	@ (800d134 <rcutils_system_time_now+0x4c>)
 800d108:	fba3 3206 	umull	r3, r2, r3, r6
 800d10c:	185b      	adds	r3, r3, r1
 800d10e:	fb06 2205 	mla	r2, r6, r5, r2
 800d112:	f04f 0000 	mov.w	r0, #0
 800d116:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800d11a:	e9c4 3200 	strd	r3, r2, [r4]
 800d11e:	b004      	add	sp, #16
 800d120:	bd70      	pop	{r4, r5, r6, pc}
 800d122:	ea53 0205 	orrs.w	r2, r3, r5
 800d126:	d1ee      	bne.n	800d106 <rcutils_system_time_now+0x1e>
 800d128:	2002      	movs	r0, #2
 800d12a:	b004      	add	sp, #16
 800d12c:	bd70      	pop	{r4, r5, r6, pc}
 800d12e:	200b      	movs	r0, #11
 800d130:	4770      	bx	lr
 800d132:	bf00      	nop
 800d134:	3b9aca00 	.word	0x3b9aca00

0800d138 <rcutils_steady_time_now>:
 800d138:	b308      	cbz	r0, 800d17e <rcutils_steady_time_now+0x46>
 800d13a:	b570      	push	{r4, r5, r6, lr}
 800d13c:	b084      	sub	sp, #16
 800d13e:	4604      	mov	r4, r0
 800d140:	4669      	mov	r1, sp
 800d142:	2000      	movs	r0, #0
 800d144:	f7f3 ffe0 	bl	8001108 <clock_gettime>
 800d148:	e9dd 3500 	ldrd	r3, r5, [sp]
 800d14c:	2d00      	cmp	r5, #0
 800d14e:	db13      	blt.n	800d178 <rcutils_steady_time_now+0x40>
 800d150:	9902      	ldr	r1, [sp, #8]
 800d152:	2900      	cmp	r1, #0
 800d154:	db0d      	blt.n	800d172 <rcutils_steady_time_now+0x3a>
 800d156:	4e0b      	ldr	r6, [pc, #44]	@ (800d184 <rcutils_steady_time_now+0x4c>)
 800d158:	fba3 3206 	umull	r3, r2, r3, r6
 800d15c:	185b      	adds	r3, r3, r1
 800d15e:	fb06 2205 	mla	r2, r6, r5, r2
 800d162:	f04f 0000 	mov.w	r0, #0
 800d166:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800d16a:	e9c4 3200 	strd	r3, r2, [r4]
 800d16e:	b004      	add	sp, #16
 800d170:	bd70      	pop	{r4, r5, r6, pc}
 800d172:	ea53 0205 	orrs.w	r2, r3, r5
 800d176:	d1ee      	bne.n	800d156 <rcutils_steady_time_now+0x1e>
 800d178:	2002      	movs	r0, #2
 800d17a:	b004      	add	sp, #16
 800d17c:	bd70      	pop	{r4, r5, r6, pc}
 800d17e:	200b      	movs	r0, #11
 800d180:	4770      	bx	lr
 800d182:	bf00      	nop
 800d184:	3b9aca00 	.word	0x3b9aca00

0800d188 <rmw_get_zero_initialized_context>:
 800d188:	b510      	push	{r4, lr}
 800d18a:	4604      	mov	r4, r0
 800d18c:	3010      	adds	r0, #16
 800d18e:	f000 f80b 	bl	800d1a8 <rmw_get_zero_initialized_init_options>
 800d192:	2300      	movs	r3, #0
 800d194:	2000      	movs	r0, #0
 800d196:	2100      	movs	r1, #0
 800d198:	e9c4 0100 	strd	r0, r1, [r4]
 800d19c:	e9c4 3312 	strd	r3, r3, [r4, #72]	@ 0x48
 800d1a0:	60a3      	str	r3, [r4, #8]
 800d1a2:	4620      	mov	r0, r4
 800d1a4:	bd10      	pop	{r4, pc}
 800d1a6:	bf00      	nop

0800d1a8 <rmw_get_zero_initialized_init_options>:
 800d1a8:	b510      	push	{r4, lr}
 800d1aa:	2238      	movs	r2, #56	@ 0x38
 800d1ac:	4604      	mov	r4, r0
 800d1ae:	2100      	movs	r1, #0
 800d1b0:	f003 fc04 	bl	80109bc <memset>
 800d1b4:	f104 0010 	add.w	r0, r4, #16
 800d1b8:	f000 f806 	bl	800d1c8 <rmw_get_default_security_options>
 800d1bc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d1c0:	60e3      	str	r3, [r4, #12]
 800d1c2:	4620      	mov	r0, r4
 800d1c4:	bd10      	pop	{r4, pc}
 800d1c6:	bf00      	nop

0800d1c8 <rmw_get_default_security_options>:
 800d1c8:	2200      	movs	r2, #0
 800d1ca:	7002      	strb	r2, [r0, #0]
 800d1cc:	6042      	str	r2, [r0, #4]
 800d1ce:	4770      	bx	lr

0800d1d0 <rmw_validate_full_topic_name>:
 800d1d0:	2800      	cmp	r0, #0
 800d1d2:	d057      	beq.n	800d284 <rmw_validate_full_topic_name+0xb4>
 800d1d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1d8:	460d      	mov	r5, r1
 800d1da:	2900      	cmp	r1, #0
 800d1dc:	d054      	beq.n	800d288 <rmw_validate_full_topic_name+0xb8>
 800d1de:	4616      	mov	r6, r2
 800d1e0:	4604      	mov	r4, r0
 800d1e2:	f7f3 f81f 	bl	8000224 <strlen>
 800d1e6:	b148      	cbz	r0, 800d1fc <rmw_validate_full_topic_name+0x2c>
 800d1e8:	7823      	ldrb	r3, [r4, #0]
 800d1ea:	2b2f      	cmp	r3, #47	@ 0x2f
 800d1ec:	d00d      	beq.n	800d20a <rmw_validate_full_topic_name+0x3a>
 800d1ee:	2302      	movs	r3, #2
 800d1f0:	602b      	str	r3, [r5, #0]
 800d1f2:	b13e      	cbz	r6, 800d204 <rmw_validate_full_topic_name+0x34>
 800d1f4:	2000      	movs	r0, #0
 800d1f6:	6030      	str	r0, [r6, #0]
 800d1f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d1fc:	2301      	movs	r3, #1
 800d1fe:	602b      	str	r3, [r5, #0]
 800d200:	2e00      	cmp	r6, #0
 800d202:	d1f7      	bne.n	800d1f4 <rmw_validate_full_topic_name+0x24>
 800d204:	2000      	movs	r0, #0
 800d206:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d20a:	1e43      	subs	r3, r0, #1
 800d20c:	5ce2      	ldrb	r2, [r4, r3]
 800d20e:	2a2f      	cmp	r2, #47	@ 0x2f
 800d210:	d03c      	beq.n	800d28c <rmw_validate_full_topic_name+0xbc>
 800d212:	1e63      	subs	r3, r4, #1
 800d214:	eb03 0800 	add.w	r8, r3, r0
 800d218:	f1c4 0e01 	rsb	lr, r4, #1
 800d21c:	eb0e 0703 	add.w	r7, lr, r3
 800d220:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800d224:	f021 0220 	bic.w	r2, r1, #32
 800d228:	3a41      	subs	r2, #65	@ 0x41
 800d22a:	2a19      	cmp	r2, #25
 800d22c:	f1a1 0c2f 	sub.w	ip, r1, #47	@ 0x2f
 800d230:	d90b      	bls.n	800d24a <rmw_validate_full_topic_name+0x7a>
 800d232:	295f      	cmp	r1, #95	@ 0x5f
 800d234:	d009      	beq.n	800d24a <rmw_validate_full_topic_name+0x7a>
 800d236:	f1bc 0f0a 	cmp.w	ip, #10
 800d23a:	d906      	bls.n	800d24a <rmw_validate_full_topic_name+0x7a>
 800d23c:	2304      	movs	r3, #4
 800d23e:	602b      	str	r3, [r5, #0]
 800d240:	2e00      	cmp	r6, #0
 800d242:	d0df      	beq.n	800d204 <rmw_validate_full_topic_name+0x34>
 800d244:	6037      	str	r7, [r6, #0]
 800d246:	2000      	movs	r0, #0
 800d248:	e7d6      	b.n	800d1f8 <rmw_validate_full_topic_name+0x28>
 800d24a:	4543      	cmp	r3, r8
 800d24c:	d1e6      	bne.n	800d21c <rmw_validate_full_topic_name+0x4c>
 800d24e:	4f1a      	ldr	r7, [pc, #104]	@ (800d2b8 <rmw_validate_full_topic_name+0xe8>)
 800d250:	2301      	movs	r3, #1
 800d252:	e004      	b.n	800d25e <rmw_validate_full_topic_name+0x8e>
 800d254:	4298      	cmp	r0, r3
 800d256:	f104 0401 	add.w	r4, r4, #1
 800d25a:	d91c      	bls.n	800d296 <rmw_validate_full_topic_name+0xc6>
 800d25c:	4613      	mov	r3, r2
 800d25e:	4298      	cmp	r0, r3
 800d260:	f103 0201 	add.w	r2, r3, #1
 800d264:	d0f6      	beq.n	800d254 <rmw_validate_full_topic_name+0x84>
 800d266:	7821      	ldrb	r1, [r4, #0]
 800d268:	292f      	cmp	r1, #47	@ 0x2f
 800d26a:	d1f3      	bne.n	800d254 <rmw_validate_full_topic_name+0x84>
 800d26c:	7861      	ldrb	r1, [r4, #1]
 800d26e:	292f      	cmp	r1, #47	@ 0x2f
 800d270:	d01c      	beq.n	800d2ac <rmw_validate_full_topic_name+0xdc>
 800d272:	5dc9      	ldrb	r1, [r1, r7]
 800d274:	0749      	lsls	r1, r1, #29
 800d276:	d5ed      	bpl.n	800d254 <rmw_validate_full_topic_name+0x84>
 800d278:	2206      	movs	r2, #6
 800d27a:	602a      	str	r2, [r5, #0]
 800d27c:	2e00      	cmp	r6, #0
 800d27e:	d0c1      	beq.n	800d204 <rmw_validate_full_topic_name+0x34>
 800d280:	6033      	str	r3, [r6, #0]
 800d282:	e7bf      	b.n	800d204 <rmw_validate_full_topic_name+0x34>
 800d284:	200b      	movs	r0, #11
 800d286:	4770      	bx	lr
 800d288:	200b      	movs	r0, #11
 800d28a:	e7b5      	b.n	800d1f8 <rmw_validate_full_topic_name+0x28>
 800d28c:	2203      	movs	r2, #3
 800d28e:	602a      	str	r2, [r5, #0]
 800d290:	2e00      	cmp	r6, #0
 800d292:	d1f5      	bne.n	800d280 <rmw_validate_full_topic_name+0xb0>
 800d294:	e7b6      	b.n	800d204 <rmw_validate_full_topic_name+0x34>
 800d296:	28f7      	cmp	r0, #247	@ 0xf7
 800d298:	d802      	bhi.n	800d2a0 <rmw_validate_full_topic_name+0xd0>
 800d29a:	2000      	movs	r0, #0
 800d29c:	6028      	str	r0, [r5, #0]
 800d29e:	e7ab      	b.n	800d1f8 <rmw_validate_full_topic_name+0x28>
 800d2a0:	2307      	movs	r3, #7
 800d2a2:	602b      	str	r3, [r5, #0]
 800d2a4:	2e00      	cmp	r6, #0
 800d2a6:	d0ad      	beq.n	800d204 <rmw_validate_full_topic_name+0x34>
 800d2a8:	23f6      	movs	r3, #246	@ 0xf6
 800d2aa:	e7e9      	b.n	800d280 <rmw_validate_full_topic_name+0xb0>
 800d2ac:	2205      	movs	r2, #5
 800d2ae:	602a      	str	r2, [r5, #0]
 800d2b0:	2e00      	cmp	r6, #0
 800d2b2:	d1e5      	bne.n	800d280 <rmw_validate_full_topic_name+0xb0>
 800d2b4:	e7a6      	b.n	800d204 <rmw_validate_full_topic_name+0x34>
 800d2b6:	bf00      	nop
 800d2b8:	0801234b 	.word	0x0801234b

0800d2bc <rmw_validate_namespace_with_size>:
 800d2bc:	b340      	cbz	r0, 800d310 <rmw_validate_namespace_with_size+0x54>
 800d2be:	b570      	push	{r4, r5, r6, lr}
 800d2c0:	4614      	mov	r4, r2
 800d2c2:	b0c2      	sub	sp, #264	@ 0x108
 800d2c4:	b332      	cbz	r2, 800d314 <rmw_validate_namespace_with_size+0x58>
 800d2c6:	2901      	cmp	r1, #1
 800d2c8:	460d      	mov	r5, r1
 800d2ca:	461e      	mov	r6, r3
 800d2cc:	d102      	bne.n	800d2d4 <rmw_validate_namespace_with_size+0x18>
 800d2ce:	7803      	ldrb	r3, [r0, #0]
 800d2d0:	2b2f      	cmp	r3, #47	@ 0x2f
 800d2d2:	d012      	beq.n	800d2fa <rmw_validate_namespace_with_size+0x3e>
 800d2d4:	aa01      	add	r2, sp, #4
 800d2d6:	4669      	mov	r1, sp
 800d2d8:	f7ff ff7a 	bl	800d1d0 <rmw_validate_full_topic_name>
 800d2dc:	b978      	cbnz	r0, 800d2fe <rmw_validate_namespace_with_size+0x42>
 800d2de:	9b00      	ldr	r3, [sp, #0]
 800d2e0:	b14b      	cbz	r3, 800d2f6 <rmw_validate_namespace_with_size+0x3a>
 800d2e2:	2b07      	cmp	r3, #7
 800d2e4:	d007      	beq.n	800d2f6 <rmw_validate_namespace_with_size+0x3a>
 800d2e6:	1e5a      	subs	r2, r3, #1
 800d2e8:	2a05      	cmp	r2, #5
 800d2ea:	d82b      	bhi.n	800d344 <rmw_validate_namespace_with_size+0x88>
 800d2ec:	e8df f002 	tbb	[pc, r2]
 800d2f0:	1e212427 	.word	0x1e212427
 800d2f4:	141b      	.short	0x141b
 800d2f6:	2df5      	cmp	r5, #245	@ 0xf5
 800d2f8:	d803      	bhi.n	800d302 <rmw_validate_namespace_with_size+0x46>
 800d2fa:	2000      	movs	r0, #0
 800d2fc:	6020      	str	r0, [r4, #0]
 800d2fe:	b042      	add	sp, #264	@ 0x108
 800d300:	bd70      	pop	{r4, r5, r6, pc}
 800d302:	2307      	movs	r3, #7
 800d304:	6023      	str	r3, [r4, #0]
 800d306:	2e00      	cmp	r6, #0
 800d308:	d0f9      	beq.n	800d2fe <rmw_validate_namespace_with_size+0x42>
 800d30a:	23f4      	movs	r3, #244	@ 0xf4
 800d30c:	6033      	str	r3, [r6, #0]
 800d30e:	e7f6      	b.n	800d2fe <rmw_validate_namespace_with_size+0x42>
 800d310:	200b      	movs	r0, #11
 800d312:	4770      	bx	lr
 800d314:	200b      	movs	r0, #11
 800d316:	e7f2      	b.n	800d2fe <rmw_validate_namespace_with_size+0x42>
 800d318:	2306      	movs	r3, #6
 800d31a:	6023      	str	r3, [r4, #0]
 800d31c:	2e00      	cmp	r6, #0
 800d31e:	d0ee      	beq.n	800d2fe <rmw_validate_namespace_with_size+0x42>
 800d320:	9b01      	ldr	r3, [sp, #4]
 800d322:	6033      	str	r3, [r6, #0]
 800d324:	e7eb      	b.n	800d2fe <rmw_validate_namespace_with_size+0x42>
 800d326:	2305      	movs	r3, #5
 800d328:	6023      	str	r3, [r4, #0]
 800d32a:	e7f7      	b.n	800d31c <rmw_validate_namespace_with_size+0x60>
 800d32c:	2304      	movs	r3, #4
 800d32e:	6023      	str	r3, [r4, #0]
 800d330:	e7f4      	b.n	800d31c <rmw_validate_namespace_with_size+0x60>
 800d332:	2303      	movs	r3, #3
 800d334:	6023      	str	r3, [r4, #0]
 800d336:	e7f1      	b.n	800d31c <rmw_validate_namespace_with_size+0x60>
 800d338:	2302      	movs	r3, #2
 800d33a:	6023      	str	r3, [r4, #0]
 800d33c:	e7ee      	b.n	800d31c <rmw_validate_namespace_with_size+0x60>
 800d33e:	2301      	movs	r3, #1
 800d340:	6023      	str	r3, [r4, #0]
 800d342:	e7eb      	b.n	800d31c <rmw_validate_namespace_with_size+0x60>
 800d344:	4a03      	ldr	r2, [pc, #12]	@ (800d354 <rmw_validate_namespace_with_size+0x98>)
 800d346:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800d34a:	a802      	add	r0, sp, #8
 800d34c:	f7ff fd36 	bl	800cdbc <rcutils_snprintf>
 800d350:	2001      	movs	r0, #1
 800d352:	e7d4      	b.n	800d2fe <rmw_validate_namespace_with_size+0x42>
 800d354:	08011c90 	.word	0x08011c90

0800d358 <rmw_validate_namespace>:
 800d358:	b168      	cbz	r0, 800d376 <rmw_validate_namespace+0x1e>
 800d35a:	b570      	push	{r4, r5, r6, lr}
 800d35c:	460d      	mov	r5, r1
 800d35e:	4616      	mov	r6, r2
 800d360:	4604      	mov	r4, r0
 800d362:	f7f2 ff5f 	bl	8000224 <strlen>
 800d366:	4633      	mov	r3, r6
 800d368:	4601      	mov	r1, r0
 800d36a:	462a      	mov	r2, r5
 800d36c:	4620      	mov	r0, r4
 800d36e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d372:	f7ff bfa3 	b.w	800d2bc <rmw_validate_namespace_with_size>
 800d376:	200b      	movs	r0, #11
 800d378:	4770      	bx	lr
 800d37a:	bf00      	nop

0800d37c <rmw_namespace_validation_result_string>:
 800d37c:	2807      	cmp	r0, #7
 800d37e:	bf9a      	itte	ls
 800d380:	4b02      	ldrls	r3, [pc, #8]	@ (800d38c <rmw_namespace_validation_result_string+0x10>)
 800d382:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800d386:	4802      	ldrhi	r0, [pc, #8]	@ (800d390 <rmw_namespace_validation_result_string+0x14>)
 800d388:	4770      	bx	lr
 800d38a:	bf00      	nop
 800d38c:	0801202c 	.word	0x0801202c
 800d390:	08011ce0 	.word	0x08011ce0

0800d394 <rmw_validate_node_name>:
 800d394:	2800      	cmp	r0, #0
 800d396:	d03b      	beq.n	800d410 <rmw_validate_node_name+0x7c>
 800d398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d39c:	460d      	mov	r5, r1
 800d39e:	2900      	cmp	r1, #0
 800d3a0:	d038      	beq.n	800d414 <rmw_validate_node_name+0x80>
 800d3a2:	4616      	mov	r6, r2
 800d3a4:	4604      	mov	r4, r0
 800d3a6:	f7f2 ff3d 	bl	8000224 <strlen>
 800d3aa:	b1e0      	cbz	r0, 800d3e6 <rmw_validate_node_name+0x52>
 800d3ac:	1e63      	subs	r3, r4, #1
 800d3ae:	eb03 0800 	add.w	r8, r3, r0
 800d3b2:	f1c4 0101 	rsb	r1, r4, #1
 800d3b6:	18cf      	adds	r7, r1, r3
 800d3b8:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 800d3bc:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 800d3c0:	f02e 0c20 	bic.w	ip, lr, #32
 800d3c4:	2a09      	cmp	r2, #9
 800d3c6:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 800d3ca:	d914      	bls.n	800d3f6 <rmw_validate_node_name+0x62>
 800d3cc:	f1bc 0f19 	cmp.w	ip, #25
 800d3d0:	d911      	bls.n	800d3f6 <rmw_validate_node_name+0x62>
 800d3d2:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 800d3d6:	d00e      	beq.n	800d3f6 <rmw_validate_node_name+0x62>
 800d3d8:	2302      	movs	r3, #2
 800d3da:	602b      	str	r3, [r5, #0]
 800d3dc:	b106      	cbz	r6, 800d3e0 <rmw_validate_node_name+0x4c>
 800d3de:	6037      	str	r7, [r6, #0]
 800d3e0:	2000      	movs	r0, #0
 800d3e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3e6:	2301      	movs	r3, #1
 800d3e8:	602b      	str	r3, [r5, #0]
 800d3ea:	2e00      	cmp	r6, #0
 800d3ec:	d0f8      	beq.n	800d3e0 <rmw_validate_node_name+0x4c>
 800d3ee:	2000      	movs	r0, #0
 800d3f0:	6030      	str	r0, [r6, #0]
 800d3f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3f6:	4543      	cmp	r3, r8
 800d3f8:	d1dd      	bne.n	800d3b6 <rmw_validate_node_name+0x22>
 800d3fa:	7822      	ldrb	r2, [r4, #0]
 800d3fc:	4b0d      	ldr	r3, [pc, #52]	@ (800d434 <rmw_validate_node_name+0xa0>)
 800d3fe:	5cd3      	ldrb	r3, [r2, r3]
 800d400:	f013 0304 	ands.w	r3, r3, #4
 800d404:	d110      	bne.n	800d428 <rmw_validate_node_name+0x94>
 800d406:	28ff      	cmp	r0, #255	@ 0xff
 800d408:	d806      	bhi.n	800d418 <rmw_validate_node_name+0x84>
 800d40a:	602b      	str	r3, [r5, #0]
 800d40c:	4618      	mov	r0, r3
 800d40e:	e7e8      	b.n	800d3e2 <rmw_validate_node_name+0x4e>
 800d410:	200b      	movs	r0, #11
 800d412:	4770      	bx	lr
 800d414:	200b      	movs	r0, #11
 800d416:	e7e4      	b.n	800d3e2 <rmw_validate_node_name+0x4e>
 800d418:	2204      	movs	r2, #4
 800d41a:	602a      	str	r2, [r5, #0]
 800d41c:	2e00      	cmp	r6, #0
 800d41e:	d0df      	beq.n	800d3e0 <rmw_validate_node_name+0x4c>
 800d420:	22fe      	movs	r2, #254	@ 0xfe
 800d422:	6032      	str	r2, [r6, #0]
 800d424:	4618      	mov	r0, r3
 800d426:	e7dc      	b.n	800d3e2 <rmw_validate_node_name+0x4e>
 800d428:	2303      	movs	r3, #3
 800d42a:	602b      	str	r3, [r5, #0]
 800d42c:	2e00      	cmp	r6, #0
 800d42e:	d1de      	bne.n	800d3ee <rmw_validate_node_name+0x5a>
 800d430:	e7d6      	b.n	800d3e0 <rmw_validate_node_name+0x4c>
 800d432:	bf00      	nop
 800d434:	0801234b 	.word	0x0801234b

0800d438 <rmw_node_name_validation_result_string>:
 800d438:	2804      	cmp	r0, #4
 800d43a:	bf9a      	itte	ls
 800d43c:	4b02      	ldrls	r3, [pc, #8]	@ (800d448 <rmw_node_name_validation_result_string+0x10>)
 800d43e:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800d442:	4802      	ldrhi	r0, [pc, #8]	@ (800d44c <rmw_node_name_validation_result_string+0x14>)
 800d444:	4770      	bx	lr
 800d446:	bf00      	nop
 800d448:	0801204c 	.word	0x0801204c
 800d44c:	08011e88 	.word	0x08011e88

0800d450 <get_memory>:
 800d450:	4603      	mov	r3, r0
 800d452:	6840      	ldr	r0, [r0, #4]
 800d454:	b158      	cbz	r0, 800d46e <get_memory+0x1e>
 800d456:	6842      	ldr	r2, [r0, #4]
 800d458:	605a      	str	r2, [r3, #4]
 800d45a:	b10a      	cbz	r2, 800d460 <get_memory+0x10>
 800d45c:	2100      	movs	r1, #0
 800d45e:	6011      	str	r1, [r2, #0]
 800d460:	681a      	ldr	r2, [r3, #0]
 800d462:	6042      	str	r2, [r0, #4]
 800d464:	b102      	cbz	r2, 800d468 <get_memory+0x18>
 800d466:	6010      	str	r0, [r2, #0]
 800d468:	2200      	movs	r2, #0
 800d46a:	6002      	str	r2, [r0, #0]
 800d46c:	6018      	str	r0, [r3, #0]
 800d46e:	4770      	bx	lr

0800d470 <put_memory>:
 800d470:	680b      	ldr	r3, [r1, #0]
 800d472:	b10b      	cbz	r3, 800d478 <put_memory+0x8>
 800d474:	684a      	ldr	r2, [r1, #4]
 800d476:	605a      	str	r2, [r3, #4]
 800d478:	684a      	ldr	r2, [r1, #4]
 800d47a:	b102      	cbz	r2, 800d47e <put_memory+0xe>
 800d47c:	6013      	str	r3, [r2, #0]
 800d47e:	6803      	ldr	r3, [r0, #0]
 800d480:	428b      	cmp	r3, r1
 800d482:	6843      	ldr	r3, [r0, #4]
 800d484:	bf08      	it	eq
 800d486:	6002      	streq	r2, [r0, #0]
 800d488:	604b      	str	r3, [r1, #4]
 800d48a:	b103      	cbz	r3, 800d48e <put_memory+0x1e>
 800d48c:	6019      	str	r1, [r3, #0]
 800d48e:	2300      	movs	r3, #0
 800d490:	600b      	str	r3, [r1, #0]
 800d492:	6041      	str	r1, [r0, #4]
 800d494:	4770      	bx	lr
 800d496:	bf00      	nop

0800d498 <rmw_get_implementation_identifier>:
 800d498:	4b01      	ldr	r3, [pc, #4]	@ (800d4a0 <rmw_get_implementation_identifier+0x8>)
 800d49a:	6818      	ldr	r0, [r3, #0]
 800d49c:	4770      	bx	lr
 800d49e:	bf00      	nop
 800d4a0:	08012060 	.word	0x08012060

0800d4a4 <rmw_init_options_init>:
 800d4a4:	b084      	sub	sp, #16
 800d4a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d4a8:	b083      	sub	sp, #12
 800d4aa:	ad09      	add	r5, sp, #36	@ 0x24
 800d4ac:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800d4b0:	b130      	cbz	r0, 800d4c0 <rmw_init_options_init+0x1c>
 800d4b2:	4604      	mov	r4, r0
 800d4b4:	4628      	mov	r0, r5
 800d4b6:	f7fa fbd9 	bl	8007c6c <rcutils_allocator_is_valid>
 800d4ba:	b108      	cbz	r0, 800d4c0 <rmw_init_options_init+0x1c>
 800d4bc:	68a6      	ldr	r6, [r4, #8]
 800d4be:	b12e      	cbz	r6, 800d4cc <rmw_init_options_init+0x28>
 800d4c0:	200b      	movs	r0, #11
 800d4c2:	b003      	add	sp, #12
 800d4c4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800d4c8:	b004      	add	sp, #16
 800d4ca:	4770      	bx	lr
 800d4cc:	2200      	movs	r2, #0
 800d4ce:	2300      	movs	r3, #0
 800d4d0:	e9c4 2300 	strd	r2, r3, [r4]
 800d4d4:	4b20      	ldr	r3, [pc, #128]	@ (800d558 <rmw_init_options_init+0xb4>)
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	60a3      	str	r3, [r4, #8]
 800d4da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d4dc:	f104 0c20 	add.w	ip, r4, #32
 800d4e0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d4e4:	466f      	mov	r7, sp
 800d4e6:	682b      	ldr	r3, [r5, #0]
 800d4e8:	f8cc 3000 	str.w	r3, [ip]
 800d4ec:	4638      	mov	r0, r7
 800d4ee:	61e6      	str	r6, [r4, #28]
 800d4f0:	60e6      	str	r6, [r4, #12]
 800d4f2:	f7ff fe69 	bl	800d1c8 <rmw_get_default_security_options>
 800d4f6:	e897 0003 	ldmia.w	r7, {r0, r1}
 800d4fa:	f104 0310 	add.w	r3, r4, #16
 800d4fe:	e883 0003 	stmia.w	r3, {r0, r1}
 800d502:	2203      	movs	r2, #3
 800d504:	4815      	ldr	r0, [pc, #84]	@ (800d55c <rmw_init_options_init+0xb8>)
 800d506:	4916      	ldr	r1, [pc, #88]	@ (800d560 <rmw_init_options_init+0xbc>)
 800d508:	7626      	strb	r6, [r4, #24]
 800d50a:	f7fa feaf 	bl	800826c <rmw_uxrce_init_init_options_impl_memory>
 800d50e:	4813      	ldr	r0, [pc, #76]	@ (800d55c <rmw_init_options_init+0xb8>)
 800d510:	f7ff ff9e 	bl	800d450 <get_memory>
 800d514:	b1f0      	cbz	r0, 800d554 <rmw_init_options_init+0xb0>
 800d516:	4a13      	ldr	r2, [pc, #76]	@ (800d564 <rmw_init_options_init+0xc0>)
 800d518:	6883      	ldr	r3, [r0, #8]
 800d51a:	6851      	ldr	r1, [r2, #4]
 800d51c:	7810      	ldrb	r0, [r2, #0]
 800d51e:	6363      	str	r3, [r4, #52]	@ 0x34
 800d520:	7418      	strb	r0, [r3, #16]
 800d522:	6159      	str	r1, [r3, #20]
 800d524:	68d1      	ldr	r1, [r2, #12]
 800d526:	61d9      	str	r1, [r3, #28]
 800d528:	6911      	ldr	r1, [r2, #16]
 800d52a:	6219      	str	r1, [r3, #32]
 800d52c:	6951      	ldr	r1, [r2, #20]
 800d52e:	6892      	ldr	r2, [r2, #8]
 800d530:	619a      	str	r2, [r3, #24]
 800d532:	6259      	str	r1, [r3, #36]	@ 0x24
 800d534:	f7fd fc82 	bl	800ae3c <uxr_nanos>
 800d538:	f002 ff9c 	bl	8010474 <srand>
 800d53c:	f002 ffc8 	bl	80104d0 <rand>
 800d540:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d542:	6298      	str	r0, [r3, #40]	@ 0x28
 800d544:	2800      	cmp	r0, #0
 800d546:	d0f9      	beq.n	800d53c <rmw_init_options_init+0x98>
 800d548:	2000      	movs	r0, #0
 800d54a:	b003      	add	sp, #12
 800d54c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800d550:	b004      	add	sp, #16
 800d552:	4770      	bx	lr
 800d554:	2001      	movs	r0, #1
 800d556:	e7b4      	b.n	800d4c2 <rmw_init_options_init+0x1e>
 800d558:	08012060 	.word	0x08012060
 800d55c:	2000d96c 	.word	0x2000d96c
 800d560:	20009208 	.word	0x20009208
 800d564:	20009094 	.word	0x20009094

0800d568 <rmw_init_options_copy>:
 800d568:	b570      	push	{r4, r5, r6, lr}
 800d56a:	b088      	sub	sp, #32
 800d56c:	b160      	cbz	r0, 800d588 <rmw_init_options_copy+0x20>
 800d56e:	460d      	mov	r5, r1
 800d570:	b151      	cbz	r1, 800d588 <rmw_init_options_copy+0x20>
 800d572:	4604      	mov	r4, r0
 800d574:	6880      	ldr	r0, [r0, #8]
 800d576:	b128      	cbz	r0, 800d584 <rmw_init_options_copy+0x1c>
 800d578:	4b33      	ldr	r3, [pc, #204]	@ (800d648 <rmw_init_options_copy+0xe0>)
 800d57a:	6819      	ldr	r1, [r3, #0]
 800d57c:	f7f2 fe48 	bl	8000210 <strcmp>
 800d580:	2800      	cmp	r0, #0
 800d582:	d154      	bne.n	800d62e <rmw_init_options_copy+0xc6>
 800d584:	68ab      	ldr	r3, [r5, #8]
 800d586:	b11b      	cbz	r3, 800d590 <rmw_init_options_copy+0x28>
 800d588:	240b      	movs	r4, #11
 800d58a:	4620      	mov	r0, r4
 800d58c:	b008      	add	sp, #32
 800d58e:	bd70      	pop	{r4, r5, r6, pc}
 800d590:	4623      	mov	r3, r4
 800d592:	462a      	mov	r2, r5
 800d594:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 800d598:	f8d3 c000 	ldr.w	ip, [r3]
 800d59c:	6858      	ldr	r0, [r3, #4]
 800d59e:	6899      	ldr	r1, [r3, #8]
 800d5a0:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 800d5a4:	f8c2 e00c 	str.w	lr, [r2, #12]
 800d5a8:	3310      	adds	r3, #16
 800d5aa:	42b3      	cmp	r3, r6
 800d5ac:	f8c2 c000 	str.w	ip, [r2]
 800d5b0:	6050      	str	r0, [r2, #4]
 800d5b2:	6091      	str	r1, [r2, #8]
 800d5b4:	f102 0210 	add.w	r2, r2, #16
 800d5b8:	d1ee      	bne.n	800d598 <rmw_init_options_copy+0x30>
 800d5ba:	6819      	ldr	r1, [r3, #0]
 800d5bc:	685b      	ldr	r3, [r3, #4]
 800d5be:	6053      	str	r3, [r2, #4]
 800d5c0:	6011      	str	r1, [r2, #0]
 800d5c2:	f104 0e20 	add.w	lr, r4, #32
 800d5c6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d5ca:	f10d 0c0c 	add.w	ip, sp, #12
 800d5ce:	4666      	mov	r6, ip
 800d5d0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d5d4:	f8de 3000 	ldr.w	r3, [lr]
 800d5d8:	f8cc 3000 	str.w	r3, [ip]
 800d5dc:	4630      	mov	r0, r6
 800d5de:	f7fa fb45 	bl	8007c6c <rcutils_allocator_is_valid>
 800d5e2:	2800      	cmp	r0, #0
 800d5e4:	d0d0      	beq.n	800d588 <rmw_init_options_copy+0x20>
 800d5e6:	ab08      	add	r3, sp, #32
 800d5e8:	e913 0003 	ldmdb	r3, {r0, r1}
 800d5ec:	e88d 0003 	stmia.w	sp, {r0, r1}
 800d5f0:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800d5f4:	69e0      	ldr	r0, [r4, #28]
 800d5f6:	f7ff fc0d 	bl	800ce14 <rcutils_strdup>
 800d5fa:	61e8      	str	r0, [r5, #28]
 800d5fc:	69e3      	ldr	r3, [r4, #28]
 800d5fe:	b103      	cbz	r3, 800d602 <rmw_init_options_copy+0x9a>
 800d600:	b1f8      	cbz	r0, 800d642 <rmw_init_options_copy+0xda>
 800d602:	4812      	ldr	r0, [pc, #72]	@ (800d64c <rmw_init_options_copy+0xe4>)
 800d604:	f7ff ff24 	bl	800d450 <get_memory>
 800d608:	b1a8      	cbz	r0, 800d636 <rmw_init_options_copy+0xce>
 800d60a:	6883      	ldr	r3, [r0, #8]
 800d60c:	636b      	str	r3, [r5, #52]	@ 0x34
 800d60e:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800d610:	f102 0c10 	add.w	ip, r2, #16
 800d614:	f103 0510 	add.w	r5, r3, #16
 800d618:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d61c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d61e:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800d622:	2400      	movs	r4, #0
 800d624:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800d628:	4620      	mov	r0, r4
 800d62a:	b008      	add	sp, #32
 800d62c:	bd70      	pop	{r4, r5, r6, pc}
 800d62e:	240c      	movs	r4, #12
 800d630:	4620      	mov	r0, r4
 800d632:	b008      	add	sp, #32
 800d634:	bd70      	pop	{r4, r5, r6, pc}
 800d636:	9b04      	ldr	r3, [sp, #16]
 800d638:	9907      	ldr	r1, [sp, #28]
 800d63a:	69e8      	ldr	r0, [r5, #28]
 800d63c:	4798      	blx	r3
 800d63e:	2401      	movs	r4, #1
 800d640:	e7a3      	b.n	800d58a <rmw_init_options_copy+0x22>
 800d642:	240a      	movs	r4, #10
 800d644:	e7a1      	b.n	800d58a <rmw_init_options_copy+0x22>
 800d646:	bf00      	nop
 800d648:	08012060 	.word	0x08012060
 800d64c:	2000d96c 	.word	0x2000d96c

0800d650 <rmw_init_options_fini>:
 800d650:	2800      	cmp	r0, #0
 800d652:	d041      	beq.n	800d6d8 <rmw_init_options_fini+0x88>
 800d654:	b510      	push	{r4, lr}
 800d656:	4604      	mov	r4, r0
 800d658:	b08e      	sub	sp, #56	@ 0x38
 800d65a:	3020      	adds	r0, #32
 800d65c:	f7fa fb06 	bl	8007c6c <rcutils_allocator_is_valid>
 800d660:	b380      	cbz	r0, 800d6c4 <rmw_init_options_fini+0x74>
 800d662:	68a0      	ldr	r0, [r4, #8]
 800d664:	b120      	cbz	r0, 800d670 <rmw_init_options_fini+0x20>
 800d666:	4b1e      	ldr	r3, [pc, #120]	@ (800d6e0 <rmw_init_options_fini+0x90>)
 800d668:	6819      	ldr	r1, [r3, #0]
 800d66a:	f7f2 fdd1 	bl	8000210 <strcmp>
 800d66e:	bb88      	cbnz	r0, 800d6d4 <rmw_init_options_fini+0x84>
 800d670:	4b1c      	ldr	r3, [pc, #112]	@ (800d6e4 <rmw_init_options_fini+0x94>)
 800d672:	6819      	ldr	r1, [r3, #0]
 800d674:	b351      	cbz	r1, 800d6cc <rmw_init_options_fini+0x7c>
 800d676:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800d678:	e001      	b.n	800d67e <rmw_init_options_fini+0x2e>
 800d67a:	6849      	ldr	r1, [r1, #4]
 800d67c:	b331      	cbz	r1, 800d6cc <rmw_init_options_fini+0x7c>
 800d67e:	688b      	ldr	r3, [r1, #8]
 800d680:	429a      	cmp	r2, r3
 800d682:	d1fa      	bne.n	800d67a <rmw_init_options_fini+0x2a>
 800d684:	4817      	ldr	r0, [pc, #92]	@ (800d6e4 <rmw_init_options_fini+0x94>)
 800d686:	f7ff fef3 	bl	800d470 <put_memory>
 800d68a:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800d68c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800d68e:	69e0      	ldr	r0, [r4, #28]
 800d690:	4798      	blx	r3
 800d692:	4668      	mov	r0, sp
 800d694:	f7ff fd88 	bl	800d1a8 <rmw_get_zero_initialized_init_options>
 800d698:	46ee      	mov	lr, sp
 800d69a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d69e:	46a4      	mov	ip, r4
 800d6a0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d6a4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d6a8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d6ac:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d6b0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d6b4:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800d6b8:	e88c 0003 	stmia.w	ip, {r0, r1}
 800d6bc:	2300      	movs	r3, #0
 800d6be:	4618      	mov	r0, r3
 800d6c0:	b00e      	add	sp, #56	@ 0x38
 800d6c2:	bd10      	pop	{r4, pc}
 800d6c4:	230b      	movs	r3, #11
 800d6c6:	4618      	mov	r0, r3
 800d6c8:	b00e      	add	sp, #56	@ 0x38
 800d6ca:	bd10      	pop	{r4, pc}
 800d6cc:	2301      	movs	r3, #1
 800d6ce:	4618      	mov	r0, r3
 800d6d0:	b00e      	add	sp, #56	@ 0x38
 800d6d2:	bd10      	pop	{r4, pc}
 800d6d4:	230c      	movs	r3, #12
 800d6d6:	e7f2      	b.n	800d6be <rmw_init_options_fini+0x6e>
 800d6d8:	230b      	movs	r3, #11
 800d6da:	4618      	mov	r0, r3
 800d6dc:	4770      	bx	lr
 800d6de:	bf00      	nop
 800d6e0:	08012060 	.word	0x08012060
 800d6e4:	2000d96c 	.word	0x2000d96c

0800d6e8 <rmw_init>:
 800d6e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d6ec:	b083      	sub	sp, #12
 800d6ee:	2800      	cmp	r0, #0
 800d6f0:	f000 80d3 	beq.w	800d89a <rmw_init+0x1b2>
 800d6f4:	460e      	mov	r6, r1
 800d6f6:	2900      	cmp	r1, #0
 800d6f8:	f000 80cf 	beq.w	800d89a <rmw_init+0x1b2>
 800d6fc:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800d6fe:	4605      	mov	r5, r0
 800d700:	2b00      	cmp	r3, #0
 800d702:	f000 80ca 	beq.w	800d89a <rmw_init+0x1b2>
 800d706:	4b78      	ldr	r3, [pc, #480]	@ (800d8e8 <rmw_init+0x200>)
 800d708:	6880      	ldr	r0, [r0, #8]
 800d70a:	681f      	ldr	r7, [r3, #0]
 800d70c:	b128      	cbz	r0, 800d71a <rmw_init+0x32>
 800d70e:	4639      	mov	r1, r7
 800d710:	f7f2 fd7e 	bl	8000210 <strcmp>
 800d714:	2800      	cmp	r0, #0
 800d716:	f040 80ca 	bne.w	800d8ae <rmw_init+0x1c6>
 800d71a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d71e:	4c73      	ldr	r4, [pc, #460]	@ (800d8ec <rmw_init+0x204>)
 800d720:	4973      	ldr	r1, [pc, #460]	@ (800d8f0 <rmw_init+0x208>)
 800d722:	4874      	ldr	r0, [pc, #464]	@ (800d8f4 <rmw_init+0x20c>)
 800d724:	60b7      	str	r7, [r6, #8]
 800d726:	e9c6 2300 	strd	r2, r3, [r6]
 800d72a:	68eb      	ldr	r3, [r5, #12]
 800d72c:	64b3      	str	r3, [r6, #72]	@ 0x48
 800d72e:	2201      	movs	r2, #1
 800d730:	f7fa fd3c 	bl	80081ac <rmw_uxrce_init_session_memory>
 800d734:	4620      	mov	r0, r4
 800d736:	4970      	ldr	r1, [pc, #448]	@ (800d8f8 <rmw_init+0x210>)
 800d738:	2204      	movs	r2, #4
 800d73a:	f7fa fd77 	bl	800822c <rmw_uxrce_init_static_input_buffer_memory>
 800d73e:	f04f 0800 	mov.w	r8, #0
 800d742:	486c      	ldr	r0, [pc, #432]	@ (800d8f4 <rmw_init+0x20c>)
 800d744:	f884 800d 	strb.w	r8, [r4, #13]
 800d748:	f7ff fe82 	bl	800d450 <get_memory>
 800d74c:	2800      	cmp	r0, #0
 800d74e:	f000 80a9 	beq.w	800d8a4 <rmw_init+0x1bc>
 800d752:	6884      	ldr	r4, [r0, #8]
 800d754:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 800d756:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 800d758:	f890 c010 	ldrb.w	ip, [r0, #16]
 800d75c:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 800d760:	9101      	str	r1, [sp, #4]
 800d762:	6a00      	ldr	r0, [r0, #32]
 800d764:	9000      	str	r0, [sp, #0]
 800d766:	f104 0910 	add.w	r9, r4, #16
 800d76a:	4661      	mov	r1, ip
 800d76c:	4648      	mov	r0, r9
 800d76e:	f000 fdbf 	bl	800e2f0 <uxr_set_custom_transport_callbacks>
 800d772:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 800d776:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800d77a:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 800d77e:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 800d782:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 800d786:	495d      	ldr	r1, [pc, #372]	@ (800d8fc <rmw_init+0x214>)
 800d788:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 800d78c:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 800d790:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 800d794:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 800d798:	4859      	ldr	r0, [pc, #356]	@ (800d900 <rmw_init+0x218>)
 800d79a:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 800d79e:	2201      	movs	r2, #1
 800d7a0:	64f4      	str	r4, [r6, #76]	@ 0x4c
 800d7a2:	f7fa fce3 	bl	800816c <rmw_uxrce_init_node_memory>
 800d7a6:	4957      	ldr	r1, [pc, #348]	@ (800d904 <rmw_init+0x21c>)
 800d7a8:	4857      	ldr	r0, [pc, #348]	@ (800d908 <rmw_init+0x220>)
 800d7aa:	2205      	movs	r2, #5
 800d7ac:	f7fa fcbe 	bl	800812c <rmw_uxrce_init_subscription_memory>
 800d7b0:	4956      	ldr	r1, [pc, #344]	@ (800d90c <rmw_init+0x224>)
 800d7b2:	4857      	ldr	r0, [pc, #348]	@ (800d910 <rmw_init+0x228>)
 800d7b4:	220a      	movs	r2, #10
 800d7b6:	f7fa fc99 	bl	80080ec <rmw_uxrce_init_publisher_memory>
 800d7ba:	4956      	ldr	r1, [pc, #344]	@ (800d914 <rmw_init+0x22c>)
 800d7bc:	4856      	ldr	r0, [pc, #344]	@ (800d918 <rmw_init+0x230>)
 800d7be:	2201      	movs	r2, #1
 800d7c0:	f7fa fc54 	bl	800806c <rmw_uxrce_init_service_memory>
 800d7c4:	4955      	ldr	r1, [pc, #340]	@ (800d91c <rmw_init+0x234>)
 800d7c6:	4856      	ldr	r0, [pc, #344]	@ (800d920 <rmw_init+0x238>)
 800d7c8:	2201      	movs	r2, #1
 800d7ca:	f7fa fc6f 	bl	80080ac <rmw_uxrce_init_client_memory>
 800d7ce:	4955      	ldr	r1, [pc, #340]	@ (800d924 <rmw_init+0x23c>)
 800d7d0:	4855      	ldr	r0, [pc, #340]	@ (800d928 <rmw_init+0x240>)
 800d7d2:	220f      	movs	r2, #15
 800d7d4:	f7fa fd0a 	bl	80081ec <rmw_uxrce_init_topic_memory>
 800d7d8:	4954      	ldr	r1, [pc, #336]	@ (800d92c <rmw_init+0x244>)
 800d7da:	4855      	ldr	r0, [pc, #340]	@ (800d930 <rmw_init+0x248>)
 800d7dc:	2203      	movs	r2, #3
 800d7de:	f7fa fd45 	bl	800826c <rmw_uxrce_init_init_options_impl_memory>
 800d7e2:	4954      	ldr	r1, [pc, #336]	@ (800d934 <rmw_init+0x24c>)
 800d7e4:	4854      	ldr	r0, [pc, #336]	@ (800d938 <rmw_init+0x250>)
 800d7e6:	2204      	movs	r2, #4
 800d7e8:	f7fa fd60 	bl	80082ac <rmw_uxrce_init_wait_set_memory>
 800d7ec:	4953      	ldr	r1, [pc, #332]	@ (800d93c <rmw_init+0x254>)
 800d7ee:	4854      	ldr	r0, [pc, #336]	@ (800d940 <rmw_init+0x258>)
 800d7f0:	2204      	movs	r2, #4
 800d7f2:	f7fa fd7b 	bl	80082ec <rmw_uxrce_init_guard_condition_memory>
 800d7f6:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 800d7f8:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 800d7fa:	4642      	mov	r2, r8
 800d7fc:	f000 fb06 	bl	800de0c <rmw_uxrce_transport_init>
 800d800:	4607      	mov	r7, r0
 800d802:	2800      	cmp	r0, #0
 800d804:	d158      	bne.n	800d8b8 <rmw_init+0x1d0>
 800d806:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800d808:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 800d80c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800d80e:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 800d812:	4628      	mov	r0, r5
 800d814:	f7fc f9b0 	bl	8009b78 <uxr_init_session>
 800d818:	494a      	ldr	r1, [pc, #296]	@ (800d944 <rmw_init+0x25c>)
 800d81a:	4622      	mov	r2, r4
 800d81c:	4628      	mov	r0, r5
 800d81e:	f7fc f9cf 	bl	8009bc0 <uxr_set_topic_callback>
 800d822:	4949      	ldr	r1, [pc, #292]	@ (800d948 <rmw_init+0x260>)
 800d824:	463a      	mov	r2, r7
 800d826:	4628      	mov	r0, r5
 800d828:	f7fc f9c6 	bl	8009bb8 <uxr_set_status_callback>
 800d82c:	4947      	ldr	r1, [pc, #284]	@ (800d94c <rmw_init+0x264>)
 800d82e:	463a      	mov	r2, r7
 800d830:	4628      	mov	r0, r5
 800d832:	f7fc f9c9 	bl	8009bc8 <uxr_set_request_callback>
 800d836:	4946      	ldr	r1, [pc, #280]	@ (800d950 <rmw_init+0x268>)
 800d838:	463a      	mov	r2, r7
 800d83a:	4628      	mov	r0, r5
 800d83c:	f7fc f9c8 	bl	8009bd0 <uxr_set_reply_callback>
 800d840:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800d844:	2304      	movs	r3, #4
 800d846:	0092      	lsls	r2, r2, #2
 800d848:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 800d84c:	4628      	mov	r0, r5
 800d84e:	f7fc f9fd 	bl	8009c4c <uxr_create_input_reliable_stream>
 800d852:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800d856:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 800d85a:	0092      	lsls	r2, r2, #2
 800d85c:	2304      	movs	r3, #4
 800d85e:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 800d862:	4628      	mov	r0, r5
 800d864:	f7fc f9ca 	bl	8009bfc <uxr_create_output_reliable_stream>
 800d868:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 800d86c:	4628      	mov	r0, r5
 800d86e:	f7fc f9e7 	bl	8009c40 <uxr_create_input_best_effort_stream>
 800d872:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 800d876:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 800d87a:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800d87e:	3114      	adds	r1, #20
 800d880:	4628      	mov	r0, r5
 800d882:	f7fc f9a9 	bl	8009bd8 <uxr_create_output_best_effort_stream>
 800d886:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 800d88a:	4628      	mov	r0, r5
 800d88c:	f7fc fefa 	bl	800a684 <uxr_create_session>
 800d890:	b1f8      	cbz	r0, 800d8d2 <rmw_init+0x1ea>
 800d892:	4638      	mov	r0, r7
 800d894:	b003      	add	sp, #12
 800d896:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d89a:	270b      	movs	r7, #11
 800d89c:	4638      	mov	r0, r7
 800d89e:	b003      	add	sp, #12
 800d8a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d8a4:	2701      	movs	r7, #1
 800d8a6:	4638      	mov	r0, r7
 800d8a8:	b003      	add	sp, #12
 800d8aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d8ae:	270c      	movs	r7, #12
 800d8b0:	4638      	mov	r0, r7
 800d8b2:	b003      	add	sp, #12
 800d8b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d8b8:	4648      	mov	r0, r9
 800d8ba:	f000 fd5b 	bl	800e374 <uxr_close_custom_transport>
 800d8be:	480d      	ldr	r0, [pc, #52]	@ (800d8f4 <rmw_init+0x20c>)
 800d8c0:	4621      	mov	r1, r4
 800d8c2:	f7ff fdd5 	bl	800d470 <put_memory>
 800d8c6:	4638      	mov	r0, r7
 800d8c8:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 800d8cc:	b003      	add	sp, #12
 800d8ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d8d2:	4648      	mov	r0, r9
 800d8d4:	f000 fd4e 	bl	800e374 <uxr_close_custom_transport>
 800d8d8:	4806      	ldr	r0, [pc, #24]	@ (800d8f4 <rmw_init+0x20c>)
 800d8da:	4621      	mov	r1, r4
 800d8dc:	f7ff fdc8 	bl	800d470 <put_memory>
 800d8e0:	64f7      	str	r7, [r6, #76]	@ 0x4c
 800d8e2:	2701      	movs	r7, #1
 800d8e4:	e7d5      	b.n	800d892 <rmw_init+0x1aa>
 800d8e6:	bf00      	nop
 800d8e8:	08012060 	.word	0x08012060
 800d8ec:	2000d9bc 	.word	0x2000d9bc
 800d8f0:	20009c68 	.word	0x20009c68
 800d8f4:	2000d9ac 	.word	0x2000d9ac
 800d8f8:	2000b210 	.word	0x2000b210
 800d8fc:	2000928c 	.word	0x2000928c
 800d900:	2000d97c 	.word	0x2000d97c
 800d904:	2000d310 	.word	0x2000d310
 800d908:	2000d9cc 	.word	0x2000d9cc
 800d90c:	20009330 	.word	0x20009330
 800d910:	2000d98c 	.word	0x2000d98c
 800d914:	20009ba0 	.word	0x20009ba0
 800d918:	2000d99c 	.word	0x2000d99c
 800d91c:	200090c0 	.word	0x200090c0
 800d920:	200090b0 	.word	0x200090b0
 800d924:	2000d748 	.word	0x2000d748
 800d928:	2000d9dc 	.word	0x2000d9dc
 800d92c:	20009208 	.word	0x20009208
 800d930:	2000d96c 	.word	0x2000d96c
 800d934:	2000d8ec 	.word	0x2000d8ec
 800d938:	2000d9ec 	.word	0x2000d9ec
 800d93c:	20009188 	.word	0x20009188
 800d940:	2000d95c 	.word	0x2000d95c
 800d944:	0800ff91 	.word	0x0800ff91
 800d948:	0800ff89 	.word	0x0800ff89
 800d94c:	08010029 	.word	0x08010029
 800d950:	080100c5 	.word	0x080100c5

0800d954 <rmw_context_fini>:
 800d954:	4b17      	ldr	r3, [pc, #92]	@ (800d9b4 <rmw_context_fini+0x60>)
 800d956:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 800d958:	b570      	push	{r4, r5, r6, lr}
 800d95a:	681c      	ldr	r4, [r3, #0]
 800d95c:	4605      	mov	r5, r0
 800d95e:	b334      	cbz	r4, 800d9ae <rmw_context_fini+0x5a>
 800d960:	2600      	movs	r6, #0
 800d962:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 800d966:	6902      	ldr	r2, [r0, #16]
 800d968:	428a      	cmp	r2, r1
 800d96a:	d018      	beq.n	800d99e <rmw_context_fini+0x4a>
 800d96c:	2c00      	cmp	r4, #0
 800d96e:	d1f8      	bne.n	800d962 <rmw_context_fini+0xe>
 800d970:	b189      	cbz	r1, 800d996 <rmw_context_fini+0x42>
 800d972:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 800d976:	789b      	ldrb	r3, [r3, #2]
 800d978:	2b01      	cmp	r3, #1
 800d97a:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 800d97e:	bf14      	ite	ne
 800d980:	210a      	movne	r1, #10
 800d982:	2100      	moveq	r1, #0
 800d984:	f7fc fe56 	bl	800a634 <uxr_delete_session_retries>
 800d988:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800d98a:	f7fa fccf 	bl	800832c <rmw_uxrce_fini_session_memory>
 800d98e:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800d990:	3010      	adds	r0, #16
 800d992:	f000 fcef 	bl	800e374 <uxr_close_custom_transport>
 800d996:	2300      	movs	r3, #0
 800d998:	64eb      	str	r3, [r5, #76]	@ 0x4c
 800d99a:	4630      	mov	r0, r6
 800d99c:	bd70      	pop	{r4, r5, r6, pc}
 800d99e:	3018      	adds	r0, #24
 800d9a0:	f000 f90e 	bl	800dbc0 <rmw_destroy_node>
 800d9a4:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800d9a6:	4606      	mov	r6, r0
 800d9a8:	2c00      	cmp	r4, #0
 800d9aa:	d1da      	bne.n	800d962 <rmw_context_fini+0xe>
 800d9ac:	e7e0      	b.n	800d970 <rmw_context_fini+0x1c>
 800d9ae:	4626      	mov	r6, r4
 800d9b0:	e7de      	b.n	800d970 <rmw_context_fini+0x1c>
 800d9b2:	bf00      	nop
 800d9b4:	2000d97c 	.word	0x2000d97c

0800d9b8 <create_topic>:
 800d9b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d9bc:	4605      	mov	r5, r0
 800d9be:	b084      	sub	sp, #16
 800d9c0:	4822      	ldr	r0, [pc, #136]	@ (800da4c <create_topic+0x94>)
 800d9c2:	460f      	mov	r7, r1
 800d9c4:	4616      	mov	r6, r2
 800d9c6:	f7ff fd43 	bl	800d450 <get_memory>
 800d9ca:	4604      	mov	r4, r0
 800d9cc:	2800      	cmp	r0, #0
 800d9ce:	d039      	beq.n	800da44 <create_topic+0x8c>
 800d9d0:	692b      	ldr	r3, [r5, #16]
 800d9d2:	6884      	ldr	r4, [r0, #8]
 800d9d4:	f8df 807c 	ldr.w	r8, [pc, #124]	@ 800da54 <create_topic+0x9c>
 800d9d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d9dc:	e9c4 6505 	strd	r6, r5, [r4, #20]
 800d9e0:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 800d9e4:	1c42      	adds	r2, r0, #1
 800d9e6:	2102      	movs	r1, #2
 800d9e8:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 800d9ec:	f7fc f806 	bl	80099fc <uxr_object_id>
 800d9f0:	223c      	movs	r2, #60	@ 0x3c
 800d9f2:	6120      	str	r0, [r4, #16]
 800d9f4:	4641      	mov	r1, r8
 800d9f6:	4638      	mov	r0, r7
 800d9f8:	f7fa fdd0 	bl	800859c <generate_topic_name>
 800d9fc:	b1f0      	cbz	r0, 800da3c <create_topic+0x84>
 800d9fe:	4f14      	ldr	r7, [pc, #80]	@ (800da50 <create_topic+0x98>)
 800da00:	4630      	mov	r0, r6
 800da02:	2264      	movs	r2, #100	@ 0x64
 800da04:	4639      	mov	r1, r7
 800da06:	f7fa fd99 	bl	800853c <generate_type_name>
 800da0a:	b1b8      	cbz	r0, 800da3c <create_topic+0x84>
 800da0c:	6928      	ldr	r0, [r5, #16]
 800da0e:	2306      	movs	r3, #6
 800da10:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 800da14:	f8cd 8000 	str.w	r8, [sp]
 800da18:	e9cd 7301 	strd	r7, r3, [sp, #4]
 800da1c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800da20:	6811      	ldr	r1, [r2, #0]
 800da22:	696b      	ldr	r3, [r5, #20]
 800da24:	6922      	ldr	r2, [r4, #16]
 800da26:	f7fb ff0d 	bl	8009844 <uxr_buffer_create_topic_bin>
 800da2a:	4602      	mov	r2, r0
 800da2c:	6928      	ldr	r0, [r5, #16]
 800da2e:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800da32:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800da36:	f7fa fd4b 	bl	80084d0 <run_xrce_session>
 800da3a:	b918      	cbnz	r0, 800da44 <create_topic+0x8c>
 800da3c:	4620      	mov	r0, r4
 800da3e:	f7fa fceb 	bl	8008418 <rmw_uxrce_fini_topic_memory>
 800da42:	2400      	movs	r4, #0
 800da44:	4620      	mov	r0, r4
 800da46:	b004      	add	sp, #16
 800da48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da4c:	2000d9dc 	.word	0x2000d9dc
 800da50:	2000da58 	.word	0x2000da58
 800da54:	2000da1c 	.word	0x2000da1c

0800da58 <destroy_topic>:
 800da58:	b538      	push	{r3, r4, r5, lr}
 800da5a:	6985      	ldr	r5, [r0, #24]
 800da5c:	b1d5      	cbz	r5, 800da94 <destroy_topic+0x3c>
 800da5e:	4604      	mov	r4, r0
 800da60:	6928      	ldr	r0, [r5, #16]
 800da62:	6922      	ldr	r2, [r4, #16]
 800da64:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800da68:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800da6c:	6819      	ldr	r1, [r3, #0]
 800da6e:	f7fb fe6b 	bl	8009748 <uxr_buffer_delete_entity>
 800da72:	4602      	mov	r2, r0
 800da74:	6928      	ldr	r0, [r5, #16]
 800da76:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800da7a:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800da7e:	f7fa fd27 	bl	80084d0 <run_xrce_session>
 800da82:	2800      	cmp	r0, #0
 800da84:	4620      	mov	r0, r4
 800da86:	bf14      	ite	ne
 800da88:	2400      	movne	r4, #0
 800da8a:	2402      	moveq	r4, #2
 800da8c:	f7fa fcc4 	bl	8008418 <rmw_uxrce_fini_topic_memory>
 800da90:	4620      	mov	r0, r4
 800da92:	bd38      	pop	{r3, r4, r5, pc}
 800da94:	2401      	movs	r4, #1
 800da96:	4620      	mov	r0, r4
 800da98:	bd38      	pop	{r3, r4, r5, pc}
 800da9a:	bf00      	nop

0800da9c <create_node>:
 800da9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800daa0:	b083      	sub	sp, #12
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d05f      	beq.n	800db66 <create_node+0xca>
 800daa6:	4606      	mov	r6, r0
 800daa8:	4835      	ldr	r0, [pc, #212]	@ (800db80 <create_node+0xe4>)
 800daaa:	460f      	mov	r7, r1
 800daac:	4690      	mov	r8, r2
 800daae:	461d      	mov	r5, r3
 800dab0:	f7ff fcce 	bl	800d450 <get_memory>
 800dab4:	2800      	cmp	r0, #0
 800dab6:	d056      	beq.n	800db66 <create_node+0xca>
 800dab8:	6884      	ldr	r4, [r0, #8]
 800daba:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800dabc:	6123      	str	r3, [r4, #16]
 800dabe:	f7ff fceb 	bl	800d498 <rmw_get_implementation_identifier>
 800dac2:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 800dac6:	e9c4 0406 	strd	r0, r4, [r4, #24]
 800daca:	f8c4 9020 	str.w	r9, [r4, #32]
 800dace:	4630      	mov	r0, r6
 800dad0:	f7f2 fba8 	bl	8000224 <strlen>
 800dad4:	1c42      	adds	r2, r0, #1
 800dad6:	2a3c      	cmp	r2, #60	@ 0x3c
 800dad8:	f104 0518 	add.w	r5, r4, #24
 800dadc:	d840      	bhi.n	800db60 <create_node+0xc4>
 800dade:	4648      	mov	r0, r9
 800dae0:	4631      	mov	r1, r6
 800dae2:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 800dae6:	f003 f832 	bl	8010b4e <memcpy>
 800daea:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 800daee:	4638      	mov	r0, r7
 800daf0:	f7f2 fb98 	bl	8000224 <strlen>
 800daf4:	1c42      	adds	r2, r0, #1
 800daf6:	2a3c      	cmp	r2, #60	@ 0x3c
 800daf8:	d832      	bhi.n	800db60 <create_node+0xc4>
 800dafa:	4639      	mov	r1, r7
 800dafc:	4648      	mov	r0, r9
 800dafe:	f003 f826 	bl	8010b4e <memcpy>
 800db02:	6923      	ldr	r3, [r4, #16]
 800db04:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800db08:	2101      	movs	r1, #1
 800db0a:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 800db0e:	1842      	adds	r2, r0, r1
 800db10:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 800db14:	f7fb ff72 	bl	80099fc <uxr_object_id>
 800db18:	6160      	str	r0, [r4, #20]
 800db1a:	783b      	ldrb	r3, [r7, #0]
 800db1c:	2b2f      	cmp	r3, #47	@ 0x2f
 800db1e:	d127      	bne.n	800db70 <create_node+0xd4>
 800db20:	787b      	ldrb	r3, [r7, #1]
 800db22:	bb2b      	cbnz	r3, 800db70 <create_node+0xd4>
 800db24:	4a17      	ldr	r2, [pc, #92]	@ (800db84 <create_node+0xe8>)
 800db26:	4818      	ldr	r0, [pc, #96]	@ (800db88 <create_node+0xec>)
 800db28:	4633      	mov	r3, r6
 800db2a:	213c      	movs	r1, #60	@ 0x3c
 800db2c:	f002 fe90 	bl	8010850 <sniprintf>
 800db30:	6920      	ldr	r0, [r4, #16]
 800db32:	4915      	ldr	r1, [pc, #84]	@ (800db88 <create_node+0xec>)
 800db34:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 800db38:	9100      	str	r1, [sp, #0]
 800db3a:	2106      	movs	r1, #6
 800db3c:	9101      	str	r1, [sp, #4]
 800db3e:	6811      	ldr	r1, [r2, #0]
 800db40:	6962      	ldr	r2, [r4, #20]
 800db42:	fa1f f388 	uxth.w	r3, r8
 800db46:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800db4a:	f7fb fe49 	bl	80097e0 <uxr_buffer_create_participant_bin>
 800db4e:	4602      	mov	r2, r0
 800db50:	6920      	ldr	r0, [r4, #16]
 800db52:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800db56:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800db5a:	f7fa fcb9 	bl	80084d0 <run_xrce_session>
 800db5e:	b918      	cbnz	r0, 800db68 <create_node+0xcc>
 800db60:	4628      	mov	r0, r5
 800db62:	f7fa fbe9 	bl	8008338 <rmw_uxrce_fini_node_memory>
 800db66:	2500      	movs	r5, #0
 800db68:	4628      	mov	r0, r5
 800db6a:	b003      	add	sp, #12
 800db6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800db70:	4a06      	ldr	r2, [pc, #24]	@ (800db8c <create_node+0xf0>)
 800db72:	9600      	str	r6, [sp, #0]
 800db74:	463b      	mov	r3, r7
 800db76:	213c      	movs	r1, #60	@ 0x3c
 800db78:	4803      	ldr	r0, [pc, #12]	@ (800db88 <create_node+0xec>)
 800db7a:	f002 fe69 	bl	8010850 <sniprintf>
 800db7e:	e7d7      	b.n	800db30 <create_node+0x94>
 800db80:	2000d97c 	.word	0x2000d97c
 800db84:	08011b0c 	.word	0x08011b0c
 800db88:	2000dabc 	.word	0x2000dabc
 800db8c:	08011c50 	.word	0x08011c50

0800db90 <rmw_create_node>:
 800db90:	b199      	cbz	r1, 800dbba <rmw_create_node+0x2a>
 800db92:	780b      	ldrb	r3, [r1, #0]
 800db94:	468c      	mov	ip, r1
 800db96:	b183      	cbz	r3, 800dbba <rmw_create_node+0x2a>
 800db98:	b410      	push	{r4}
 800db9a:	4614      	mov	r4, r2
 800db9c:	b14a      	cbz	r2, 800dbb2 <rmw_create_node+0x22>
 800db9e:	7813      	ldrb	r3, [r2, #0]
 800dba0:	b13b      	cbz	r3, 800dbb2 <rmw_create_node+0x22>
 800dba2:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 800dba4:	4603      	mov	r3, r0
 800dba6:	4621      	mov	r1, r4
 800dba8:	4660      	mov	r0, ip
 800dbaa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dbae:	f7ff bf75 	b.w	800da9c <create_node>
 800dbb2:	2000      	movs	r0, #0
 800dbb4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dbb8:	4770      	bx	lr
 800dbba:	2000      	movs	r0, #0
 800dbbc:	4770      	bx	lr
 800dbbe:	bf00      	nop

0800dbc0 <rmw_destroy_node>:
 800dbc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbc2:	b328      	cbz	r0, 800dc10 <rmw_destroy_node+0x50>
 800dbc4:	4607      	mov	r7, r0
 800dbc6:	6800      	ldr	r0, [r0, #0]
 800dbc8:	b120      	cbz	r0, 800dbd4 <rmw_destroy_node+0x14>
 800dbca:	4b36      	ldr	r3, [pc, #216]	@ (800dca4 <rmw_destroy_node+0xe4>)
 800dbcc:	6819      	ldr	r1, [r3, #0]
 800dbce:	f7f2 fb1f 	bl	8000210 <strcmp>
 800dbd2:	b9e8      	cbnz	r0, 800dc10 <rmw_destroy_node+0x50>
 800dbd4:	687d      	ldr	r5, [r7, #4]
 800dbd6:	b1dd      	cbz	r5, 800dc10 <rmw_destroy_node+0x50>
 800dbd8:	4b33      	ldr	r3, [pc, #204]	@ (800dca8 <rmw_destroy_node+0xe8>)
 800dbda:	681c      	ldr	r4, [r3, #0]
 800dbdc:	2c00      	cmp	r4, #0
 800dbde:	d05f      	beq.n	800dca0 <rmw_destroy_node+0xe0>
 800dbe0:	2600      	movs	r6, #0
 800dbe2:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800dbe6:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 800dbea:	429d      	cmp	r5, r3
 800dbec:	d013      	beq.n	800dc16 <rmw_destroy_node+0x56>
 800dbee:	2c00      	cmp	r4, #0
 800dbf0:	d1f7      	bne.n	800dbe2 <rmw_destroy_node+0x22>
 800dbf2:	4b2e      	ldr	r3, [pc, #184]	@ (800dcac <rmw_destroy_node+0xec>)
 800dbf4:	681c      	ldr	r4, [r3, #0]
 800dbf6:	b1c4      	cbz	r4, 800dc2a <rmw_destroy_node+0x6a>
 800dbf8:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800dbfc:	6a0b      	ldr	r3, [r1, #32]
 800dbfe:	429d      	cmp	r5, r3
 800dc00:	d1f9      	bne.n	800dbf6 <rmw_destroy_node+0x36>
 800dc02:	317c      	adds	r1, #124	@ 0x7c
 800dc04:	4638      	mov	r0, r7
 800dc06:	f000 f8a1 	bl	800dd4c <rmw_destroy_subscription>
 800dc0a:	2801      	cmp	r0, #1
 800dc0c:	4606      	mov	r6, r0
 800dc0e:	d1f2      	bne.n	800dbf6 <rmw_destroy_node+0x36>
 800dc10:	2601      	movs	r6, #1
 800dc12:	4630      	mov	r0, r6
 800dc14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dc16:	3184      	adds	r1, #132	@ 0x84
 800dc18:	4638      	mov	r0, r7
 800dc1a:	f7fa f9d5 	bl	8007fc8 <rmw_destroy_publisher>
 800dc1e:	2801      	cmp	r0, #1
 800dc20:	4606      	mov	r6, r0
 800dc22:	d0f5      	beq.n	800dc10 <rmw_destroy_node+0x50>
 800dc24:	2c00      	cmp	r4, #0
 800dc26:	d1dc      	bne.n	800dbe2 <rmw_destroy_node+0x22>
 800dc28:	e7e3      	b.n	800dbf2 <rmw_destroy_node+0x32>
 800dc2a:	4b21      	ldr	r3, [pc, #132]	@ (800dcb0 <rmw_destroy_node+0xf0>)
 800dc2c:	681c      	ldr	r4, [r3, #0]
 800dc2e:	b16c      	cbz	r4, 800dc4c <rmw_destroy_node+0x8c>
 800dc30:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800dc34:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800dc36:	429d      	cmp	r5, r3
 800dc38:	d1f9      	bne.n	800dc2e <rmw_destroy_node+0x6e>
 800dc3a:	317c      	adds	r1, #124	@ 0x7c
 800dc3c:	4638      	mov	r0, r7
 800dc3e:	f000 f841 	bl	800dcc4 <rmw_destroy_service>
 800dc42:	2801      	cmp	r0, #1
 800dc44:	4606      	mov	r6, r0
 800dc46:	d0e3      	beq.n	800dc10 <rmw_destroy_node+0x50>
 800dc48:	2c00      	cmp	r4, #0
 800dc4a:	d1f1      	bne.n	800dc30 <rmw_destroy_node+0x70>
 800dc4c:	4b19      	ldr	r3, [pc, #100]	@ (800dcb4 <rmw_destroy_node+0xf4>)
 800dc4e:	681c      	ldr	r4, [r3, #0]
 800dc50:	b16c      	cbz	r4, 800dc6e <rmw_destroy_node+0xae>
 800dc52:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800dc56:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800dc58:	429d      	cmp	r5, r3
 800dc5a:	d1f9      	bne.n	800dc50 <rmw_destroy_node+0x90>
 800dc5c:	317c      	adds	r1, #124	@ 0x7c
 800dc5e:	4638      	mov	r0, r7
 800dc60:	f002 fa7a 	bl	8010158 <rmw_destroy_client>
 800dc64:	2801      	cmp	r0, #1
 800dc66:	4606      	mov	r6, r0
 800dc68:	d0d2      	beq.n	800dc10 <rmw_destroy_node+0x50>
 800dc6a:	2c00      	cmp	r4, #0
 800dc6c:	d1f1      	bne.n	800dc52 <rmw_destroy_node+0x92>
 800dc6e:	6928      	ldr	r0, [r5, #16]
 800dc70:	696a      	ldr	r2, [r5, #20]
 800dc72:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800dc76:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800dc7a:	6819      	ldr	r1, [r3, #0]
 800dc7c:	f7fb fd64 	bl	8009748 <uxr_buffer_delete_entity>
 800dc80:	4602      	mov	r2, r0
 800dc82:	6928      	ldr	r0, [r5, #16]
 800dc84:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800dc88:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800dc8c:	f7fa fc20 	bl	80084d0 <run_xrce_session>
 800dc90:	2800      	cmp	r0, #0
 800dc92:	bf08      	it	eq
 800dc94:	2602      	moveq	r6, #2
 800dc96:	4638      	mov	r0, r7
 800dc98:	f7fa fb4e 	bl	8008338 <rmw_uxrce_fini_node_memory>
 800dc9c:	4630      	mov	r0, r6
 800dc9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dca0:	4626      	mov	r6, r4
 800dca2:	e7a6      	b.n	800dbf2 <rmw_destroy_node+0x32>
 800dca4:	08012060 	.word	0x08012060
 800dca8:	2000d98c 	.word	0x2000d98c
 800dcac:	2000d9cc 	.word	0x2000d9cc
 800dcb0:	2000d99c 	.word	0x2000d99c
 800dcb4:	200090b0 	.word	0x200090b0

0800dcb8 <rmw_node_get_graph_guard_condition>:
 800dcb8:	6843      	ldr	r3, [r0, #4]
 800dcba:	6918      	ldr	r0, [r3, #16]
 800dcbc:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 800dcc0:	4770      	bx	lr
 800dcc2:	bf00      	nop

0800dcc4 <rmw_destroy_service>:
 800dcc4:	b570      	push	{r4, r5, r6, lr}
 800dcc6:	b128      	cbz	r0, 800dcd4 <rmw_destroy_service+0x10>
 800dcc8:	4604      	mov	r4, r0
 800dcca:	6800      	ldr	r0, [r0, #0]
 800dccc:	460d      	mov	r5, r1
 800dcce:	f7fa fc7f 	bl	80085d0 <is_uxrce_rmw_identifier_valid>
 800dcd2:	b910      	cbnz	r0, 800dcda <rmw_destroy_service+0x16>
 800dcd4:	2401      	movs	r4, #1
 800dcd6:	4620      	mov	r0, r4
 800dcd8:	bd70      	pop	{r4, r5, r6, pc}
 800dcda:	6863      	ldr	r3, [r4, #4]
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d0f9      	beq.n	800dcd4 <rmw_destroy_service+0x10>
 800dce0:	2d00      	cmp	r5, #0
 800dce2:	d0f7      	beq.n	800dcd4 <rmw_destroy_service+0x10>
 800dce4:	6828      	ldr	r0, [r5, #0]
 800dce6:	f7fa fc73 	bl	80085d0 <is_uxrce_rmw_identifier_valid>
 800dcea:	2800      	cmp	r0, #0
 800dcec:	d0f2      	beq.n	800dcd4 <rmw_destroy_service+0x10>
 800dcee:	686e      	ldr	r6, [r5, #4]
 800dcf0:	2e00      	cmp	r6, #0
 800dcf2:	d0ef      	beq.n	800dcd4 <rmw_destroy_service+0x10>
 800dcf4:	6864      	ldr	r4, [r4, #4]
 800dcf6:	6932      	ldr	r2, [r6, #16]
 800dcf8:	6920      	ldr	r0, [r4, #16]
 800dcfa:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800dcfe:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800dd02:	6819      	ldr	r1, [r3, #0]
 800dd04:	f001 f882 	bl	800ee0c <uxr_buffer_cancel_data>
 800dd08:	4602      	mov	r2, r0
 800dd0a:	6920      	ldr	r0, [r4, #16]
 800dd0c:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800dd10:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800dd14:	f7fa fbdc 	bl	80084d0 <run_xrce_session>
 800dd18:	6920      	ldr	r0, [r4, #16]
 800dd1a:	6932      	ldr	r2, [r6, #16]
 800dd1c:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800dd20:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800dd24:	6819      	ldr	r1, [r3, #0]
 800dd26:	f7fb fd0f 	bl	8009748 <uxr_buffer_delete_entity>
 800dd2a:	4602      	mov	r2, r0
 800dd2c:	6920      	ldr	r0, [r4, #16]
 800dd2e:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800dd32:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800dd36:	f7fa fbcb 	bl	80084d0 <run_xrce_session>
 800dd3a:	2800      	cmp	r0, #0
 800dd3c:	4628      	mov	r0, r5
 800dd3e:	bf14      	ite	ne
 800dd40:	2400      	movne	r4, #0
 800dd42:	2402      	moveq	r4, #2
 800dd44:	f7fa fb3c 	bl	80083c0 <rmw_uxrce_fini_service_memory>
 800dd48:	e7c5      	b.n	800dcd6 <rmw_destroy_service+0x12>
 800dd4a:	bf00      	nop

0800dd4c <rmw_destroy_subscription>:
 800dd4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd4e:	b128      	cbz	r0, 800dd5c <rmw_destroy_subscription+0x10>
 800dd50:	4604      	mov	r4, r0
 800dd52:	6800      	ldr	r0, [r0, #0]
 800dd54:	460d      	mov	r5, r1
 800dd56:	f7fa fc3b 	bl	80085d0 <is_uxrce_rmw_identifier_valid>
 800dd5a:	b910      	cbnz	r0, 800dd62 <rmw_destroy_subscription+0x16>
 800dd5c:	2401      	movs	r4, #1
 800dd5e:	4620      	mov	r0, r4
 800dd60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dd62:	6863      	ldr	r3, [r4, #4]
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d0f9      	beq.n	800dd5c <rmw_destroy_subscription+0x10>
 800dd68:	2d00      	cmp	r5, #0
 800dd6a:	d0f7      	beq.n	800dd5c <rmw_destroy_subscription+0x10>
 800dd6c:	6828      	ldr	r0, [r5, #0]
 800dd6e:	f7fa fc2f 	bl	80085d0 <is_uxrce_rmw_identifier_valid>
 800dd72:	2800      	cmp	r0, #0
 800dd74:	d0f2      	beq.n	800dd5c <rmw_destroy_subscription+0x10>
 800dd76:	686c      	ldr	r4, [r5, #4]
 800dd78:	2c00      	cmp	r4, #0
 800dd7a:	d0ef      	beq.n	800dd5c <rmw_destroy_subscription+0x10>
 800dd7c:	6a26      	ldr	r6, [r4, #32]
 800dd7e:	6962      	ldr	r2, [r4, #20]
 800dd80:	6930      	ldr	r0, [r6, #16]
 800dd82:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800dd86:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800dd8a:	6819      	ldr	r1, [r3, #0]
 800dd8c:	f001 f83e 	bl	800ee0c <uxr_buffer_cancel_data>
 800dd90:	4602      	mov	r2, r0
 800dd92:	6930      	ldr	r0, [r6, #16]
 800dd94:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800dd98:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800dd9c:	f7fa fb98 	bl	80084d0 <run_xrce_session>
 800dda0:	69e0      	ldr	r0, [r4, #28]
 800dda2:	f7ff fe59 	bl	800da58 <destroy_topic>
 800dda6:	6a23      	ldr	r3, [r4, #32]
 800dda8:	6962      	ldr	r2, [r4, #20]
 800ddaa:	6918      	ldr	r0, [r3, #16]
 800ddac:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800ddb0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ddb4:	6819      	ldr	r1, [r3, #0]
 800ddb6:	f7fb fcc7 	bl	8009748 <uxr_buffer_delete_entity>
 800ddba:	6a23      	ldr	r3, [r4, #32]
 800ddbc:	6922      	ldr	r2, [r4, #16]
 800ddbe:	691b      	ldr	r3, [r3, #16]
 800ddc0:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800ddc4:	4604      	mov	r4, r0
 800ddc6:	6809      	ldr	r1, [r1, #0]
 800ddc8:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800ddcc:	f7fb fcbc 	bl	8009748 <uxr_buffer_delete_entity>
 800ddd0:	6937      	ldr	r7, [r6, #16]
 800ddd2:	4622      	mov	r2, r4
 800ddd4:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 800ddd8:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 800dddc:	4604      	mov	r4, r0
 800ddde:	4638      	mov	r0, r7
 800dde0:	f7fa fb76 	bl	80084d0 <run_xrce_session>
 800dde4:	6936      	ldr	r6, [r6, #16]
 800dde6:	4622      	mov	r2, r4
 800dde8:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800ddec:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800ddf0:	4604      	mov	r4, r0
 800ddf2:	4630      	mov	r0, r6
 800ddf4:	f7fa fb6c 	bl	80084d0 <run_xrce_session>
 800ddf8:	b12c      	cbz	r4, 800de06 <rmw_destroy_subscription+0xba>
 800ddfa:	b120      	cbz	r0, 800de06 <rmw_destroy_subscription+0xba>
 800ddfc:	2400      	movs	r4, #0
 800ddfe:	4628      	mov	r0, r5
 800de00:	f7fa fac8 	bl	8008394 <rmw_uxrce_fini_subscription_memory>
 800de04:	e7ab      	b.n	800dd5e <rmw_destroy_subscription+0x12>
 800de06:	2402      	movs	r4, #2
 800de08:	e7f9      	b.n	800ddfe <rmw_destroy_subscription+0xb2>
 800de0a:	bf00      	nop

0800de0c <rmw_uxrce_transport_init>:
 800de0c:	b508      	push	{r3, lr}
 800de0e:	b108      	cbz	r0, 800de14 <rmw_uxrce_transport_init+0x8>
 800de10:	f100 0210 	add.w	r2, r0, #16
 800de14:	b139      	cbz	r1, 800de26 <rmw_uxrce_transport_init+0x1a>
 800de16:	6949      	ldr	r1, [r1, #20]
 800de18:	4610      	mov	r0, r2
 800de1a:	f000 fa77 	bl	800e30c <uxr_init_custom_transport>
 800de1e:	f080 0001 	eor.w	r0, r0, #1
 800de22:	b2c0      	uxtb	r0, r0
 800de24:	bd08      	pop	{r3, pc}
 800de26:	4b04      	ldr	r3, [pc, #16]	@ (800de38 <rmw_uxrce_transport_init+0x2c>)
 800de28:	4610      	mov	r0, r2
 800de2a:	6859      	ldr	r1, [r3, #4]
 800de2c:	f000 fa6e 	bl	800e30c <uxr_init_custom_transport>
 800de30:	f080 0001 	eor.w	r0, r0, #1
 800de34:	b2c0      	uxtb	r0, r0
 800de36:	bd08      	pop	{r3, pc}
 800de38:	20009094 	.word	0x20009094

0800de3c <rmw_uros_epoch_nanos>:
 800de3c:	4b05      	ldr	r3, [pc, #20]	@ (800de54 <rmw_uros_epoch_nanos+0x18>)
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	b123      	cbz	r3, 800de4c <rmw_uros_epoch_nanos+0x10>
 800de42:	6898      	ldr	r0, [r3, #8]
 800de44:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800de48:	f7fb bf1c 	b.w	8009c84 <uxr_epoch_nanos>
 800de4c:	2000      	movs	r0, #0
 800de4e:	2100      	movs	r1, #0
 800de50:	4770      	bx	lr
 800de52:	bf00      	nop
 800de54:	2000d9ac 	.word	0x2000d9ac

0800de58 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 800de58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de5c:	6805      	ldr	r5, [r0, #0]
 800de5e:	4604      	mov	r4, r0
 800de60:	4628      	mov	r0, r5
 800de62:	460e      	mov	r6, r1
 800de64:	f7f2 f9d4 	bl	8000210 <strcmp>
 800de68:	b1c8      	cbz	r0, 800de9e <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 800de6a:	4b11      	ldr	r3, [pc, #68]	@ (800deb0 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	429d      	cmp	r5, r3
 800de70:	d112      	bne.n	800de98 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800de72:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800de76:	f8d8 4000 	ldr.w	r4, [r8]
 800de7a:	b16c      	cbz	r4, 800de98 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800de7c:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800de80:	2700      	movs	r7, #0
 800de82:	3d04      	subs	r5, #4
 800de84:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800de88:	4631      	mov	r1, r6
 800de8a:	f7f2 f9c1 	bl	8000210 <strcmp>
 800de8e:	00bb      	lsls	r3, r7, #2
 800de90:	b140      	cbz	r0, 800dea4 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 800de92:	3701      	adds	r7, #1
 800de94:	42bc      	cmp	r4, r7
 800de96:	d1f5      	bne.n	800de84 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 800de98:	2000      	movs	r0, #0
 800de9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de9e:	4620      	mov	r0, r4
 800dea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dea4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800dea8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800deac:	58d3      	ldr	r3, [r2, r3]
 800deae:	4718      	bx	r3
 800deb0:	200000ac 	.word	0x200000ac

0800deb4 <std_msgs__msg__Int32__init>:
 800deb4:	3800      	subs	r0, #0
 800deb6:	bf18      	it	ne
 800deb8:	2001      	movne	r0, #1
 800deba:	4770      	bx	lr

0800debc <std_msgs__msg__Int32__fini>:
 800debc:	4770      	bx	lr
 800debe:	bf00      	nop

0800dec0 <ucdr_serialize_endian_array_char>:
 800dec0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dec4:	4619      	mov	r1, r3
 800dec6:	461f      	mov	r7, r3
 800dec8:	4605      	mov	r5, r0
 800deca:	4690      	mov	r8, r2
 800decc:	f7fb fb78 	bl	80095c0 <ucdr_check_buffer_available_for>
 800ded0:	b9e0      	cbnz	r0, 800df0c <ucdr_serialize_endian_array_char+0x4c>
 800ded2:	463e      	mov	r6, r7
 800ded4:	e009      	b.n	800deea <ucdr_serialize_endian_array_char+0x2a>
 800ded6:	68a8      	ldr	r0, [r5, #8]
 800ded8:	f002 fe39 	bl	8010b4e <memcpy>
 800dedc:	68ab      	ldr	r3, [r5, #8]
 800dede:	6928      	ldr	r0, [r5, #16]
 800dee0:	4423      	add	r3, r4
 800dee2:	4420      	add	r0, r4
 800dee4:	1b36      	subs	r6, r6, r4
 800dee6:	60ab      	str	r3, [r5, #8]
 800dee8:	6128      	str	r0, [r5, #16]
 800deea:	4631      	mov	r1, r6
 800deec:	2201      	movs	r2, #1
 800deee:	4628      	mov	r0, r5
 800def0:	f7fb fbee 	bl	80096d0 <ucdr_check_final_buffer_behavior_array>
 800def4:	1bb9      	subs	r1, r7, r6
 800def6:	4441      	add	r1, r8
 800def8:	4604      	mov	r4, r0
 800defa:	4602      	mov	r2, r0
 800defc:	2800      	cmp	r0, #0
 800defe:	d1ea      	bne.n	800ded6 <ucdr_serialize_endian_array_char+0x16>
 800df00:	2301      	movs	r3, #1
 800df02:	7da8      	ldrb	r0, [r5, #22]
 800df04:	756b      	strb	r3, [r5, #21]
 800df06:	4058      	eors	r0, r3
 800df08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df0c:	463a      	mov	r2, r7
 800df0e:	68a8      	ldr	r0, [r5, #8]
 800df10:	4641      	mov	r1, r8
 800df12:	f002 fe1c 	bl	8010b4e <memcpy>
 800df16:	68aa      	ldr	r2, [r5, #8]
 800df18:	692b      	ldr	r3, [r5, #16]
 800df1a:	443a      	add	r2, r7
 800df1c:	443b      	add	r3, r7
 800df1e:	60aa      	str	r2, [r5, #8]
 800df20:	612b      	str	r3, [r5, #16]
 800df22:	e7ed      	b.n	800df00 <ucdr_serialize_endian_array_char+0x40>

0800df24 <ucdr_deserialize_endian_array_char>:
 800df24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df28:	4619      	mov	r1, r3
 800df2a:	461f      	mov	r7, r3
 800df2c:	4605      	mov	r5, r0
 800df2e:	4690      	mov	r8, r2
 800df30:	f7fb fb46 	bl	80095c0 <ucdr_check_buffer_available_for>
 800df34:	b9e0      	cbnz	r0, 800df70 <ucdr_deserialize_endian_array_char+0x4c>
 800df36:	463e      	mov	r6, r7
 800df38:	e009      	b.n	800df4e <ucdr_deserialize_endian_array_char+0x2a>
 800df3a:	68a9      	ldr	r1, [r5, #8]
 800df3c:	f002 fe07 	bl	8010b4e <memcpy>
 800df40:	68ab      	ldr	r3, [r5, #8]
 800df42:	6928      	ldr	r0, [r5, #16]
 800df44:	4423      	add	r3, r4
 800df46:	4420      	add	r0, r4
 800df48:	1b36      	subs	r6, r6, r4
 800df4a:	60ab      	str	r3, [r5, #8]
 800df4c:	6128      	str	r0, [r5, #16]
 800df4e:	2201      	movs	r2, #1
 800df50:	4631      	mov	r1, r6
 800df52:	4628      	mov	r0, r5
 800df54:	f7fb fbbc 	bl	80096d0 <ucdr_check_final_buffer_behavior_array>
 800df58:	4604      	mov	r4, r0
 800df5a:	1bb8      	subs	r0, r7, r6
 800df5c:	4440      	add	r0, r8
 800df5e:	4622      	mov	r2, r4
 800df60:	2c00      	cmp	r4, #0
 800df62:	d1ea      	bne.n	800df3a <ucdr_deserialize_endian_array_char+0x16>
 800df64:	2301      	movs	r3, #1
 800df66:	7da8      	ldrb	r0, [r5, #22]
 800df68:	756b      	strb	r3, [r5, #21]
 800df6a:	4058      	eors	r0, r3
 800df6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df70:	463a      	mov	r2, r7
 800df72:	68a9      	ldr	r1, [r5, #8]
 800df74:	4640      	mov	r0, r8
 800df76:	f002 fdea 	bl	8010b4e <memcpy>
 800df7a:	68aa      	ldr	r2, [r5, #8]
 800df7c:	692b      	ldr	r3, [r5, #16]
 800df7e:	443a      	add	r2, r7
 800df80:	443b      	add	r3, r7
 800df82:	60aa      	str	r2, [r5, #8]
 800df84:	612b      	str	r3, [r5, #16]
 800df86:	e7ed      	b.n	800df64 <ucdr_deserialize_endian_array_char+0x40>

0800df88 <ucdr_serialize_array_uint8_t>:
 800df88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df8c:	4688      	mov	r8, r1
 800df8e:	4611      	mov	r1, r2
 800df90:	4617      	mov	r7, r2
 800df92:	4605      	mov	r5, r0
 800df94:	f7fb fb14 	bl	80095c0 <ucdr_check_buffer_available_for>
 800df98:	b9e0      	cbnz	r0, 800dfd4 <ucdr_serialize_array_uint8_t+0x4c>
 800df9a:	463e      	mov	r6, r7
 800df9c:	e009      	b.n	800dfb2 <ucdr_serialize_array_uint8_t+0x2a>
 800df9e:	68a8      	ldr	r0, [r5, #8]
 800dfa0:	f002 fdd5 	bl	8010b4e <memcpy>
 800dfa4:	68aa      	ldr	r2, [r5, #8]
 800dfa6:	692b      	ldr	r3, [r5, #16]
 800dfa8:	4422      	add	r2, r4
 800dfaa:	4423      	add	r3, r4
 800dfac:	1b36      	subs	r6, r6, r4
 800dfae:	60aa      	str	r2, [r5, #8]
 800dfb0:	612b      	str	r3, [r5, #16]
 800dfb2:	4631      	mov	r1, r6
 800dfb4:	2201      	movs	r2, #1
 800dfb6:	4628      	mov	r0, r5
 800dfb8:	f7fb fb8a 	bl	80096d0 <ucdr_check_final_buffer_behavior_array>
 800dfbc:	1bb9      	subs	r1, r7, r6
 800dfbe:	4441      	add	r1, r8
 800dfc0:	4604      	mov	r4, r0
 800dfc2:	4602      	mov	r2, r0
 800dfc4:	2800      	cmp	r0, #0
 800dfc6:	d1ea      	bne.n	800df9e <ucdr_serialize_array_uint8_t+0x16>
 800dfc8:	2301      	movs	r3, #1
 800dfca:	7da8      	ldrb	r0, [r5, #22]
 800dfcc:	756b      	strb	r3, [r5, #21]
 800dfce:	4058      	eors	r0, r3
 800dfd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dfd4:	463a      	mov	r2, r7
 800dfd6:	68a8      	ldr	r0, [r5, #8]
 800dfd8:	4641      	mov	r1, r8
 800dfda:	f002 fdb8 	bl	8010b4e <memcpy>
 800dfde:	68aa      	ldr	r2, [r5, #8]
 800dfe0:	692b      	ldr	r3, [r5, #16]
 800dfe2:	443a      	add	r2, r7
 800dfe4:	443b      	add	r3, r7
 800dfe6:	60aa      	str	r2, [r5, #8]
 800dfe8:	612b      	str	r3, [r5, #16]
 800dfea:	e7ed      	b.n	800dfc8 <ucdr_serialize_array_uint8_t+0x40>

0800dfec <ucdr_serialize_endian_array_uint8_t>:
 800dfec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dff0:	4619      	mov	r1, r3
 800dff2:	461f      	mov	r7, r3
 800dff4:	4605      	mov	r5, r0
 800dff6:	4690      	mov	r8, r2
 800dff8:	f7fb fae2 	bl	80095c0 <ucdr_check_buffer_available_for>
 800dffc:	b9e0      	cbnz	r0, 800e038 <ucdr_serialize_endian_array_uint8_t+0x4c>
 800dffe:	463e      	mov	r6, r7
 800e000:	e009      	b.n	800e016 <ucdr_serialize_endian_array_uint8_t+0x2a>
 800e002:	68a8      	ldr	r0, [r5, #8]
 800e004:	f002 fda3 	bl	8010b4e <memcpy>
 800e008:	68ab      	ldr	r3, [r5, #8]
 800e00a:	6928      	ldr	r0, [r5, #16]
 800e00c:	4423      	add	r3, r4
 800e00e:	4420      	add	r0, r4
 800e010:	1b36      	subs	r6, r6, r4
 800e012:	60ab      	str	r3, [r5, #8]
 800e014:	6128      	str	r0, [r5, #16]
 800e016:	4631      	mov	r1, r6
 800e018:	2201      	movs	r2, #1
 800e01a:	4628      	mov	r0, r5
 800e01c:	f7fb fb58 	bl	80096d0 <ucdr_check_final_buffer_behavior_array>
 800e020:	1bb9      	subs	r1, r7, r6
 800e022:	4441      	add	r1, r8
 800e024:	4604      	mov	r4, r0
 800e026:	4602      	mov	r2, r0
 800e028:	2800      	cmp	r0, #0
 800e02a:	d1ea      	bne.n	800e002 <ucdr_serialize_endian_array_uint8_t+0x16>
 800e02c:	2301      	movs	r3, #1
 800e02e:	7da8      	ldrb	r0, [r5, #22]
 800e030:	756b      	strb	r3, [r5, #21]
 800e032:	4058      	eors	r0, r3
 800e034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e038:	463a      	mov	r2, r7
 800e03a:	68a8      	ldr	r0, [r5, #8]
 800e03c:	4641      	mov	r1, r8
 800e03e:	f002 fd86 	bl	8010b4e <memcpy>
 800e042:	68aa      	ldr	r2, [r5, #8]
 800e044:	692b      	ldr	r3, [r5, #16]
 800e046:	443a      	add	r2, r7
 800e048:	443b      	add	r3, r7
 800e04a:	60aa      	str	r2, [r5, #8]
 800e04c:	612b      	str	r3, [r5, #16]
 800e04e:	e7ed      	b.n	800e02c <ucdr_serialize_endian_array_uint8_t+0x40>

0800e050 <ucdr_deserialize_array_uint8_t>:
 800e050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e054:	4688      	mov	r8, r1
 800e056:	4611      	mov	r1, r2
 800e058:	4617      	mov	r7, r2
 800e05a:	4605      	mov	r5, r0
 800e05c:	f7fb fab0 	bl	80095c0 <ucdr_check_buffer_available_for>
 800e060:	b9e0      	cbnz	r0, 800e09c <ucdr_deserialize_array_uint8_t+0x4c>
 800e062:	463e      	mov	r6, r7
 800e064:	e009      	b.n	800e07a <ucdr_deserialize_array_uint8_t+0x2a>
 800e066:	68a9      	ldr	r1, [r5, #8]
 800e068:	f002 fd71 	bl	8010b4e <memcpy>
 800e06c:	68aa      	ldr	r2, [r5, #8]
 800e06e:	692b      	ldr	r3, [r5, #16]
 800e070:	4422      	add	r2, r4
 800e072:	4423      	add	r3, r4
 800e074:	1b36      	subs	r6, r6, r4
 800e076:	60aa      	str	r2, [r5, #8]
 800e078:	612b      	str	r3, [r5, #16]
 800e07a:	2201      	movs	r2, #1
 800e07c:	4631      	mov	r1, r6
 800e07e:	4628      	mov	r0, r5
 800e080:	f7fb fb26 	bl	80096d0 <ucdr_check_final_buffer_behavior_array>
 800e084:	4604      	mov	r4, r0
 800e086:	1bb8      	subs	r0, r7, r6
 800e088:	4440      	add	r0, r8
 800e08a:	4622      	mov	r2, r4
 800e08c:	2c00      	cmp	r4, #0
 800e08e:	d1ea      	bne.n	800e066 <ucdr_deserialize_array_uint8_t+0x16>
 800e090:	2301      	movs	r3, #1
 800e092:	7da8      	ldrb	r0, [r5, #22]
 800e094:	756b      	strb	r3, [r5, #21]
 800e096:	4058      	eors	r0, r3
 800e098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e09c:	463a      	mov	r2, r7
 800e09e:	68a9      	ldr	r1, [r5, #8]
 800e0a0:	4640      	mov	r0, r8
 800e0a2:	f002 fd54 	bl	8010b4e <memcpy>
 800e0a6:	68aa      	ldr	r2, [r5, #8]
 800e0a8:	692b      	ldr	r3, [r5, #16]
 800e0aa:	443a      	add	r2, r7
 800e0ac:	443b      	add	r3, r7
 800e0ae:	60aa      	str	r2, [r5, #8]
 800e0b0:	612b      	str	r3, [r5, #16]
 800e0b2:	e7ed      	b.n	800e090 <ucdr_deserialize_array_uint8_t+0x40>

0800e0b4 <ucdr_deserialize_endian_array_uint8_t>:
 800e0b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e0b8:	4619      	mov	r1, r3
 800e0ba:	461f      	mov	r7, r3
 800e0bc:	4605      	mov	r5, r0
 800e0be:	4690      	mov	r8, r2
 800e0c0:	f7fb fa7e 	bl	80095c0 <ucdr_check_buffer_available_for>
 800e0c4:	b9e0      	cbnz	r0, 800e100 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 800e0c6:	463e      	mov	r6, r7
 800e0c8:	e009      	b.n	800e0de <ucdr_deserialize_endian_array_uint8_t+0x2a>
 800e0ca:	68a9      	ldr	r1, [r5, #8]
 800e0cc:	f002 fd3f 	bl	8010b4e <memcpy>
 800e0d0:	68ab      	ldr	r3, [r5, #8]
 800e0d2:	6928      	ldr	r0, [r5, #16]
 800e0d4:	4423      	add	r3, r4
 800e0d6:	4420      	add	r0, r4
 800e0d8:	1b36      	subs	r6, r6, r4
 800e0da:	60ab      	str	r3, [r5, #8]
 800e0dc:	6128      	str	r0, [r5, #16]
 800e0de:	2201      	movs	r2, #1
 800e0e0:	4631      	mov	r1, r6
 800e0e2:	4628      	mov	r0, r5
 800e0e4:	f7fb faf4 	bl	80096d0 <ucdr_check_final_buffer_behavior_array>
 800e0e8:	4604      	mov	r4, r0
 800e0ea:	1bb8      	subs	r0, r7, r6
 800e0ec:	4440      	add	r0, r8
 800e0ee:	4622      	mov	r2, r4
 800e0f0:	2c00      	cmp	r4, #0
 800e0f2:	d1ea      	bne.n	800e0ca <ucdr_deserialize_endian_array_uint8_t+0x16>
 800e0f4:	2301      	movs	r3, #1
 800e0f6:	7da8      	ldrb	r0, [r5, #22]
 800e0f8:	756b      	strb	r3, [r5, #21]
 800e0fa:	4058      	eors	r0, r3
 800e0fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e100:	463a      	mov	r2, r7
 800e102:	68a9      	ldr	r1, [r5, #8]
 800e104:	4640      	mov	r0, r8
 800e106:	f002 fd22 	bl	8010b4e <memcpy>
 800e10a:	68aa      	ldr	r2, [r5, #8]
 800e10c:	692b      	ldr	r3, [r5, #16]
 800e10e:	443a      	add	r2, r7
 800e110:	443b      	add	r3, r7
 800e112:	60aa      	str	r2, [r5, #8]
 800e114:	612b      	str	r3, [r5, #16]
 800e116:	e7ed      	b.n	800e0f4 <ucdr_deserialize_endian_array_uint8_t+0x40>

0800e118 <ucdr_serialize_sequence_char>:
 800e118:	b570      	push	{r4, r5, r6, lr}
 800e11a:	4615      	mov	r5, r2
 800e11c:	460e      	mov	r6, r1
 800e11e:	7d01      	ldrb	r1, [r0, #20]
 800e120:	4604      	mov	r4, r0
 800e122:	f7fa fda3 	bl	8008c6c <ucdr_serialize_endian_uint32_t>
 800e126:	b90d      	cbnz	r5, 800e12c <ucdr_serialize_sequence_char+0x14>
 800e128:	2001      	movs	r0, #1
 800e12a:	bd70      	pop	{r4, r5, r6, pc}
 800e12c:	7d21      	ldrb	r1, [r4, #20]
 800e12e:	462b      	mov	r3, r5
 800e130:	4632      	mov	r2, r6
 800e132:	4620      	mov	r0, r4
 800e134:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e138:	f7ff bec2 	b.w	800dec0 <ucdr_serialize_endian_array_char>

0800e13c <ucdr_deserialize_sequence_char>:
 800e13c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e140:	461d      	mov	r5, r3
 800e142:	4616      	mov	r6, r2
 800e144:	460f      	mov	r7, r1
 800e146:	461a      	mov	r2, r3
 800e148:	7d01      	ldrb	r1, [r0, #20]
 800e14a:	4604      	mov	r4, r0
 800e14c:	f7fa feb6 	bl	8008ebc <ucdr_deserialize_endian_uint32_t>
 800e150:	682b      	ldr	r3, [r5, #0]
 800e152:	429e      	cmp	r6, r3
 800e154:	bf3c      	itt	cc
 800e156:	2201      	movcc	r2, #1
 800e158:	75a2      	strbcc	r2, [r4, #22]
 800e15a:	b913      	cbnz	r3, 800e162 <ucdr_deserialize_sequence_char+0x26>
 800e15c:	2001      	movs	r0, #1
 800e15e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e162:	7d21      	ldrb	r1, [r4, #20]
 800e164:	463a      	mov	r2, r7
 800e166:	4620      	mov	r0, r4
 800e168:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e16c:	f7ff beda 	b.w	800df24 <ucdr_deserialize_endian_array_char>

0800e170 <ucdr_serialize_sequence_uint8_t>:
 800e170:	b570      	push	{r4, r5, r6, lr}
 800e172:	4615      	mov	r5, r2
 800e174:	460e      	mov	r6, r1
 800e176:	7d01      	ldrb	r1, [r0, #20]
 800e178:	4604      	mov	r4, r0
 800e17a:	f7fa fd77 	bl	8008c6c <ucdr_serialize_endian_uint32_t>
 800e17e:	b90d      	cbnz	r5, 800e184 <ucdr_serialize_sequence_uint8_t+0x14>
 800e180:	2001      	movs	r0, #1
 800e182:	bd70      	pop	{r4, r5, r6, pc}
 800e184:	7d21      	ldrb	r1, [r4, #20]
 800e186:	462b      	mov	r3, r5
 800e188:	4632      	mov	r2, r6
 800e18a:	4620      	mov	r0, r4
 800e18c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e190:	f7ff bf2c 	b.w	800dfec <ucdr_serialize_endian_array_uint8_t>

0800e194 <ucdr_deserialize_sequence_uint8_t>:
 800e194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e198:	461d      	mov	r5, r3
 800e19a:	4616      	mov	r6, r2
 800e19c:	460f      	mov	r7, r1
 800e19e:	461a      	mov	r2, r3
 800e1a0:	7d01      	ldrb	r1, [r0, #20]
 800e1a2:	4604      	mov	r4, r0
 800e1a4:	f7fa fe8a 	bl	8008ebc <ucdr_deserialize_endian_uint32_t>
 800e1a8:	682b      	ldr	r3, [r5, #0]
 800e1aa:	429e      	cmp	r6, r3
 800e1ac:	bf3c      	itt	cc
 800e1ae:	2201      	movcc	r2, #1
 800e1b0:	75a2      	strbcc	r2, [r4, #22]
 800e1b2:	b913      	cbnz	r3, 800e1ba <ucdr_deserialize_sequence_uint8_t+0x26>
 800e1b4:	2001      	movs	r0, #1
 800e1b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e1ba:	7d21      	ldrb	r1, [r4, #20]
 800e1bc:	463a      	mov	r2, r7
 800e1be:	4620      	mov	r0, r4
 800e1c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e1c4:	f7ff bf76 	b.w	800e0b4 <ucdr_deserialize_endian_array_uint8_t>

0800e1c8 <ucdr_serialize_string>:
 800e1c8:	b510      	push	{r4, lr}
 800e1ca:	b082      	sub	sp, #8
 800e1cc:	4604      	mov	r4, r0
 800e1ce:	4608      	mov	r0, r1
 800e1d0:	9101      	str	r1, [sp, #4]
 800e1d2:	f7f2 f827 	bl	8000224 <strlen>
 800e1d6:	9901      	ldr	r1, [sp, #4]
 800e1d8:	1c42      	adds	r2, r0, #1
 800e1da:	4620      	mov	r0, r4
 800e1dc:	b002      	add	sp, #8
 800e1de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e1e2:	f7ff bf99 	b.w	800e118 <ucdr_serialize_sequence_char>
 800e1e6:	bf00      	nop

0800e1e8 <ucdr_deserialize_string>:
 800e1e8:	b500      	push	{lr}
 800e1ea:	b083      	sub	sp, #12
 800e1ec:	ab01      	add	r3, sp, #4
 800e1ee:	f7ff ffa5 	bl	800e13c <ucdr_deserialize_sequence_char>
 800e1f2:	b003      	add	sp, #12
 800e1f4:	f85d fb04 	ldr.w	pc, [sp], #4

0800e1f8 <get_custom_error>:
 800e1f8:	4b01      	ldr	r3, [pc, #4]	@ (800e200 <get_custom_error+0x8>)
 800e1fa:	7818      	ldrb	r0, [r3, #0]
 800e1fc:	4770      	bx	lr
 800e1fe:	bf00      	nop
 800e200:	2000daf8 	.word	0x2000daf8

0800e204 <recv_custom_msg>:
 800e204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e208:	4693      	mov	fp, r2
 800e20a:	b089      	sub	sp, #36	@ 0x24
 800e20c:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 800e210:	9305      	str	r3, [sp, #20]
 800e212:	468a      	mov	sl, r1
 800e214:	2100      	movs	r1, #0
 800e216:	4604      	mov	r4, r0
 800e218:	f88d 101e 	strb.w	r1, [sp, #30]
 800e21c:	b322      	cbz	r2, 800e268 <recv_custom_msg+0x64>
 800e21e:	f200 2902 	addw	r9, r0, #514	@ 0x202
 800e222:	f10d 081f 	add.w	r8, sp, #31
 800e226:	af05      	add	r7, sp, #20
 800e228:	f10d 061e 	add.w	r6, sp, #30
 800e22c:	f44f 7500 	mov.w	r5, #512	@ 0x200
 800e230:	e002      	b.n	800e238 <recv_custom_msg+0x34>
 800e232:	9b05      	ldr	r3, [sp, #20]
 800e234:	2b00      	cmp	r3, #0
 800e236:	dd0f      	ble.n	800e258 <recv_custom_msg+0x54>
 800e238:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 800e23c:	4623      	mov	r3, r4
 800e23e:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800e242:	e9cd 5600 	strd	r5, r6, [sp]
 800e246:	4622      	mov	r2, r4
 800e248:	4648      	mov	r0, r9
 800e24a:	f001 f8f3 	bl	800f434 <uxr_read_framed_msg>
 800e24e:	2800      	cmp	r0, #0
 800e250:	d0ef      	beq.n	800e232 <recv_custom_msg+0x2e>
 800e252:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800e256:	b1b3      	cbz	r3, 800e286 <recv_custom_msg+0x82>
 800e258:	4b0f      	ldr	r3, [pc, #60]	@ (800e298 <recv_custom_msg+0x94>)
 800e25a:	f89d 201f 	ldrb.w	r2, [sp, #31]
 800e25e:	701a      	strb	r2, [r3, #0]
 800e260:	2000      	movs	r0, #0
 800e262:	b009      	add	sp, #36	@ 0x24
 800e264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e268:	f10d 021f 	add.w	r2, sp, #31
 800e26c:	9200      	str	r2, [sp, #0]
 800e26e:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 800e272:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e276:	4601      	mov	r1, r0
 800e278:	47a8      	blx	r5
 800e27a:	2800      	cmp	r0, #0
 800e27c:	d0ec      	beq.n	800e258 <recv_custom_msg+0x54>
 800e27e:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800e282:	2b00      	cmp	r3, #0
 800e284:	d1e8      	bne.n	800e258 <recv_custom_msg+0x54>
 800e286:	f8cb 0000 	str.w	r0, [fp]
 800e28a:	2001      	movs	r0, #1
 800e28c:	f8ca 4000 	str.w	r4, [sl]
 800e290:	b009      	add	sp, #36	@ 0x24
 800e292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e296:	bf00      	nop
 800e298:	2000daf8 	.word	0x2000daf8

0800e29c <send_custom_msg>:
 800e29c:	b530      	push	{r4, r5, lr}
 800e29e:	f890 4200 	ldrb.w	r4, [r0, #512]	@ 0x200
 800e2a2:	b087      	sub	sp, #28
 800e2a4:	4615      	mov	r5, r2
 800e2a6:	b974      	cbnz	r4, 800e2c6 <send_custom_msg+0x2a>
 800e2a8:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 800e2ac:	f10d 0317 	add.w	r3, sp, #23
 800e2b0:	47a0      	blx	r4
 800e2b2:	b108      	cbz	r0, 800e2b8 <send_custom_msg+0x1c>
 800e2b4:	42a8      	cmp	r0, r5
 800e2b6:	d015      	beq.n	800e2e4 <send_custom_msg+0x48>
 800e2b8:	4b0c      	ldr	r3, [pc, #48]	@ (800e2ec <send_custom_msg+0x50>)
 800e2ba:	f89d 2017 	ldrb.w	r2, [sp, #23]
 800e2be:	701a      	strb	r2, [r3, #0]
 800e2c0:	2000      	movs	r0, #0
 800e2c2:	b007      	add	sp, #28
 800e2c4:	bd30      	pop	{r4, r5, pc}
 800e2c6:	460b      	mov	r3, r1
 800e2c8:	2200      	movs	r2, #0
 800e2ca:	f10d 0117 	add.w	r1, sp, #23
 800e2ce:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800e2d2:	4602      	mov	r2, r0
 800e2d4:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 800e2d8:	9500      	str	r5, [sp, #0]
 800e2da:	f200 2002 	addw	r0, r0, #514	@ 0x202
 800e2de:	f000 feb1 	bl	800f044 <uxr_write_framed_msg>
 800e2e2:	e7e6      	b.n	800e2b2 <send_custom_msg+0x16>
 800e2e4:	2001      	movs	r0, #1
 800e2e6:	b007      	add	sp, #28
 800e2e8:	bd30      	pop	{r4, r5, pc}
 800e2ea:	bf00      	nop
 800e2ec:	2000daf8 	.word	0x2000daf8

0800e2f0 <uxr_set_custom_transport_callbacks>:
 800e2f0:	b410      	push	{r4}
 800e2f2:	9c01      	ldr	r4, [sp, #4]
 800e2f4:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 800e2f8:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 800e2fc:	9b02      	ldr	r3, [sp, #8]
 800e2fe:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 800e302:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e306:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 800e30a:	4770      	bx	lr

0800e30c <uxr_init_custom_transport>:
 800e30c:	b538      	push	{r3, r4, r5, lr}
 800e30e:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 800e312:	b303      	cbz	r3, 800e356 <uxr_init_custom_transport+0x4a>
 800e314:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 800e318:	4604      	mov	r4, r0
 800e31a:	b1e2      	cbz	r2, 800e356 <uxr_init_custom_transport+0x4a>
 800e31c:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 800e320:	b1ca      	cbz	r2, 800e356 <uxr_init_custom_transport+0x4a>
 800e322:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 800e326:	b1b2      	cbz	r2, 800e356 <uxr_init_custom_transport+0x4a>
 800e328:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 800e32c:	4798      	blx	r3
 800e32e:	4605      	mov	r5, r0
 800e330:	b188      	cbz	r0, 800e356 <uxr_init_custom_transport+0x4a>
 800e332:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 800e336:	b98b      	cbnz	r3, 800e35c <uxr_init_custom_transport+0x50>
 800e338:	490b      	ldr	r1, [pc, #44]	@ (800e368 <uxr_init_custom_transport+0x5c>)
 800e33a:	4b0c      	ldr	r3, [pc, #48]	@ (800e36c <uxr_init_custom_transport+0x60>)
 800e33c:	4a0c      	ldr	r2, [pc, #48]	@ (800e370 <uxr_init_custom_transport+0x64>)
 800e33e:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 800e342:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e346:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 800e34a:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 800e34e:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 800e352:	4628      	mov	r0, r5
 800e354:	bd38      	pop	{r3, r4, r5, pc}
 800e356:	2500      	movs	r5, #0
 800e358:	4628      	mov	r0, r5
 800e35a:	bd38      	pop	{r3, r4, r5, pc}
 800e35c:	2100      	movs	r1, #0
 800e35e:	f204 2002 	addw	r0, r4, #514	@ 0x202
 800e362:	f000 fe69 	bl	800f038 <uxr_init_framing_io>
 800e366:	e7e7      	b.n	800e338 <uxr_init_custom_transport+0x2c>
 800e368:	0800e29d 	.word	0x0800e29d
 800e36c:	0800e205 	.word	0x0800e205
 800e370:	0800e1f9 	.word	0x0800e1f9

0800e374 <uxr_close_custom_transport>:
 800e374:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 800e378:	4718      	bx	r3
 800e37a:	bf00      	nop

0800e37c <uxr_init_input_best_effort_stream>:
 800e37c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800e380:	8003      	strh	r3, [r0, #0]
 800e382:	4770      	bx	lr

0800e384 <uxr_reset_input_best_effort_stream>:
 800e384:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800e388:	8003      	strh	r3, [r0, #0]
 800e38a:	4770      	bx	lr

0800e38c <uxr_receive_best_effort_message>:
 800e38c:	b538      	push	{r3, r4, r5, lr}
 800e38e:	4604      	mov	r4, r0
 800e390:	8800      	ldrh	r0, [r0, #0]
 800e392:	460d      	mov	r5, r1
 800e394:	f000 fe38 	bl	800f008 <uxr_seq_num_cmp>
 800e398:	4603      	mov	r3, r0
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 800e3a0:	bfb8      	it	lt
 800e3a2:	8025      	strhlt	r5, [r4, #0]
 800e3a4:	bd38      	pop	{r3, r4, r5, pc}
 800e3a6:	bf00      	nop

0800e3a8 <on_full_input_buffer>:
 800e3a8:	b570      	push	{r4, r5, r6, lr}
 800e3aa:	4605      	mov	r5, r0
 800e3ac:	460c      	mov	r4, r1
 800e3ae:	682b      	ldr	r3, [r5, #0]
 800e3b0:	6809      	ldr	r1, [r1, #0]
 800e3b2:	8920      	ldrh	r0, [r4, #8]
 800e3b4:	6862      	ldr	r2, [r4, #4]
 800e3b6:	fbb2 f2f0 	udiv	r2, r2, r0
 800e3ba:	eba3 0c01 	sub.w	ip, r3, r1
 800e3be:	fbbc fcf2 	udiv	ip, ip, r2
 800e3c2:	f10c 0c01 	add.w	ip, ip, #1
 800e3c6:	fa1f f38c 	uxth.w	r3, ip
 800e3ca:	fbb3 f6f0 	udiv	r6, r3, r0
 800e3ce:	fb00 3316 	mls	r3, r0, r6, r3
 800e3d2:	b29b      	uxth	r3, r3
 800e3d4:	fb02 f303 	mul.w	r3, r2, r3
 800e3d8:	1d18      	adds	r0, r3, #4
 800e3da:	4408      	add	r0, r1
 800e3dc:	7d26      	ldrb	r6, [r4, #20]
 800e3de:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800e3e2:	b116      	cbz	r6, 800e3ea <on_full_input_buffer+0x42>
 800e3e4:	2600      	movs	r6, #0
 800e3e6:	f840 6c04 	str.w	r6, [r0, #-4]
 800e3ea:	2a03      	cmp	r2, #3
 800e3ec:	d801      	bhi.n	800e3f2 <on_full_input_buffer+0x4a>
 800e3ee:	2001      	movs	r0, #1
 800e3f0:	bd70      	pop	{r4, r5, r6, pc}
 800e3f2:	3308      	adds	r3, #8
 800e3f4:	4419      	add	r1, r3
 800e3f6:	4628      	mov	r0, r5
 800e3f8:	692b      	ldr	r3, [r5, #16]
 800e3fa:	3a04      	subs	r2, #4
 800e3fc:	f7fb f92c 	bl	8009658 <ucdr_init_buffer_origin>
 800e400:	4628      	mov	r0, r5
 800e402:	4903      	ldr	r1, [pc, #12]	@ (800e410 <on_full_input_buffer+0x68>)
 800e404:	4622      	mov	r2, r4
 800e406:	f7fb f903 	bl	8009610 <ucdr_set_on_full_buffer_callback>
 800e40a:	2000      	movs	r0, #0
 800e40c:	bd70      	pop	{r4, r5, r6, pc}
 800e40e:	bf00      	nop
 800e410:	0800e3a9 	.word	0x0800e3a9

0800e414 <uxr_init_input_reliable_stream>:
 800e414:	b500      	push	{lr}
 800e416:	e9c0 1200 	strd	r1, r2, [r0]
 800e41a:	f04f 0e00 	mov.w	lr, #0
 800e41e:	9a01      	ldr	r2, [sp, #4]
 800e420:	8103      	strh	r3, [r0, #8]
 800e422:	6102      	str	r2, [r0, #16]
 800e424:	f880 e014 	strb.w	lr, [r0, #20]
 800e428:	b1d3      	cbz	r3, 800e460 <uxr_init_input_reliable_stream+0x4c>
 800e42a:	f8c1 e000 	str.w	lr, [r1]
 800e42e:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 800e432:	f1bc 0f01 	cmp.w	ip, #1
 800e436:	d913      	bls.n	800e460 <uxr_init_input_reliable_stream+0x4c>
 800e438:	2301      	movs	r3, #1
 800e43a:	fbb3 f1fc 	udiv	r1, r3, ip
 800e43e:	fb0c 3111 	mls	r1, ip, r1, r3
 800e442:	b289      	uxth	r1, r1
 800e444:	6842      	ldr	r2, [r0, #4]
 800e446:	fbb2 f2fc 	udiv	r2, r2, ip
 800e44a:	fb01 f202 	mul.w	r2, r1, r2
 800e44e:	6801      	ldr	r1, [r0, #0]
 800e450:	f841 e002 	str.w	lr, [r1, r2]
 800e454:	3301      	adds	r3, #1
 800e456:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 800e45a:	b29b      	uxth	r3, r3
 800e45c:	459c      	cmp	ip, r3
 800e45e:	d8ec      	bhi.n	800e43a <uxr_init_input_reliable_stream+0x26>
 800e460:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e464:	60c3      	str	r3, [r0, #12]
 800e466:	f85d fb04 	ldr.w	pc, [sp], #4
 800e46a:	bf00      	nop

0800e46c <uxr_reset_input_reliable_stream>:
 800e46c:	8901      	ldrh	r1, [r0, #8]
 800e46e:	b1e9      	cbz	r1, 800e4ac <uxr_reset_input_reliable_stream+0x40>
 800e470:	f04f 0c00 	mov.w	ip, #0
 800e474:	b500      	push	{lr}
 800e476:	4663      	mov	r3, ip
 800e478:	46e6      	mov	lr, ip
 800e47a:	fbb3 f2f1 	udiv	r2, r3, r1
 800e47e:	fb01 3312 	mls	r3, r1, r2, r3
 800e482:	b29b      	uxth	r3, r3
 800e484:	6842      	ldr	r2, [r0, #4]
 800e486:	fbb2 f2f1 	udiv	r2, r2, r1
 800e48a:	fb02 f303 	mul.w	r3, r2, r3
 800e48e:	6802      	ldr	r2, [r0, #0]
 800e490:	f842 e003 	str.w	lr, [r2, r3]
 800e494:	f10c 0c01 	add.w	ip, ip, #1
 800e498:	8901      	ldrh	r1, [r0, #8]
 800e49a:	fa1f f38c 	uxth.w	r3, ip
 800e49e:	4299      	cmp	r1, r3
 800e4a0:	d8eb      	bhi.n	800e47a <uxr_reset_input_reliable_stream+0xe>
 800e4a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e4a6:	60c3      	str	r3, [r0, #12]
 800e4a8:	f85d fb04 	ldr.w	pc, [sp], #4
 800e4ac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e4b0:	60c3      	str	r3, [r0, #12]
 800e4b2:	4770      	bx	lr

0800e4b4 <uxr_receive_reliable_message>:
 800e4b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e4b8:	4604      	mov	r4, r0
 800e4ba:	460d      	mov	r5, r1
 800e4bc:	8901      	ldrh	r1, [r0, #8]
 800e4be:	8980      	ldrh	r0, [r0, #12]
 800e4c0:	4690      	mov	r8, r2
 800e4c2:	461f      	mov	r7, r3
 800e4c4:	f000 fd98 	bl	800eff8 <uxr_seq_num_add>
 800e4c8:	4629      	mov	r1, r5
 800e4ca:	4606      	mov	r6, r0
 800e4cc:	89a0      	ldrh	r0, [r4, #12]
 800e4ce:	f000 fd9b 	bl	800f008 <uxr_seq_num_cmp>
 800e4d2:	2800      	cmp	r0, #0
 800e4d4:	db0a      	blt.n	800e4ec <uxr_receive_reliable_message+0x38>
 800e4d6:	2600      	movs	r6, #0
 800e4d8:	89e0      	ldrh	r0, [r4, #14]
 800e4da:	4629      	mov	r1, r5
 800e4dc:	f000 fd94 	bl	800f008 <uxr_seq_num_cmp>
 800e4e0:	2800      	cmp	r0, #0
 800e4e2:	da00      	bge.n	800e4e6 <uxr_receive_reliable_message+0x32>
 800e4e4:	81e5      	strh	r5, [r4, #14]
 800e4e6:	4630      	mov	r0, r6
 800e4e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e4ec:	4630      	mov	r0, r6
 800e4ee:	4629      	mov	r1, r5
 800e4f0:	f000 fd8a 	bl	800f008 <uxr_seq_num_cmp>
 800e4f4:	2800      	cmp	r0, #0
 800e4f6:	dbee      	blt.n	800e4d6 <uxr_receive_reliable_message+0x22>
 800e4f8:	6923      	ldr	r3, [r4, #16]
 800e4fa:	4640      	mov	r0, r8
 800e4fc:	4798      	blx	r3
 800e4fe:	2101      	movs	r1, #1
 800e500:	4681      	mov	r9, r0
 800e502:	89a0      	ldrh	r0, [r4, #12]
 800e504:	f000 fd78 	bl	800eff8 <uxr_seq_num_add>
 800e508:	f1b9 0f00 	cmp.w	r9, #0
 800e50c:	d101      	bne.n	800e512 <uxr_receive_reliable_message+0x5e>
 800e50e:	4285      	cmp	r5, r0
 800e510:	d047      	beq.n	800e5a2 <uxr_receive_reliable_message+0xee>
 800e512:	8922      	ldrh	r2, [r4, #8]
 800e514:	fbb5 f0f2 	udiv	r0, r5, r2
 800e518:	fb02 5010 	mls	r0, r2, r0, r5
 800e51c:	b280      	uxth	r0, r0
 800e51e:	6863      	ldr	r3, [r4, #4]
 800e520:	fbb3 f3f2 	udiv	r3, r3, r2
 800e524:	fb00 f303 	mul.w	r3, r0, r3
 800e528:	6820      	ldr	r0, [r4, #0]
 800e52a:	3304      	adds	r3, #4
 800e52c:	4418      	add	r0, r3
 800e52e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800e532:	2b00      	cmp	r3, #0
 800e534:	d1cf      	bne.n	800e4d6 <uxr_receive_reliable_message+0x22>
 800e536:	4641      	mov	r1, r8
 800e538:	463a      	mov	r2, r7
 800e53a:	f002 fb08 	bl	8010b4e <memcpy>
 800e53e:	8921      	ldrh	r1, [r4, #8]
 800e540:	fbb5 f2f1 	udiv	r2, r5, r1
 800e544:	fb01 5212 	mls	r2, r1, r2, r5
 800e548:	b292      	uxth	r2, r2
 800e54a:	6863      	ldr	r3, [r4, #4]
 800e54c:	fbb3 f3f1 	udiv	r3, r3, r1
 800e550:	fb02 f303 	mul.w	r3, r2, r3
 800e554:	6822      	ldr	r2, [r4, #0]
 800e556:	50d7      	str	r7, [r2, r3]
 800e558:	9a08      	ldr	r2, [sp, #32]
 800e55a:	2301      	movs	r3, #1
 800e55c:	7013      	strb	r3, [r2, #0]
 800e55e:	f1b9 0f00 	cmp.w	r9, #0
 800e562:	d0b8      	beq.n	800e4d6 <uxr_receive_reliable_message+0x22>
 800e564:	89a6      	ldrh	r6, [r4, #12]
 800e566:	4630      	mov	r0, r6
 800e568:	2101      	movs	r1, #1
 800e56a:	f000 fd45 	bl	800eff8 <uxr_seq_num_add>
 800e56e:	8922      	ldrh	r2, [r4, #8]
 800e570:	6863      	ldr	r3, [r4, #4]
 800e572:	fbb3 f3f2 	udiv	r3, r3, r2
 800e576:	4606      	mov	r6, r0
 800e578:	fbb0 f0f2 	udiv	r0, r0, r2
 800e57c:	fb02 6010 	mls	r0, r2, r0, r6
 800e580:	b280      	uxth	r0, r0
 800e582:	fb00 f303 	mul.w	r3, r0, r3
 800e586:	6820      	ldr	r0, [r4, #0]
 800e588:	3304      	adds	r3, #4
 800e58a:	4418      	add	r0, r3
 800e58c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800e590:	2b00      	cmp	r3, #0
 800e592:	d0a0      	beq.n	800e4d6 <uxr_receive_reliable_message+0x22>
 800e594:	6923      	ldr	r3, [r4, #16]
 800e596:	4798      	blx	r3
 800e598:	2802      	cmp	r0, #2
 800e59a:	d008      	beq.n	800e5ae <uxr_receive_reliable_message+0xfa>
 800e59c:	2801      	cmp	r0, #1
 800e59e:	d0e2      	beq.n	800e566 <uxr_receive_reliable_message+0xb2>
 800e5a0:	e799      	b.n	800e4d6 <uxr_receive_reliable_message+0x22>
 800e5a2:	9b08      	ldr	r3, [sp, #32]
 800e5a4:	81a5      	strh	r5, [r4, #12]
 800e5a6:	2601      	movs	r6, #1
 800e5a8:	f883 9000 	strb.w	r9, [r3]
 800e5ac:	e794      	b.n	800e4d8 <uxr_receive_reliable_message+0x24>
 800e5ae:	2601      	movs	r6, #1
 800e5b0:	e792      	b.n	800e4d8 <uxr_receive_reliable_message+0x24>
 800e5b2:	bf00      	nop

0800e5b4 <uxr_next_input_reliable_buffer_available>:
 800e5b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e5b8:	4604      	mov	r4, r0
 800e5ba:	460f      	mov	r7, r1
 800e5bc:	8980      	ldrh	r0, [r0, #12]
 800e5be:	2101      	movs	r1, #1
 800e5c0:	4690      	mov	r8, r2
 800e5c2:	f000 fd19 	bl	800eff8 <uxr_seq_num_add>
 800e5c6:	8922      	ldrh	r2, [r4, #8]
 800e5c8:	fbb0 f6f2 	udiv	r6, r0, r2
 800e5cc:	fb02 0616 	mls	r6, r2, r6, r0
 800e5d0:	b2b6      	uxth	r6, r6
 800e5d2:	6863      	ldr	r3, [r4, #4]
 800e5d4:	fbb3 f3f2 	udiv	r3, r3, r2
 800e5d8:	fb06 f303 	mul.w	r3, r6, r3
 800e5dc:	6826      	ldr	r6, [r4, #0]
 800e5de:	3304      	adds	r3, #4
 800e5e0:	441e      	add	r6, r3
 800e5e2:	f856 9c04 	ldr.w	r9, [r6, #-4]
 800e5e6:	f1b9 0f00 	cmp.w	r9, #0
 800e5ea:	d023      	beq.n	800e634 <uxr_next_input_reliable_buffer_available+0x80>
 800e5ec:	6923      	ldr	r3, [r4, #16]
 800e5ee:	4605      	mov	r5, r0
 800e5f0:	4630      	mov	r0, r6
 800e5f2:	4798      	blx	r3
 800e5f4:	4682      	mov	sl, r0
 800e5f6:	b300      	cbz	r0, 800e63a <uxr_next_input_reliable_buffer_available+0x86>
 800e5f8:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 800e5fc:	2101      	movs	r1, #1
 800e5fe:	4650      	mov	r0, sl
 800e600:	f000 fcfa 	bl	800eff8 <uxr_seq_num_add>
 800e604:	8921      	ldrh	r1, [r4, #8]
 800e606:	fbb0 f2f1 	udiv	r2, r0, r1
 800e60a:	4682      	mov	sl, r0
 800e60c:	fb01 0212 	mls	r2, r1, r2, r0
 800e610:	e9d4 0300 	ldrd	r0, r3, [r4]
 800e614:	b292      	uxth	r2, r2
 800e616:	fbb3 f3f1 	udiv	r3, r3, r1
 800e61a:	fb02 f303 	mul.w	r3, r2, r3
 800e61e:	3304      	adds	r3, #4
 800e620:	4418      	add	r0, r3
 800e622:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800e626:	b12b      	cbz	r3, 800e634 <uxr_next_input_reliable_buffer_available+0x80>
 800e628:	6923      	ldr	r3, [r4, #16]
 800e62a:	4798      	blx	r3
 800e62c:	2802      	cmp	r0, #2
 800e62e:	d01b      	beq.n	800e668 <uxr_next_input_reliable_buffer_available+0xb4>
 800e630:	2801      	cmp	r0, #1
 800e632:	d0e3      	beq.n	800e5fc <uxr_next_input_reliable_buffer_available+0x48>
 800e634:	2000      	movs	r0, #0
 800e636:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e63a:	464a      	mov	r2, r9
 800e63c:	4631      	mov	r1, r6
 800e63e:	4638      	mov	r0, r7
 800e640:	f7fb f812 	bl	8009668 <ucdr_init_buffer>
 800e644:	8921      	ldrh	r1, [r4, #8]
 800e646:	fbb5 f2f1 	udiv	r2, r5, r1
 800e64a:	fb01 5212 	mls	r2, r1, r2, r5
 800e64e:	b292      	uxth	r2, r2
 800e650:	6863      	ldr	r3, [r4, #4]
 800e652:	fbb3 f3f1 	udiv	r3, r3, r1
 800e656:	fb02 f303 	mul.w	r3, r2, r3
 800e65a:	6822      	ldr	r2, [r4, #0]
 800e65c:	f842 a003 	str.w	sl, [r2, r3]
 800e660:	2001      	movs	r0, #1
 800e662:	81a5      	strh	r5, [r4, #12]
 800e664:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e668:	8920      	ldrh	r0, [r4, #8]
 800e66a:	fbb5 f3f0 	udiv	r3, r5, r0
 800e66e:	fb00 5513 	mls	r5, r0, r3, r5
 800e672:	b2ad      	uxth	r5, r5
 800e674:	6863      	ldr	r3, [r4, #4]
 800e676:	fbb3 f3f0 	udiv	r3, r3, r0
 800e67a:	fb03 f505 	mul.w	r5, r3, r5
 800e67e:	6823      	ldr	r3, [r4, #0]
 800e680:	2000      	movs	r0, #0
 800e682:	5158      	str	r0, [r3, r5]
 800e684:	eb06 0108 	add.w	r1, r6, r8
 800e688:	eba9 0208 	sub.w	r2, r9, r8
 800e68c:	4638      	mov	r0, r7
 800e68e:	f7fa ffeb 	bl	8009668 <ucdr_init_buffer>
 800e692:	4638      	mov	r0, r7
 800e694:	4903      	ldr	r1, [pc, #12]	@ (800e6a4 <uxr_next_input_reliable_buffer_available+0xf0>)
 800e696:	4622      	mov	r2, r4
 800e698:	f7fa ffba 	bl	8009610 <ucdr_set_on_full_buffer_callback>
 800e69c:	f8a4 a00c 	strh.w	sl, [r4, #12]
 800e6a0:	2001      	movs	r0, #1
 800e6a2:	e7c8      	b.n	800e636 <uxr_next_input_reliable_buffer_available+0x82>
 800e6a4:	0800e3a9 	.word	0x0800e3a9

0800e6a8 <uxr_process_heartbeat>:
 800e6a8:	b538      	push	{r3, r4, r5, lr}
 800e6aa:	4611      	mov	r1, r2
 800e6ac:	4604      	mov	r4, r0
 800e6ae:	89c0      	ldrh	r0, [r0, #14]
 800e6b0:	4615      	mov	r5, r2
 800e6b2:	f000 fca9 	bl	800f008 <uxr_seq_num_cmp>
 800e6b6:	2800      	cmp	r0, #0
 800e6b8:	bfb8      	it	lt
 800e6ba:	81e5      	strhlt	r5, [r4, #14]
 800e6bc:	bd38      	pop	{r3, r4, r5, pc}
 800e6be:	bf00      	nop

0800e6c0 <uxr_compute_acknack>:
 800e6c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e6c4:	8903      	ldrh	r3, [r0, #8]
 800e6c6:	8985      	ldrh	r5, [r0, #12]
 800e6c8:	4604      	mov	r4, r0
 800e6ca:	460e      	mov	r6, r1
 800e6cc:	b1d3      	cbz	r3, 800e704 <uxr_compute_acknack+0x44>
 800e6ce:	4628      	mov	r0, r5
 800e6d0:	2701      	movs	r7, #1
 800e6d2:	e003      	b.n	800e6dc <uxr_compute_acknack+0x1c>
 800e6d4:	4567      	cmp	r7, ip
 800e6d6:	d215      	bcs.n	800e704 <uxr_compute_acknack+0x44>
 800e6d8:	89a0      	ldrh	r0, [r4, #12]
 800e6da:	3701      	adds	r7, #1
 800e6dc:	b2b9      	uxth	r1, r7
 800e6de:	f000 fc8b 	bl	800eff8 <uxr_seq_num_add>
 800e6e2:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 800e6e6:	fbb0 f3fc 	udiv	r3, r0, ip
 800e6ea:	fb0c 0313 	mls	r3, ip, r3, r0
 800e6ee:	b29a      	uxth	r2, r3
 800e6f0:	e9d4 1300 	ldrd	r1, r3, [r4]
 800e6f4:	fbb3 f3fc 	udiv	r3, r3, ip
 800e6f8:	fb02 f303 	mul.w	r3, r2, r3
 800e6fc:	58cb      	ldr	r3, [r1, r3]
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d1e8      	bne.n	800e6d4 <uxr_compute_acknack+0x14>
 800e702:	4605      	mov	r5, r0
 800e704:	8035      	strh	r5, [r6, #0]
 800e706:	2101      	movs	r1, #1
 800e708:	4628      	mov	r0, r5
 800e70a:	89e7      	ldrh	r7, [r4, #14]
 800e70c:	f000 fc78 	bl	800f000 <uxr_seq_num_sub>
 800e710:	4601      	mov	r1, r0
 800e712:	4638      	mov	r0, r7
 800e714:	f000 fc74 	bl	800f000 <uxr_seq_num_sub>
 800e718:	4605      	mov	r5, r0
 800e71a:	b318      	cbz	r0, 800e764 <uxr_compute_acknack+0xa4>
 800e71c:	f04f 0900 	mov.w	r9, #0
 800e720:	464f      	mov	r7, r9
 800e722:	f04f 0801 	mov.w	r8, #1
 800e726:	fa1f f189 	uxth.w	r1, r9
 800e72a:	8830      	ldrh	r0, [r6, #0]
 800e72c:	f000 fc64 	bl	800eff8 <uxr_seq_num_add>
 800e730:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 800e734:	fbb0 f3fc 	udiv	r3, r0, ip
 800e738:	e9d4 1200 	ldrd	r1, r2, [r4]
 800e73c:	fb03 001c 	mls	r0, r3, ip, r0
 800e740:	b283      	uxth	r3, r0
 800e742:	fbb2 f2fc 	udiv	r2, r2, ip
 800e746:	fb02 f303 	mul.w	r3, r2, r3
 800e74a:	fa08 f209 	lsl.w	r2, r8, r9
 800e74e:	58cb      	ldr	r3, [r1, r3]
 800e750:	f109 0901 	add.w	r9, r9, #1
 800e754:	b90b      	cbnz	r3, 800e75a <uxr_compute_acknack+0x9a>
 800e756:	4317      	orrs	r7, r2
 800e758:	b2bf      	uxth	r7, r7
 800e75a:	454d      	cmp	r5, r9
 800e75c:	d1e3      	bne.n	800e726 <uxr_compute_acknack+0x66>
 800e75e:	4638      	mov	r0, r7
 800e760:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e764:	4607      	mov	r7, r0
 800e766:	4638      	mov	r0, r7
 800e768:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800e76c <uxr_init_output_best_effort_stream>:
 800e76c:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 800e770:	e9c0 3201 	strd	r3, r2, [r0, #4]
 800e774:	6001      	str	r1, [r0, #0]
 800e776:	7303      	strb	r3, [r0, #12]
 800e778:	f8a0 c00e 	strh.w	ip, [r0, #14]
 800e77c:	4770      	bx	lr
 800e77e:	bf00      	nop

0800e780 <uxr_reset_output_best_effort_stream>:
 800e780:	7b02      	ldrb	r2, [r0, #12]
 800e782:	6042      	str	r2, [r0, #4]
 800e784:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800e788:	81c3      	strh	r3, [r0, #14]
 800e78a:	4770      	bx	lr

0800e78c <uxr_prepare_best_effort_buffer_to_write>:
 800e78c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e78e:	4604      	mov	r4, r0
 800e790:	b083      	sub	sp, #12
 800e792:	6840      	ldr	r0, [r0, #4]
 800e794:	460d      	mov	r5, r1
 800e796:	4616      	mov	r6, r2
 800e798:	f7fc fb30 	bl	800adfc <uxr_submessage_padding>
 800e79c:	6863      	ldr	r3, [r4, #4]
 800e79e:	4418      	add	r0, r3
 800e7a0:	68a3      	ldr	r3, [r4, #8]
 800e7a2:	1942      	adds	r2, r0, r5
 800e7a4:	4293      	cmp	r3, r2
 800e7a6:	bf2c      	ite	cs
 800e7a8:	2701      	movcs	r7, #1
 800e7aa:	2700      	movcc	r7, #0
 800e7ac:	d202      	bcs.n	800e7b4 <uxr_prepare_best_effort_buffer_to_write+0x28>
 800e7ae:	4638      	mov	r0, r7
 800e7b0:	b003      	add	sp, #12
 800e7b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e7b4:	9000      	str	r0, [sp, #0]
 800e7b6:	6821      	ldr	r1, [r4, #0]
 800e7b8:	4630      	mov	r0, r6
 800e7ba:	2300      	movs	r3, #0
 800e7bc:	f7fa ff42 	bl	8009644 <ucdr_init_buffer_origin_offset>
 800e7c0:	6861      	ldr	r1, [r4, #4]
 800e7c2:	4638      	mov	r0, r7
 800e7c4:	4429      	add	r1, r5
 800e7c6:	6061      	str	r1, [r4, #4]
 800e7c8:	b003      	add	sp, #12
 800e7ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e7cc <uxr_prepare_best_effort_buffer_to_send>:
 800e7cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e7d0:	4604      	mov	r4, r0
 800e7d2:	461d      	mov	r5, r3
 800e7d4:	6840      	ldr	r0, [r0, #4]
 800e7d6:	7b23      	ldrb	r3, [r4, #12]
 800e7d8:	4298      	cmp	r0, r3
 800e7da:	bf8c      	ite	hi
 800e7dc:	2601      	movhi	r6, #1
 800e7de:	2600      	movls	r6, #0
 800e7e0:	d802      	bhi.n	800e7e8 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 800e7e2:	4630      	mov	r0, r6
 800e7e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e7e8:	4688      	mov	r8, r1
 800e7ea:	89e0      	ldrh	r0, [r4, #14]
 800e7ec:	2101      	movs	r1, #1
 800e7ee:	4617      	mov	r7, r2
 800e7f0:	f000 fc02 	bl	800eff8 <uxr_seq_num_add>
 800e7f4:	6823      	ldr	r3, [r4, #0]
 800e7f6:	81e0      	strh	r0, [r4, #14]
 800e7f8:	8028      	strh	r0, [r5, #0]
 800e7fa:	f8c8 3000 	str.w	r3, [r8]
 800e7fe:	6863      	ldr	r3, [r4, #4]
 800e800:	603b      	str	r3, [r7, #0]
 800e802:	7b23      	ldrb	r3, [r4, #12]
 800e804:	6063      	str	r3, [r4, #4]
 800e806:	4630      	mov	r0, r6
 800e808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e80c <on_full_output_buffer>:
 800e80c:	b538      	push	{r3, r4, r5, lr}
 800e80e:	6802      	ldr	r2, [r0, #0]
 800e810:	460c      	mov	r4, r1
 800e812:	6809      	ldr	r1, [r1, #0]
 800e814:	8923      	ldrh	r3, [r4, #8]
 800e816:	eba2 0c01 	sub.w	ip, r2, r1
 800e81a:	6862      	ldr	r2, [r4, #4]
 800e81c:	fbb2 f2f3 	udiv	r2, r2, r3
 800e820:	fbbc fcf2 	udiv	ip, ip, r2
 800e824:	f10c 0c01 	add.w	ip, ip, #1
 800e828:	fa1f fc8c 	uxth.w	ip, ip
 800e82c:	fbbc fef3 	udiv	lr, ip, r3
 800e830:	fb03 c31e 	mls	r3, r3, lr, ip
 800e834:	b29b      	uxth	r3, r3
 800e836:	fb02 f303 	mul.w	r3, r2, r3
 800e83a:	f894 c00c 	ldrb.w	ip, [r4, #12]
 800e83e:	58ca      	ldr	r2, [r1, r3]
 800e840:	4463      	add	r3, ip
 800e842:	eba2 020c 	sub.w	r2, r2, ip
 800e846:	3308      	adds	r3, #8
 800e848:	4605      	mov	r5, r0
 800e84a:	4419      	add	r1, r3
 800e84c:	3a04      	subs	r2, #4
 800e84e:	6903      	ldr	r3, [r0, #16]
 800e850:	f7fa ff02 	bl	8009658 <ucdr_init_buffer_origin>
 800e854:	4628      	mov	r0, r5
 800e856:	4903      	ldr	r1, [pc, #12]	@ (800e864 <on_full_output_buffer+0x58>)
 800e858:	4622      	mov	r2, r4
 800e85a:	f7fa fed9 	bl	8009610 <ucdr_set_on_full_buffer_callback>
 800e85e:	2000      	movs	r0, #0
 800e860:	bd38      	pop	{r3, r4, r5, pc}
 800e862:	bf00      	nop
 800e864:	0800e80d 	.word	0x0800e80d

0800e868 <uxr_init_output_reliable_stream>:
 800e868:	b410      	push	{r4}
 800e86a:	f89d c004 	ldrb.w	ip, [sp, #4]
 800e86e:	8103      	strh	r3, [r0, #8]
 800e870:	e9c0 1200 	strd	r1, r2, [r0]
 800e874:	f880 c00c 	strb.w	ip, [r0, #12]
 800e878:	b1d3      	cbz	r3, 800e8b0 <uxr_init_output_reliable_stream+0x48>
 800e87a:	f8c1 c000 	str.w	ip, [r1]
 800e87e:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 800e882:	f1bc 0f01 	cmp.w	ip, #1
 800e886:	d913      	bls.n	800e8b0 <uxr_init_output_reliable_stream+0x48>
 800e888:	2301      	movs	r3, #1
 800e88a:	fbb3 f1fc 	udiv	r1, r3, ip
 800e88e:	fb0c 3111 	mls	r1, ip, r1, r3
 800e892:	b289      	uxth	r1, r1
 800e894:	6842      	ldr	r2, [r0, #4]
 800e896:	6804      	ldr	r4, [r0, #0]
 800e898:	fbb2 f2fc 	udiv	r2, r2, ip
 800e89c:	fb01 f202 	mul.w	r2, r1, r2
 800e8a0:	7b01      	ldrb	r1, [r0, #12]
 800e8a2:	50a1      	str	r1, [r4, r2]
 800e8a4:	3301      	adds	r3, #1
 800e8a6:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 800e8aa:	b29b      	uxth	r3, r3
 800e8ac:	459c      	cmp	ip, r3
 800e8ae:	d8ec      	bhi.n	800e88a <uxr_init_output_reliable_stream+0x22>
 800e8b0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e8b4:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800e8b8:	e9c0 2306 	strd	r2, r3, [r0, #24]
 800e8bc:	4905      	ldr	r1, [pc, #20]	@ (800e8d4 <uxr_init_output_reliable_stream+0x6c>)
 800e8be:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e8c2:	f8c0 100e 	str.w	r1, [r0, #14]
 800e8c6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e8ca:	2300      	movs	r3, #0
 800e8cc:	8242      	strh	r2, [r0, #18]
 800e8ce:	8403      	strh	r3, [r0, #32]
 800e8d0:	4770      	bx	lr
 800e8d2:	bf00      	nop
 800e8d4:	ffff0000 	.word	0xffff0000

0800e8d8 <uxr_reset_output_reliable_stream>:
 800e8d8:	8901      	ldrh	r1, [r0, #8]
 800e8da:	b1b1      	cbz	r1, 800e90a <uxr_reset_output_reliable_stream+0x32>
 800e8dc:	f04f 0c00 	mov.w	ip, #0
 800e8e0:	4663      	mov	r3, ip
 800e8e2:	fbb3 f2f1 	udiv	r2, r3, r1
 800e8e6:	fb01 3312 	mls	r3, r1, r2, r3
 800e8ea:	b29b      	uxth	r3, r3
 800e8ec:	6842      	ldr	r2, [r0, #4]
 800e8ee:	fbb2 f2f1 	udiv	r2, r2, r1
 800e8f2:	6801      	ldr	r1, [r0, #0]
 800e8f4:	fb02 f303 	mul.w	r3, r2, r3
 800e8f8:	7b02      	ldrb	r2, [r0, #12]
 800e8fa:	50ca      	str	r2, [r1, r3]
 800e8fc:	f10c 0c01 	add.w	ip, ip, #1
 800e900:	8901      	ldrh	r1, [r0, #8]
 800e902:	fa1f f38c 	uxth.w	r3, ip
 800e906:	4299      	cmp	r1, r3
 800e908:	d8eb      	bhi.n	800e8e2 <uxr_reset_output_reliable_stream+0xa>
 800e90a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e90e:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800e912:	e9c0 2306 	strd	r2, r3, [r0, #24]
 800e916:	4904      	ldr	r1, [pc, #16]	@ (800e928 <uxr_reset_output_reliable_stream+0x50>)
 800e918:	f8c0 100e 	str.w	r1, [r0, #14]
 800e91c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e920:	2300      	movs	r3, #0
 800e922:	8242      	strh	r2, [r0, #18]
 800e924:	8403      	strh	r3, [r0, #32]
 800e926:	4770      	bx	lr
 800e928:	ffff0000 	.word	0xffff0000

0800e92c <uxr_prepare_reliable_buffer_to_write>:
 800e92c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e930:	4604      	mov	r4, r0
 800e932:	b091      	sub	sp, #68	@ 0x44
 800e934:	8900      	ldrh	r0, [r0, #8]
 800e936:	89e6      	ldrh	r6, [r4, #14]
 800e938:	6823      	ldr	r3, [r4, #0]
 800e93a:	9204      	str	r2, [sp, #16]
 800e93c:	fbb6 f2f0 	udiv	r2, r6, r0
 800e940:	fb00 6212 	mls	r2, r0, r2, r6
 800e944:	b292      	uxth	r2, r2
 800e946:	6865      	ldr	r5, [r4, #4]
 800e948:	fbb5 f5f0 	udiv	r5, r5, r0
 800e94c:	fb05 3202 	mla	r2, r5, r2, r3
 800e950:	3204      	adds	r2, #4
 800e952:	f852 8c04 	ldr.w	r8, [r2, #-4]
 800e956:	f894 900c 	ldrb.w	r9, [r4, #12]
 800e95a:	9203      	str	r2, [sp, #12]
 800e95c:	468b      	mov	fp, r1
 800e95e:	1f2f      	subs	r7, r5, #4
 800e960:	2800      	cmp	r0, #0
 800e962:	f000 814c 	beq.w	800ebfe <uxr_prepare_reliable_buffer_to_write+0x2d2>
 800e966:	f04f 0c00 	mov.w	ip, #0
 800e96a:	46e2      	mov	sl, ip
 800e96c:	4661      	mov	r1, ip
 800e96e:	fbb1 f2f0 	udiv	r2, r1, r0
 800e972:	fb00 1212 	mls	r2, r0, r2, r1
 800e976:	b292      	uxth	r2, r2
 800e978:	fb05 f202 	mul.w	r2, r5, r2
 800e97c:	f10c 0c01 	add.w	ip, ip, #1
 800e980:	589a      	ldr	r2, [r3, r2]
 800e982:	454a      	cmp	r2, r9
 800e984:	bf08      	it	eq
 800e986:	f10a 0a01 	addeq.w	sl, sl, #1
 800e98a:	fa1f f18c 	uxth.w	r1, ip
 800e98e:	bf08      	it	eq
 800e990:	fa1f fa8a 	uxtheq.w	sl, sl
 800e994:	4281      	cmp	r1, r0
 800e996:	d3ea      	bcc.n	800e96e <uxr_prepare_reliable_buffer_to_write+0x42>
 800e998:	4640      	mov	r0, r8
 800e99a:	2104      	movs	r1, #4
 800e99c:	f8cd a014 	str.w	sl, [sp, #20]
 800e9a0:	f7fa fe66 	bl	8009670 <ucdr_alignment>
 800e9a4:	4480      	add	r8, r0
 800e9a6:	eb08 020b 	add.w	r2, r8, fp
 800e9aa:	42ba      	cmp	r2, r7
 800e9ac:	f240 80cd 	bls.w	800eb4a <uxr_prepare_reliable_buffer_to_write+0x21e>
 800e9b0:	7b22      	ldrb	r2, [r4, #12]
 800e9b2:	445a      	add	r2, fp
 800e9b4:	42ba      	cmp	r2, r7
 800e9b6:	f240 80b5 	bls.w	800eb24 <uxr_prepare_reliable_buffer_to_write+0x1f8>
 800e9ba:	f5c9 437f 	rsb	r3, r9, #65280	@ 0xff00
 800e9be:	33fc      	adds	r3, #252	@ 0xfc
 800e9c0:	b2ba      	uxth	r2, r7
 800e9c2:	4413      	add	r3, r2
 800e9c4:	b29b      	uxth	r3, r3
 800e9c6:	fb0a f903 	mul.w	r9, sl, r3
 800e9ca:	45d9      	cmp	r9, fp
 800e9cc:	9305      	str	r3, [sp, #20]
 800e9ce:	9306      	str	r3, [sp, #24]
 800e9d0:	f0c0 80b7 	bcc.w	800eb42 <uxr_prepare_reliable_buffer_to_write+0x216>
 800e9d4:	f108 0304 	add.w	r3, r8, #4
 800e9d8:	42bb      	cmp	r3, r7
 800e9da:	f080 80db 	bcs.w	800eb94 <uxr_prepare_reliable_buffer_to_write+0x268>
 800e9de:	f1a2 0904 	sub.w	r9, r2, #4
 800e9e2:	eba9 0908 	sub.w	r9, r9, r8
 800e9e6:	9b05      	ldr	r3, [sp, #20]
 800e9e8:	fa1f f989 	uxth.w	r9, r9
 800e9ec:	ebab 0b09 	sub.w	fp, fp, r9
 800e9f0:	fbbb f2f3 	udiv	r2, fp, r3
 800e9f4:	fb03 b312 	mls	r3, r3, r2, fp
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	f000 80c8 	beq.w	800eb8e <uxr_prepare_reliable_buffer_to_write+0x262>
 800e9fe:	3201      	adds	r2, #1
 800ea00:	b292      	uxth	r2, r2
 800ea02:	9306      	str	r3, [sp, #24]
 800ea04:	4552      	cmp	r2, sl
 800ea06:	f200 809c 	bhi.w	800eb42 <uxr_prepare_reliable_buffer_to_write+0x216>
 800ea0a:	f10d 0b20 	add.w	fp, sp, #32
 800ea0e:	2a00      	cmp	r2, #0
 800ea10:	d042      	beq.n	800ea98 <uxr_prepare_reliable_buffer_to_write+0x16c>
 800ea12:	f8cd 801c 	str.w	r8, [sp, #28]
 800ea16:	f04f 0a00 	mov.w	sl, #0
 800ea1a:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800ea1e:	9505      	str	r5, [sp, #20]
 800ea20:	f10d 0b20 	add.w	fp, sp, #32
 800ea24:	4615      	mov	r5, r2
 800ea26:	e000      	b.n	800ea2a <uxr_prepare_reliable_buffer_to_write+0xfe>
 800ea28:	46c1      	mov	r9, r8
 800ea2a:	8920      	ldrh	r0, [r4, #8]
 800ea2c:	fbb6 f2f0 	udiv	r2, r6, r0
 800ea30:	fb00 6112 	mls	r1, r0, r2, r6
 800ea34:	b28a      	uxth	r2, r1
 800ea36:	6863      	ldr	r3, [r4, #4]
 800ea38:	fbb3 f1f0 	udiv	r1, r3, r0
 800ea3c:	6823      	ldr	r3, [r4, #0]
 800ea3e:	fb02 f101 	mul.w	r1, r2, r1
 800ea42:	3104      	adds	r1, #4
 800ea44:	4419      	add	r1, r3
 800ea46:	4658      	mov	r0, fp
 800ea48:	f851 2c04 	ldr.w	r2, [r1, #-4]
 800ea4c:	9200      	str	r2, [sp, #0]
 800ea4e:	2300      	movs	r3, #0
 800ea50:	463a      	mov	r2, r7
 800ea52:	f7fa fdf7 	bl	8009644 <ucdr_init_buffer_origin_offset>
 800ea56:	464a      	mov	r2, r9
 800ea58:	2300      	movs	r3, #0
 800ea5a:	210d      	movs	r1, #13
 800ea5c:	4658      	mov	r0, fp
 800ea5e:	f7fc f98d 	bl	800ad7c <uxr_buffer_submessage_header>
 800ea62:	8921      	ldrh	r1, [r4, #8]
 800ea64:	fbb6 f2f1 	udiv	r2, r6, r1
 800ea68:	fb01 6212 	mls	r2, r1, r2, r6
 800ea6c:	b292      	uxth	r2, r2
 800ea6e:	6863      	ldr	r3, [r4, #4]
 800ea70:	fbb3 f3f1 	udiv	r3, r3, r1
 800ea74:	fb02 f303 	mul.w	r3, r2, r3
 800ea78:	6822      	ldr	r2, [r4, #0]
 800ea7a:	4630      	mov	r0, r6
 800ea7c:	50d7      	str	r7, [r2, r3]
 800ea7e:	2101      	movs	r1, #1
 800ea80:	f000 faba 	bl	800eff8 <uxr_seq_num_add>
 800ea84:	f10a 0a01 	add.w	sl, sl, #1
 800ea88:	fa1f f38a 	uxth.w	r3, sl
 800ea8c:	429d      	cmp	r5, r3
 800ea8e:	4606      	mov	r6, r0
 800ea90:	d8ca      	bhi.n	800ea28 <uxr_prepare_reliable_buffer_to_write+0xfc>
 800ea92:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800ea96:	9d05      	ldr	r5, [sp, #20]
 800ea98:	8920      	ldrh	r0, [r4, #8]
 800ea9a:	fbb6 f3f0 	udiv	r3, r6, r0
 800ea9e:	fb00 6313 	mls	r3, r0, r3, r6
 800eaa2:	b299      	uxth	r1, r3
 800eaa4:	6863      	ldr	r3, [r4, #4]
 800eaa6:	fbb3 f3f0 	udiv	r3, r3, r0
 800eaaa:	fb01 f303 	mul.w	r3, r1, r3
 800eaae:	6821      	ldr	r1, [r4, #0]
 800eab0:	3304      	adds	r3, #4
 800eab2:	4419      	add	r1, r3
 800eab4:	463a      	mov	r2, r7
 800eab6:	f851 0c04 	ldr.w	r0, [r1, #-4]
 800eaba:	9000      	str	r0, [sp, #0]
 800eabc:	2300      	movs	r3, #0
 800eabe:	4658      	mov	r0, fp
 800eac0:	f7fa fdc0 	bl	8009644 <ucdr_init_buffer_origin_offset>
 800eac4:	f8dd 9018 	ldr.w	r9, [sp, #24]
 800eac8:	4658      	mov	r0, fp
 800eaca:	fa1f f289 	uxth.w	r2, r9
 800eace:	2302      	movs	r3, #2
 800ead0:	210d      	movs	r1, #13
 800ead2:	f7fc f953 	bl	800ad7c <uxr_buffer_submessage_header>
 800ead6:	9b03      	ldr	r3, [sp, #12]
 800ead8:	8927      	ldrh	r7, [r4, #8]
 800eada:	7b20      	ldrb	r0, [r4, #12]
 800eadc:	f108 0104 	add.w	r1, r8, #4
 800eae0:	440b      	add	r3, r1
 800eae2:	4619      	mov	r1, r3
 800eae4:	fbb6 f3f7 	udiv	r3, r6, r7
 800eae8:	fb07 6313 	mls	r3, r7, r3, r6
 800eaec:	f1a5 0208 	sub.w	r2, r5, #8
 800eaf0:	b29d      	uxth	r5, r3
 800eaf2:	3004      	adds	r0, #4
 800eaf4:	6863      	ldr	r3, [r4, #4]
 800eaf6:	fbb3 f3f7 	udiv	r3, r3, r7
 800eafa:	fb05 f303 	mul.w	r3, r5, r3
 800eafe:	6825      	ldr	r5, [r4, #0]
 800eb00:	4448      	add	r0, r9
 800eb02:	50e8      	str	r0, [r5, r3]
 800eb04:	9d04      	ldr	r5, [sp, #16]
 800eb06:	eba2 0208 	sub.w	r2, r2, r8
 800eb0a:	4628      	mov	r0, r5
 800eb0c:	f7fa fdac 	bl	8009668 <ucdr_init_buffer>
 800eb10:	4628      	mov	r0, r5
 800eb12:	493c      	ldr	r1, [pc, #240]	@ (800ec04 <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 800eb14:	4622      	mov	r2, r4
 800eb16:	f7fa fd7b 	bl	8009610 <ucdr_set_on_full_buffer_callback>
 800eb1a:	2001      	movs	r0, #1
 800eb1c:	81e6      	strh	r6, [r4, #14]
 800eb1e:	b011      	add	sp, #68	@ 0x44
 800eb20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb24:	2101      	movs	r1, #1
 800eb26:	89e0      	ldrh	r0, [r4, #14]
 800eb28:	f000 fa66 	bl	800eff8 <uxr_seq_num_add>
 800eb2c:	8921      	ldrh	r1, [r4, #8]
 800eb2e:	4605      	mov	r5, r0
 800eb30:	8a60      	ldrh	r0, [r4, #18]
 800eb32:	f000 fa61 	bl	800eff8 <uxr_seq_num_add>
 800eb36:	4601      	mov	r1, r0
 800eb38:	4628      	mov	r0, r5
 800eb3a:	f000 fa65 	bl	800f008 <uxr_seq_num_cmp>
 800eb3e:	2800      	cmp	r0, #0
 800eb40:	dd42      	ble.n	800ebc8 <uxr_prepare_reliable_buffer_to_write+0x29c>
 800eb42:	2000      	movs	r0, #0
 800eb44:	b011      	add	sp, #68	@ 0x44
 800eb46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb4a:	8921      	ldrh	r1, [r4, #8]
 800eb4c:	8a60      	ldrh	r0, [r4, #18]
 800eb4e:	9205      	str	r2, [sp, #20]
 800eb50:	f000 fa52 	bl	800eff8 <uxr_seq_num_add>
 800eb54:	4601      	mov	r1, r0
 800eb56:	4630      	mov	r0, r6
 800eb58:	f000 fa56 	bl	800f008 <uxr_seq_num_cmp>
 800eb5c:	2800      	cmp	r0, #0
 800eb5e:	9a05      	ldr	r2, [sp, #20]
 800eb60:	dcef      	bgt.n	800eb42 <uxr_prepare_reliable_buffer_to_write+0x216>
 800eb62:	8927      	ldrh	r7, [r4, #8]
 800eb64:	fbb6 f3f7 	udiv	r3, r6, r7
 800eb68:	fb07 6313 	mls	r3, r7, r3, r6
 800eb6c:	b29d      	uxth	r5, r3
 800eb6e:	6863      	ldr	r3, [r4, #4]
 800eb70:	6824      	ldr	r4, [r4, #0]
 800eb72:	fbb3 f3f7 	udiv	r3, r3, r7
 800eb76:	fb05 f303 	mul.w	r3, r5, r3
 800eb7a:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 800eb7e:	50e2      	str	r2, [r4, r3]
 800eb80:	2300      	movs	r3, #0
 800eb82:	f8cd 8000 	str.w	r8, [sp]
 800eb86:	f7fa fd5d 	bl	8009644 <ucdr_init_buffer_origin_offset>
 800eb8a:	2001      	movs	r0, #1
 800eb8c:	e7da      	b.n	800eb44 <uxr_prepare_reliable_buffer_to_write+0x218>
 800eb8e:	b293      	uxth	r3, r2
 800eb90:	461a      	mov	r2, r3
 800eb92:	e737      	b.n	800ea04 <uxr_prepare_reliable_buffer_to_write+0xd8>
 800eb94:	4630      	mov	r0, r6
 800eb96:	2101      	movs	r1, #1
 800eb98:	9207      	str	r2, [sp, #28]
 800eb9a:	f000 fa2d 	bl	800eff8 <uxr_seq_num_add>
 800eb9e:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 800eba2:	fbb0 f1fc 	udiv	r1, r0, ip
 800eba6:	fb0c 0111 	mls	r1, ip, r1, r0
 800ebaa:	4606      	mov	r6, r0
 800ebac:	b288      	uxth	r0, r1
 800ebae:	6863      	ldr	r3, [r4, #4]
 800ebb0:	fbb3 f1fc 	udiv	r1, r3, ip
 800ebb4:	6823      	ldr	r3, [r4, #0]
 800ebb6:	9a07      	ldr	r2, [sp, #28]
 800ebb8:	fb00 f101 	mul.w	r1, r0, r1
 800ebbc:	3104      	adds	r1, #4
 800ebbe:	440b      	add	r3, r1
 800ebc0:	9303      	str	r3, [sp, #12]
 800ebc2:	f853 8c04 	ldr.w	r8, [r3, #-4]
 800ebc6:	e70a      	b.n	800e9de <uxr_prepare_reliable_buffer_to_write+0xb2>
 800ebc8:	8921      	ldrh	r1, [r4, #8]
 800ebca:	fbb5 f3f1 	udiv	r3, r5, r1
 800ebce:	fb01 5313 	mls	r3, r1, r3, r5
 800ebd2:	b29a      	uxth	r2, r3
 800ebd4:	6863      	ldr	r3, [r4, #4]
 800ebd6:	fbb3 f3f1 	udiv	r3, r3, r1
 800ebda:	6821      	ldr	r1, [r4, #0]
 800ebdc:	9804      	ldr	r0, [sp, #16]
 800ebde:	fb02 f303 	mul.w	r3, r2, r3
 800ebe2:	3304      	adds	r3, #4
 800ebe4:	7b22      	ldrb	r2, [r4, #12]
 800ebe6:	4419      	add	r1, r3
 800ebe8:	445a      	add	r2, fp
 800ebea:	f841 2c04 	str.w	r2, [r1, #-4]
 800ebee:	7b23      	ldrb	r3, [r4, #12]
 800ebf0:	9300      	str	r3, [sp, #0]
 800ebf2:	2300      	movs	r3, #0
 800ebf4:	f7fa fd26 	bl	8009644 <ucdr_init_buffer_origin_offset>
 800ebf8:	81e5      	strh	r5, [r4, #14]
 800ebfa:	2001      	movs	r0, #1
 800ebfc:	e7a2      	b.n	800eb44 <uxr_prepare_reliable_buffer_to_write+0x218>
 800ebfe:	4682      	mov	sl, r0
 800ec00:	e6ca      	b.n	800e998 <uxr_prepare_reliable_buffer_to_write+0x6c>
 800ec02:	bf00      	nop
 800ec04:	0800e80d 	.word	0x0800e80d

0800ec08 <uxr_prepare_next_reliable_buffer_to_send>:
 800ec08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec0a:	4604      	mov	r4, r0
 800ec0c:	460f      	mov	r7, r1
 800ec0e:	8a00      	ldrh	r0, [r0, #16]
 800ec10:	2101      	movs	r1, #1
 800ec12:	4616      	mov	r6, r2
 800ec14:	461d      	mov	r5, r3
 800ec16:	f000 f9ef 	bl	800eff8 <uxr_seq_num_add>
 800ec1a:	8028      	strh	r0, [r5, #0]
 800ec1c:	8922      	ldrh	r2, [r4, #8]
 800ec1e:	fbb0 f3f2 	udiv	r3, r0, r2
 800ec22:	fb02 0c13 	mls	ip, r2, r3, r0
 800ec26:	fa1f fc8c 	uxth.w	ip, ip
 800ec2a:	6863      	ldr	r3, [r4, #4]
 800ec2c:	fbb3 f3f2 	udiv	r3, r3, r2
 800ec30:	fb0c fc03 	mul.w	ip, ip, r3
 800ec34:	6823      	ldr	r3, [r4, #0]
 800ec36:	89e1      	ldrh	r1, [r4, #14]
 800ec38:	f10c 0c04 	add.w	ip, ip, #4
 800ec3c:	4463      	add	r3, ip
 800ec3e:	603b      	str	r3, [r7, #0]
 800ec40:	6823      	ldr	r3, [r4, #0]
 800ec42:	449c      	add	ip, r3
 800ec44:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 800ec48:	6033      	str	r3, [r6, #0]
 800ec4a:	f000 f9dd 	bl	800f008 <uxr_seq_num_cmp>
 800ec4e:	2800      	cmp	r0, #0
 800ec50:	dd01      	ble.n	800ec56 <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 800ec52:	2000      	movs	r0, #0
 800ec54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ec56:	7b23      	ldrb	r3, [r4, #12]
 800ec58:	6832      	ldr	r2, [r6, #0]
 800ec5a:	429a      	cmp	r2, r3
 800ec5c:	d9f9      	bls.n	800ec52 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 800ec5e:	8a61      	ldrh	r1, [r4, #18]
 800ec60:	8a20      	ldrh	r0, [r4, #16]
 800ec62:	f000 f9cd 	bl	800f000 <uxr_seq_num_sub>
 800ec66:	8923      	ldrh	r3, [r4, #8]
 800ec68:	4283      	cmp	r3, r0
 800ec6a:	d0f2      	beq.n	800ec52 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 800ec6c:	8828      	ldrh	r0, [r5, #0]
 800ec6e:	89e3      	ldrh	r3, [r4, #14]
 800ec70:	8220      	strh	r0, [r4, #16]
 800ec72:	4298      	cmp	r0, r3
 800ec74:	d001      	beq.n	800ec7a <uxr_prepare_next_reliable_buffer_to_send+0x72>
 800ec76:	2001      	movs	r0, #1
 800ec78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ec7a:	2101      	movs	r1, #1
 800ec7c:	f000 f9bc 	bl	800eff8 <uxr_seq_num_add>
 800ec80:	81e0      	strh	r0, [r4, #14]
 800ec82:	2001      	movs	r0, #1
 800ec84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ec86:	bf00      	nop

0800ec88 <uxr_update_output_stream_heartbeat_timestamp>:
 800ec88:	b570      	push	{r4, r5, r6, lr}
 800ec8a:	8a01      	ldrh	r1, [r0, #16]
 800ec8c:	4604      	mov	r4, r0
 800ec8e:	8a40      	ldrh	r0, [r0, #18]
 800ec90:	4615      	mov	r5, r2
 800ec92:	461e      	mov	r6, r3
 800ec94:	f000 f9b8 	bl	800f008 <uxr_seq_num_cmp>
 800ec98:	2800      	cmp	r0, #0
 800ec9a:	db07      	blt.n	800ecac <uxr_update_output_stream_heartbeat_timestamp+0x24>
 800ec9c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800eca0:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800eca4:	e9c4 2306 	strd	r2, r3, [r4, #24]
 800eca8:	2000      	movs	r0, #0
 800ecaa:	bd70      	pop	{r4, r5, r6, pc}
 800ecac:	f894 0020 	ldrb.w	r0, [r4, #32]
 800ecb0:	b940      	cbnz	r0, 800ecc4 <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 800ecb2:	2301      	movs	r3, #1
 800ecb4:	f884 3020 	strb.w	r3, [r4, #32]
 800ecb8:	3564      	adds	r5, #100	@ 0x64
 800ecba:	f146 0600 	adc.w	r6, r6, #0
 800ecbe:	e9c4 5606 	strd	r5, r6, [r4, #24]
 800ecc2:	bd70      	pop	{r4, r5, r6, pc}
 800ecc4:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 800ecc8:	4295      	cmp	r5, r2
 800ecca:	eb76 0303 	sbcs.w	r3, r6, r3
 800ecce:	bfa5      	ittet	ge
 800ecd0:	3001      	addge	r0, #1
 800ecd2:	f884 0020 	strbge.w	r0, [r4, #32]
 800ecd6:	2000      	movlt	r0, #0
 800ecd8:	2001      	movge	r0, #1
 800ecda:	e7ed      	b.n	800ecb8 <uxr_update_output_stream_heartbeat_timestamp+0x30>

0800ecdc <uxr_begin_output_nack_buffer_it>:
 800ecdc:	8a40      	ldrh	r0, [r0, #18]
 800ecde:	4770      	bx	lr

0800ece0 <uxr_next_reliable_nack_buffer_to_send>:
 800ece0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ece4:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 800ece8:	b082      	sub	sp, #8
 800ecea:	f1b8 0f00 	cmp.w	r8, #0
 800ecee:	d011      	beq.n	800ed14 <uxr_next_reliable_nack_buffer_to_send+0x34>
 800ecf0:	4604      	mov	r4, r0
 800ecf2:	8818      	ldrh	r0, [r3, #0]
 800ecf4:	460e      	mov	r6, r1
 800ecf6:	4617      	mov	r7, r2
 800ecf8:	461d      	mov	r5, r3
 800ecfa:	2101      	movs	r1, #1
 800ecfc:	f000 f97c 	bl	800eff8 <uxr_seq_num_add>
 800ed00:	8028      	strh	r0, [r5, #0]
 800ed02:	8a21      	ldrh	r1, [r4, #16]
 800ed04:	f000 f980 	bl	800f008 <uxr_seq_num_cmp>
 800ed08:	2800      	cmp	r0, #0
 800ed0a:	dd07      	ble.n	800ed1c <uxr_next_reliable_nack_buffer_to_send+0x3c>
 800ed0c:	f04f 0800 	mov.w	r8, #0
 800ed10:	f884 8021 	strb.w	r8, [r4, #33]	@ 0x21
 800ed14:	4640      	mov	r0, r8
 800ed16:	b002      	add	sp, #8
 800ed18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed1c:	8921      	ldrh	r1, [r4, #8]
 800ed1e:	8828      	ldrh	r0, [r5, #0]
 800ed20:	6823      	ldr	r3, [r4, #0]
 800ed22:	fbb0 f2f1 	udiv	r2, r0, r1
 800ed26:	fb01 0c12 	mls	ip, r1, r2, r0
 800ed2a:	fa1f f28c 	uxth.w	r2, ip
 800ed2e:	9301      	str	r3, [sp, #4]
 800ed30:	6863      	ldr	r3, [r4, #4]
 800ed32:	fbb3 fcf1 	udiv	ip, r3, r1
 800ed36:	9b01      	ldr	r3, [sp, #4]
 800ed38:	fb02 fc0c 	mul.w	ip, r2, ip
 800ed3c:	f10c 0c04 	add.w	ip, ip, #4
 800ed40:	4463      	add	r3, ip
 800ed42:	6033      	str	r3, [r6, #0]
 800ed44:	6823      	ldr	r3, [r4, #0]
 800ed46:	4463      	add	r3, ip
 800ed48:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800ed4c:	603b      	str	r3, [r7, #0]
 800ed4e:	7b22      	ldrb	r2, [r4, #12]
 800ed50:	429a      	cmp	r2, r3
 800ed52:	d0d2      	beq.n	800ecfa <uxr_next_reliable_nack_buffer_to_send+0x1a>
 800ed54:	4640      	mov	r0, r8
 800ed56:	b002      	add	sp, #8
 800ed58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ed5c <uxr_process_acknack>:
 800ed5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed5e:	4604      	mov	r4, r0
 800ed60:	460e      	mov	r6, r1
 800ed62:	4610      	mov	r0, r2
 800ed64:	2101      	movs	r1, #1
 800ed66:	f000 f94b 	bl	800f000 <uxr_seq_num_sub>
 800ed6a:	8a61      	ldrh	r1, [r4, #18]
 800ed6c:	f000 f948 	bl	800f000 <uxr_seq_num_sub>
 800ed70:	b1c0      	cbz	r0, 800eda4 <uxr_process_acknack+0x48>
 800ed72:	4605      	mov	r5, r0
 800ed74:	2700      	movs	r7, #0
 800ed76:	2101      	movs	r1, #1
 800ed78:	8a60      	ldrh	r0, [r4, #18]
 800ed7a:	f000 f93d 	bl	800eff8 <uxr_seq_num_add>
 800ed7e:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 800ed82:	fbb0 f1fc 	udiv	r1, r0, ip
 800ed86:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ed8a:	fb0c 0111 	mls	r1, ip, r1, r0
 800ed8e:	b289      	uxth	r1, r1
 800ed90:	3701      	adds	r7, #1
 800ed92:	fbb3 f3fc 	udiv	r3, r3, ip
 800ed96:	fb01 f303 	mul.w	r3, r1, r3
 800ed9a:	42bd      	cmp	r5, r7
 800ed9c:	7b21      	ldrb	r1, [r4, #12]
 800ed9e:	8260      	strh	r0, [r4, #18]
 800eda0:	50d1      	str	r1, [r2, r3]
 800eda2:	d1e8      	bne.n	800ed76 <uxr_process_acknack+0x1a>
 800eda4:	3e00      	subs	r6, #0
 800eda6:	f04f 0300 	mov.w	r3, #0
 800edaa:	bf18      	it	ne
 800edac:	2601      	movne	r6, #1
 800edae:	f884 3020 	strb.w	r3, [r4, #32]
 800edb2:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 800edb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800edb8 <uxr_is_output_up_to_date>:
 800edb8:	8a01      	ldrh	r1, [r0, #16]
 800edba:	8a40      	ldrh	r0, [r0, #18]
 800edbc:	b508      	push	{r3, lr}
 800edbe:	f000 f923 	bl	800f008 <uxr_seq_num_cmp>
 800edc2:	fab0 f080 	clz	r0, r0
 800edc6:	0940      	lsrs	r0, r0, #5
 800edc8:	bd08      	pop	{r3, pc}
 800edca:	bf00      	nop

0800edcc <get_available_free_slots>:
 800edcc:	8902      	ldrh	r2, [r0, #8]
 800edce:	b1da      	cbz	r2, 800ee08 <get_available_free_slots+0x3c>
 800edd0:	b530      	push	{r4, r5, lr}
 800edd2:	2100      	movs	r1, #0
 800edd4:	6843      	ldr	r3, [r0, #4]
 800edd6:	6805      	ldr	r5, [r0, #0]
 800edd8:	7b04      	ldrb	r4, [r0, #12]
 800edda:	fbb3 fef2 	udiv	lr, r3, r2
 800edde:	4608      	mov	r0, r1
 800ede0:	460b      	mov	r3, r1
 800ede2:	fbb3 fcf2 	udiv	ip, r3, r2
 800ede6:	fb02 331c 	mls	r3, r2, ip, r3
 800edea:	b29b      	uxth	r3, r3
 800edec:	fb0e f303 	mul.w	r3, lr, r3
 800edf0:	3101      	adds	r1, #1
 800edf2:	f855 c003 	ldr.w	ip, [r5, r3]
 800edf6:	4564      	cmp	r4, ip
 800edf8:	bf08      	it	eq
 800edfa:	3001      	addeq	r0, #1
 800edfc:	b28b      	uxth	r3, r1
 800edfe:	bf08      	it	eq
 800ee00:	b280      	uxtheq	r0, r0
 800ee02:	4293      	cmp	r3, r2
 800ee04:	d3ed      	bcc.n	800ede2 <get_available_free_slots+0x16>
 800ee06:	bd30      	pop	{r4, r5, pc}
 800ee08:	4610      	mov	r0, r2
 800ee0a:	4770      	bx	lr

0800ee0c <uxr_buffer_cancel_data>:
 800ee0c:	b510      	push	{r4, lr}
 800ee0e:	b094      	sub	sp, #80	@ 0x50
 800ee10:	2300      	movs	r3, #0
 800ee12:	9202      	str	r2, [sp, #8]
 800ee14:	9205      	str	r2, [sp, #20]
 800ee16:	9301      	str	r3, [sp, #4]
 800ee18:	2201      	movs	r2, #1
 800ee1a:	f8ad 301c 	strh.w	r3, [sp, #28]
 800ee1e:	f88d 301e 	strb.w	r3, [sp, #30]
 800ee22:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 800ee26:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 800ee2a:	2308      	movs	r3, #8
 800ee2c:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 800ee30:	9300      	str	r3, [sp, #0]
 800ee32:	2210      	movs	r2, #16
 800ee34:	ab0c      	add	r3, sp, #48	@ 0x30
 800ee36:	4604      	mov	r4, r0
 800ee38:	9103      	str	r1, [sp, #12]
 800ee3a:	f7fb fd01 	bl	800a840 <uxr_prepare_stream_to_write_submessage>
 800ee3e:	b918      	cbnz	r0, 800ee48 <uxr_buffer_cancel_data+0x3c>
 800ee40:	4604      	mov	r4, r0
 800ee42:	4620      	mov	r0, r4
 800ee44:	b014      	add	sp, #80	@ 0x50
 800ee46:	bd10      	pop	{r4, pc}
 800ee48:	9905      	ldr	r1, [sp, #20]
 800ee4a:	aa06      	add	r2, sp, #24
 800ee4c:	4620      	mov	r0, r4
 800ee4e:	f7fb fe2d 	bl	800aaac <uxr_init_base_object_request>
 800ee52:	a906      	add	r1, sp, #24
 800ee54:	4604      	mov	r4, r0
 800ee56:	a80c      	add	r0, sp, #48	@ 0x30
 800ee58:	f7fd f83c 	bl	800bed4 <uxr_serialize_READ_DATA_Payload>
 800ee5c:	4620      	mov	r0, r4
 800ee5e:	b014      	add	sp, #80	@ 0x50
 800ee60:	bd10      	pop	{r4, pc}
 800ee62:	bf00      	nop

0800ee64 <read_submessage_format>:
 800ee64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ee68:	b095      	sub	sp, #84	@ 0x54
 800ee6a:	f8bd 6078 	ldrh.w	r6, [sp, #120]	@ 0x78
 800ee6e:	b113      	cbz	r3, 800ee76 <read_submessage_format+0x12>
 800ee70:	b015      	add	sp, #84	@ 0x54
 800ee72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ee76:	460c      	mov	r4, r1
 800ee78:	4615      	mov	r5, r2
 800ee7a:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 800ee7e:	4607      	mov	r7, r0
 800ee80:	981c      	ldr	r0, [sp, #112]	@ 0x70
 800ee82:	9004      	str	r0, [sp, #16]
 800ee84:	981d      	ldr	r0, [sp, #116]	@ 0x74
 800ee86:	9005      	str	r0, [sp, #20]
 800ee88:	1a52      	subs	r2, r2, r1
 800ee8a:	a80c      	add	r0, sp, #48	@ 0x30
 800ee8c:	4699      	mov	r9, r3
 800ee8e:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 800ee92:	f7fa fbe9 	bl	8009668 <ucdr_init_buffer>
 800ee96:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800ee9a:	a80c      	add	r0, sp, #48	@ 0x30
 800ee9c:	f7fa fbb8 	bl	8009610 <ucdr_set_on_full_buffer_callback>
 800eea0:	69e2      	ldr	r2, [r4, #28]
 800eea2:	b19a      	cbz	r2, 800eecc <read_submessage_format+0x68>
 800eea4:	f1b8 0f07 	cmp.w	r8, #7
 800eea8:	f882 9014 	strb.w	r9, [r2, #20]
 800eeac:	d040      	beq.n	800ef30 <read_submessage_format+0xcc>
 800eeae:	f1b8 0f08 	cmp.w	r8, #8
 800eeb2:	d02e      	beq.n	800ef12 <read_submessage_format+0xae>
 800eeb4:	f1b8 0f06 	cmp.w	r8, #6
 800eeb8:	d011      	beq.n	800eede <read_submessage_format+0x7a>
 800eeba:	2301      	movs	r3, #1
 800eebc:	7513      	strb	r3, [r2, #20]
 800eebe:	4629      	mov	r1, r5
 800eec0:	4620      	mov	r0, r4
 800eec2:	f7fa fc21 	bl	8009708 <ucdr_advance_buffer>
 800eec6:	b015      	add	sp, #84	@ 0x54
 800eec8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eecc:	f1b8 0f07 	cmp.w	r8, #7
 800eed0:	d02e      	beq.n	800ef30 <read_submessage_format+0xcc>
 800eed2:	f1b8 0f08 	cmp.w	r8, #8
 800eed6:	d01c      	beq.n	800ef12 <read_submessage_format+0xae>
 800eed8:	f1b8 0f06 	cmp.w	r8, #6
 800eedc:	d1ef      	bne.n	800eebe <read_submessage_format+0x5a>
 800eede:	f8d7 8088 	ldr.w	r8, [r7, #136]	@ 0x88
 800eee2:	f1b8 0f00 	cmp.w	r8, #0
 800eee6:	d011      	beq.n	800ef0c <read_submessage_format+0xa8>
 800eee8:	ab0c      	add	r3, sp, #48	@ 0x30
 800eeea:	e9cd 3500 	strd	r3, r5, [sp]
 800eeee:	2306      	movs	r3, #6
 800eef0:	f88d 3016 	strb.w	r3, [sp, #22]
 800eef4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800eef8:	9302      	str	r3, [sp, #8]
 800eefa:	4632      	mov	r2, r6
 800eefc:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 800ef00:	4638      	mov	r0, r7
 800ef02:	47c0      	blx	r8
 800ef04:	2301      	movs	r3, #1
 800ef06:	69e2      	ldr	r2, [r4, #28]
 800ef08:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 800ef0c:	2a00      	cmp	r2, #0
 800ef0e:	d1d4      	bne.n	800eeba <read_submessage_format+0x56>
 800ef10:	e7d5      	b.n	800eebe <read_submessage_format+0x5a>
 800ef12:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d0f8      	beq.n	800ef0c <read_submessage_format+0xa8>
 800ef1a:	a906      	add	r1, sp, #24
 800ef1c:	a80c      	add	r0, sp, #48	@ 0x30
 800ef1e:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 800ef22:	f7fd f877 	bl	800c014 <uxr_deserialize_SampleIdentity>
 800ef26:	b9a0      	cbnz	r0, 800ef52 <read_submessage_format+0xee>
 800ef28:	69e2      	ldr	r2, [r4, #28]
 800ef2a:	2a00      	cmp	r2, #0
 800ef2c:	d1c5      	bne.n	800eeba <read_submessage_format+0x56>
 800ef2e:	e7c6      	b.n	800eebe <read_submessage_format+0x5a>
 800ef30:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ef34:	b13b      	cbz	r3, 800ef46 <read_submessage_format+0xe2>
 800ef36:	a906      	add	r1, sp, #24
 800ef38:	a80c      	add	r0, sp, #48	@ 0x30
 800ef3a:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 800ef3e:	f7fc fd63 	bl	800ba08 <uxr_deserialize_BaseObjectRequest>
 800ef42:	bb60      	cbnz	r0, 800ef9e <read_submessage_format+0x13a>
 800ef44:	69e2      	ldr	r2, [r4, #28]
 800ef46:	68a3      	ldr	r3, [r4, #8]
 800ef48:	442b      	add	r3, r5
 800ef4a:	60a3      	str	r3, [r4, #8]
 800ef4c:	2a00      	cmp	r2, #0
 800ef4e:	d1b4      	bne.n	800eeba <read_submessage_format+0x56>
 800ef50:	e7b5      	b.n	800eebe <read_submessage_format+0x5a>
 800ef52:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 800ef56:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ef58:	1a52      	subs	r2, r2, r1
 800ef5a:	eba8 0803 	sub.w	r8, r8, r3
 800ef5e:	a80c      	add	r0, sp, #48	@ 0x30
 800ef60:	f7fa fb82 	bl	8009668 <ucdr_init_buffer>
 800ef64:	44a8      	add	r8, r5
 800ef66:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800ef6a:	a80c      	add	r0, sp, #48	@ 0x30
 800ef6c:	f7fa fb50 	bl	8009610 <ucdr_set_on_full_buffer_callback>
 800ef70:	fa1f f888 	uxth.w	r8, r8
 800ef74:	ab0c      	add	r3, sp, #48	@ 0x30
 800ef76:	9300      	str	r3, [sp, #0]
 800ef78:	f8cd 8004 	str.w	r8, [sp, #4]
 800ef7c:	2108      	movs	r1, #8
 800ef7e:	f88d 1016 	strb.w	r1, [sp, #22]
 800ef82:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 800ef86:	9102      	str	r1, [sp, #8]
 800ef88:	ab06      	add	r3, sp, #24
 800ef8a:	4632      	mov	r2, r6
 800ef8c:	9905      	ldr	r1, [sp, #20]
 800ef8e:	f8d7 60a4 	ldr.w	r6, [r7, #164]	@ 0xa4
 800ef92:	4638      	mov	r0, r7
 800ef94:	47b0      	blx	r6
 800ef96:	2301      	movs	r3, #1
 800ef98:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 800ef9c:	e7c4      	b.n	800ef28 <read_submessage_format+0xc4>
 800ef9e:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 800efa2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800efa4:	1a52      	subs	r2, r2, r1
 800efa6:	a80c      	add	r0, sp, #48	@ 0x30
 800efa8:	eba8 0803 	sub.w	r8, r8, r3
 800efac:	f7fa fb5c 	bl	8009668 <ucdr_init_buffer>
 800efb0:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800efb4:	a80c      	add	r0, sp, #48	@ 0x30
 800efb6:	f7fa fb2b 	bl	8009610 <ucdr_set_on_full_buffer_callback>
 800efba:	ab0c      	add	r3, sp, #48	@ 0x30
 800efbc:	9300      	str	r3, [sp, #0]
 800efbe:	f89d 1018 	ldrb.w	r1, [sp, #24]
 800efc2:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800efc6:	44a8      	add	r8, r5
 800efc8:	fa1f f888 	uxth.w	r8, r8
 800efcc:	f8cd 8004 	str.w	r8, [sp, #4]
 800efd0:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 800efd4:	2107      	movs	r1, #7
 800efd6:	f88d 1016 	strb.w	r1, [sp, #22]
 800efda:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 800efde:	9102      	str	r1, [sp, #8]
 800efe0:	4632      	mov	r2, r6
 800efe2:	b29b      	uxth	r3, r3
 800efe4:	f8d7 60ac 	ldr.w	r6, [r7, #172]	@ 0xac
 800efe8:	9905      	ldr	r1, [sp, #20]
 800efea:	4638      	mov	r0, r7
 800efec:	47b0      	blx	r6
 800efee:	2301      	movs	r3, #1
 800eff0:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 800eff4:	e7a6      	b.n	800ef44 <read_submessage_format+0xe0>
 800eff6:	bf00      	nop

0800eff8 <uxr_seq_num_add>:
 800eff8:	4408      	add	r0, r1
 800effa:	b280      	uxth	r0, r0
 800effc:	4770      	bx	lr
 800effe:	bf00      	nop

0800f000 <uxr_seq_num_sub>:
 800f000:	1a40      	subs	r0, r0, r1
 800f002:	b280      	uxth	r0, r0
 800f004:	4770      	bx	lr
 800f006:	bf00      	nop

0800f008 <uxr_seq_num_cmp>:
 800f008:	4288      	cmp	r0, r1
 800f00a:	d011      	beq.n	800f030 <uxr_seq_num_cmp+0x28>
 800f00c:	d309      	bcc.n	800f022 <uxr_seq_num_cmp+0x1a>
 800f00e:	4288      	cmp	r0, r1
 800f010:	d910      	bls.n	800f034 <uxr_seq_num_cmp+0x2c>
 800f012:	1a40      	subs	r0, r0, r1
 800f014:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800f018:	bfd4      	ite	le
 800f01a:	2001      	movle	r0, #1
 800f01c:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 800f020:	4770      	bx	lr
 800f022:	1a0b      	subs	r3, r1, r0
 800f024:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f028:	daf1      	bge.n	800f00e <uxr_seq_num_cmp+0x6>
 800f02a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f02e:	4770      	bx	lr
 800f030:	2000      	movs	r0, #0
 800f032:	4770      	bx	lr
 800f034:	2001      	movs	r0, #1
 800f036:	4770      	bx	lr

0800f038 <uxr_init_framing_io>:
 800f038:	2300      	movs	r3, #0
 800f03a:	7041      	strb	r1, [r0, #1]
 800f03c:	7003      	strb	r3, [r0, #0]
 800f03e:	8583      	strh	r3, [r0, #44]	@ 0x2c
 800f040:	4770      	bx	lr
 800f042:	bf00      	nop

0800f044 <uxr_write_framed_msg>:
 800f044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f048:	4617      	mov	r7, r2
 800f04a:	7842      	ldrb	r2, [r0, #1]
 800f04c:	b083      	sub	sp, #12
 800f04e:	460e      	mov	r6, r1
 800f050:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 800f054:	469a      	mov	sl, r3
 800f056:	2901      	cmp	r1, #1
 800f058:	f04f 037e 	mov.w	r3, #126	@ 0x7e
 800f05c:	4604      	mov	r4, r0
 800f05e:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 800f062:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 800f066:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 800f06a:	f240 8137 	bls.w	800f2dc <uxr_write_framed_msg+0x298>
 800f06e:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 800f072:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 800f076:	2901      	cmp	r1, #1
 800f078:	f04f 0202 	mov.w	r2, #2
 800f07c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800f080:	f240 808f 	bls.w	800f1a2 <uxr_write_framed_msg+0x15e>
 800f084:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f086:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 800f08a:	b2dd      	uxtb	r5, r3
 800f08c:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 800f090:	2203      	movs	r2, #3
 800f092:	2901      	cmp	r1, #1
 800f094:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800f098:	f240 809a 	bls.w	800f1d0 <uxr_write_framed_msg+0x18c>
 800f09c:	18a1      	adds	r1, r4, r2
 800f09e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f0a0:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 800f0a4:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800f0a8:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 800f0ac:	3201      	adds	r2, #1
 800f0ae:	2801      	cmp	r0, #1
 800f0b0:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800f0b4:	f240 80a0 	bls.w	800f1f8 <uxr_write_framed_msg+0x1b4>
 800f0b8:	18a0      	adds	r0, r4, r2
 800f0ba:	3201      	adds	r2, #1
 800f0bc:	b2d2      	uxtb	r2, r2
 800f0be:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 800f0c2:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	f000 80a9 	beq.w	800f21e <uxr_write_framed_msg+0x1da>
 800f0cc:	f04f 0900 	mov.w	r9, #0
 800f0d0:	46c8      	mov	r8, r9
 800f0d2:	f81a 3008 	ldrb.w	r3, [sl, r8]
 800f0d6:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 800f0da:	2901      	cmp	r1, #1
 800f0dc:	f240 80c3 	bls.w	800f266 <uxr_write_framed_msg+0x222>
 800f0e0:	2a29      	cmp	r2, #41	@ 0x29
 800f0e2:	f200 809f 	bhi.w	800f224 <uxr_write_framed_msg+0x1e0>
 800f0e6:	18a1      	adds	r1, r4, r2
 800f0e8:	3201      	adds	r2, #1
 800f0ea:	b2d2      	uxtb	r2, r2
 800f0ec:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 800f0f0:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800f0f4:	ea89 0303 	eor.w	r3, r9, r3
 800f0f8:	498c      	ldr	r1, [pc, #560]	@ (800f32c <uxr_write_framed_msg+0x2e8>)
 800f0fa:	b2db      	uxtb	r3, r3
 800f0fc:	f108 0801 	add.w	r8, r8, #1
 800f100:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800f104:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 800f108:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f10a:	4543      	cmp	r3, r8
 800f10c:	d8e1      	bhi.n	800f0d2 <uxr_write_framed_msg+0x8e>
 800f10e:	ea4f 2319 	mov.w	r3, r9, lsr #8
 800f112:	fa5f f889 	uxtb.w	r8, r9
 800f116:	9301      	str	r3, [sp, #4]
 800f118:	f04f 0900 	mov.w	r9, #0
 800f11c:	f1a8 0a7d 	sub.w	sl, r8, #125	@ 0x7d
 800f120:	fa5f f18a 	uxtb.w	r1, sl
 800f124:	2901      	cmp	r1, #1
 800f126:	d921      	bls.n	800f16c <uxr_write_framed_msg+0x128>
 800f128:	2a29      	cmp	r2, #41	@ 0x29
 800f12a:	f240 80af 	bls.w	800f28c <uxr_write_framed_msg+0x248>
 800f12e:	2500      	movs	r5, #0
 800f130:	e000      	b.n	800f134 <uxr_write_framed_msg+0xf0>
 800f132:	b160      	cbz	r0, 800f14e <uxr_write_framed_msg+0x10a>
 800f134:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 800f138:	1b52      	subs	r2, r2, r5
 800f13a:	465b      	mov	r3, fp
 800f13c:	4421      	add	r1, r4
 800f13e:	4638      	mov	r0, r7
 800f140:	47b0      	blx	r6
 800f142:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 800f146:	4405      	add	r5, r0
 800f148:	4295      	cmp	r5, r2
 800f14a:	d3f2      	bcc.n	800f132 <uxr_write_framed_msg+0xee>
 800f14c:	d003      	beq.n	800f156 <uxr_write_framed_msg+0x112>
 800f14e:	2000      	movs	r0, #0
 800f150:	b003      	add	sp, #12
 800f152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f156:	fa5f f18a 	uxtb.w	r1, sl
 800f15a:	f04f 0300 	mov.w	r3, #0
 800f15e:	2901      	cmp	r1, #1
 800f160:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 800f164:	f04f 0200 	mov.w	r2, #0
 800f168:	f200 8090 	bhi.w	800f28c <uxr_write_framed_msg+0x248>
 800f16c:	1c51      	adds	r1, r2, #1
 800f16e:	b2c9      	uxtb	r1, r1
 800f170:	2929      	cmp	r1, #41	@ 0x29
 800f172:	d8dc      	bhi.n	800f12e <uxr_write_framed_msg+0xea>
 800f174:	18a5      	adds	r5, r4, r2
 800f176:	4421      	add	r1, r4
 800f178:	3202      	adds	r2, #2
 800f17a:	f088 0820 	eor.w	r8, r8, #32
 800f17e:	4648      	mov	r0, r9
 800f180:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 800f184:	b2d2      	uxtb	r2, r2
 800f186:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
 800f18a:	f04f 0901 	mov.w	r9, #1
 800f18e:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 800f192:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800f196:	2800      	cmp	r0, #0
 800f198:	f040 8085 	bne.w	800f2a6 <uxr_write_framed_msg+0x262>
 800f19c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800f1a0:	e7bc      	b.n	800f11c <uxr_write_framed_msg+0xd8>
 800f1a2:	4611      	mov	r1, r2
 800f1a4:	f04f 0c03 	mov.w	ip, #3
 800f1a8:	2204      	movs	r2, #4
 800f1aa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f1ac:	4421      	add	r1, r4
 800f1ae:	b2dd      	uxtb	r5, r3
 800f1b0:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 800f1b4:	f881 e038 	strb.w	lr, [r1, #56]	@ 0x38
 800f1b8:	44a4      	add	ip, r4
 800f1ba:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 800f1be:	f080 0020 	eor.w	r0, r0, #32
 800f1c2:	2901      	cmp	r1, #1
 800f1c4:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 800f1c8:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800f1cc:	f63f af66 	bhi.w	800f09c <uxr_write_framed_msg+0x58>
 800f1d0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f1d2:	18a0      	adds	r0, r4, r2
 800f1d4:	f085 0520 	eor.w	r5, r5, #32
 800f1d8:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 800f1dc:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800f1e0:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 800f1e4:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 800f1e8:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 800f1ec:	3202      	adds	r2, #2
 800f1ee:	2801      	cmp	r0, #1
 800f1f0:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800f1f4:	f63f af60 	bhi.w	800f0b8 <uxr_write_framed_msg+0x74>
 800f1f8:	1c50      	adds	r0, r2, #1
 800f1fa:	18a5      	adds	r5, r4, r2
 800f1fc:	fa54 f080 	uxtab	r0, r4, r0
 800f200:	3202      	adds	r2, #2
 800f202:	f081 0120 	eor.w	r1, r1, #32
 800f206:	b2d2      	uxtb	r2, r2
 800f208:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 800f20c:	f885 c038 	strb.w	ip, [r5, #56]	@ 0x38
 800f210:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 800f214:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800f218:	2b00      	cmp	r3, #0
 800f21a:	f47f af57 	bne.w	800f0cc <uxr_write_framed_msg+0x88>
 800f21e:	9301      	str	r3, [sp, #4]
 800f220:	4698      	mov	r8, r3
 800f222:	e779      	b.n	800f118 <uxr_write_framed_msg+0xd4>
 800f224:	2500      	movs	r5, #0
 800f226:	e001      	b.n	800f22c <uxr_write_framed_msg+0x1e8>
 800f228:	2800      	cmp	r0, #0
 800f22a:	d090      	beq.n	800f14e <uxr_write_framed_msg+0x10a>
 800f22c:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 800f230:	1b52      	subs	r2, r2, r5
 800f232:	465b      	mov	r3, fp
 800f234:	4421      	add	r1, r4
 800f236:	4638      	mov	r0, r7
 800f238:	47b0      	blx	r6
 800f23a:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 800f23e:	4405      	add	r5, r0
 800f240:	4295      	cmp	r5, r2
 800f242:	d3f1      	bcc.n	800f228 <uxr_write_framed_msg+0x1e4>
 800f244:	d183      	bne.n	800f14e <uxr_write_framed_msg+0x10a>
 800f246:	f04f 0300 	mov.w	r3, #0
 800f24a:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 800f24e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f250:	4543      	cmp	r3, r8
 800f252:	d964      	bls.n	800f31e <uxr_write_framed_msg+0x2da>
 800f254:	f81a 3008 	ldrb.w	r3, [sl, r8]
 800f258:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 800f25c:	2901      	cmp	r1, #1
 800f25e:	f04f 0200 	mov.w	r2, #0
 800f262:	f63f af3d 	bhi.w	800f0e0 <uxr_write_framed_msg+0x9c>
 800f266:	1c51      	adds	r1, r2, #1
 800f268:	b2c9      	uxtb	r1, r1
 800f26a:	2929      	cmp	r1, #41	@ 0x29
 800f26c:	d8da      	bhi.n	800f224 <uxr_write_framed_msg+0x1e0>
 800f26e:	18a0      	adds	r0, r4, r2
 800f270:	4421      	add	r1, r4
 800f272:	f04f 057d 	mov.w	r5, #125	@ 0x7d
 800f276:	3202      	adds	r2, #2
 800f278:	f880 5038 	strb.w	r5, [r0, #56]	@ 0x38
 800f27c:	b2d2      	uxtb	r2, r2
 800f27e:	f083 0020 	eor.w	r0, r3, #32
 800f282:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 800f286:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800f28a:	e733      	b.n	800f0f4 <uxr_write_framed_msg+0xb0>
 800f28c:	18a1      	adds	r1, r4, r2
 800f28e:	3201      	adds	r2, #1
 800f290:	4648      	mov	r0, r9
 800f292:	b2d2      	uxtb	r2, r2
 800f294:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 800f298:	f04f 0901 	mov.w	r9, #1
 800f29c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800f2a0:	2800      	cmp	r0, #0
 800f2a2:	f43f af7b 	beq.w	800f19c <uxr_write_framed_msg+0x158>
 800f2a6:	2500      	movs	r5, #0
 800f2a8:	e002      	b.n	800f2b0 <uxr_write_framed_msg+0x26c>
 800f2aa:	2800      	cmp	r0, #0
 800f2ac:	f43f af4f 	beq.w	800f14e <uxr_write_framed_msg+0x10a>
 800f2b0:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 800f2b4:	1b52      	subs	r2, r2, r5
 800f2b6:	465b      	mov	r3, fp
 800f2b8:	4421      	add	r1, r4
 800f2ba:	4638      	mov	r0, r7
 800f2bc:	47b0      	blx	r6
 800f2be:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 800f2c2:	4405      	add	r5, r0
 800f2c4:	4295      	cmp	r5, r2
 800f2c6:	d3f0      	bcc.n	800f2aa <uxr_write_framed_msg+0x266>
 800f2c8:	f47f af41 	bne.w	800f14e <uxr_write_framed_msg+0x10a>
 800f2cc:	2300      	movs	r3, #0
 800f2ce:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 800f2d2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f2d4:	b298      	uxth	r0, r3
 800f2d6:	b003      	add	sp, #12
 800f2d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2dc:	217d      	movs	r1, #125	@ 0x7d
 800f2de:	f082 0220 	eor.w	r2, r2, #32
 800f2e2:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 800f2e6:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 800f2ea:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 800f2ee:	2901      	cmp	r1, #1
 800f2f0:	f04f 0203 	mov.w	r2, #3
 800f2f4:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800f2f8:	d804      	bhi.n	800f304 <uxr_write_framed_msg+0x2c0>
 800f2fa:	4611      	mov	r1, r2
 800f2fc:	f04f 0c04 	mov.w	ip, #4
 800f300:	2205      	movs	r2, #5
 800f302:	e752      	b.n	800f1aa <uxr_write_framed_msg+0x166>
 800f304:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f306:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 800f30a:	b2dd      	uxtb	r5, r3
 800f30c:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 800f310:	2204      	movs	r2, #4
 800f312:	2901      	cmp	r1, #1
 800f314:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800f318:	f63f aec0 	bhi.w	800f09c <uxr_write_framed_msg+0x58>
 800f31c:	e758      	b.n	800f1d0 <uxr_write_framed_msg+0x18c>
 800f31e:	ea4f 2319 	mov.w	r3, r9, lsr #8
 800f322:	fa5f f889 	uxtb.w	r8, r9
 800f326:	9301      	str	r3, [sp, #4]
 800f328:	2200      	movs	r2, #0
 800f32a:	e6f5      	b.n	800f118 <uxr_write_framed_msg+0xd4>
 800f32c:	08012064 	.word	0x08012064

0800f330 <uxr_framing_read_transport>:
 800f330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f334:	4604      	mov	r4, r0
 800f336:	b083      	sub	sp, #12
 800f338:	461f      	mov	r7, r3
 800f33a:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 800f33e:	4689      	mov	r9, r1
 800f340:	4692      	mov	sl, r2
 800f342:	f7fb fd61 	bl	800ae08 <uxr_millis>
 800f346:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800f34a:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 800f34e:	42b3      	cmp	r3, r6
 800f350:	4680      	mov	r8, r0
 800f352:	d061      	beq.n	800f418 <uxr_framing_read_transport+0xe8>
 800f354:	d81c      	bhi.n	800f390 <uxr_framing_read_transport+0x60>
 800f356:	1e75      	subs	r5, r6, #1
 800f358:	1aed      	subs	r5, r5, r3
 800f35a:	b2ed      	uxtb	r5, r5
 800f35c:	2600      	movs	r6, #0
 800f35e:	455d      	cmp	r5, fp
 800f360:	d81f      	bhi.n	800f3a2 <uxr_framing_read_transport+0x72>
 800f362:	19ab      	adds	r3, r5, r6
 800f364:	455b      	cmp	r3, fp
 800f366:	bf84      	itt	hi
 800f368:	ebab 0605 	subhi.w	r6, fp, r5
 800f36c:	b2f6      	uxtbhi	r6, r6
 800f36e:	b9ed      	cbnz	r5, 800f3ac <uxr_framing_read_transport+0x7c>
 800f370:	f04f 0b00 	mov.w	fp, #0
 800f374:	f7fb fd48 	bl	800ae08 <uxr_millis>
 800f378:	683b      	ldr	r3, [r7, #0]
 800f37a:	eba0 0808 	sub.w	r8, r0, r8
 800f37e:	eba3 0308 	sub.w	r3, r3, r8
 800f382:	4658      	mov	r0, fp
 800f384:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800f388:	603b      	str	r3, [r7, #0]
 800f38a:	b003      	add	sp, #12
 800f38c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f390:	2e00      	cmp	r6, #0
 800f392:	d049      	beq.n	800f428 <uxr_framing_read_transport+0xf8>
 800f394:	f1c3 052a 	rsb	r5, r3, #42	@ 0x2a
 800f398:	b2ed      	uxtb	r5, r5
 800f39a:	3e01      	subs	r6, #1
 800f39c:	455d      	cmp	r5, fp
 800f39e:	b2f6      	uxtb	r6, r6
 800f3a0:	d9df      	bls.n	800f362 <uxr_framing_read_transport+0x32>
 800f3a2:	fa5f f58b 	uxtb.w	r5, fp
 800f3a6:	2600      	movs	r6, #0
 800f3a8:	2d00      	cmp	r5, #0
 800f3aa:	d0e1      	beq.n	800f370 <uxr_framing_read_transport+0x40>
 800f3ac:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800f3b0:	3102      	adds	r1, #2
 800f3b2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f3b4:	9300      	str	r3, [sp, #0]
 800f3b6:	683b      	ldr	r3, [r7, #0]
 800f3b8:	4421      	add	r1, r4
 800f3ba:	462a      	mov	r2, r5
 800f3bc:	4650      	mov	r0, sl
 800f3be:	47c8      	blx	r9
 800f3c0:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800f3c4:	4a1a      	ldr	r2, [pc, #104]	@ (800f430 <uxr_framing_read_transport+0x100>)
 800f3c6:	4403      	add	r3, r0
 800f3c8:	0859      	lsrs	r1, r3, #1
 800f3ca:	fba2 2101 	umull	r2, r1, r2, r1
 800f3ce:	0889      	lsrs	r1, r1, #2
 800f3d0:	222a      	movs	r2, #42	@ 0x2a
 800f3d2:	fb02 3111 	mls	r1, r2, r1, r3
 800f3d6:	4683      	mov	fp, r0
 800f3d8:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 800f3dc:	2800      	cmp	r0, #0
 800f3de:	d0c7      	beq.n	800f370 <uxr_framing_read_transport+0x40>
 800f3e0:	42a8      	cmp	r0, r5
 800f3e2:	d1c7      	bne.n	800f374 <uxr_framing_read_transport+0x44>
 800f3e4:	2e00      	cmp	r6, #0
 800f3e6:	d0c5      	beq.n	800f374 <uxr_framing_read_transport+0x44>
 800f3e8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f3ea:	9300      	str	r3, [sp, #0]
 800f3ec:	3102      	adds	r1, #2
 800f3ee:	4632      	mov	r2, r6
 800f3f0:	4421      	add	r1, r4
 800f3f2:	2300      	movs	r3, #0
 800f3f4:	4650      	mov	r0, sl
 800f3f6:	47c8      	blx	r9
 800f3f8:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800f3fc:	4a0c      	ldr	r2, [pc, #48]	@ (800f430 <uxr_framing_read_transport+0x100>)
 800f3fe:	180b      	adds	r3, r1, r0
 800f400:	0859      	lsrs	r1, r3, #1
 800f402:	fba2 1201 	umull	r1, r2, r2, r1
 800f406:	0892      	lsrs	r2, r2, #2
 800f408:	212a      	movs	r1, #42	@ 0x2a
 800f40a:	fb01 3312 	mls	r3, r1, r2, r3
 800f40e:	eb00 0b05 	add.w	fp, r0, r5
 800f412:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 800f416:	e7ad      	b.n	800f374 <uxr_framing_read_transport+0x44>
 800f418:	2600      	movs	r6, #0
 800f41a:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 800f41e:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 800f420:	d9bf      	bls.n	800f3a2 <uxr_framing_read_transport+0x72>
 800f422:	2102      	movs	r1, #2
 800f424:	2529      	movs	r5, #41	@ 0x29
 800f426:	e7c4      	b.n	800f3b2 <uxr_framing_read_transport+0x82>
 800f428:	f1c3 0529 	rsb	r5, r3, #41	@ 0x29
 800f42c:	b2ed      	uxtb	r5, r5
 800f42e:	e796      	b.n	800f35e <uxr_framing_read_transport+0x2e>
 800f430:	30c30c31 	.word	0x30c30c31

0800f434 <uxr_read_framed_msg>:
 800f434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f438:	461e      	mov	r6, r3
 800f43a:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 800f43e:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 800f442:	429d      	cmp	r5, r3
 800f444:	b083      	sub	sp, #12
 800f446:	4604      	mov	r4, r0
 800f448:	4688      	mov	r8, r1
 800f44a:	4691      	mov	r9, r2
 800f44c:	f000 8188 	beq.w	800f760 <uxr_read_framed_msg+0x32c>
 800f450:	7823      	ldrb	r3, [r4, #0]
 800f452:	4dc1      	ldr	r5, [pc, #772]	@ (800f758 <uxr_read_framed_msg+0x324>)
 800f454:	4fc1      	ldr	r7, [pc, #772]	@ (800f75c <uxr_read_framed_msg+0x328>)
 800f456:	2b07      	cmp	r3, #7
 800f458:	d8fd      	bhi.n	800f456 <uxr_read_framed_msg+0x22>
 800f45a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800f45e:	0115      	.short	0x0115
 800f460:	00d600f6 	.word	0x00d600f6
 800f464:	009000b9 	.word	0x009000b9
 800f468:	0030004d 	.word	0x0030004d
 800f46c:	0008      	.short	0x0008
 800f46e:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800f472:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800f476:	4299      	cmp	r1, r3
 800f478:	f000 814a 	beq.w	800f710 <uxr_read_framed_msg+0x2dc>
 800f47c:	18e2      	adds	r2, r4, r3
 800f47e:	7892      	ldrb	r2, [r2, #2]
 800f480:	2a7d      	cmp	r2, #125	@ 0x7d
 800f482:	f000 8199 	beq.w	800f7b8 <uxr_read_framed_msg+0x384>
 800f486:	3301      	adds	r3, #1
 800f488:	0858      	lsrs	r0, r3, #1
 800f48a:	fba5 1000 	umull	r1, r0, r5, r0
 800f48e:	0880      	lsrs	r0, r0, #2
 800f490:	212a      	movs	r1, #42	@ 0x2a
 800f492:	fb01 3310 	mls	r3, r1, r0, r3
 800f496:	2a7e      	cmp	r2, #126	@ 0x7e
 800f498:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800f49c:	f000 8252 	beq.w	800f944 <uxr_read_framed_msg+0x510>
 800f4a0:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 800f4a2:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 800f4a4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800f4a8:	b29b      	uxth	r3, r3
 800f4aa:	2200      	movs	r2, #0
 800f4ac:	4299      	cmp	r1, r3
 800f4ae:	86a3      	strh	r3, [r4, #52]	@ 0x34
 800f4b0:	7022      	strb	r2, [r4, #0]
 800f4b2:	f000 8179 	beq.w	800f7a8 <uxr_read_framed_msg+0x374>
 800f4b6:	2000      	movs	r0, #0
 800f4b8:	b003      	add	sp, #12
 800f4ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f4be:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800f4c2:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800f4c6:	4299      	cmp	r1, r3
 800f4c8:	f000 8131 	beq.w	800f72e <uxr_read_framed_msg+0x2fa>
 800f4cc:	18e2      	adds	r2, r4, r3
 800f4ce:	7890      	ldrb	r0, [r2, #2]
 800f4d0:	287d      	cmp	r0, #125	@ 0x7d
 800f4d2:	f000 8190 	beq.w	800f7f6 <uxr_read_framed_msg+0x3c2>
 800f4d6:	3301      	adds	r3, #1
 800f4d8:	085a      	lsrs	r2, r3, #1
 800f4da:	fba5 1202 	umull	r1, r2, r5, r2
 800f4de:	0892      	lsrs	r2, r2, #2
 800f4e0:	212a      	movs	r1, #42	@ 0x2a
 800f4e2:	fb01 3312 	mls	r3, r1, r2, r3
 800f4e6:	287e      	cmp	r0, #126	@ 0x7e
 800f4e8:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800f4ec:	f000 821a 	beq.w	800f924 <uxr_read_framed_msg+0x4f0>
 800f4f0:	2307      	movs	r3, #7
 800f4f2:	86a0      	strh	r0, [r4, #52]	@ 0x34
 800f4f4:	7023      	strb	r3, [r4, #0]
 800f4f6:	e7ae      	b.n	800f456 <uxr_read_framed_msg+0x22>
 800f4f8:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 800f4fa:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 800f4fe:	459e      	cmp	lr, r3
 800f500:	d938      	bls.n	800f574 <uxr_read_framed_msg+0x140>
 800f502:	ee07 8a90 	vmov	s15, r8
 800f506:	212a      	movs	r1, #42	@ 0x2a
 800f508:	e020      	b.n	800f54c <uxr_read_framed_msg+0x118>
 800f50a:	f89b c002 	ldrb.w	ip, [fp, #2]
 800f50e:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 800f512:	f000 80d4 	beq.w	800f6be <uxr_read_framed_msg+0x28a>
 800f516:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 800f51a:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800f51e:	f000 8219 	beq.w	800f954 <uxr_read_framed_msg+0x520>
 800f522:	f806 c003 	strb.w	ip, [r6, r3]
 800f526:	f8b4 a036 	ldrh.w	sl, [r4, #54]	@ 0x36
 800f52a:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 800f52c:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 800f530:	ea8a 000c 	eor.w	r0, sl, ip
 800f534:	b2c0      	uxtb	r0, r0
 800f536:	3301      	adds	r3, #1
 800f538:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 800f53c:	b29b      	uxth	r3, r3
 800f53e:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 800f542:	4573      	cmp	r3, lr
 800f544:	8663      	strh	r3, [r4, #50]	@ 0x32
 800f546:	86e2      	strh	r2, [r4, #54]	@ 0x36
 800f548:	f080 8120 	bcs.w	800f78c <uxr_read_framed_msg+0x358>
 800f54c:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 800f550:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 800f554:	f100 0c01 	add.w	ip, r0, #1
 800f558:	ea4f 025c 	mov.w	r2, ip, lsr #1
 800f55c:	fba5 8202 	umull	r8, r2, r5, r2
 800f560:	0892      	lsrs	r2, r2, #2
 800f562:	4582      	cmp	sl, r0
 800f564:	eb04 0b00 	add.w	fp, r4, r0
 800f568:	fb01 c212 	mls	r2, r1, r2, ip
 800f56c:	d1cd      	bne.n	800f50a <uxr_read_framed_msg+0xd6>
 800f56e:	ee17 8a90 	vmov	r8, s15
 800f572:	459e      	cmp	lr, r3
 800f574:	f040 8111 	bne.w	800f79a <uxr_read_framed_msg+0x366>
 800f578:	2306      	movs	r3, #6
 800f57a:	7023      	strb	r3, [r4, #0]
 800f57c:	e76b      	b.n	800f456 <uxr_read_framed_msg+0x22>
 800f57e:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 800f582:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800f586:	4298      	cmp	r0, r3
 800f588:	f000 80c2 	beq.w	800f710 <uxr_read_framed_msg+0x2dc>
 800f58c:	18e2      	adds	r2, r4, r3
 800f58e:	7891      	ldrb	r1, [r2, #2]
 800f590:	297d      	cmp	r1, #125	@ 0x7d
 800f592:	f000 814c 	beq.w	800f82e <uxr_read_framed_msg+0x3fa>
 800f596:	3301      	adds	r3, #1
 800f598:	085a      	lsrs	r2, r3, #1
 800f59a:	fba5 0202 	umull	r0, r2, r5, r2
 800f59e:	0892      	lsrs	r2, r2, #2
 800f5a0:	202a      	movs	r0, #42	@ 0x2a
 800f5a2:	fb00 3312 	mls	r3, r0, r2, r3
 800f5a6:	297e      	cmp	r1, #126	@ 0x7e
 800f5a8:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800f5ac:	f000 81ca 	beq.w	800f944 <uxr_read_framed_msg+0x510>
 800f5b0:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 800f5b2:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 800f5b6:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800f5b8:	b29b      	uxth	r3, r3
 800f5ba:	2000      	movs	r0, #0
 800f5bc:	428b      	cmp	r3, r1
 800f5be:	8623      	strh	r3, [r4, #48]	@ 0x30
 800f5c0:	8660      	strh	r0, [r4, #50]	@ 0x32
 800f5c2:	86e0      	strh	r0, [r4, #54]	@ 0x36
 800f5c4:	f240 80df 	bls.w	800f786 <uxr_read_framed_msg+0x352>
 800f5c8:	7020      	strb	r0, [r4, #0]
 800f5ca:	b003      	add	sp, #12
 800f5cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5d0:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800f5d4:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800f5d8:	4299      	cmp	r1, r3
 800f5da:	f000 80a8 	beq.w	800f72e <uxr_read_framed_msg+0x2fa>
 800f5de:	18e2      	adds	r2, r4, r3
 800f5e0:	7890      	ldrb	r0, [r2, #2]
 800f5e2:	287d      	cmp	r0, #125	@ 0x7d
 800f5e4:	f000 8164 	beq.w	800f8b0 <uxr_read_framed_msg+0x47c>
 800f5e8:	3301      	adds	r3, #1
 800f5ea:	085a      	lsrs	r2, r3, #1
 800f5ec:	fba5 1202 	umull	r1, r2, r5, r2
 800f5f0:	0892      	lsrs	r2, r2, #2
 800f5f2:	212a      	movs	r1, #42	@ 0x2a
 800f5f4:	fb01 3312 	mls	r3, r1, r2, r3
 800f5f8:	287e      	cmp	r0, #126	@ 0x7e
 800f5fa:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800f5fe:	f000 8191 	beq.w	800f924 <uxr_read_framed_msg+0x4f0>
 800f602:	2304      	movs	r3, #4
 800f604:	8620      	strh	r0, [r4, #48]	@ 0x30
 800f606:	7023      	strb	r3, [r4, #0]
 800f608:	e725      	b.n	800f456 <uxr_read_framed_msg+0x22>
 800f60a:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 800f60e:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800f612:	4290      	cmp	r0, r2
 800f614:	f000 80b3 	beq.w	800f77e <uxr_read_framed_msg+0x34a>
 800f618:	18a3      	adds	r3, r4, r2
 800f61a:	7899      	ldrb	r1, [r3, #2]
 800f61c:	297d      	cmp	r1, #125	@ 0x7d
 800f61e:	f000 8164 	beq.w	800f8ea <uxr_read_framed_msg+0x4b6>
 800f622:	3201      	adds	r2, #1
 800f624:	0850      	lsrs	r0, r2, #1
 800f626:	fba5 3000 	umull	r3, r0, r5, r0
 800f62a:	0880      	lsrs	r0, r0, #2
 800f62c:	232a      	movs	r3, #42	@ 0x2a
 800f62e:	fb03 2210 	mls	r2, r3, r0, r2
 800f632:	297e      	cmp	r1, #126	@ 0x7e
 800f634:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800f638:	f000 8188 	beq.w	800f94c <uxr_read_framed_msg+0x518>
 800f63c:	7863      	ldrb	r3, [r4, #1]
 800f63e:	428b      	cmp	r3, r1
 800f640:	bf0c      	ite	eq
 800f642:	2303      	moveq	r3, #3
 800f644:	2300      	movne	r3, #0
 800f646:	7023      	strb	r3, [r4, #0]
 800f648:	e705      	b.n	800f456 <uxr_read_framed_msg+0x22>
 800f64a:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 800f64e:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800f652:	2200      	movs	r2, #0
 800f654:	4299      	cmp	r1, r3
 800f656:	f884 202e 	strb.w	r2, [r4, #46]	@ 0x2e
 800f65a:	d06c      	beq.n	800f736 <uxr_read_framed_msg+0x302>
 800f65c:	18e2      	adds	r2, r4, r3
 800f65e:	7890      	ldrb	r0, [r2, #2]
 800f660:	287d      	cmp	r0, #125	@ 0x7d
 800f662:	f000 8101 	beq.w	800f868 <uxr_read_framed_msg+0x434>
 800f666:	3301      	adds	r3, #1
 800f668:	085a      	lsrs	r2, r3, #1
 800f66a:	fba5 1202 	umull	r1, r2, r5, r2
 800f66e:	0892      	lsrs	r2, r2, #2
 800f670:	212a      	movs	r1, #42	@ 0x2a
 800f672:	fb01 3312 	mls	r3, r1, r2, r3
 800f676:	287e      	cmp	r0, #126	@ 0x7e
 800f678:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 800f67c:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800f680:	d059      	beq.n	800f736 <uxr_read_framed_msg+0x302>
 800f682:	2302      	movs	r3, #2
 800f684:	7023      	strb	r3, [r4, #0]
 800f686:	e6e6      	b.n	800f456 <uxr_read_framed_msg+0x22>
 800f688:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 800f68c:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800f690:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 800f694:	1c51      	adds	r1, r2, #1
 800f696:	084b      	lsrs	r3, r1, #1
 800f698:	fba5 c303 	umull	ip, r3, r5, r3
 800f69c:	089b      	lsrs	r3, r3, #2
 800f69e:	fb0e 1313 	mls	r3, lr, r3, r1
 800f6a2:	4592      	cmp	sl, r2
 800f6a4:	eb04 0002 	add.w	r0, r4, r2
 800f6a8:	b2da      	uxtb	r2, r3
 800f6aa:	f43f af04 	beq.w	800f4b6 <uxr_read_framed_msg+0x82>
 800f6ae:	7883      	ldrb	r3, [r0, #2]
 800f6b0:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800f6b4:	2b7e      	cmp	r3, #126	@ 0x7e
 800f6b6:	d1ed      	bne.n	800f694 <uxr_read_framed_msg+0x260>
 800f6b8:	2301      	movs	r3, #1
 800f6ba:	7023      	strb	r3, [r4, #0]
 800f6bc:	e6cb      	b.n	800f456 <uxr_read_framed_msg+0x22>
 800f6be:	f100 0c01 	add.w	ip, r0, #1
 800f6c2:	ea4f 025c 	mov.w	r2, ip, lsr #1
 800f6c6:	fba5 8202 	umull	r8, r2, r5, r2
 800f6ca:	0892      	lsrs	r2, r2, #2
 800f6cc:	fb01 c212 	mls	r2, r1, r2, ip
 800f6d0:	eb04 0c02 	add.w	ip, r4, r2
 800f6d4:	b2d2      	uxtb	r2, r2
 800f6d6:	4592      	cmp	sl, r2
 800f6d8:	f100 0002 	add.w	r0, r0, #2
 800f6dc:	f43f af47 	beq.w	800f56e <uxr_read_framed_msg+0x13a>
 800f6e0:	0842      	lsrs	r2, r0, #1
 800f6e2:	f89c a002 	ldrb.w	sl, [ip, #2]
 800f6e6:	fba5 8202 	umull	r8, r2, r5, r2
 800f6ea:	0892      	lsrs	r2, r2, #2
 800f6ec:	fb01 0012 	mls	r0, r1, r2, r0
 800f6f0:	f1ba 0f7e 	cmp.w	sl, #126	@ 0x7e
 800f6f4:	f08a 0c20 	eor.w	ip, sl, #32
 800f6f8:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 800f6fc:	f47f af11 	bne.w	800f522 <uxr_read_framed_msg+0xee>
 800f700:	459e      	cmp	lr, r3
 800f702:	ee17 8a90 	vmov	r8, s15
 800f706:	f43f af37 	beq.w	800f578 <uxr_read_framed_msg+0x144>
 800f70a:	2301      	movs	r3, #1
 800f70c:	7023      	strb	r3, [r4, #0]
 800f70e:	e6a2      	b.n	800f456 <uxr_read_framed_msg+0x22>
 800f710:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f712:	9300      	str	r3, [sp, #0]
 800f714:	2301      	movs	r3, #1
 800f716:	9301      	str	r3, [sp, #4]
 800f718:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f71a:	464a      	mov	r2, r9
 800f71c:	4641      	mov	r1, r8
 800f71e:	4620      	mov	r0, r4
 800f720:	f7ff fe06 	bl	800f330 <uxr_framing_read_transport>
 800f724:	2800      	cmp	r0, #0
 800f726:	f43f aec6 	beq.w	800f4b6 <uxr_read_framed_msg+0x82>
 800f72a:	7823      	ldrb	r3, [r4, #0]
 800f72c:	e693      	b.n	800f456 <uxr_read_framed_msg+0x22>
 800f72e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f730:	9300      	str	r3, [sp, #0]
 800f732:	2302      	movs	r3, #2
 800f734:	e7ef      	b.n	800f716 <uxr_read_framed_msg+0x2e2>
 800f736:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f738:	9300      	str	r3, [sp, #0]
 800f73a:	2304      	movs	r3, #4
 800f73c:	9301      	str	r3, [sp, #4]
 800f73e:	464a      	mov	r2, r9
 800f740:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f742:	4641      	mov	r1, r8
 800f744:	4620      	mov	r0, r4
 800f746:	f7ff fdf3 	bl	800f330 <uxr_framing_read_transport>
 800f74a:	2800      	cmp	r0, #0
 800f74c:	d1ed      	bne.n	800f72a <uxr_read_framed_msg+0x2f6>
 800f74e:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 800f752:	2b7e      	cmp	r3, #126	@ 0x7e
 800f754:	d0e9      	beq.n	800f72a <uxr_read_framed_msg+0x2f6>
 800f756:	e6ae      	b.n	800f4b6 <uxr_read_framed_msg+0x82>
 800f758:	30c30c31 	.word	0x30c30c31
 800f75c:	08012064 	.word	0x08012064
 800f760:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f762:	9300      	str	r3, [sp, #0]
 800f764:	2305      	movs	r3, #5
 800f766:	9301      	str	r3, [sp, #4]
 800f768:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f76a:	f7ff fde1 	bl	800f330 <uxr_framing_read_transport>
 800f76e:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800f772:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800f776:	429a      	cmp	r2, r3
 800f778:	f43f ae9d 	beq.w	800f4b6 <uxr_read_framed_msg+0x82>
 800f77c:	e668      	b.n	800f450 <uxr_read_framed_msg+0x1c>
 800f77e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f780:	9300      	str	r3, [sp, #0]
 800f782:	2303      	movs	r3, #3
 800f784:	e7c7      	b.n	800f716 <uxr_read_framed_msg+0x2e2>
 800f786:	2305      	movs	r3, #5
 800f788:	7023      	strb	r3, [r4, #0]
 800f78a:	e664      	b.n	800f456 <uxr_read_framed_msg+0x22>
 800f78c:	ee17 8a90 	vmov	r8, s15
 800f790:	f43f aef2 	beq.w	800f578 <uxr_read_framed_msg+0x144>
 800f794:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 800f798:	d08e      	beq.n	800f6b8 <uxr_read_framed_msg+0x284>
 800f79a:	ebae 0303 	sub.w	r3, lr, r3
 800f79e:	3302      	adds	r3, #2
 800f7a0:	9301      	str	r3, [sp, #4]
 800f7a2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f7a4:	9300      	str	r3, [sp, #0]
 800f7a6:	e7b7      	b.n	800f718 <uxr_read_framed_msg+0x2e4>
 800f7a8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f7aa:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 800f7ae:	7013      	strb	r3, [r2, #0]
 800f7b0:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 800f7b2:	b003      	add	sp, #12
 800f7b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7b8:	f103 0c01 	add.w	ip, r3, #1
 800f7bc:	ea4f 025c 	mov.w	r2, ip, lsr #1
 800f7c0:	fba5 0202 	umull	r0, r2, r5, r2
 800f7c4:	0892      	lsrs	r2, r2, #2
 800f7c6:	202a      	movs	r0, #42	@ 0x2a
 800f7c8:	fb00 c212 	mls	r2, r0, r2, ip
 800f7cc:	fa5f fc82 	uxtb.w	ip, r2
 800f7d0:	4561      	cmp	r1, ip
 800f7d2:	d09d      	beq.n	800f710 <uxr_read_framed_msg+0x2dc>
 800f7d4:	3302      	adds	r3, #2
 800f7d6:	4422      	add	r2, r4
 800f7d8:	0859      	lsrs	r1, r3, #1
 800f7da:	7892      	ldrb	r2, [r2, #2]
 800f7dc:	fba5 c101 	umull	ip, r1, r5, r1
 800f7e0:	0889      	lsrs	r1, r1, #2
 800f7e2:	fb00 3311 	mls	r3, r0, r1, r3
 800f7e6:	2a7e      	cmp	r2, #126	@ 0x7e
 800f7e8:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800f7ec:	f000 80aa 	beq.w	800f944 <uxr_read_framed_msg+0x510>
 800f7f0:	f082 0220 	eor.w	r2, r2, #32
 800f7f4:	e654      	b.n	800f4a0 <uxr_read_framed_msg+0x6c>
 800f7f6:	1c58      	adds	r0, r3, #1
 800f7f8:	0842      	lsrs	r2, r0, #1
 800f7fa:	fba5 c202 	umull	ip, r2, r5, r2
 800f7fe:	0892      	lsrs	r2, r2, #2
 800f800:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 800f804:	fb0c 0212 	mls	r2, ip, r2, r0
 800f808:	b2d0      	uxtb	r0, r2
 800f80a:	4281      	cmp	r1, r0
 800f80c:	d08f      	beq.n	800f72e <uxr_read_framed_msg+0x2fa>
 800f80e:	4422      	add	r2, r4
 800f810:	3302      	adds	r3, #2
 800f812:	7890      	ldrb	r0, [r2, #2]
 800f814:	085a      	lsrs	r2, r3, #1
 800f816:	fba5 1202 	umull	r1, r2, r5, r2
 800f81a:	0892      	lsrs	r2, r2, #2
 800f81c:	fb0c 3312 	mls	r3, ip, r2, r3
 800f820:	287e      	cmp	r0, #126	@ 0x7e
 800f822:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800f826:	d07d      	beq.n	800f924 <uxr_read_framed_msg+0x4f0>
 800f828:	f080 0020 	eor.w	r0, r0, #32
 800f82c:	e660      	b.n	800f4f0 <uxr_read_framed_msg+0xbc>
 800f82e:	1c59      	adds	r1, r3, #1
 800f830:	084a      	lsrs	r2, r1, #1
 800f832:	fba5 c202 	umull	ip, r2, r5, r2
 800f836:	0892      	lsrs	r2, r2, #2
 800f838:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 800f83c:	fb0c 1212 	mls	r2, ip, r2, r1
 800f840:	b2d1      	uxtb	r1, r2
 800f842:	4288      	cmp	r0, r1
 800f844:	f43f af64 	beq.w	800f710 <uxr_read_framed_msg+0x2dc>
 800f848:	4422      	add	r2, r4
 800f84a:	3302      	adds	r3, #2
 800f84c:	7891      	ldrb	r1, [r2, #2]
 800f84e:	085a      	lsrs	r2, r3, #1
 800f850:	fba5 0202 	umull	r0, r2, r5, r2
 800f854:	0892      	lsrs	r2, r2, #2
 800f856:	fb0c 3312 	mls	r3, ip, r2, r3
 800f85a:	297e      	cmp	r1, #126	@ 0x7e
 800f85c:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800f860:	d070      	beq.n	800f944 <uxr_read_framed_msg+0x510>
 800f862:	f081 0120 	eor.w	r1, r1, #32
 800f866:	e6a3      	b.n	800f5b0 <uxr_read_framed_msg+0x17c>
 800f868:	f103 0c01 	add.w	ip, r3, #1
 800f86c:	ea4f 025c 	mov.w	r2, ip, lsr #1
 800f870:	fba5 0202 	umull	r0, r2, r5, r2
 800f874:	0892      	lsrs	r2, r2, #2
 800f876:	202a      	movs	r0, #42	@ 0x2a
 800f878:	fb00 c212 	mls	r2, r0, r2, ip
 800f87c:	fa5f fc82 	uxtb.w	ip, r2
 800f880:	4561      	cmp	r1, ip
 800f882:	f43f af58 	beq.w	800f736 <uxr_read_framed_msg+0x302>
 800f886:	4422      	add	r2, r4
 800f888:	3302      	adds	r3, #2
 800f88a:	7891      	ldrb	r1, [r2, #2]
 800f88c:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 800f890:	085a      	lsrs	r2, r3, #1
 800f892:	fba5 c202 	umull	ip, r2, r5, r2
 800f896:	0892      	lsrs	r2, r2, #2
 800f898:	fb00 3312 	mls	r3, r0, r2, r3
 800f89c:	297e      	cmp	r1, #126	@ 0x7e
 800f89e:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800f8a2:	f43f af48 	beq.w	800f736 <uxr_read_framed_msg+0x302>
 800f8a6:	f081 0120 	eor.w	r1, r1, #32
 800f8aa:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 800f8ae:	e6e8      	b.n	800f682 <uxr_read_framed_msg+0x24e>
 800f8b0:	1c58      	adds	r0, r3, #1
 800f8b2:	0842      	lsrs	r2, r0, #1
 800f8b4:	fba5 c202 	umull	ip, r2, r5, r2
 800f8b8:	0892      	lsrs	r2, r2, #2
 800f8ba:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 800f8be:	fb0c 0212 	mls	r2, ip, r2, r0
 800f8c2:	b2d0      	uxtb	r0, r2
 800f8c4:	4281      	cmp	r1, r0
 800f8c6:	f43f af32 	beq.w	800f72e <uxr_read_framed_msg+0x2fa>
 800f8ca:	4422      	add	r2, r4
 800f8cc:	3302      	adds	r3, #2
 800f8ce:	7890      	ldrb	r0, [r2, #2]
 800f8d0:	085a      	lsrs	r2, r3, #1
 800f8d2:	fba5 1202 	umull	r1, r2, r5, r2
 800f8d6:	0892      	lsrs	r2, r2, #2
 800f8d8:	fb0c 3312 	mls	r3, ip, r2, r3
 800f8dc:	287e      	cmp	r0, #126	@ 0x7e
 800f8de:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 800f8e2:	d01f      	beq.n	800f924 <uxr_read_framed_msg+0x4f0>
 800f8e4:	f080 0020 	eor.w	r0, r0, #32
 800f8e8:	e68b      	b.n	800f602 <uxr_read_framed_msg+0x1ce>
 800f8ea:	1c51      	adds	r1, r2, #1
 800f8ec:	084b      	lsrs	r3, r1, #1
 800f8ee:	fba5 c303 	umull	ip, r3, r5, r3
 800f8f2:	089b      	lsrs	r3, r3, #2
 800f8f4:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 800f8f8:	fb0c 1313 	mls	r3, ip, r3, r1
 800f8fc:	b2d9      	uxtb	r1, r3
 800f8fe:	4288      	cmp	r0, r1
 800f900:	f43f af3d 	beq.w	800f77e <uxr_read_framed_msg+0x34a>
 800f904:	3202      	adds	r2, #2
 800f906:	4423      	add	r3, r4
 800f908:	0850      	lsrs	r0, r2, #1
 800f90a:	789b      	ldrb	r3, [r3, #2]
 800f90c:	fba5 1000 	umull	r1, r0, r5, r0
 800f910:	0880      	lsrs	r0, r0, #2
 800f912:	fb0c 2210 	mls	r2, ip, r0, r2
 800f916:	2b7e      	cmp	r3, #126	@ 0x7e
 800f918:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 800f91c:	d016      	beq.n	800f94c <uxr_read_framed_msg+0x518>
 800f91e:	f083 0120 	eor.w	r1, r3, #32
 800f922:	e68b      	b.n	800f63c <uxr_read_framed_msg+0x208>
 800f924:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f926:	9300      	str	r3, [sp, #0]
 800f928:	2302      	movs	r3, #2
 800f92a:	9301      	str	r3, [sp, #4]
 800f92c:	464a      	mov	r2, r9
 800f92e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f930:	4641      	mov	r1, r8
 800f932:	4620      	mov	r0, r4
 800f934:	f7ff fcfc 	bl	800f330 <uxr_framing_read_transport>
 800f938:	2800      	cmp	r0, #0
 800f93a:	f47f aef6 	bne.w	800f72a <uxr_read_framed_msg+0x2f6>
 800f93e:	2301      	movs	r3, #1
 800f940:	7023      	strb	r3, [r4, #0]
 800f942:	e588      	b.n	800f456 <uxr_read_framed_msg+0x22>
 800f944:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f946:	9300      	str	r3, [sp, #0]
 800f948:	2301      	movs	r3, #1
 800f94a:	e7ee      	b.n	800f92a <uxr_read_framed_msg+0x4f6>
 800f94c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f94e:	9300      	str	r3, [sp, #0]
 800f950:	2303      	movs	r3, #3
 800f952:	e7ea      	b.n	800f92a <uxr_read_framed_msg+0x4f6>
 800f954:	ee17 8a90 	vmov	r8, s15
 800f958:	e6ae      	b.n	800f6b8 <uxr_read_framed_msg+0x284>
 800f95a:	bf00      	nop

0800f95c <rcl_get_default_domain_id>:
 800f95c:	b530      	push	{r4, r5, lr}
 800f95e:	b083      	sub	sp, #12
 800f960:	2300      	movs	r3, #0
 800f962:	9300      	str	r3, [sp, #0]
 800f964:	b1d0      	cbz	r0, 800f99c <rcl_get_default_domain_id+0x40>
 800f966:	4604      	mov	r4, r0
 800f968:	4669      	mov	r1, sp
 800f96a:	4815      	ldr	r0, [pc, #84]	@ (800f9c0 <rcl_get_default_domain_id+0x64>)
 800f96c:	f7fd f920 	bl	800cbb0 <rcutils_get_env>
 800f970:	4602      	mov	r2, r0
 800f972:	b110      	cbz	r0, 800f97a <rcl_get_default_domain_id+0x1e>
 800f974:	2001      	movs	r0, #1
 800f976:	b003      	add	sp, #12
 800f978:	bd30      	pop	{r4, r5, pc}
 800f97a:	9b00      	ldr	r3, [sp, #0]
 800f97c:	b18b      	cbz	r3, 800f9a2 <rcl_get_default_domain_id+0x46>
 800f97e:	7818      	ldrb	r0, [r3, #0]
 800f980:	2800      	cmp	r0, #0
 800f982:	d0f8      	beq.n	800f976 <rcl_get_default_domain_id+0x1a>
 800f984:	a901      	add	r1, sp, #4
 800f986:	4618      	mov	r0, r3
 800f988:	9201      	str	r2, [sp, #4]
 800f98a:	f000 fe83 	bl	8010694 <strtoul>
 800f98e:	4605      	mov	r5, r0
 800f990:	b150      	cbz	r0, 800f9a8 <rcl_get_default_domain_id+0x4c>
 800f992:	1c43      	adds	r3, r0, #1
 800f994:	d00d      	beq.n	800f9b2 <rcl_get_default_domain_id+0x56>
 800f996:	6025      	str	r5, [r4, #0]
 800f998:	2000      	movs	r0, #0
 800f99a:	e7ec      	b.n	800f976 <rcl_get_default_domain_id+0x1a>
 800f99c:	200b      	movs	r0, #11
 800f99e:	b003      	add	sp, #12
 800f9a0:	bd30      	pop	{r4, r5, pc}
 800f9a2:	4618      	mov	r0, r3
 800f9a4:	b003      	add	sp, #12
 800f9a6:	bd30      	pop	{r4, r5, pc}
 800f9a8:	9b01      	ldr	r3, [sp, #4]
 800f9aa:	781b      	ldrb	r3, [r3, #0]
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	d0f2      	beq.n	800f996 <rcl_get_default_domain_id+0x3a>
 800f9b0:	e7e0      	b.n	800f974 <rcl_get_default_domain_id+0x18>
 800f9b2:	f001 f897 	bl	8010ae4 <__errno>
 800f9b6:	6803      	ldr	r3, [r0, #0]
 800f9b8:	2b22      	cmp	r3, #34	@ 0x22
 800f9ba:	d1ec      	bne.n	800f996 <rcl_get_default_domain_id+0x3a>
 800f9bc:	e7da      	b.n	800f974 <rcl_get_default_domain_id+0x18>
 800f9be:	bf00      	nop
 800f9c0:	08011fa4 	.word	0x08011fa4

0800f9c4 <rcl_expand_topic_name>:
 800f9c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9c8:	b08b      	sub	sp, #44	@ 0x2c
 800f9ca:	9306      	str	r3, [sp, #24]
 800f9cc:	2800      	cmp	r0, #0
 800f9ce:	f000 80ad 	beq.w	800fb2c <rcl_expand_topic_name+0x168>
 800f9d2:	460e      	mov	r6, r1
 800f9d4:	2900      	cmp	r1, #0
 800f9d6:	f000 80a9 	beq.w	800fb2c <rcl_expand_topic_name+0x168>
 800f9da:	4617      	mov	r7, r2
 800f9dc:	2a00      	cmp	r2, #0
 800f9de:	f000 80a5 	beq.w	800fb2c <rcl_expand_topic_name+0x168>
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	f000 80a2 	beq.w	800fb2c <rcl_expand_topic_name+0x168>
 800f9e8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	f000 809e 	beq.w	800fb2c <rcl_expand_topic_name+0x168>
 800f9f0:	2200      	movs	r2, #0
 800f9f2:	a909      	add	r1, sp, #36	@ 0x24
 800f9f4:	4680      	mov	r8, r0
 800f9f6:	f000 f9f5 	bl	800fde4 <rcl_validate_topic_name>
 800f9fa:	4604      	mov	r4, r0
 800f9fc:	2800      	cmp	r0, #0
 800f9fe:	f040 8096 	bne.w	800fb2e <rcl_expand_topic_name+0x16a>
 800fa02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	f040 809a 	bne.w	800fb3e <rcl_expand_topic_name+0x17a>
 800fa0a:	4602      	mov	r2, r0
 800fa0c:	a909      	add	r1, sp, #36	@ 0x24
 800fa0e:	4630      	mov	r0, r6
 800fa10:	f7fd fcc0 	bl	800d394 <rmw_validate_node_name>
 800fa14:	2800      	cmp	r0, #0
 800fa16:	f040 808e 	bne.w	800fb36 <rcl_expand_topic_name+0x172>
 800fa1a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fa1c:	2a00      	cmp	r2, #0
 800fa1e:	f040 8093 	bne.w	800fb48 <rcl_expand_topic_name+0x184>
 800fa22:	a909      	add	r1, sp, #36	@ 0x24
 800fa24:	4638      	mov	r0, r7
 800fa26:	f7fd fc97 	bl	800d358 <rmw_validate_namespace>
 800fa2a:	2800      	cmp	r0, #0
 800fa2c:	f040 8083 	bne.w	800fb36 <rcl_expand_topic_name+0x172>
 800fa30:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800fa32:	2c00      	cmp	r4, #0
 800fa34:	f040 80ed 	bne.w	800fc12 <rcl_expand_topic_name+0x24e>
 800fa38:	217b      	movs	r1, #123	@ 0x7b
 800fa3a:	4640      	mov	r0, r8
 800fa3c:	f000 ffc6 	bl	80109cc <strchr>
 800fa40:	f898 3000 	ldrb.w	r3, [r8]
 800fa44:	2b2f      	cmp	r3, #47	@ 0x2f
 800fa46:	4605      	mov	r5, r0
 800fa48:	f000 809e 	beq.w	800fb88 <rcl_expand_topic_name+0x1c4>
 800fa4c:	2b7e      	cmp	r3, #126	@ 0x7e
 800fa4e:	f040 80a2 	bne.w	800fb96 <rcl_expand_topic_name+0x1d2>
 800fa52:	4638      	mov	r0, r7
 800fa54:	f7f0 fbe6 	bl	8000224 <strlen>
 800fa58:	4a82      	ldr	r2, [pc, #520]	@ (800fc64 <rcl_expand_topic_name+0x2a0>)
 800fa5a:	4b83      	ldr	r3, [pc, #524]	@ (800fc68 <rcl_expand_topic_name+0x2a4>)
 800fa5c:	2801      	cmp	r0, #1
 800fa5e:	bf18      	it	ne
 800fa60:	4613      	movne	r3, r2
 800fa62:	9302      	str	r3, [sp, #8]
 800fa64:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 800fa66:	9300      	str	r3, [sp, #0]
 800fa68:	e9cd 7603 	strd	r7, r6, [sp, #12]
 800fa6c:	f108 0301 	add.w	r3, r8, #1
 800fa70:	9305      	str	r3, [sp, #20]
 800fa72:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800fa76:	9301      	str	r3, [sp, #4]
 800fa78:	ab14      	add	r3, sp, #80	@ 0x50
 800fa7a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fa7c:	f7fd f8b0 	bl	800cbe0 <rcutils_format_string_limit>
 800fa80:	4682      	mov	sl, r0
 800fa82:	2800      	cmp	r0, #0
 800fa84:	f000 80c7 	beq.w	800fc16 <rcl_expand_topic_name+0x252>
 800fa88:	2d00      	cmp	r5, #0
 800fa8a:	f000 80a2 	beq.w	800fbd2 <rcl_expand_topic_name+0x20e>
 800fa8e:	217b      	movs	r1, #123	@ 0x7b
 800fa90:	f000 ff9c 	bl	80109cc <strchr>
 800fa94:	46d1      	mov	r9, sl
 800fa96:	4605      	mov	r5, r0
 800fa98:	9407      	str	r4, [sp, #28]
 800fa9a:	46d3      	mov	fp, sl
 800fa9c:	464c      	mov	r4, r9
 800fa9e:	2d00      	cmp	r5, #0
 800faa0:	f000 80be 	beq.w	800fc20 <rcl_expand_topic_name+0x25c>
 800faa4:	217d      	movs	r1, #125	@ 0x7d
 800faa6:	4620      	mov	r0, r4
 800faa8:	f000 ff90 	bl	80109cc <strchr>
 800faac:	eba0 0905 	sub.w	r9, r0, r5
 800fab0:	f109 0a01 	add.w	sl, r9, #1
 800fab4:	486d      	ldr	r0, [pc, #436]	@ (800fc6c <rcl_expand_topic_name+0x2a8>)
 800fab6:	4652      	mov	r2, sl
 800fab8:	4629      	mov	r1, r5
 800faba:	f000 ff94 	bl	80109e6 <strncmp>
 800fabe:	2800      	cmp	r0, #0
 800fac0:	d067      	beq.n	800fb92 <rcl_expand_topic_name+0x1ce>
 800fac2:	486b      	ldr	r0, [pc, #428]	@ (800fc70 <rcl_expand_topic_name+0x2ac>)
 800fac4:	4652      	mov	r2, sl
 800fac6:	4629      	mov	r1, r5
 800fac8:	f000 ff8d 	bl	80109e6 <strncmp>
 800facc:	b130      	cbz	r0, 800fadc <rcl_expand_topic_name+0x118>
 800face:	4869      	ldr	r0, [pc, #420]	@ (800fc74 <rcl_expand_topic_name+0x2b0>)
 800fad0:	4652      	mov	r2, sl
 800fad2:	4629      	mov	r1, r5
 800fad4:	f000 ff87 	bl	80109e6 <strncmp>
 800fad8:	2800      	cmp	r0, #0
 800fada:	d137      	bne.n	800fb4c <rcl_expand_topic_name+0x188>
 800fadc:	46b9      	mov	r9, r7
 800fade:	ab16      	add	r3, sp, #88	@ 0x58
 800fae0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800fae4:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800fae8:	ab14      	add	r3, sp, #80	@ 0x50
 800faea:	4628      	mov	r0, r5
 800faec:	cb0c      	ldmia	r3, {r2, r3}
 800faee:	4651      	mov	r1, sl
 800faf0:	f7fd f9b2 	bl	800ce58 <rcutils_strndup>
 800faf4:	4605      	mov	r5, r0
 800faf6:	2800      	cmp	r0, #0
 800faf8:	f000 809c 	beq.w	800fc34 <rcl_expand_topic_name+0x270>
 800fafc:	464a      	mov	r2, r9
 800fafe:	4620      	mov	r0, r4
 800fb00:	ab14      	add	r3, sp, #80	@ 0x50
 800fb02:	4629      	mov	r1, r5
 800fb04:	f7fd f8a6 	bl	800cc54 <rcutils_repl_str>
 800fb08:	9918      	ldr	r1, [sp, #96]	@ 0x60
 800fb0a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800fb0c:	4604      	mov	r4, r0
 800fb0e:	4628      	mov	r0, r5
 800fb10:	4798      	blx	r3
 800fb12:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800fb14:	9918      	ldr	r1, [sp, #96]	@ 0x60
 800fb16:	4658      	mov	r0, fp
 800fb18:	4798      	blx	r3
 800fb1a:	2c00      	cmp	r4, #0
 800fb1c:	d07b      	beq.n	800fc16 <rcl_expand_topic_name+0x252>
 800fb1e:	217b      	movs	r1, #123	@ 0x7b
 800fb20:	4620      	mov	r0, r4
 800fb22:	f000 ff53 	bl	80109cc <strchr>
 800fb26:	46a3      	mov	fp, r4
 800fb28:	4605      	mov	r5, r0
 800fb2a:	e7b8      	b.n	800fa9e <rcl_expand_topic_name+0xda>
 800fb2c:	240b      	movs	r4, #11
 800fb2e:	4620      	mov	r0, r4
 800fb30:	b00b      	add	sp, #44	@ 0x2c
 800fb32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb36:	f7fc fa97 	bl	800c068 <rcl_convert_rmw_ret_to_rcl_ret>
 800fb3a:	4604      	mov	r4, r0
 800fb3c:	e7f7      	b.n	800fb2e <rcl_expand_topic_name+0x16a>
 800fb3e:	2467      	movs	r4, #103	@ 0x67
 800fb40:	4620      	mov	r0, r4
 800fb42:	b00b      	add	sp, #44	@ 0x2c
 800fb44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb48:	24c9      	movs	r4, #201	@ 0xc9
 800fb4a:	e7f0      	b.n	800fb2e <rcl_expand_topic_name+0x16a>
 800fb4c:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 800fb50:	9806      	ldr	r0, [sp, #24]
 800fb52:	1c69      	adds	r1, r5, #1
 800fb54:	f7fd fa9a 	bl	800d08c <rcutils_string_map_getn>
 800fb58:	4681      	mov	r9, r0
 800fb5a:	2800      	cmp	r0, #0
 800fb5c:	d1bf      	bne.n	800fade <rcl_expand_topic_name+0x11a>
 800fb5e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fb60:	aa16      	add	r2, sp, #88	@ 0x58
 800fb62:	6018      	str	r0, [r3, #0]
 800fb64:	ca07      	ldmia	r2, {r0, r1, r2}
 800fb66:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800fb6a:	ab14      	add	r3, sp, #80	@ 0x50
 800fb6c:	cb0c      	ldmia	r3, {r2, r3}
 800fb6e:	4651      	mov	r1, sl
 800fb70:	4628      	mov	r0, r5
 800fb72:	f7fd f971 	bl	800ce58 <rcutils_strndup>
 800fb76:	9918      	ldr	r1, [sp, #96]	@ 0x60
 800fb78:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800fb7a:	4798      	blx	r3
 800fb7c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800fb7e:	9918      	ldr	r1, [sp, #96]	@ 0x60
 800fb80:	4658      	mov	r0, fp
 800fb82:	2469      	movs	r4, #105	@ 0x69
 800fb84:	4798      	blx	r3
 800fb86:	e7d2      	b.n	800fb2e <rcl_expand_topic_name+0x16a>
 800fb88:	2800      	cmp	r0, #0
 800fb8a:	d05b      	beq.n	800fc44 <rcl_expand_topic_name+0x280>
 800fb8c:	46c1      	mov	r9, r8
 800fb8e:	46a2      	mov	sl, r4
 800fb90:	e782      	b.n	800fa98 <rcl_expand_topic_name+0xd4>
 800fb92:	46b1      	mov	r9, r6
 800fb94:	e7a3      	b.n	800fade <rcl_expand_topic_name+0x11a>
 800fb96:	2800      	cmp	r0, #0
 800fb98:	d1f8      	bne.n	800fb8c <rcl_expand_topic_name+0x1c8>
 800fb9a:	4638      	mov	r0, r7
 800fb9c:	f7f0 fb42 	bl	8000224 <strlen>
 800fba0:	4a35      	ldr	r2, [pc, #212]	@ (800fc78 <rcl_expand_topic_name+0x2b4>)
 800fba2:	4b36      	ldr	r3, [pc, #216]	@ (800fc7c <rcl_expand_topic_name+0x2b8>)
 800fba4:	f8cd 8010 	str.w	r8, [sp, #16]
 800fba8:	2801      	cmp	r0, #1
 800fbaa:	bf18      	it	ne
 800fbac:	4613      	movne	r3, r2
 800fbae:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800fbb2:	e9cd 1301 	strd	r1, r3, [sp, #4]
 800fbb6:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800fbb8:	9703      	str	r7, [sp, #12]
 800fbba:	9200      	str	r2, [sp, #0]
 800fbbc:	ab14      	add	r3, sp, #80	@ 0x50
 800fbbe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fbc0:	f7fd f80e 	bl	800cbe0 <rcutils_format_string_limit>
 800fbc4:	4682      	mov	sl, r0
 800fbc6:	4653      	mov	r3, sl
 800fbc8:	b32b      	cbz	r3, 800fc16 <rcl_expand_topic_name+0x252>
 800fbca:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fbcc:	f8c3 a000 	str.w	sl, [r3]
 800fbd0:	e7ad      	b.n	800fb2e <rcl_expand_topic_name+0x16a>
 800fbd2:	f89a 3000 	ldrb.w	r3, [sl]
 800fbd6:	2b2f      	cmp	r3, #47	@ 0x2f
 800fbd8:	d0f7      	beq.n	800fbca <rcl_expand_topic_name+0x206>
 800fbda:	4638      	mov	r0, r7
 800fbdc:	f7f0 fb22 	bl	8000224 <strlen>
 800fbe0:	4a25      	ldr	r2, [pc, #148]	@ (800fc78 <rcl_expand_topic_name+0x2b4>)
 800fbe2:	4b26      	ldr	r3, [pc, #152]	@ (800fc7c <rcl_expand_topic_name+0x2b8>)
 800fbe4:	f8cd a010 	str.w	sl, [sp, #16]
 800fbe8:	2801      	cmp	r0, #1
 800fbea:	bf18      	it	ne
 800fbec:	4613      	movne	r3, r2
 800fbee:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800fbf2:	e9cd 1301 	strd	r1, r3, [sp, #4]
 800fbf6:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800fbf8:	9703      	str	r7, [sp, #12]
 800fbfa:	9200      	str	r2, [sp, #0]
 800fbfc:	ab14      	add	r3, sp, #80	@ 0x50
 800fbfe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fc00:	f7fc ffee 	bl	800cbe0 <rcutils_format_string_limit>
 800fc04:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800fc06:	9918      	ldr	r1, [sp, #96]	@ 0x60
 800fc08:	4605      	mov	r5, r0
 800fc0a:	4650      	mov	r0, sl
 800fc0c:	4798      	blx	r3
 800fc0e:	46aa      	mov	sl, r5
 800fc10:	e7d9      	b.n	800fbc6 <rcl_expand_topic_name+0x202>
 800fc12:	24ca      	movs	r4, #202	@ 0xca
 800fc14:	e78b      	b.n	800fb2e <rcl_expand_topic_name+0x16a>
 800fc16:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800fc18:	2300      	movs	r3, #0
 800fc1a:	6013      	str	r3, [r2, #0]
 800fc1c:	240a      	movs	r4, #10
 800fc1e:	e786      	b.n	800fb2e <rcl_expand_topic_name+0x16a>
 800fc20:	465b      	mov	r3, fp
 800fc22:	9c07      	ldr	r4, [sp, #28]
 800fc24:	46da      	mov	sl, fp
 800fc26:	2b00      	cmp	r3, #0
 800fc28:	d1d3      	bne.n	800fbd2 <rcl_expand_topic_name+0x20e>
 800fc2a:	f898 3000 	ldrb.w	r3, [r8]
 800fc2e:	2b2f      	cmp	r3, #47	@ 0x2f
 800fc30:	d0cb      	beq.n	800fbca <rcl_expand_topic_name+0x206>
 800fc32:	e7b2      	b.n	800fb9a <rcl_expand_topic_name+0x1d6>
 800fc34:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	@ 0x60
 800fc38:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800fc3a:	6015      	str	r5, [r2, #0]
 800fc3c:	4658      	mov	r0, fp
 800fc3e:	4798      	blx	r3
 800fc40:	240a      	movs	r4, #10
 800fc42:	e774      	b.n	800fb2e <rcl_expand_topic_name+0x16a>
 800fc44:	ab17      	add	r3, sp, #92	@ 0x5c
 800fc46:	e893 0003 	ldmia.w	r3, {r0, r1}
 800fc4a:	e88d 0003 	stmia.w	sp, {r0, r1}
 800fc4e:	ab14      	add	r3, sp, #80	@ 0x50
 800fc50:	cb0e      	ldmia	r3, {r1, r2, r3}
 800fc52:	4640      	mov	r0, r8
 800fc54:	f7fd f8de 	bl	800ce14 <rcutils_strdup>
 800fc58:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fc5a:	2800      	cmp	r0, #0
 800fc5c:	6018      	str	r0, [r3, #0]
 800fc5e:	bf08      	it	eq
 800fc60:	240a      	moveq	r4, #10
 800fc62:	e764      	b.n	800fb2e <rcl_expand_topic_name+0x16a>
 800fc64:	08011fb4 	.word	0x08011fb4
 800fc68:	08011b08 	.word	0x08011b08
 800fc6c:	08011fbc 	.word	0x08011fbc
 800fc70:	08011fc4 	.word	0x08011fc4
 800fc74:	08011fcc 	.word	0x08011fcc
 800fc78:	08011c50 	.word	0x08011c50
 800fc7c:	08011b18 	.word	0x08011b18

0800fc80 <rcl_get_default_topic_name_substitutions>:
 800fc80:	2800      	cmp	r0, #0
 800fc82:	bf0c      	ite	eq
 800fc84:	200b      	moveq	r0, #11
 800fc86:	2000      	movne	r0, #0
 800fc88:	4770      	bx	lr
 800fc8a:	bf00      	nop

0800fc8c <rcl_get_zero_initialized_guard_condition>:
 800fc8c:	4a03      	ldr	r2, [pc, #12]	@ (800fc9c <rcl_get_zero_initialized_guard_condition+0x10>)
 800fc8e:	4603      	mov	r3, r0
 800fc90:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fc94:	e883 0003 	stmia.w	r3, {r0, r1}
 800fc98:	4618      	mov	r0, r3
 800fc9a:	4770      	bx	lr
 800fc9c:	08012264 	.word	0x08012264

0800fca0 <rcl_guard_condition_init_from_rmw>:
 800fca0:	b082      	sub	sp, #8
 800fca2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fca6:	b086      	sub	sp, #24
 800fca8:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800fcac:	4604      	mov	r4, r0
 800fcae:	f84c 3f04 	str.w	r3, [ip, #4]!
 800fcb2:	460e      	mov	r6, r1
 800fcb4:	4617      	mov	r7, r2
 800fcb6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800fcba:	f10d 0e04 	add.w	lr, sp, #4
 800fcbe:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800fcc2:	f8dc 3000 	ldr.w	r3, [ip]
 800fcc6:	f8ce 3000 	str.w	r3, [lr]
 800fcca:	a801      	add	r0, sp, #4
 800fccc:	f7f7 ffce 	bl	8007c6c <rcutils_allocator_is_valid>
 800fcd0:	b350      	cbz	r0, 800fd28 <rcl_guard_condition_init_from_rmw+0x88>
 800fcd2:	b34c      	cbz	r4, 800fd28 <rcl_guard_condition_init_from_rmw+0x88>
 800fcd4:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800fcd8:	f1b8 0f00 	cmp.w	r8, #0
 800fcdc:	d11e      	bne.n	800fd1c <rcl_guard_condition_init_from_rmw+0x7c>
 800fcde:	b31f      	cbz	r7, 800fd28 <rcl_guard_condition_init_from_rmw+0x88>
 800fce0:	4638      	mov	r0, r7
 800fce2:	f7fc f9df 	bl	800c0a4 <rcl_context_is_valid>
 800fce6:	b328      	cbz	r0, 800fd34 <rcl_guard_condition_init_from_rmw+0x94>
 800fce8:	9b01      	ldr	r3, [sp, #4]
 800fcea:	9905      	ldr	r1, [sp, #20]
 800fcec:	201c      	movs	r0, #28
 800fcee:	4798      	blx	r3
 800fcf0:	4605      	mov	r5, r0
 800fcf2:	6060      	str	r0, [r4, #4]
 800fcf4:	b358      	cbz	r0, 800fd4e <rcl_guard_condition_init_from_rmw+0xae>
 800fcf6:	b1fe      	cbz	r6, 800fd38 <rcl_guard_condition_init_from_rmw+0x98>
 800fcf8:	6006      	str	r6, [r0, #0]
 800fcfa:	f880 8004 	strb.w	r8, [r0, #4]
 800fcfe:	ac01      	add	r4, sp, #4
 800fd00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fd02:	f105 0c08 	add.w	ip, r5, #8
 800fd06:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fd0a:	6823      	ldr	r3, [r4, #0]
 800fd0c:	f8cc 3000 	str.w	r3, [ip]
 800fd10:	2000      	movs	r0, #0
 800fd12:	b006      	add	sp, #24
 800fd14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fd18:	b002      	add	sp, #8
 800fd1a:	4770      	bx	lr
 800fd1c:	2064      	movs	r0, #100	@ 0x64
 800fd1e:	b006      	add	sp, #24
 800fd20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fd24:	b002      	add	sp, #8
 800fd26:	4770      	bx	lr
 800fd28:	200b      	movs	r0, #11
 800fd2a:	b006      	add	sp, #24
 800fd2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fd30:	b002      	add	sp, #8
 800fd32:	4770      	bx	lr
 800fd34:	2065      	movs	r0, #101	@ 0x65
 800fd36:	e7f2      	b.n	800fd1e <rcl_guard_condition_init_from_rmw+0x7e>
 800fd38:	6838      	ldr	r0, [r7, #0]
 800fd3a:	3028      	adds	r0, #40	@ 0x28
 800fd3c:	f000 fa50 	bl	80101e0 <rmw_create_guard_condition>
 800fd40:	6028      	str	r0, [r5, #0]
 800fd42:	6865      	ldr	r5, [r4, #4]
 800fd44:	682e      	ldr	r6, [r5, #0]
 800fd46:	b126      	cbz	r6, 800fd52 <rcl_guard_condition_init_from_rmw+0xb2>
 800fd48:	2301      	movs	r3, #1
 800fd4a:	712b      	strb	r3, [r5, #4]
 800fd4c:	e7d7      	b.n	800fcfe <rcl_guard_condition_init_from_rmw+0x5e>
 800fd4e:	200a      	movs	r0, #10
 800fd50:	e7e5      	b.n	800fd1e <rcl_guard_condition_init_from_rmw+0x7e>
 800fd52:	4628      	mov	r0, r5
 800fd54:	9b02      	ldr	r3, [sp, #8]
 800fd56:	9905      	ldr	r1, [sp, #20]
 800fd58:	4798      	blx	r3
 800fd5a:	6066      	str	r6, [r4, #4]
 800fd5c:	2001      	movs	r0, #1
 800fd5e:	e7de      	b.n	800fd1e <rcl_guard_condition_init_from_rmw+0x7e>

0800fd60 <rcl_guard_condition_fini>:
 800fd60:	b570      	push	{r4, r5, r6, lr}
 800fd62:	b082      	sub	sp, #8
 800fd64:	b1f0      	cbz	r0, 800fda4 <rcl_guard_condition_fini+0x44>
 800fd66:	6843      	ldr	r3, [r0, #4]
 800fd68:	4604      	mov	r4, r0
 800fd6a:	b163      	cbz	r3, 800fd86 <rcl_guard_condition_fini+0x26>
 800fd6c:	6818      	ldr	r0, [r3, #0]
 800fd6e:	68de      	ldr	r6, [r3, #12]
 800fd70:	6999      	ldr	r1, [r3, #24]
 800fd72:	b160      	cbz	r0, 800fd8e <rcl_guard_condition_fini+0x2e>
 800fd74:	791d      	ldrb	r5, [r3, #4]
 800fd76:	b965      	cbnz	r5, 800fd92 <rcl_guard_condition_fini+0x32>
 800fd78:	4618      	mov	r0, r3
 800fd7a:	47b0      	blx	r6
 800fd7c:	2300      	movs	r3, #0
 800fd7e:	4628      	mov	r0, r5
 800fd80:	6063      	str	r3, [r4, #4]
 800fd82:	b002      	add	sp, #8
 800fd84:	bd70      	pop	{r4, r5, r6, pc}
 800fd86:	461d      	mov	r5, r3
 800fd88:	4628      	mov	r0, r5
 800fd8a:	b002      	add	sp, #8
 800fd8c:	bd70      	pop	{r4, r5, r6, pc}
 800fd8e:	4605      	mov	r5, r0
 800fd90:	e7f2      	b.n	800fd78 <rcl_guard_condition_fini+0x18>
 800fd92:	9101      	str	r1, [sp, #4]
 800fd94:	f000 fa38 	bl	8010208 <rmw_destroy_guard_condition>
 800fd98:	1e05      	subs	r5, r0, #0
 800fd9a:	6863      	ldr	r3, [r4, #4]
 800fd9c:	9901      	ldr	r1, [sp, #4]
 800fd9e:	bf18      	it	ne
 800fda0:	2501      	movne	r5, #1
 800fda2:	e7e9      	b.n	800fd78 <rcl_guard_condition_fini+0x18>
 800fda4:	250b      	movs	r5, #11
 800fda6:	4628      	mov	r0, r5
 800fda8:	b002      	add	sp, #8
 800fdaa:	bd70      	pop	{r4, r5, r6, pc}

0800fdac <rcl_guard_condition_get_default_options>:
 800fdac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fdae:	b087      	sub	sp, #28
 800fdb0:	4606      	mov	r6, r0
 800fdb2:	4668      	mov	r0, sp
 800fdb4:	f7f7 ff4c 	bl	8007c50 <rcutils_get_default_allocator>
 800fdb8:	4b09      	ldr	r3, [pc, #36]	@ (800fde0 <rcl_guard_condition_get_default_options+0x34>)
 800fdba:	46ee      	mov	lr, sp
 800fdbc:	469c      	mov	ip, r3
 800fdbe:	461d      	mov	r5, r3
 800fdc0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800fdc4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fdc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fdca:	4634      	mov	r4, r6
 800fdcc:	f8de 7000 	ldr.w	r7, [lr]
 800fdd0:	f8cc 7000 	str.w	r7, [ip]
 800fdd4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fdd6:	4630      	mov	r0, r6
 800fdd8:	6027      	str	r7, [r4, #0]
 800fdda:	b007      	add	sp, #28
 800fddc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fdde:	bf00      	nop
 800fde0:	2000dafc 	.word	0x2000dafc

0800fde4 <rcl_validate_topic_name>:
 800fde4:	2800      	cmp	r0, #0
 800fde6:	d07a      	beq.n	800fede <rcl_validate_topic_name+0xfa>
 800fde8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fdec:	460e      	mov	r6, r1
 800fdee:	2900      	cmp	r1, #0
 800fdf0:	d07c      	beq.n	800feec <rcl_validate_topic_name+0x108>
 800fdf2:	4617      	mov	r7, r2
 800fdf4:	4605      	mov	r5, r0
 800fdf6:	f7f0 fa15 	bl	8000224 <strlen>
 800fdfa:	b1b0      	cbz	r0, 800fe2a <rcl_validate_topic_name+0x46>
 800fdfc:	f895 9000 	ldrb.w	r9, [r5]
 800fe00:	f8df c180 	ldr.w	ip, [pc, #384]	@ 800ff84 <rcl_validate_topic_name+0x1a0>
 800fe04:	f81c 3009 	ldrb.w	r3, [ip, r9]
 800fe08:	f013 0304 	ands.w	r3, r3, #4
 800fe0c:	d169      	bne.n	800fee2 <rcl_validate_topic_name+0xfe>
 800fe0e:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 800fe12:	f815 2008 	ldrb.w	r2, [r5, r8]
 800fe16:	2a2f      	cmp	r2, #47	@ 0x2f
 800fe18:	d10e      	bne.n	800fe38 <rcl_validate_topic_name+0x54>
 800fe1a:	2202      	movs	r2, #2
 800fe1c:	6032      	str	r2, [r6, #0]
 800fe1e:	b36f      	cbz	r7, 800fe7c <rcl_validate_topic_name+0x98>
 800fe20:	f8c7 8000 	str.w	r8, [r7]
 800fe24:	4618      	mov	r0, r3
 800fe26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe2a:	2301      	movs	r3, #1
 800fe2c:	6033      	str	r3, [r6, #0]
 800fe2e:	b32f      	cbz	r7, 800fe7c <rcl_validate_topic_name+0x98>
 800fe30:	2000      	movs	r0, #0
 800fe32:	6038      	str	r0, [r7, #0]
 800fe34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe38:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 800fe3c:	461c      	mov	r4, r3
 800fe3e:	4619      	mov	r1, r3
 800fe40:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 800fe44:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800fe48:	f1be 0f09 	cmp.w	lr, #9
 800fe4c:	d919      	bls.n	800fe82 <rcl_validate_topic_name+0x9e>
 800fe4e:	f022 0e20 	bic.w	lr, r2, #32
 800fe52:	f1ae 0e41 	sub.w	lr, lr, #65	@ 0x41
 800fe56:	f1be 0f19 	cmp.w	lr, #25
 800fe5a:	d912      	bls.n	800fe82 <rcl_validate_topic_name+0x9e>
 800fe5c:	2a5f      	cmp	r2, #95	@ 0x5f
 800fe5e:	d019      	beq.n	800fe94 <rcl_validate_topic_name+0xb0>
 800fe60:	2a2f      	cmp	r2, #47	@ 0x2f
 800fe62:	d051      	beq.n	800ff08 <rcl_validate_topic_name+0x124>
 800fe64:	2a7e      	cmp	r2, #126	@ 0x7e
 800fe66:	d048      	beq.n	800fefa <rcl_validate_topic_name+0x116>
 800fe68:	2a7b      	cmp	r2, #123	@ 0x7b
 800fe6a:	d054      	beq.n	800ff16 <rcl_validate_topic_name+0x132>
 800fe6c:	2a7d      	cmp	r2, #125	@ 0x7d
 800fe6e:	d161      	bne.n	800ff34 <rcl_validate_topic_name+0x150>
 800fe70:	2c00      	cmp	r4, #0
 800fe72:	d155      	bne.n	800ff20 <rcl_validate_topic_name+0x13c>
 800fe74:	2305      	movs	r3, #5
 800fe76:	6033      	str	r3, [r6, #0]
 800fe78:	b107      	cbz	r7, 800fe7c <rcl_validate_topic_name+0x98>
 800fe7a:	6039      	str	r1, [r7, #0]
 800fe7c:	2000      	movs	r0, #0
 800fe7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe82:	f81c 2002 	ldrb.w	r2, [ip, r2]
 800fe86:	0752      	lsls	r2, r2, #29
 800fe88:	d504      	bpl.n	800fe94 <rcl_validate_topic_name+0xb0>
 800fe8a:	b11c      	cbz	r4, 800fe94 <rcl_validate_topic_name+0xb0>
 800fe8c:	b111      	cbz	r1, 800fe94 <rcl_validate_topic_name+0xb0>
 800fe8e:	1e4a      	subs	r2, r1, #1
 800fe90:	429a      	cmp	r2, r3
 800fe92:	d02d      	beq.n	800fef0 <rcl_validate_topic_name+0x10c>
 800fe94:	3101      	adds	r1, #1
 800fe96:	4288      	cmp	r0, r1
 800fe98:	d1d2      	bne.n	800fe40 <rcl_validate_topic_name+0x5c>
 800fe9a:	2c00      	cmp	r4, #0
 800fe9c:	d145      	bne.n	800ff2a <rcl_validate_topic_name+0x146>
 800fe9e:	f1b9 0f7e 	cmp.w	r9, #126	@ 0x7e
 800fea2:	d04f      	beq.n	800ff44 <rcl_validate_topic_name+0x160>
 800fea4:	4620      	mov	r0, r4
 800fea6:	2301      	movs	r3, #1
 800fea8:	e006      	b.n	800feb8 <rcl_validate_topic_name+0xd4>
 800feaa:	428b      	cmp	r3, r1
 800feac:	f105 0501 	add.w	r5, r5, #1
 800feb0:	f103 0201 	add.w	r2, r3, #1
 800feb4:	d236      	bcs.n	800ff24 <rcl_validate_topic_name+0x140>
 800feb6:	4613      	mov	r3, r2
 800feb8:	4580      	cmp	r8, r0
 800feba:	f100 0001 	add.w	r0, r0, #1
 800febe:	d0f4      	beq.n	800feaa <rcl_validate_topic_name+0xc6>
 800fec0:	782a      	ldrb	r2, [r5, #0]
 800fec2:	2a2f      	cmp	r2, #47	@ 0x2f
 800fec4:	d1f1      	bne.n	800feaa <rcl_validate_topic_name+0xc6>
 800fec6:	786a      	ldrb	r2, [r5, #1]
 800fec8:	f81c 2002 	ldrb.w	r2, [ip, r2]
 800fecc:	0754      	lsls	r4, r2, #29
 800fece:	d5ec      	bpl.n	800feaa <rcl_validate_topic_name+0xc6>
 800fed0:	2204      	movs	r2, #4
 800fed2:	6032      	str	r2, [r6, #0]
 800fed4:	2f00      	cmp	r7, #0
 800fed6:	d0d1      	beq.n	800fe7c <rcl_validate_topic_name+0x98>
 800fed8:	603b      	str	r3, [r7, #0]
 800feda:	2000      	movs	r0, #0
 800fedc:	e7aa      	b.n	800fe34 <rcl_validate_topic_name+0x50>
 800fede:	200b      	movs	r0, #11
 800fee0:	4770      	bx	lr
 800fee2:	2304      	movs	r3, #4
 800fee4:	6033      	str	r3, [r6, #0]
 800fee6:	2f00      	cmp	r7, #0
 800fee8:	d1a2      	bne.n	800fe30 <rcl_validate_topic_name+0x4c>
 800feea:	e7c7      	b.n	800fe7c <rcl_validate_topic_name+0x98>
 800feec:	200b      	movs	r0, #11
 800feee:	e7a1      	b.n	800fe34 <rcl_validate_topic_name+0x50>
 800fef0:	2309      	movs	r3, #9
 800fef2:	6033      	str	r3, [r6, #0]
 800fef4:	2f00      	cmp	r7, #0
 800fef6:	d1c0      	bne.n	800fe7a <rcl_validate_topic_name+0x96>
 800fef8:	e7c0      	b.n	800fe7c <rcl_validate_topic_name+0x98>
 800fefa:	2900      	cmp	r1, #0
 800fefc:	d0ca      	beq.n	800fe94 <rcl_validate_topic_name+0xb0>
 800fefe:	2306      	movs	r3, #6
 800ff00:	6033      	str	r3, [r6, #0]
 800ff02:	2f00      	cmp	r7, #0
 800ff04:	d1b9      	bne.n	800fe7a <rcl_validate_topic_name+0x96>
 800ff06:	e7b9      	b.n	800fe7c <rcl_validate_topic_name+0x98>
 800ff08:	2c00      	cmp	r4, #0
 800ff0a:	d0c3      	beq.n	800fe94 <rcl_validate_topic_name+0xb0>
 800ff0c:	2308      	movs	r3, #8
 800ff0e:	6033      	str	r3, [r6, #0]
 800ff10:	2f00      	cmp	r7, #0
 800ff12:	d1b2      	bne.n	800fe7a <rcl_validate_topic_name+0x96>
 800ff14:	e7b2      	b.n	800fe7c <rcl_validate_topic_name+0x98>
 800ff16:	2c00      	cmp	r4, #0
 800ff18:	d1f8      	bne.n	800ff0c <rcl_validate_topic_name+0x128>
 800ff1a:	460b      	mov	r3, r1
 800ff1c:	2401      	movs	r4, #1
 800ff1e:	e7b9      	b.n	800fe94 <rcl_validate_topic_name+0xb0>
 800ff20:	2400      	movs	r4, #0
 800ff22:	e7b7      	b.n	800fe94 <rcl_validate_topic_name+0xb0>
 800ff24:	2000      	movs	r0, #0
 800ff26:	6030      	str	r0, [r6, #0]
 800ff28:	e784      	b.n	800fe34 <rcl_validate_topic_name+0x50>
 800ff2a:	2205      	movs	r2, #5
 800ff2c:	6032      	str	r2, [r6, #0]
 800ff2e:	2f00      	cmp	r7, #0
 800ff30:	d1d2      	bne.n	800fed8 <rcl_validate_topic_name+0xf4>
 800ff32:	e7a3      	b.n	800fe7c <rcl_validate_topic_name+0x98>
 800ff34:	2c00      	cmp	r4, #0
 800ff36:	bf14      	ite	ne
 800ff38:	2308      	movne	r3, #8
 800ff3a:	2303      	moveq	r3, #3
 800ff3c:	6033      	str	r3, [r6, #0]
 800ff3e:	2f00      	cmp	r7, #0
 800ff40:	d19b      	bne.n	800fe7a <rcl_validate_topic_name+0x96>
 800ff42:	e79b      	b.n	800fe7c <rcl_validate_topic_name+0x98>
 800ff44:	2301      	movs	r3, #1
 800ff46:	e00a      	b.n	800ff5e <rcl_validate_topic_name+0x17a>
 800ff48:	2c01      	cmp	r4, #1
 800ff4a:	d013      	beq.n	800ff74 <rcl_validate_topic_name+0x190>
 800ff4c:	4299      	cmp	r1, r3
 800ff4e:	f104 0401 	add.w	r4, r4, #1
 800ff52:	f105 0501 	add.w	r5, r5, #1
 800ff56:	f103 0201 	add.w	r2, r3, #1
 800ff5a:	d9e3      	bls.n	800ff24 <rcl_validate_topic_name+0x140>
 800ff5c:	4613      	mov	r3, r2
 800ff5e:	45a0      	cmp	r8, r4
 800ff60:	d0f4      	beq.n	800ff4c <rcl_validate_topic_name+0x168>
 800ff62:	782a      	ldrb	r2, [r5, #0]
 800ff64:	2a2f      	cmp	r2, #47	@ 0x2f
 800ff66:	d1ef      	bne.n	800ff48 <rcl_validate_topic_name+0x164>
 800ff68:	786a      	ldrb	r2, [r5, #1]
 800ff6a:	f81c 2002 	ldrb.w	r2, [ip, r2]
 800ff6e:	0752      	lsls	r2, r2, #29
 800ff70:	d5ec      	bpl.n	800ff4c <rcl_validate_topic_name+0x168>
 800ff72:	e7ad      	b.n	800fed0 <rcl_validate_topic_name+0xec>
 800ff74:	2307      	movs	r3, #7
 800ff76:	6033      	str	r3, [r6, #0]
 800ff78:	2f00      	cmp	r7, #0
 800ff7a:	f43f af7f 	beq.w	800fe7c <rcl_validate_topic_name+0x98>
 800ff7e:	603c      	str	r4, [r7, #0]
 800ff80:	2000      	movs	r0, #0
 800ff82:	e757      	b.n	800fe34 <rcl_validate_topic_name+0x50>
 800ff84:	0801234b 	.word	0x0801234b

0800ff88 <on_status>:
 800ff88:	b082      	sub	sp, #8
 800ff8a:	b002      	add	sp, #8
 800ff8c:	4770      	bx	lr
 800ff8e:	bf00      	nop

0800ff90 <on_topic>:
 800ff90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff94:	4a22      	ldr	r2, [pc, #136]	@ (8010020 <on_topic+0x90>)
 800ff96:	b094      	sub	sp, #80	@ 0x50
 800ff98:	6812      	ldr	r2, [r2, #0]
 800ff9a:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 800ff9c:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 800ffa0:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 800ffa4:	b3c2      	cbz	r2, 8010018 <on_topic+0x88>
 800ffa6:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 800ffaa:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 800ffae:	e001      	b.n	800ffb4 <on_topic+0x24>
 800ffb0:	6852      	ldr	r2, [r2, #4]
 800ffb2:	b38a      	cbz	r2, 8010018 <on_topic+0x88>
 800ffb4:	6894      	ldr	r4, [r2, #8]
 800ffb6:	8aa3      	ldrh	r3, [r4, #20]
 800ffb8:	428b      	cmp	r3, r1
 800ffba:	d1f9      	bne.n	800ffb0 <on_topic+0x20>
 800ffbc:	7da3      	ldrb	r3, [r4, #22]
 800ffbe:	4283      	cmp	r3, r0
 800ffc0:	d1f6      	bne.n	800ffb0 <on_topic+0x20>
 800ffc2:	2248      	movs	r2, #72	@ 0x48
 800ffc4:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800ffc8:	4668      	mov	r0, sp
 800ffca:	f000 fdc0 	bl	8010b4e <memcpy>
 800ffce:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 800ffd2:	cb0c      	ldmia	r3, {r2, r3}
 800ffd4:	4620      	mov	r0, r4
 800ffd6:	f7f8 fa2b 	bl	8008430 <rmw_uxrce_get_static_input_buffer_for_entity>
 800ffda:	4607      	mov	r7, r0
 800ffdc:	b1e0      	cbz	r0, 8010018 <on_topic+0x88>
 800ffde:	f8d0 8008 	ldr.w	r8, [r0, #8]
 800ffe2:	4632      	mov	r2, r6
 800ffe4:	4628      	mov	r0, r5
 800ffe6:	f108 0110 	add.w	r1, r8, #16
 800ffea:	f7fe f831 	bl	800e050 <ucdr_deserialize_array_uint8_t>
 800ffee:	b930      	cbnz	r0, 800fffe <on_topic+0x6e>
 800fff0:	480c      	ldr	r0, [pc, #48]	@ (8010024 <on_topic+0x94>)
 800fff2:	4639      	mov	r1, r7
 800fff4:	b014      	add	sp, #80	@ 0x50
 800fff6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fffa:	f7fd ba39 	b.w	800d470 <put_memory>
 800fffe:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 8010002:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 8010006:	f7fd ff19 	bl	800de3c <rmw_uros_epoch_nanos>
 801000a:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 801000e:	2305      	movs	r3, #5
 8010010:	e942 0102 	strd	r0, r1, [r2, #-8]
 8010014:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 8010018:	b014      	add	sp, #80	@ 0x50
 801001a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801001e:	bf00      	nop
 8010020:	2000d9cc 	.word	0x2000d9cc
 8010024:	2000d9bc 	.word	0x2000d9bc

08010028 <on_request>:
 8010028:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801002c:	4823      	ldr	r0, [pc, #140]	@ (80100bc <on_request+0x94>)
 801002e:	b094      	sub	sp, #80	@ 0x50
 8010030:	6800      	ldr	r0, [r0, #0]
 8010032:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8010034:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8010038:	9113      	str	r1, [sp, #76]	@ 0x4c
 801003a:	2800      	cmp	r0, #0
 801003c:	d03b      	beq.n	80100b6 <on_request+0x8e>
 801003e:	461d      	mov	r5, r3
 8010040:	e001      	b.n	8010046 <on_request+0x1e>
 8010042:	6840      	ldr	r0, [r0, #4]
 8010044:	b3b8      	cbz	r0, 80100b6 <on_request+0x8e>
 8010046:	6884      	ldr	r4, [r0, #8]
 8010048:	8b21      	ldrh	r1, [r4, #24]
 801004a:	4291      	cmp	r1, r2
 801004c:	d1f9      	bne.n	8010042 <on_request+0x1a>
 801004e:	2248      	movs	r2, #72	@ 0x48
 8010050:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8010054:	4668      	mov	r0, sp
 8010056:	f000 fd7a 	bl	8010b4e <memcpy>
 801005a:	f104 0320 	add.w	r3, r4, #32
 801005e:	cb0c      	ldmia	r3, {r2, r3}
 8010060:	4620      	mov	r0, r4
 8010062:	f7f8 f9e5 	bl	8008430 <rmw_uxrce_get_static_input_buffer_for_entity>
 8010066:	4680      	mov	r8, r0
 8010068:	b328      	cbz	r0, 80100b6 <on_request+0x8e>
 801006a:	4638      	mov	r0, r7
 801006c:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8010070:	4632      	mov	r2, r6
 8010072:	f107 0110 	add.w	r1, r7, #16
 8010076:	f7fd ffeb 	bl	800e050 <ucdr_deserialize_array_uint8_t>
 801007a:	b930      	cbnz	r0, 801008a <on_request+0x62>
 801007c:	4810      	ldr	r0, [pc, #64]	@ (80100c0 <on_request+0x98>)
 801007e:	4641      	mov	r1, r8
 8010080:	b014      	add	sp, #80	@ 0x50
 8010082:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010086:	f7fd b9f3 	b.w	800d470 <put_memory>
 801008a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801008c:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 8010090:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8010094:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8010098:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801009c:	e895 0003 	ldmia.w	r5, {r0, r1}
 80100a0:	e88c 0003 	stmia.w	ip, {r0, r1}
 80100a4:	f7fd feca 	bl	800de3c <rmw_uros_epoch_nanos>
 80100a8:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 80100ac:	2303      	movs	r3, #3
 80100ae:	e942 0102 	strd	r0, r1, [r2, #-8]
 80100b2:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 80100b6:	b014      	add	sp, #80	@ 0x50
 80100b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80100bc:	2000d99c 	.word	0x2000d99c
 80100c0:	2000d9bc 	.word	0x2000d9bc

080100c4 <on_reply>:
 80100c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80100c8:	4821      	ldr	r0, [pc, #132]	@ (8010150 <on_reply+0x8c>)
 80100ca:	b094      	sub	sp, #80	@ 0x50
 80100cc:	6800      	ldr	r0, [r0, #0]
 80100ce:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 80100d0:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 80100d4:	9113      	str	r1, [sp, #76]	@ 0x4c
 80100d6:	b3b8      	cbz	r0, 8010148 <on_reply+0x84>
 80100d8:	461d      	mov	r5, r3
 80100da:	e001      	b.n	80100e0 <on_reply+0x1c>
 80100dc:	6840      	ldr	r0, [r0, #4]
 80100de:	b398      	cbz	r0, 8010148 <on_reply+0x84>
 80100e0:	6884      	ldr	r4, [r0, #8]
 80100e2:	8b21      	ldrh	r1, [r4, #24]
 80100e4:	4291      	cmp	r1, r2
 80100e6:	d1f9      	bne.n	80100dc <on_reply+0x18>
 80100e8:	2248      	movs	r2, #72	@ 0x48
 80100ea:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 80100ee:	4668      	mov	r0, sp
 80100f0:	f000 fd2d 	bl	8010b4e <memcpy>
 80100f4:	f104 0320 	add.w	r3, r4, #32
 80100f8:	cb0c      	ldmia	r3, {r2, r3}
 80100fa:	4620      	mov	r0, r4
 80100fc:	f7f8 f998 	bl	8008430 <rmw_uxrce_get_static_input_buffer_for_entity>
 8010100:	4680      	mov	r8, r0
 8010102:	b308      	cbz	r0, 8010148 <on_reply+0x84>
 8010104:	4638      	mov	r0, r7
 8010106:	f8d8 7008 	ldr.w	r7, [r8, #8]
 801010a:	4632      	mov	r2, r6
 801010c:	f107 0110 	add.w	r1, r7, #16
 8010110:	f7fd ff9e 	bl	800e050 <ucdr_deserialize_array_uint8_t>
 8010114:	b930      	cbnz	r0, 8010124 <on_reply+0x60>
 8010116:	480f      	ldr	r0, [pc, #60]	@ (8010154 <on_reply+0x90>)
 8010118:	4641      	mov	r1, r8
 801011a:	b014      	add	sp, #80	@ 0x50
 801011c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010120:	f7fd b9a6 	b.w	800d470 <put_memory>
 8010124:	2200      	movs	r2, #0
 8010126:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 801012a:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 801012e:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8010132:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 8010136:	f7fd fe81 	bl	800de3c <rmw_uros_epoch_nanos>
 801013a:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 801013e:	2304      	movs	r3, #4
 8010140:	e942 0102 	strd	r0, r1, [r2, #-8]
 8010144:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8010148:	b014      	add	sp, #80	@ 0x50
 801014a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801014e:	bf00      	nop
 8010150:	200090b0 	.word	0x200090b0
 8010154:	2000d9bc 	.word	0x2000d9bc

08010158 <rmw_destroy_client>:
 8010158:	b570      	push	{r4, r5, r6, lr}
 801015a:	b128      	cbz	r0, 8010168 <rmw_destroy_client+0x10>
 801015c:	4604      	mov	r4, r0
 801015e:	6800      	ldr	r0, [r0, #0]
 8010160:	460d      	mov	r5, r1
 8010162:	f7f8 fa35 	bl	80085d0 <is_uxrce_rmw_identifier_valid>
 8010166:	b910      	cbnz	r0, 801016e <rmw_destroy_client+0x16>
 8010168:	2401      	movs	r4, #1
 801016a:	4620      	mov	r0, r4
 801016c:	bd70      	pop	{r4, r5, r6, pc}
 801016e:	6863      	ldr	r3, [r4, #4]
 8010170:	2b00      	cmp	r3, #0
 8010172:	d0f9      	beq.n	8010168 <rmw_destroy_client+0x10>
 8010174:	2d00      	cmp	r5, #0
 8010176:	d0f7      	beq.n	8010168 <rmw_destroy_client+0x10>
 8010178:	6828      	ldr	r0, [r5, #0]
 801017a:	f7f8 fa29 	bl	80085d0 <is_uxrce_rmw_identifier_valid>
 801017e:	2800      	cmp	r0, #0
 8010180:	d0f2      	beq.n	8010168 <rmw_destroy_client+0x10>
 8010182:	686e      	ldr	r6, [r5, #4]
 8010184:	2e00      	cmp	r6, #0
 8010186:	d0ef      	beq.n	8010168 <rmw_destroy_client+0x10>
 8010188:	6864      	ldr	r4, [r4, #4]
 801018a:	6932      	ldr	r2, [r6, #16]
 801018c:	6920      	ldr	r0, [r4, #16]
 801018e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8010192:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010196:	6819      	ldr	r1, [r3, #0]
 8010198:	f7fe fe38 	bl	800ee0c <uxr_buffer_cancel_data>
 801019c:	4602      	mov	r2, r0
 801019e:	6920      	ldr	r0, [r4, #16]
 80101a0:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80101a4:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80101a8:	f7f8 f992 	bl	80084d0 <run_xrce_session>
 80101ac:	6920      	ldr	r0, [r4, #16]
 80101ae:	6932      	ldr	r2, [r6, #16]
 80101b0:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80101b4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80101b8:	6819      	ldr	r1, [r3, #0]
 80101ba:	f7f9 fac5 	bl	8009748 <uxr_buffer_delete_entity>
 80101be:	4602      	mov	r2, r0
 80101c0:	6920      	ldr	r0, [r4, #16]
 80101c2:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80101c6:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80101ca:	f7f8 f981 	bl	80084d0 <run_xrce_session>
 80101ce:	2800      	cmp	r0, #0
 80101d0:	4628      	mov	r0, r5
 80101d2:	bf14      	ite	ne
 80101d4:	2400      	movne	r4, #0
 80101d6:	2402      	moveq	r4, #2
 80101d8:	f7f8 f908 	bl	80083ec <rmw_uxrce_fini_client_memory>
 80101dc:	e7c5      	b.n	801016a <rmw_destroy_client+0x12>
 80101de:	bf00      	nop

080101e0 <rmw_create_guard_condition>:
 80101e0:	b538      	push	{r3, r4, r5, lr}
 80101e2:	4605      	mov	r5, r0
 80101e4:	4807      	ldr	r0, [pc, #28]	@ (8010204 <rmw_create_guard_condition+0x24>)
 80101e6:	f7fd f933 	bl	800d450 <get_memory>
 80101ea:	b148      	cbz	r0, 8010200 <rmw_create_guard_condition+0x20>
 80101ec:	6884      	ldr	r4, [r0, #8]
 80101ee:	2300      	movs	r3, #0
 80101f0:	7423      	strb	r3, [r4, #16]
 80101f2:	61e5      	str	r5, [r4, #28]
 80101f4:	f7fd f950 	bl	800d498 <rmw_get_implementation_identifier>
 80101f8:	e9c4 0405 	strd	r0, r4, [r4, #20]
 80101fc:	f104 0014 	add.w	r0, r4, #20
 8010200:	bd38      	pop	{r3, r4, r5, pc}
 8010202:	bf00      	nop
 8010204:	2000d95c 	.word	0x2000d95c

08010208 <rmw_destroy_guard_condition>:
 8010208:	b508      	push	{r3, lr}
 801020a:	4b08      	ldr	r3, [pc, #32]	@ (801022c <rmw_destroy_guard_condition+0x24>)
 801020c:	6819      	ldr	r1, [r3, #0]
 801020e:	b911      	cbnz	r1, 8010216 <rmw_destroy_guard_condition+0xe>
 8010210:	e00a      	b.n	8010228 <rmw_destroy_guard_condition+0x20>
 8010212:	6849      	ldr	r1, [r1, #4]
 8010214:	b141      	cbz	r1, 8010228 <rmw_destroy_guard_condition+0x20>
 8010216:	688b      	ldr	r3, [r1, #8]
 8010218:	3314      	adds	r3, #20
 801021a:	4298      	cmp	r0, r3
 801021c:	d1f9      	bne.n	8010212 <rmw_destroy_guard_condition+0xa>
 801021e:	4803      	ldr	r0, [pc, #12]	@ (801022c <rmw_destroy_guard_condition+0x24>)
 8010220:	f7fd f926 	bl	800d470 <put_memory>
 8010224:	2000      	movs	r0, #0
 8010226:	bd08      	pop	{r3, pc}
 8010228:	2001      	movs	r0, #1
 801022a:	bd08      	pop	{r3, pc}
 801022c:	2000d95c 	.word	0x2000d95c

08010230 <calloc>:
 8010230:	4b02      	ldr	r3, [pc, #8]	@ (801023c <calloc+0xc>)
 8010232:	460a      	mov	r2, r1
 8010234:	4601      	mov	r1, r0
 8010236:	6818      	ldr	r0, [r3, #0]
 8010238:	f000 b802 	b.w	8010240 <_calloc_r>
 801023c:	200000c0 	.word	0x200000c0

08010240 <_calloc_r>:
 8010240:	b570      	push	{r4, r5, r6, lr}
 8010242:	fba1 5402 	umull	r5, r4, r1, r2
 8010246:	b934      	cbnz	r4, 8010256 <_calloc_r+0x16>
 8010248:	4629      	mov	r1, r5
 801024a:	f000 f887 	bl	801035c <_malloc_r>
 801024e:	4606      	mov	r6, r0
 8010250:	b928      	cbnz	r0, 801025e <_calloc_r+0x1e>
 8010252:	4630      	mov	r0, r6
 8010254:	bd70      	pop	{r4, r5, r6, pc}
 8010256:	220c      	movs	r2, #12
 8010258:	6002      	str	r2, [r0, #0]
 801025a:	2600      	movs	r6, #0
 801025c:	e7f9      	b.n	8010252 <_calloc_r+0x12>
 801025e:	462a      	mov	r2, r5
 8010260:	4621      	mov	r1, r4
 8010262:	f000 fbab 	bl	80109bc <memset>
 8010266:	e7f4      	b.n	8010252 <_calloc_r+0x12>

08010268 <getenv>:
 8010268:	b507      	push	{r0, r1, r2, lr}
 801026a:	4b04      	ldr	r3, [pc, #16]	@ (801027c <getenv+0x14>)
 801026c:	4601      	mov	r1, r0
 801026e:	aa01      	add	r2, sp, #4
 8010270:	6818      	ldr	r0, [r3, #0]
 8010272:	f000 f805 	bl	8010280 <_findenv_r>
 8010276:	b003      	add	sp, #12
 8010278:	f85d fb04 	ldr.w	pc, [sp], #4
 801027c:	200000c0 	.word	0x200000c0

08010280 <_findenv_r>:
 8010280:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010284:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 80102f4 <_findenv_r+0x74>
 8010288:	4606      	mov	r6, r0
 801028a:	4689      	mov	r9, r1
 801028c:	4617      	mov	r7, r2
 801028e:	f000 fc8b 	bl	8010ba8 <__env_lock>
 8010292:	f8da 4000 	ldr.w	r4, [sl]
 8010296:	b134      	cbz	r4, 80102a6 <_findenv_r+0x26>
 8010298:	464b      	mov	r3, r9
 801029a:	4698      	mov	r8, r3
 801029c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80102a0:	b13a      	cbz	r2, 80102b2 <_findenv_r+0x32>
 80102a2:	2a3d      	cmp	r2, #61	@ 0x3d
 80102a4:	d1f9      	bne.n	801029a <_findenv_r+0x1a>
 80102a6:	4630      	mov	r0, r6
 80102a8:	f000 fc84 	bl	8010bb4 <__env_unlock>
 80102ac:	2000      	movs	r0, #0
 80102ae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80102b2:	eba8 0809 	sub.w	r8, r8, r9
 80102b6:	46a3      	mov	fp, r4
 80102b8:	f854 0b04 	ldr.w	r0, [r4], #4
 80102bc:	2800      	cmp	r0, #0
 80102be:	d0f2      	beq.n	80102a6 <_findenv_r+0x26>
 80102c0:	4642      	mov	r2, r8
 80102c2:	4649      	mov	r1, r9
 80102c4:	f000 fb8f 	bl	80109e6 <strncmp>
 80102c8:	2800      	cmp	r0, #0
 80102ca:	d1f4      	bne.n	80102b6 <_findenv_r+0x36>
 80102cc:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80102d0:	eb03 0508 	add.w	r5, r3, r8
 80102d4:	f813 3008 	ldrb.w	r3, [r3, r8]
 80102d8:	2b3d      	cmp	r3, #61	@ 0x3d
 80102da:	d1ec      	bne.n	80102b6 <_findenv_r+0x36>
 80102dc:	f8da 3000 	ldr.w	r3, [sl]
 80102e0:	ebab 0303 	sub.w	r3, fp, r3
 80102e4:	109b      	asrs	r3, r3, #2
 80102e6:	4630      	mov	r0, r6
 80102e8:	603b      	str	r3, [r7, #0]
 80102ea:	f000 fc63 	bl	8010bb4 <__env_unlock>
 80102ee:	1c68      	adds	r0, r5, #1
 80102f0:	e7dd      	b.n	80102ae <_findenv_r+0x2e>
 80102f2:	bf00      	nop
 80102f4:	20000000 	.word	0x20000000

080102f8 <malloc>:
 80102f8:	4b02      	ldr	r3, [pc, #8]	@ (8010304 <malloc+0xc>)
 80102fa:	4601      	mov	r1, r0
 80102fc:	6818      	ldr	r0, [r3, #0]
 80102fe:	f000 b82d 	b.w	801035c <_malloc_r>
 8010302:	bf00      	nop
 8010304:	200000c0 	.word	0x200000c0

08010308 <free>:
 8010308:	4b02      	ldr	r3, [pc, #8]	@ (8010314 <free+0xc>)
 801030a:	4601      	mov	r1, r0
 801030c:	6818      	ldr	r0, [r3, #0]
 801030e:	f000 bc57 	b.w	8010bc0 <_free_r>
 8010312:	bf00      	nop
 8010314:	200000c0 	.word	0x200000c0

08010318 <sbrk_aligned>:
 8010318:	b570      	push	{r4, r5, r6, lr}
 801031a:	4e0f      	ldr	r6, [pc, #60]	@ (8010358 <sbrk_aligned+0x40>)
 801031c:	460c      	mov	r4, r1
 801031e:	6831      	ldr	r1, [r6, #0]
 8010320:	4605      	mov	r5, r0
 8010322:	b911      	cbnz	r1, 801032a <sbrk_aligned+0x12>
 8010324:	f000 fbbc 	bl	8010aa0 <_sbrk_r>
 8010328:	6030      	str	r0, [r6, #0]
 801032a:	4621      	mov	r1, r4
 801032c:	4628      	mov	r0, r5
 801032e:	f000 fbb7 	bl	8010aa0 <_sbrk_r>
 8010332:	1c43      	adds	r3, r0, #1
 8010334:	d103      	bne.n	801033e <sbrk_aligned+0x26>
 8010336:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801033a:	4620      	mov	r0, r4
 801033c:	bd70      	pop	{r4, r5, r6, pc}
 801033e:	1cc4      	adds	r4, r0, #3
 8010340:	f024 0403 	bic.w	r4, r4, #3
 8010344:	42a0      	cmp	r0, r4
 8010346:	d0f8      	beq.n	801033a <sbrk_aligned+0x22>
 8010348:	1a21      	subs	r1, r4, r0
 801034a:	4628      	mov	r0, r5
 801034c:	f000 fba8 	bl	8010aa0 <_sbrk_r>
 8010350:	3001      	adds	r0, #1
 8010352:	d1f2      	bne.n	801033a <sbrk_aligned+0x22>
 8010354:	e7ef      	b.n	8010336 <sbrk_aligned+0x1e>
 8010356:	bf00      	nop
 8010358:	2000db10 	.word	0x2000db10

0801035c <_malloc_r>:
 801035c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010360:	1ccd      	adds	r5, r1, #3
 8010362:	f025 0503 	bic.w	r5, r5, #3
 8010366:	3508      	adds	r5, #8
 8010368:	2d0c      	cmp	r5, #12
 801036a:	bf38      	it	cc
 801036c:	250c      	movcc	r5, #12
 801036e:	2d00      	cmp	r5, #0
 8010370:	4606      	mov	r6, r0
 8010372:	db01      	blt.n	8010378 <_malloc_r+0x1c>
 8010374:	42a9      	cmp	r1, r5
 8010376:	d904      	bls.n	8010382 <_malloc_r+0x26>
 8010378:	230c      	movs	r3, #12
 801037a:	6033      	str	r3, [r6, #0]
 801037c:	2000      	movs	r0, #0
 801037e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010382:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010458 <_malloc_r+0xfc>
 8010386:	f000 f869 	bl	801045c <__malloc_lock>
 801038a:	f8d8 3000 	ldr.w	r3, [r8]
 801038e:	461c      	mov	r4, r3
 8010390:	bb44      	cbnz	r4, 80103e4 <_malloc_r+0x88>
 8010392:	4629      	mov	r1, r5
 8010394:	4630      	mov	r0, r6
 8010396:	f7ff ffbf 	bl	8010318 <sbrk_aligned>
 801039a:	1c43      	adds	r3, r0, #1
 801039c:	4604      	mov	r4, r0
 801039e:	d158      	bne.n	8010452 <_malloc_r+0xf6>
 80103a0:	f8d8 4000 	ldr.w	r4, [r8]
 80103a4:	4627      	mov	r7, r4
 80103a6:	2f00      	cmp	r7, #0
 80103a8:	d143      	bne.n	8010432 <_malloc_r+0xd6>
 80103aa:	2c00      	cmp	r4, #0
 80103ac:	d04b      	beq.n	8010446 <_malloc_r+0xea>
 80103ae:	6823      	ldr	r3, [r4, #0]
 80103b0:	4639      	mov	r1, r7
 80103b2:	4630      	mov	r0, r6
 80103b4:	eb04 0903 	add.w	r9, r4, r3
 80103b8:	f000 fb72 	bl	8010aa0 <_sbrk_r>
 80103bc:	4581      	cmp	r9, r0
 80103be:	d142      	bne.n	8010446 <_malloc_r+0xea>
 80103c0:	6821      	ldr	r1, [r4, #0]
 80103c2:	1a6d      	subs	r5, r5, r1
 80103c4:	4629      	mov	r1, r5
 80103c6:	4630      	mov	r0, r6
 80103c8:	f7ff ffa6 	bl	8010318 <sbrk_aligned>
 80103cc:	3001      	adds	r0, #1
 80103ce:	d03a      	beq.n	8010446 <_malloc_r+0xea>
 80103d0:	6823      	ldr	r3, [r4, #0]
 80103d2:	442b      	add	r3, r5
 80103d4:	6023      	str	r3, [r4, #0]
 80103d6:	f8d8 3000 	ldr.w	r3, [r8]
 80103da:	685a      	ldr	r2, [r3, #4]
 80103dc:	bb62      	cbnz	r2, 8010438 <_malloc_r+0xdc>
 80103de:	f8c8 7000 	str.w	r7, [r8]
 80103e2:	e00f      	b.n	8010404 <_malloc_r+0xa8>
 80103e4:	6822      	ldr	r2, [r4, #0]
 80103e6:	1b52      	subs	r2, r2, r5
 80103e8:	d420      	bmi.n	801042c <_malloc_r+0xd0>
 80103ea:	2a0b      	cmp	r2, #11
 80103ec:	d917      	bls.n	801041e <_malloc_r+0xc2>
 80103ee:	1961      	adds	r1, r4, r5
 80103f0:	42a3      	cmp	r3, r4
 80103f2:	6025      	str	r5, [r4, #0]
 80103f4:	bf18      	it	ne
 80103f6:	6059      	strne	r1, [r3, #4]
 80103f8:	6863      	ldr	r3, [r4, #4]
 80103fa:	bf08      	it	eq
 80103fc:	f8c8 1000 	streq.w	r1, [r8]
 8010400:	5162      	str	r2, [r4, r5]
 8010402:	604b      	str	r3, [r1, #4]
 8010404:	4630      	mov	r0, r6
 8010406:	f000 f82f 	bl	8010468 <__malloc_unlock>
 801040a:	f104 000b 	add.w	r0, r4, #11
 801040e:	1d23      	adds	r3, r4, #4
 8010410:	f020 0007 	bic.w	r0, r0, #7
 8010414:	1ac2      	subs	r2, r0, r3
 8010416:	bf1c      	itt	ne
 8010418:	1a1b      	subne	r3, r3, r0
 801041a:	50a3      	strne	r3, [r4, r2]
 801041c:	e7af      	b.n	801037e <_malloc_r+0x22>
 801041e:	6862      	ldr	r2, [r4, #4]
 8010420:	42a3      	cmp	r3, r4
 8010422:	bf0c      	ite	eq
 8010424:	f8c8 2000 	streq.w	r2, [r8]
 8010428:	605a      	strne	r2, [r3, #4]
 801042a:	e7eb      	b.n	8010404 <_malloc_r+0xa8>
 801042c:	4623      	mov	r3, r4
 801042e:	6864      	ldr	r4, [r4, #4]
 8010430:	e7ae      	b.n	8010390 <_malloc_r+0x34>
 8010432:	463c      	mov	r4, r7
 8010434:	687f      	ldr	r7, [r7, #4]
 8010436:	e7b6      	b.n	80103a6 <_malloc_r+0x4a>
 8010438:	461a      	mov	r2, r3
 801043a:	685b      	ldr	r3, [r3, #4]
 801043c:	42a3      	cmp	r3, r4
 801043e:	d1fb      	bne.n	8010438 <_malloc_r+0xdc>
 8010440:	2300      	movs	r3, #0
 8010442:	6053      	str	r3, [r2, #4]
 8010444:	e7de      	b.n	8010404 <_malloc_r+0xa8>
 8010446:	230c      	movs	r3, #12
 8010448:	6033      	str	r3, [r6, #0]
 801044a:	4630      	mov	r0, r6
 801044c:	f000 f80c 	bl	8010468 <__malloc_unlock>
 8010450:	e794      	b.n	801037c <_malloc_r+0x20>
 8010452:	6005      	str	r5, [r0, #0]
 8010454:	e7d6      	b.n	8010404 <_malloc_r+0xa8>
 8010456:	bf00      	nop
 8010458:	2000db14 	.word	0x2000db14

0801045c <__malloc_lock>:
 801045c:	4801      	ldr	r0, [pc, #4]	@ (8010464 <__malloc_lock+0x8>)
 801045e:	f000 bb6c 	b.w	8010b3a <__retarget_lock_acquire_recursive>
 8010462:	bf00      	nop
 8010464:	2000dc59 	.word	0x2000dc59

08010468 <__malloc_unlock>:
 8010468:	4801      	ldr	r0, [pc, #4]	@ (8010470 <__malloc_unlock+0x8>)
 801046a:	f000 bb67 	b.w	8010b3c <__retarget_lock_release_recursive>
 801046e:	bf00      	nop
 8010470:	2000dc59 	.word	0x2000dc59

08010474 <srand>:
 8010474:	b538      	push	{r3, r4, r5, lr}
 8010476:	4b10      	ldr	r3, [pc, #64]	@ (80104b8 <srand+0x44>)
 8010478:	681d      	ldr	r5, [r3, #0]
 801047a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801047c:	4604      	mov	r4, r0
 801047e:	b9b3      	cbnz	r3, 80104ae <srand+0x3a>
 8010480:	2018      	movs	r0, #24
 8010482:	f7ff ff39 	bl	80102f8 <malloc>
 8010486:	4602      	mov	r2, r0
 8010488:	6328      	str	r0, [r5, #48]	@ 0x30
 801048a:	b920      	cbnz	r0, 8010496 <srand+0x22>
 801048c:	4b0b      	ldr	r3, [pc, #44]	@ (80104bc <srand+0x48>)
 801048e:	480c      	ldr	r0, [pc, #48]	@ (80104c0 <srand+0x4c>)
 8010490:	2146      	movs	r1, #70	@ 0x46
 8010492:	f000 fb6b 	bl	8010b6c <__assert_func>
 8010496:	490b      	ldr	r1, [pc, #44]	@ (80104c4 <srand+0x50>)
 8010498:	4b0b      	ldr	r3, [pc, #44]	@ (80104c8 <srand+0x54>)
 801049a:	e9c0 1300 	strd	r1, r3, [r0]
 801049e:	4b0b      	ldr	r3, [pc, #44]	@ (80104cc <srand+0x58>)
 80104a0:	6083      	str	r3, [r0, #8]
 80104a2:	230b      	movs	r3, #11
 80104a4:	8183      	strh	r3, [r0, #12]
 80104a6:	2100      	movs	r1, #0
 80104a8:	2001      	movs	r0, #1
 80104aa:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80104ae:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80104b0:	2200      	movs	r2, #0
 80104b2:	611c      	str	r4, [r3, #16]
 80104b4:	615a      	str	r2, [r3, #20]
 80104b6:	bd38      	pop	{r3, r4, r5, pc}
 80104b8:	200000c0 	.word	0x200000c0
 80104bc:	0801226c 	.word	0x0801226c
 80104c0:	08012283 	.word	0x08012283
 80104c4:	abcd330e 	.word	0xabcd330e
 80104c8:	e66d1234 	.word	0xe66d1234
 80104cc:	0005deec 	.word	0x0005deec

080104d0 <rand>:
 80104d0:	4b16      	ldr	r3, [pc, #88]	@ (801052c <rand+0x5c>)
 80104d2:	b510      	push	{r4, lr}
 80104d4:	681c      	ldr	r4, [r3, #0]
 80104d6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80104d8:	b9b3      	cbnz	r3, 8010508 <rand+0x38>
 80104da:	2018      	movs	r0, #24
 80104dc:	f7ff ff0c 	bl	80102f8 <malloc>
 80104e0:	4602      	mov	r2, r0
 80104e2:	6320      	str	r0, [r4, #48]	@ 0x30
 80104e4:	b920      	cbnz	r0, 80104f0 <rand+0x20>
 80104e6:	4b12      	ldr	r3, [pc, #72]	@ (8010530 <rand+0x60>)
 80104e8:	4812      	ldr	r0, [pc, #72]	@ (8010534 <rand+0x64>)
 80104ea:	2152      	movs	r1, #82	@ 0x52
 80104ec:	f000 fb3e 	bl	8010b6c <__assert_func>
 80104f0:	4911      	ldr	r1, [pc, #68]	@ (8010538 <rand+0x68>)
 80104f2:	4b12      	ldr	r3, [pc, #72]	@ (801053c <rand+0x6c>)
 80104f4:	e9c0 1300 	strd	r1, r3, [r0]
 80104f8:	4b11      	ldr	r3, [pc, #68]	@ (8010540 <rand+0x70>)
 80104fa:	6083      	str	r3, [r0, #8]
 80104fc:	230b      	movs	r3, #11
 80104fe:	8183      	strh	r3, [r0, #12]
 8010500:	2100      	movs	r1, #0
 8010502:	2001      	movs	r0, #1
 8010504:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8010508:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801050a:	480e      	ldr	r0, [pc, #56]	@ (8010544 <rand+0x74>)
 801050c:	690b      	ldr	r3, [r1, #16]
 801050e:	694c      	ldr	r4, [r1, #20]
 8010510:	4a0d      	ldr	r2, [pc, #52]	@ (8010548 <rand+0x78>)
 8010512:	4358      	muls	r0, r3
 8010514:	fb02 0004 	mla	r0, r2, r4, r0
 8010518:	fba3 3202 	umull	r3, r2, r3, r2
 801051c:	3301      	adds	r3, #1
 801051e:	eb40 0002 	adc.w	r0, r0, r2
 8010522:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8010526:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801052a:	bd10      	pop	{r4, pc}
 801052c:	200000c0 	.word	0x200000c0
 8010530:	0801226c 	.word	0x0801226c
 8010534:	08012283 	.word	0x08012283
 8010538:	abcd330e 	.word	0xabcd330e
 801053c:	e66d1234 	.word	0xe66d1234
 8010540:	0005deec 	.word	0x0005deec
 8010544:	5851f42d 	.word	0x5851f42d
 8010548:	4c957f2d 	.word	0x4c957f2d

0801054c <realloc>:
 801054c:	4b02      	ldr	r3, [pc, #8]	@ (8010558 <realloc+0xc>)
 801054e:	460a      	mov	r2, r1
 8010550:	4601      	mov	r1, r0
 8010552:	6818      	ldr	r0, [r3, #0]
 8010554:	f000 b802 	b.w	801055c <_realloc_r>
 8010558:	200000c0 	.word	0x200000c0

0801055c <_realloc_r>:
 801055c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010560:	4607      	mov	r7, r0
 8010562:	4614      	mov	r4, r2
 8010564:	460d      	mov	r5, r1
 8010566:	b921      	cbnz	r1, 8010572 <_realloc_r+0x16>
 8010568:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801056c:	4611      	mov	r1, r2
 801056e:	f7ff bef5 	b.w	801035c <_malloc_r>
 8010572:	b92a      	cbnz	r2, 8010580 <_realloc_r+0x24>
 8010574:	f000 fb24 	bl	8010bc0 <_free_r>
 8010578:	4625      	mov	r5, r4
 801057a:	4628      	mov	r0, r5
 801057c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010580:	f000 fb68 	bl	8010c54 <_malloc_usable_size_r>
 8010584:	4284      	cmp	r4, r0
 8010586:	4606      	mov	r6, r0
 8010588:	d802      	bhi.n	8010590 <_realloc_r+0x34>
 801058a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801058e:	d8f4      	bhi.n	801057a <_realloc_r+0x1e>
 8010590:	4621      	mov	r1, r4
 8010592:	4638      	mov	r0, r7
 8010594:	f7ff fee2 	bl	801035c <_malloc_r>
 8010598:	4680      	mov	r8, r0
 801059a:	b908      	cbnz	r0, 80105a0 <_realloc_r+0x44>
 801059c:	4645      	mov	r5, r8
 801059e:	e7ec      	b.n	801057a <_realloc_r+0x1e>
 80105a0:	42b4      	cmp	r4, r6
 80105a2:	4622      	mov	r2, r4
 80105a4:	4629      	mov	r1, r5
 80105a6:	bf28      	it	cs
 80105a8:	4632      	movcs	r2, r6
 80105aa:	f000 fad0 	bl	8010b4e <memcpy>
 80105ae:	4629      	mov	r1, r5
 80105b0:	4638      	mov	r0, r7
 80105b2:	f000 fb05 	bl	8010bc0 <_free_r>
 80105b6:	e7f1      	b.n	801059c <_realloc_r+0x40>

080105b8 <_strtoul_l.isra.0>:
 80105b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80105bc:	4e34      	ldr	r6, [pc, #208]	@ (8010690 <_strtoul_l.isra.0+0xd8>)
 80105be:	4686      	mov	lr, r0
 80105c0:	460d      	mov	r5, r1
 80105c2:	4628      	mov	r0, r5
 80105c4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80105c8:	5d37      	ldrb	r7, [r6, r4]
 80105ca:	f017 0708 	ands.w	r7, r7, #8
 80105ce:	d1f8      	bne.n	80105c2 <_strtoul_l.isra.0+0xa>
 80105d0:	2c2d      	cmp	r4, #45	@ 0x2d
 80105d2:	d110      	bne.n	80105f6 <_strtoul_l.isra.0+0x3e>
 80105d4:	782c      	ldrb	r4, [r5, #0]
 80105d6:	2701      	movs	r7, #1
 80105d8:	1c85      	adds	r5, r0, #2
 80105da:	f033 0010 	bics.w	r0, r3, #16
 80105de:	d115      	bne.n	801060c <_strtoul_l.isra.0+0x54>
 80105e0:	2c30      	cmp	r4, #48	@ 0x30
 80105e2:	d10d      	bne.n	8010600 <_strtoul_l.isra.0+0x48>
 80105e4:	7828      	ldrb	r0, [r5, #0]
 80105e6:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80105ea:	2858      	cmp	r0, #88	@ 0x58
 80105ec:	d108      	bne.n	8010600 <_strtoul_l.isra.0+0x48>
 80105ee:	786c      	ldrb	r4, [r5, #1]
 80105f0:	3502      	adds	r5, #2
 80105f2:	2310      	movs	r3, #16
 80105f4:	e00a      	b.n	801060c <_strtoul_l.isra.0+0x54>
 80105f6:	2c2b      	cmp	r4, #43	@ 0x2b
 80105f8:	bf04      	itt	eq
 80105fa:	782c      	ldrbeq	r4, [r5, #0]
 80105fc:	1c85      	addeq	r5, r0, #2
 80105fe:	e7ec      	b.n	80105da <_strtoul_l.isra.0+0x22>
 8010600:	2b00      	cmp	r3, #0
 8010602:	d1f6      	bne.n	80105f2 <_strtoul_l.isra.0+0x3a>
 8010604:	2c30      	cmp	r4, #48	@ 0x30
 8010606:	bf14      	ite	ne
 8010608:	230a      	movne	r3, #10
 801060a:	2308      	moveq	r3, #8
 801060c:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8010610:	2600      	movs	r6, #0
 8010612:	fbb8 f8f3 	udiv	r8, r8, r3
 8010616:	fb03 f908 	mul.w	r9, r3, r8
 801061a:	ea6f 0909 	mvn.w	r9, r9
 801061e:	4630      	mov	r0, r6
 8010620:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8010624:	f1bc 0f09 	cmp.w	ip, #9
 8010628:	d810      	bhi.n	801064c <_strtoul_l.isra.0+0x94>
 801062a:	4664      	mov	r4, ip
 801062c:	42a3      	cmp	r3, r4
 801062e:	dd1e      	ble.n	801066e <_strtoul_l.isra.0+0xb6>
 8010630:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8010634:	d007      	beq.n	8010646 <_strtoul_l.isra.0+0x8e>
 8010636:	4580      	cmp	r8, r0
 8010638:	d316      	bcc.n	8010668 <_strtoul_l.isra.0+0xb0>
 801063a:	d101      	bne.n	8010640 <_strtoul_l.isra.0+0x88>
 801063c:	45a1      	cmp	r9, r4
 801063e:	db13      	blt.n	8010668 <_strtoul_l.isra.0+0xb0>
 8010640:	fb00 4003 	mla	r0, r0, r3, r4
 8010644:	2601      	movs	r6, #1
 8010646:	f815 4b01 	ldrb.w	r4, [r5], #1
 801064a:	e7e9      	b.n	8010620 <_strtoul_l.isra.0+0x68>
 801064c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8010650:	f1bc 0f19 	cmp.w	ip, #25
 8010654:	d801      	bhi.n	801065a <_strtoul_l.isra.0+0xa2>
 8010656:	3c37      	subs	r4, #55	@ 0x37
 8010658:	e7e8      	b.n	801062c <_strtoul_l.isra.0+0x74>
 801065a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 801065e:	f1bc 0f19 	cmp.w	ip, #25
 8010662:	d804      	bhi.n	801066e <_strtoul_l.isra.0+0xb6>
 8010664:	3c57      	subs	r4, #87	@ 0x57
 8010666:	e7e1      	b.n	801062c <_strtoul_l.isra.0+0x74>
 8010668:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 801066c:	e7eb      	b.n	8010646 <_strtoul_l.isra.0+0x8e>
 801066e:	1c73      	adds	r3, r6, #1
 8010670:	d106      	bne.n	8010680 <_strtoul_l.isra.0+0xc8>
 8010672:	2322      	movs	r3, #34	@ 0x22
 8010674:	f8ce 3000 	str.w	r3, [lr]
 8010678:	4630      	mov	r0, r6
 801067a:	b932      	cbnz	r2, 801068a <_strtoul_l.isra.0+0xd2>
 801067c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010680:	b107      	cbz	r7, 8010684 <_strtoul_l.isra.0+0xcc>
 8010682:	4240      	negs	r0, r0
 8010684:	2a00      	cmp	r2, #0
 8010686:	d0f9      	beq.n	801067c <_strtoul_l.isra.0+0xc4>
 8010688:	b106      	cbz	r6, 801068c <_strtoul_l.isra.0+0xd4>
 801068a:	1e69      	subs	r1, r5, #1
 801068c:	6011      	str	r1, [r2, #0]
 801068e:	e7f5      	b.n	801067c <_strtoul_l.isra.0+0xc4>
 8010690:	0801234b 	.word	0x0801234b

08010694 <strtoul>:
 8010694:	4613      	mov	r3, r2
 8010696:	460a      	mov	r2, r1
 8010698:	4601      	mov	r1, r0
 801069a:	4802      	ldr	r0, [pc, #8]	@ (80106a4 <strtoul+0x10>)
 801069c:	6800      	ldr	r0, [r0, #0]
 801069e:	f7ff bf8b 	b.w	80105b8 <_strtoul_l.isra.0>
 80106a2:	bf00      	nop
 80106a4:	200000c0 	.word	0x200000c0

080106a8 <std>:
 80106a8:	2300      	movs	r3, #0
 80106aa:	b510      	push	{r4, lr}
 80106ac:	4604      	mov	r4, r0
 80106ae:	e9c0 3300 	strd	r3, r3, [r0]
 80106b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80106b6:	6083      	str	r3, [r0, #8]
 80106b8:	8181      	strh	r1, [r0, #12]
 80106ba:	6643      	str	r3, [r0, #100]	@ 0x64
 80106bc:	81c2      	strh	r2, [r0, #14]
 80106be:	6183      	str	r3, [r0, #24]
 80106c0:	4619      	mov	r1, r3
 80106c2:	2208      	movs	r2, #8
 80106c4:	305c      	adds	r0, #92	@ 0x5c
 80106c6:	f000 f979 	bl	80109bc <memset>
 80106ca:	4b0d      	ldr	r3, [pc, #52]	@ (8010700 <std+0x58>)
 80106cc:	6263      	str	r3, [r4, #36]	@ 0x24
 80106ce:	4b0d      	ldr	r3, [pc, #52]	@ (8010704 <std+0x5c>)
 80106d0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80106d2:	4b0d      	ldr	r3, [pc, #52]	@ (8010708 <std+0x60>)
 80106d4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80106d6:	4b0d      	ldr	r3, [pc, #52]	@ (801070c <std+0x64>)
 80106d8:	6323      	str	r3, [r4, #48]	@ 0x30
 80106da:	4b0d      	ldr	r3, [pc, #52]	@ (8010710 <std+0x68>)
 80106dc:	6224      	str	r4, [r4, #32]
 80106de:	429c      	cmp	r4, r3
 80106e0:	d006      	beq.n	80106f0 <std+0x48>
 80106e2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80106e6:	4294      	cmp	r4, r2
 80106e8:	d002      	beq.n	80106f0 <std+0x48>
 80106ea:	33d0      	adds	r3, #208	@ 0xd0
 80106ec:	429c      	cmp	r4, r3
 80106ee:	d105      	bne.n	80106fc <std+0x54>
 80106f0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80106f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80106f8:	f000 ba1e 	b.w	8010b38 <__retarget_lock_init_recursive>
 80106fc:	bd10      	pop	{r4, pc}
 80106fe:	bf00      	nop
 8010700:	080108bd 	.word	0x080108bd
 8010704:	080108df 	.word	0x080108df
 8010708:	08010917 	.word	0x08010917
 801070c:	0801093b 	.word	0x0801093b
 8010710:	2000db18 	.word	0x2000db18

08010714 <stdio_exit_handler>:
 8010714:	4a02      	ldr	r2, [pc, #8]	@ (8010720 <stdio_exit_handler+0xc>)
 8010716:	4903      	ldr	r1, [pc, #12]	@ (8010724 <stdio_exit_handler+0x10>)
 8010718:	4803      	ldr	r0, [pc, #12]	@ (8010728 <stdio_exit_handler+0x14>)
 801071a:	f000 b869 	b.w	80107f0 <_fwalk_sglue>
 801071e:	bf00      	nop
 8010720:	200000b4 	.word	0x200000b4
 8010724:	080115b9 	.word	0x080115b9
 8010728:	200000c4 	.word	0x200000c4

0801072c <cleanup_stdio>:
 801072c:	6841      	ldr	r1, [r0, #4]
 801072e:	4b0c      	ldr	r3, [pc, #48]	@ (8010760 <cleanup_stdio+0x34>)
 8010730:	4299      	cmp	r1, r3
 8010732:	b510      	push	{r4, lr}
 8010734:	4604      	mov	r4, r0
 8010736:	d001      	beq.n	801073c <cleanup_stdio+0x10>
 8010738:	f000 ff3e 	bl	80115b8 <_fflush_r>
 801073c:	68a1      	ldr	r1, [r4, #8]
 801073e:	4b09      	ldr	r3, [pc, #36]	@ (8010764 <cleanup_stdio+0x38>)
 8010740:	4299      	cmp	r1, r3
 8010742:	d002      	beq.n	801074a <cleanup_stdio+0x1e>
 8010744:	4620      	mov	r0, r4
 8010746:	f000 ff37 	bl	80115b8 <_fflush_r>
 801074a:	68e1      	ldr	r1, [r4, #12]
 801074c:	4b06      	ldr	r3, [pc, #24]	@ (8010768 <cleanup_stdio+0x3c>)
 801074e:	4299      	cmp	r1, r3
 8010750:	d004      	beq.n	801075c <cleanup_stdio+0x30>
 8010752:	4620      	mov	r0, r4
 8010754:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010758:	f000 bf2e 	b.w	80115b8 <_fflush_r>
 801075c:	bd10      	pop	{r4, pc}
 801075e:	bf00      	nop
 8010760:	2000db18 	.word	0x2000db18
 8010764:	2000db80 	.word	0x2000db80
 8010768:	2000dbe8 	.word	0x2000dbe8

0801076c <global_stdio_init.part.0>:
 801076c:	b510      	push	{r4, lr}
 801076e:	4b0b      	ldr	r3, [pc, #44]	@ (801079c <global_stdio_init.part.0+0x30>)
 8010770:	4c0b      	ldr	r4, [pc, #44]	@ (80107a0 <global_stdio_init.part.0+0x34>)
 8010772:	4a0c      	ldr	r2, [pc, #48]	@ (80107a4 <global_stdio_init.part.0+0x38>)
 8010774:	601a      	str	r2, [r3, #0]
 8010776:	4620      	mov	r0, r4
 8010778:	2200      	movs	r2, #0
 801077a:	2104      	movs	r1, #4
 801077c:	f7ff ff94 	bl	80106a8 <std>
 8010780:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8010784:	2201      	movs	r2, #1
 8010786:	2109      	movs	r1, #9
 8010788:	f7ff ff8e 	bl	80106a8 <std>
 801078c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8010790:	2202      	movs	r2, #2
 8010792:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010796:	2112      	movs	r1, #18
 8010798:	f7ff bf86 	b.w	80106a8 <std>
 801079c:	2000dc50 	.word	0x2000dc50
 80107a0:	2000db18 	.word	0x2000db18
 80107a4:	08010715 	.word	0x08010715

080107a8 <__sfp_lock_acquire>:
 80107a8:	4801      	ldr	r0, [pc, #4]	@ (80107b0 <__sfp_lock_acquire+0x8>)
 80107aa:	f000 b9c6 	b.w	8010b3a <__retarget_lock_acquire_recursive>
 80107ae:	bf00      	nop
 80107b0:	2000dc5a 	.word	0x2000dc5a

080107b4 <__sfp_lock_release>:
 80107b4:	4801      	ldr	r0, [pc, #4]	@ (80107bc <__sfp_lock_release+0x8>)
 80107b6:	f000 b9c1 	b.w	8010b3c <__retarget_lock_release_recursive>
 80107ba:	bf00      	nop
 80107bc:	2000dc5a 	.word	0x2000dc5a

080107c0 <__sinit>:
 80107c0:	b510      	push	{r4, lr}
 80107c2:	4604      	mov	r4, r0
 80107c4:	f7ff fff0 	bl	80107a8 <__sfp_lock_acquire>
 80107c8:	6a23      	ldr	r3, [r4, #32]
 80107ca:	b11b      	cbz	r3, 80107d4 <__sinit+0x14>
 80107cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80107d0:	f7ff bff0 	b.w	80107b4 <__sfp_lock_release>
 80107d4:	4b04      	ldr	r3, [pc, #16]	@ (80107e8 <__sinit+0x28>)
 80107d6:	6223      	str	r3, [r4, #32]
 80107d8:	4b04      	ldr	r3, [pc, #16]	@ (80107ec <__sinit+0x2c>)
 80107da:	681b      	ldr	r3, [r3, #0]
 80107dc:	2b00      	cmp	r3, #0
 80107de:	d1f5      	bne.n	80107cc <__sinit+0xc>
 80107e0:	f7ff ffc4 	bl	801076c <global_stdio_init.part.0>
 80107e4:	e7f2      	b.n	80107cc <__sinit+0xc>
 80107e6:	bf00      	nop
 80107e8:	0801072d 	.word	0x0801072d
 80107ec:	2000dc50 	.word	0x2000dc50

080107f0 <_fwalk_sglue>:
 80107f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80107f4:	4607      	mov	r7, r0
 80107f6:	4688      	mov	r8, r1
 80107f8:	4614      	mov	r4, r2
 80107fa:	2600      	movs	r6, #0
 80107fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010800:	f1b9 0901 	subs.w	r9, r9, #1
 8010804:	d505      	bpl.n	8010812 <_fwalk_sglue+0x22>
 8010806:	6824      	ldr	r4, [r4, #0]
 8010808:	2c00      	cmp	r4, #0
 801080a:	d1f7      	bne.n	80107fc <_fwalk_sglue+0xc>
 801080c:	4630      	mov	r0, r6
 801080e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010812:	89ab      	ldrh	r3, [r5, #12]
 8010814:	2b01      	cmp	r3, #1
 8010816:	d907      	bls.n	8010828 <_fwalk_sglue+0x38>
 8010818:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801081c:	3301      	adds	r3, #1
 801081e:	d003      	beq.n	8010828 <_fwalk_sglue+0x38>
 8010820:	4629      	mov	r1, r5
 8010822:	4638      	mov	r0, r7
 8010824:	47c0      	blx	r8
 8010826:	4306      	orrs	r6, r0
 8010828:	3568      	adds	r5, #104	@ 0x68
 801082a:	e7e9      	b.n	8010800 <_fwalk_sglue+0x10>

0801082c <iprintf>:
 801082c:	b40f      	push	{r0, r1, r2, r3}
 801082e:	b507      	push	{r0, r1, r2, lr}
 8010830:	4906      	ldr	r1, [pc, #24]	@ (801084c <iprintf+0x20>)
 8010832:	ab04      	add	r3, sp, #16
 8010834:	6808      	ldr	r0, [r1, #0]
 8010836:	f853 2b04 	ldr.w	r2, [r3], #4
 801083a:	6881      	ldr	r1, [r0, #8]
 801083c:	9301      	str	r3, [sp, #4]
 801083e:	f000 fb93 	bl	8010f68 <_vfiprintf_r>
 8010842:	b003      	add	sp, #12
 8010844:	f85d eb04 	ldr.w	lr, [sp], #4
 8010848:	b004      	add	sp, #16
 801084a:	4770      	bx	lr
 801084c:	200000c0 	.word	0x200000c0

08010850 <sniprintf>:
 8010850:	b40c      	push	{r2, r3}
 8010852:	b530      	push	{r4, r5, lr}
 8010854:	4b18      	ldr	r3, [pc, #96]	@ (80108b8 <sniprintf+0x68>)
 8010856:	1e0c      	subs	r4, r1, #0
 8010858:	681d      	ldr	r5, [r3, #0]
 801085a:	b09d      	sub	sp, #116	@ 0x74
 801085c:	da08      	bge.n	8010870 <sniprintf+0x20>
 801085e:	238b      	movs	r3, #139	@ 0x8b
 8010860:	602b      	str	r3, [r5, #0]
 8010862:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010866:	b01d      	add	sp, #116	@ 0x74
 8010868:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801086c:	b002      	add	sp, #8
 801086e:	4770      	bx	lr
 8010870:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8010874:	f8ad 3014 	strh.w	r3, [sp, #20]
 8010878:	f04f 0300 	mov.w	r3, #0
 801087c:	931b      	str	r3, [sp, #108]	@ 0x6c
 801087e:	bf14      	ite	ne
 8010880:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8010884:	4623      	moveq	r3, r4
 8010886:	9304      	str	r3, [sp, #16]
 8010888:	9307      	str	r3, [sp, #28]
 801088a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801088e:	9002      	str	r0, [sp, #8]
 8010890:	9006      	str	r0, [sp, #24]
 8010892:	f8ad 3016 	strh.w	r3, [sp, #22]
 8010896:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8010898:	ab21      	add	r3, sp, #132	@ 0x84
 801089a:	a902      	add	r1, sp, #8
 801089c:	4628      	mov	r0, r5
 801089e:	9301      	str	r3, [sp, #4]
 80108a0:	f000 fa3c 	bl	8010d1c <_svfiprintf_r>
 80108a4:	1c43      	adds	r3, r0, #1
 80108a6:	bfbc      	itt	lt
 80108a8:	238b      	movlt	r3, #139	@ 0x8b
 80108aa:	602b      	strlt	r3, [r5, #0]
 80108ac:	2c00      	cmp	r4, #0
 80108ae:	d0da      	beq.n	8010866 <sniprintf+0x16>
 80108b0:	9b02      	ldr	r3, [sp, #8]
 80108b2:	2200      	movs	r2, #0
 80108b4:	701a      	strb	r2, [r3, #0]
 80108b6:	e7d6      	b.n	8010866 <sniprintf+0x16>
 80108b8:	200000c0 	.word	0x200000c0

080108bc <__sread>:
 80108bc:	b510      	push	{r4, lr}
 80108be:	460c      	mov	r4, r1
 80108c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80108c4:	f000 f8da 	bl	8010a7c <_read_r>
 80108c8:	2800      	cmp	r0, #0
 80108ca:	bfab      	itete	ge
 80108cc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80108ce:	89a3      	ldrhlt	r3, [r4, #12]
 80108d0:	181b      	addge	r3, r3, r0
 80108d2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80108d6:	bfac      	ite	ge
 80108d8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80108da:	81a3      	strhlt	r3, [r4, #12]
 80108dc:	bd10      	pop	{r4, pc}

080108de <__swrite>:
 80108de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80108e2:	461f      	mov	r7, r3
 80108e4:	898b      	ldrh	r3, [r1, #12]
 80108e6:	05db      	lsls	r3, r3, #23
 80108e8:	4605      	mov	r5, r0
 80108ea:	460c      	mov	r4, r1
 80108ec:	4616      	mov	r6, r2
 80108ee:	d505      	bpl.n	80108fc <__swrite+0x1e>
 80108f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80108f4:	2302      	movs	r3, #2
 80108f6:	2200      	movs	r2, #0
 80108f8:	f000 f8ae 	bl	8010a58 <_lseek_r>
 80108fc:	89a3      	ldrh	r3, [r4, #12]
 80108fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010902:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010906:	81a3      	strh	r3, [r4, #12]
 8010908:	4632      	mov	r2, r6
 801090a:	463b      	mov	r3, r7
 801090c:	4628      	mov	r0, r5
 801090e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010912:	f000 b8d5 	b.w	8010ac0 <_write_r>

08010916 <__sseek>:
 8010916:	b510      	push	{r4, lr}
 8010918:	460c      	mov	r4, r1
 801091a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801091e:	f000 f89b 	bl	8010a58 <_lseek_r>
 8010922:	1c43      	adds	r3, r0, #1
 8010924:	89a3      	ldrh	r3, [r4, #12]
 8010926:	bf15      	itete	ne
 8010928:	6560      	strne	r0, [r4, #84]	@ 0x54
 801092a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801092e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8010932:	81a3      	strheq	r3, [r4, #12]
 8010934:	bf18      	it	ne
 8010936:	81a3      	strhne	r3, [r4, #12]
 8010938:	bd10      	pop	{r4, pc}

0801093a <__sclose>:
 801093a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801093e:	f000 b87b 	b.w	8010a38 <_close_r>

08010942 <_vsniprintf_r>:
 8010942:	b530      	push	{r4, r5, lr}
 8010944:	4614      	mov	r4, r2
 8010946:	2c00      	cmp	r4, #0
 8010948:	b09b      	sub	sp, #108	@ 0x6c
 801094a:	4605      	mov	r5, r0
 801094c:	461a      	mov	r2, r3
 801094e:	da05      	bge.n	801095c <_vsniprintf_r+0x1a>
 8010950:	238b      	movs	r3, #139	@ 0x8b
 8010952:	6003      	str	r3, [r0, #0]
 8010954:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010958:	b01b      	add	sp, #108	@ 0x6c
 801095a:	bd30      	pop	{r4, r5, pc}
 801095c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8010960:	f8ad 300c 	strh.w	r3, [sp, #12]
 8010964:	f04f 0300 	mov.w	r3, #0
 8010968:	9319      	str	r3, [sp, #100]	@ 0x64
 801096a:	bf14      	ite	ne
 801096c:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8010970:	4623      	moveq	r3, r4
 8010972:	9302      	str	r3, [sp, #8]
 8010974:	9305      	str	r3, [sp, #20]
 8010976:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801097a:	9100      	str	r1, [sp, #0]
 801097c:	9104      	str	r1, [sp, #16]
 801097e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8010982:	4669      	mov	r1, sp
 8010984:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8010986:	f000 f9c9 	bl	8010d1c <_svfiprintf_r>
 801098a:	1c43      	adds	r3, r0, #1
 801098c:	bfbc      	itt	lt
 801098e:	238b      	movlt	r3, #139	@ 0x8b
 8010990:	602b      	strlt	r3, [r5, #0]
 8010992:	2c00      	cmp	r4, #0
 8010994:	d0e0      	beq.n	8010958 <_vsniprintf_r+0x16>
 8010996:	9b00      	ldr	r3, [sp, #0]
 8010998:	2200      	movs	r2, #0
 801099a:	701a      	strb	r2, [r3, #0]
 801099c:	e7dc      	b.n	8010958 <_vsniprintf_r+0x16>
	...

080109a0 <vsniprintf>:
 80109a0:	b507      	push	{r0, r1, r2, lr}
 80109a2:	9300      	str	r3, [sp, #0]
 80109a4:	4613      	mov	r3, r2
 80109a6:	460a      	mov	r2, r1
 80109a8:	4601      	mov	r1, r0
 80109aa:	4803      	ldr	r0, [pc, #12]	@ (80109b8 <vsniprintf+0x18>)
 80109ac:	6800      	ldr	r0, [r0, #0]
 80109ae:	f7ff ffc8 	bl	8010942 <_vsniprintf_r>
 80109b2:	b003      	add	sp, #12
 80109b4:	f85d fb04 	ldr.w	pc, [sp], #4
 80109b8:	200000c0 	.word	0x200000c0

080109bc <memset>:
 80109bc:	4402      	add	r2, r0
 80109be:	4603      	mov	r3, r0
 80109c0:	4293      	cmp	r3, r2
 80109c2:	d100      	bne.n	80109c6 <memset+0xa>
 80109c4:	4770      	bx	lr
 80109c6:	f803 1b01 	strb.w	r1, [r3], #1
 80109ca:	e7f9      	b.n	80109c0 <memset+0x4>

080109cc <strchr>:
 80109cc:	b2c9      	uxtb	r1, r1
 80109ce:	4603      	mov	r3, r0
 80109d0:	4618      	mov	r0, r3
 80109d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80109d6:	b112      	cbz	r2, 80109de <strchr+0x12>
 80109d8:	428a      	cmp	r2, r1
 80109da:	d1f9      	bne.n	80109d0 <strchr+0x4>
 80109dc:	4770      	bx	lr
 80109de:	2900      	cmp	r1, #0
 80109e0:	bf18      	it	ne
 80109e2:	2000      	movne	r0, #0
 80109e4:	4770      	bx	lr

080109e6 <strncmp>:
 80109e6:	b510      	push	{r4, lr}
 80109e8:	b16a      	cbz	r2, 8010a06 <strncmp+0x20>
 80109ea:	3901      	subs	r1, #1
 80109ec:	1884      	adds	r4, r0, r2
 80109ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80109f2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80109f6:	429a      	cmp	r2, r3
 80109f8:	d103      	bne.n	8010a02 <strncmp+0x1c>
 80109fa:	42a0      	cmp	r0, r4
 80109fc:	d001      	beq.n	8010a02 <strncmp+0x1c>
 80109fe:	2a00      	cmp	r2, #0
 8010a00:	d1f5      	bne.n	80109ee <strncmp+0x8>
 8010a02:	1ad0      	subs	r0, r2, r3
 8010a04:	bd10      	pop	{r4, pc}
 8010a06:	4610      	mov	r0, r2
 8010a08:	e7fc      	b.n	8010a04 <strncmp+0x1e>

08010a0a <strstr>:
 8010a0a:	780a      	ldrb	r2, [r1, #0]
 8010a0c:	b570      	push	{r4, r5, r6, lr}
 8010a0e:	b96a      	cbnz	r2, 8010a2c <strstr+0x22>
 8010a10:	bd70      	pop	{r4, r5, r6, pc}
 8010a12:	429a      	cmp	r2, r3
 8010a14:	d109      	bne.n	8010a2a <strstr+0x20>
 8010a16:	460c      	mov	r4, r1
 8010a18:	4605      	mov	r5, r0
 8010a1a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8010a1e:	2b00      	cmp	r3, #0
 8010a20:	d0f6      	beq.n	8010a10 <strstr+0x6>
 8010a22:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8010a26:	429e      	cmp	r6, r3
 8010a28:	d0f7      	beq.n	8010a1a <strstr+0x10>
 8010a2a:	3001      	adds	r0, #1
 8010a2c:	7803      	ldrb	r3, [r0, #0]
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	d1ef      	bne.n	8010a12 <strstr+0x8>
 8010a32:	4618      	mov	r0, r3
 8010a34:	e7ec      	b.n	8010a10 <strstr+0x6>
	...

08010a38 <_close_r>:
 8010a38:	b538      	push	{r3, r4, r5, lr}
 8010a3a:	4d06      	ldr	r5, [pc, #24]	@ (8010a54 <_close_r+0x1c>)
 8010a3c:	2300      	movs	r3, #0
 8010a3e:	4604      	mov	r4, r0
 8010a40:	4608      	mov	r0, r1
 8010a42:	602b      	str	r3, [r5, #0]
 8010a44:	f7f0 fdce 	bl	80015e4 <_close>
 8010a48:	1c43      	adds	r3, r0, #1
 8010a4a:	d102      	bne.n	8010a52 <_close_r+0x1a>
 8010a4c:	682b      	ldr	r3, [r5, #0]
 8010a4e:	b103      	cbz	r3, 8010a52 <_close_r+0x1a>
 8010a50:	6023      	str	r3, [r4, #0]
 8010a52:	bd38      	pop	{r3, r4, r5, pc}
 8010a54:	2000dc54 	.word	0x2000dc54

08010a58 <_lseek_r>:
 8010a58:	b538      	push	{r3, r4, r5, lr}
 8010a5a:	4d07      	ldr	r5, [pc, #28]	@ (8010a78 <_lseek_r+0x20>)
 8010a5c:	4604      	mov	r4, r0
 8010a5e:	4608      	mov	r0, r1
 8010a60:	4611      	mov	r1, r2
 8010a62:	2200      	movs	r2, #0
 8010a64:	602a      	str	r2, [r5, #0]
 8010a66:	461a      	mov	r2, r3
 8010a68:	f7f0 fde3 	bl	8001632 <_lseek>
 8010a6c:	1c43      	adds	r3, r0, #1
 8010a6e:	d102      	bne.n	8010a76 <_lseek_r+0x1e>
 8010a70:	682b      	ldr	r3, [r5, #0]
 8010a72:	b103      	cbz	r3, 8010a76 <_lseek_r+0x1e>
 8010a74:	6023      	str	r3, [r4, #0]
 8010a76:	bd38      	pop	{r3, r4, r5, pc}
 8010a78:	2000dc54 	.word	0x2000dc54

08010a7c <_read_r>:
 8010a7c:	b538      	push	{r3, r4, r5, lr}
 8010a7e:	4d07      	ldr	r5, [pc, #28]	@ (8010a9c <_read_r+0x20>)
 8010a80:	4604      	mov	r4, r0
 8010a82:	4608      	mov	r0, r1
 8010a84:	4611      	mov	r1, r2
 8010a86:	2200      	movs	r2, #0
 8010a88:	602a      	str	r2, [r5, #0]
 8010a8a:	461a      	mov	r2, r3
 8010a8c:	f7f0 fd71 	bl	8001572 <_read>
 8010a90:	1c43      	adds	r3, r0, #1
 8010a92:	d102      	bne.n	8010a9a <_read_r+0x1e>
 8010a94:	682b      	ldr	r3, [r5, #0]
 8010a96:	b103      	cbz	r3, 8010a9a <_read_r+0x1e>
 8010a98:	6023      	str	r3, [r4, #0]
 8010a9a:	bd38      	pop	{r3, r4, r5, pc}
 8010a9c:	2000dc54 	.word	0x2000dc54

08010aa0 <_sbrk_r>:
 8010aa0:	b538      	push	{r3, r4, r5, lr}
 8010aa2:	4d06      	ldr	r5, [pc, #24]	@ (8010abc <_sbrk_r+0x1c>)
 8010aa4:	2300      	movs	r3, #0
 8010aa6:	4604      	mov	r4, r0
 8010aa8:	4608      	mov	r0, r1
 8010aaa:	602b      	str	r3, [r5, #0]
 8010aac:	f7f0 fdce 	bl	800164c <_sbrk>
 8010ab0:	1c43      	adds	r3, r0, #1
 8010ab2:	d102      	bne.n	8010aba <_sbrk_r+0x1a>
 8010ab4:	682b      	ldr	r3, [r5, #0]
 8010ab6:	b103      	cbz	r3, 8010aba <_sbrk_r+0x1a>
 8010ab8:	6023      	str	r3, [r4, #0]
 8010aba:	bd38      	pop	{r3, r4, r5, pc}
 8010abc:	2000dc54 	.word	0x2000dc54

08010ac0 <_write_r>:
 8010ac0:	b538      	push	{r3, r4, r5, lr}
 8010ac2:	4d07      	ldr	r5, [pc, #28]	@ (8010ae0 <_write_r+0x20>)
 8010ac4:	4604      	mov	r4, r0
 8010ac6:	4608      	mov	r0, r1
 8010ac8:	4611      	mov	r1, r2
 8010aca:	2200      	movs	r2, #0
 8010acc:	602a      	str	r2, [r5, #0]
 8010ace:	461a      	mov	r2, r3
 8010ad0:	f7f0 fd6c 	bl	80015ac <_write>
 8010ad4:	1c43      	adds	r3, r0, #1
 8010ad6:	d102      	bne.n	8010ade <_write_r+0x1e>
 8010ad8:	682b      	ldr	r3, [r5, #0]
 8010ada:	b103      	cbz	r3, 8010ade <_write_r+0x1e>
 8010adc:	6023      	str	r3, [r4, #0]
 8010ade:	bd38      	pop	{r3, r4, r5, pc}
 8010ae0:	2000dc54 	.word	0x2000dc54

08010ae4 <__errno>:
 8010ae4:	4b01      	ldr	r3, [pc, #4]	@ (8010aec <__errno+0x8>)
 8010ae6:	6818      	ldr	r0, [r3, #0]
 8010ae8:	4770      	bx	lr
 8010aea:	bf00      	nop
 8010aec:	200000c0 	.word	0x200000c0

08010af0 <__libc_init_array>:
 8010af0:	b570      	push	{r4, r5, r6, lr}
 8010af2:	4d0d      	ldr	r5, [pc, #52]	@ (8010b28 <__libc_init_array+0x38>)
 8010af4:	4c0d      	ldr	r4, [pc, #52]	@ (8010b2c <__libc_init_array+0x3c>)
 8010af6:	1b64      	subs	r4, r4, r5
 8010af8:	10a4      	asrs	r4, r4, #2
 8010afa:	2600      	movs	r6, #0
 8010afc:	42a6      	cmp	r6, r4
 8010afe:	d109      	bne.n	8010b14 <__libc_init_array+0x24>
 8010b00:	4d0b      	ldr	r5, [pc, #44]	@ (8010b30 <__libc_init_array+0x40>)
 8010b02:	4c0c      	ldr	r4, [pc, #48]	@ (8010b34 <__libc_init_array+0x44>)
 8010b04:	f000 ff10 	bl	8011928 <_init>
 8010b08:	1b64      	subs	r4, r4, r5
 8010b0a:	10a4      	asrs	r4, r4, #2
 8010b0c:	2600      	movs	r6, #0
 8010b0e:	42a6      	cmp	r6, r4
 8010b10:	d105      	bne.n	8010b1e <__libc_init_array+0x2e>
 8010b12:	bd70      	pop	{r4, r5, r6, pc}
 8010b14:	f855 3b04 	ldr.w	r3, [r5], #4
 8010b18:	4798      	blx	r3
 8010b1a:	3601      	adds	r6, #1
 8010b1c:	e7ee      	b.n	8010afc <__libc_init_array+0xc>
 8010b1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8010b22:	4798      	blx	r3
 8010b24:	3601      	adds	r6, #1
 8010b26:	e7f2      	b.n	8010b0e <__libc_init_array+0x1e>
 8010b28:	08012454 	.word	0x08012454
 8010b2c:	08012454 	.word	0x08012454
 8010b30:	08012454 	.word	0x08012454
 8010b34:	0801245c 	.word	0x0801245c

08010b38 <__retarget_lock_init_recursive>:
 8010b38:	4770      	bx	lr

08010b3a <__retarget_lock_acquire_recursive>:
 8010b3a:	4770      	bx	lr

08010b3c <__retarget_lock_release_recursive>:
 8010b3c:	4770      	bx	lr

08010b3e <strcpy>:
 8010b3e:	4603      	mov	r3, r0
 8010b40:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010b44:	f803 2b01 	strb.w	r2, [r3], #1
 8010b48:	2a00      	cmp	r2, #0
 8010b4a:	d1f9      	bne.n	8010b40 <strcpy+0x2>
 8010b4c:	4770      	bx	lr

08010b4e <memcpy>:
 8010b4e:	440a      	add	r2, r1
 8010b50:	4291      	cmp	r1, r2
 8010b52:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8010b56:	d100      	bne.n	8010b5a <memcpy+0xc>
 8010b58:	4770      	bx	lr
 8010b5a:	b510      	push	{r4, lr}
 8010b5c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010b60:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010b64:	4291      	cmp	r1, r2
 8010b66:	d1f9      	bne.n	8010b5c <memcpy+0xe>
 8010b68:	bd10      	pop	{r4, pc}
	...

08010b6c <__assert_func>:
 8010b6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010b6e:	4614      	mov	r4, r2
 8010b70:	461a      	mov	r2, r3
 8010b72:	4b09      	ldr	r3, [pc, #36]	@ (8010b98 <__assert_func+0x2c>)
 8010b74:	681b      	ldr	r3, [r3, #0]
 8010b76:	4605      	mov	r5, r0
 8010b78:	68d8      	ldr	r0, [r3, #12]
 8010b7a:	b14c      	cbz	r4, 8010b90 <__assert_func+0x24>
 8010b7c:	4b07      	ldr	r3, [pc, #28]	@ (8010b9c <__assert_func+0x30>)
 8010b7e:	9100      	str	r1, [sp, #0]
 8010b80:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010b84:	4906      	ldr	r1, [pc, #24]	@ (8010ba0 <__assert_func+0x34>)
 8010b86:	462b      	mov	r3, r5
 8010b88:	f000 fd3e 	bl	8011608 <fiprintf>
 8010b8c:	f000 fdfc 	bl	8011788 <abort>
 8010b90:	4b04      	ldr	r3, [pc, #16]	@ (8010ba4 <__assert_func+0x38>)
 8010b92:	461c      	mov	r4, r3
 8010b94:	e7f3      	b.n	8010b7e <__assert_func+0x12>
 8010b96:	bf00      	nop
 8010b98:	200000c0 	.word	0x200000c0
 8010b9c:	080122db 	.word	0x080122db
 8010ba0:	080122e8 	.word	0x080122e8
 8010ba4:	08012316 	.word	0x08012316

08010ba8 <__env_lock>:
 8010ba8:	4801      	ldr	r0, [pc, #4]	@ (8010bb0 <__env_lock+0x8>)
 8010baa:	f7ff bfc6 	b.w	8010b3a <__retarget_lock_acquire_recursive>
 8010bae:	bf00      	nop
 8010bb0:	2000dc58 	.word	0x2000dc58

08010bb4 <__env_unlock>:
 8010bb4:	4801      	ldr	r0, [pc, #4]	@ (8010bbc <__env_unlock+0x8>)
 8010bb6:	f7ff bfc1 	b.w	8010b3c <__retarget_lock_release_recursive>
 8010bba:	bf00      	nop
 8010bbc:	2000dc58 	.word	0x2000dc58

08010bc0 <_free_r>:
 8010bc0:	b538      	push	{r3, r4, r5, lr}
 8010bc2:	4605      	mov	r5, r0
 8010bc4:	2900      	cmp	r1, #0
 8010bc6:	d041      	beq.n	8010c4c <_free_r+0x8c>
 8010bc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010bcc:	1f0c      	subs	r4, r1, #4
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	bfb8      	it	lt
 8010bd2:	18e4      	addlt	r4, r4, r3
 8010bd4:	f7ff fc42 	bl	801045c <__malloc_lock>
 8010bd8:	4a1d      	ldr	r2, [pc, #116]	@ (8010c50 <_free_r+0x90>)
 8010bda:	6813      	ldr	r3, [r2, #0]
 8010bdc:	b933      	cbnz	r3, 8010bec <_free_r+0x2c>
 8010bde:	6063      	str	r3, [r4, #4]
 8010be0:	6014      	str	r4, [r2, #0]
 8010be2:	4628      	mov	r0, r5
 8010be4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010be8:	f7ff bc3e 	b.w	8010468 <__malloc_unlock>
 8010bec:	42a3      	cmp	r3, r4
 8010bee:	d908      	bls.n	8010c02 <_free_r+0x42>
 8010bf0:	6820      	ldr	r0, [r4, #0]
 8010bf2:	1821      	adds	r1, r4, r0
 8010bf4:	428b      	cmp	r3, r1
 8010bf6:	bf01      	itttt	eq
 8010bf8:	6819      	ldreq	r1, [r3, #0]
 8010bfa:	685b      	ldreq	r3, [r3, #4]
 8010bfc:	1809      	addeq	r1, r1, r0
 8010bfe:	6021      	streq	r1, [r4, #0]
 8010c00:	e7ed      	b.n	8010bde <_free_r+0x1e>
 8010c02:	461a      	mov	r2, r3
 8010c04:	685b      	ldr	r3, [r3, #4]
 8010c06:	b10b      	cbz	r3, 8010c0c <_free_r+0x4c>
 8010c08:	42a3      	cmp	r3, r4
 8010c0a:	d9fa      	bls.n	8010c02 <_free_r+0x42>
 8010c0c:	6811      	ldr	r1, [r2, #0]
 8010c0e:	1850      	adds	r0, r2, r1
 8010c10:	42a0      	cmp	r0, r4
 8010c12:	d10b      	bne.n	8010c2c <_free_r+0x6c>
 8010c14:	6820      	ldr	r0, [r4, #0]
 8010c16:	4401      	add	r1, r0
 8010c18:	1850      	adds	r0, r2, r1
 8010c1a:	4283      	cmp	r3, r0
 8010c1c:	6011      	str	r1, [r2, #0]
 8010c1e:	d1e0      	bne.n	8010be2 <_free_r+0x22>
 8010c20:	6818      	ldr	r0, [r3, #0]
 8010c22:	685b      	ldr	r3, [r3, #4]
 8010c24:	6053      	str	r3, [r2, #4]
 8010c26:	4408      	add	r0, r1
 8010c28:	6010      	str	r0, [r2, #0]
 8010c2a:	e7da      	b.n	8010be2 <_free_r+0x22>
 8010c2c:	d902      	bls.n	8010c34 <_free_r+0x74>
 8010c2e:	230c      	movs	r3, #12
 8010c30:	602b      	str	r3, [r5, #0]
 8010c32:	e7d6      	b.n	8010be2 <_free_r+0x22>
 8010c34:	6820      	ldr	r0, [r4, #0]
 8010c36:	1821      	adds	r1, r4, r0
 8010c38:	428b      	cmp	r3, r1
 8010c3a:	bf04      	itt	eq
 8010c3c:	6819      	ldreq	r1, [r3, #0]
 8010c3e:	685b      	ldreq	r3, [r3, #4]
 8010c40:	6063      	str	r3, [r4, #4]
 8010c42:	bf04      	itt	eq
 8010c44:	1809      	addeq	r1, r1, r0
 8010c46:	6021      	streq	r1, [r4, #0]
 8010c48:	6054      	str	r4, [r2, #4]
 8010c4a:	e7ca      	b.n	8010be2 <_free_r+0x22>
 8010c4c:	bd38      	pop	{r3, r4, r5, pc}
 8010c4e:	bf00      	nop
 8010c50:	2000db14 	.word	0x2000db14

08010c54 <_malloc_usable_size_r>:
 8010c54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010c58:	1f18      	subs	r0, r3, #4
 8010c5a:	2b00      	cmp	r3, #0
 8010c5c:	bfbc      	itt	lt
 8010c5e:	580b      	ldrlt	r3, [r1, r0]
 8010c60:	18c0      	addlt	r0, r0, r3
 8010c62:	4770      	bx	lr

08010c64 <__ssputs_r>:
 8010c64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010c68:	688e      	ldr	r6, [r1, #8]
 8010c6a:	461f      	mov	r7, r3
 8010c6c:	42be      	cmp	r6, r7
 8010c6e:	680b      	ldr	r3, [r1, #0]
 8010c70:	4682      	mov	sl, r0
 8010c72:	460c      	mov	r4, r1
 8010c74:	4690      	mov	r8, r2
 8010c76:	d82d      	bhi.n	8010cd4 <__ssputs_r+0x70>
 8010c78:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010c7c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8010c80:	d026      	beq.n	8010cd0 <__ssputs_r+0x6c>
 8010c82:	6965      	ldr	r5, [r4, #20]
 8010c84:	6909      	ldr	r1, [r1, #16]
 8010c86:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010c8a:	eba3 0901 	sub.w	r9, r3, r1
 8010c8e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010c92:	1c7b      	adds	r3, r7, #1
 8010c94:	444b      	add	r3, r9
 8010c96:	106d      	asrs	r5, r5, #1
 8010c98:	429d      	cmp	r5, r3
 8010c9a:	bf38      	it	cc
 8010c9c:	461d      	movcc	r5, r3
 8010c9e:	0553      	lsls	r3, r2, #21
 8010ca0:	d527      	bpl.n	8010cf2 <__ssputs_r+0x8e>
 8010ca2:	4629      	mov	r1, r5
 8010ca4:	f7ff fb5a 	bl	801035c <_malloc_r>
 8010ca8:	4606      	mov	r6, r0
 8010caa:	b360      	cbz	r0, 8010d06 <__ssputs_r+0xa2>
 8010cac:	6921      	ldr	r1, [r4, #16]
 8010cae:	464a      	mov	r2, r9
 8010cb0:	f7ff ff4d 	bl	8010b4e <memcpy>
 8010cb4:	89a3      	ldrh	r3, [r4, #12]
 8010cb6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8010cba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010cbe:	81a3      	strh	r3, [r4, #12]
 8010cc0:	6126      	str	r6, [r4, #16]
 8010cc2:	6165      	str	r5, [r4, #20]
 8010cc4:	444e      	add	r6, r9
 8010cc6:	eba5 0509 	sub.w	r5, r5, r9
 8010cca:	6026      	str	r6, [r4, #0]
 8010ccc:	60a5      	str	r5, [r4, #8]
 8010cce:	463e      	mov	r6, r7
 8010cd0:	42be      	cmp	r6, r7
 8010cd2:	d900      	bls.n	8010cd6 <__ssputs_r+0x72>
 8010cd4:	463e      	mov	r6, r7
 8010cd6:	6820      	ldr	r0, [r4, #0]
 8010cd8:	4632      	mov	r2, r6
 8010cda:	4641      	mov	r1, r8
 8010cdc:	f000 fd3a 	bl	8011754 <memmove>
 8010ce0:	68a3      	ldr	r3, [r4, #8]
 8010ce2:	1b9b      	subs	r3, r3, r6
 8010ce4:	60a3      	str	r3, [r4, #8]
 8010ce6:	6823      	ldr	r3, [r4, #0]
 8010ce8:	4433      	add	r3, r6
 8010cea:	6023      	str	r3, [r4, #0]
 8010cec:	2000      	movs	r0, #0
 8010cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010cf2:	462a      	mov	r2, r5
 8010cf4:	f7ff fc32 	bl	801055c <_realloc_r>
 8010cf8:	4606      	mov	r6, r0
 8010cfa:	2800      	cmp	r0, #0
 8010cfc:	d1e0      	bne.n	8010cc0 <__ssputs_r+0x5c>
 8010cfe:	6921      	ldr	r1, [r4, #16]
 8010d00:	4650      	mov	r0, sl
 8010d02:	f7ff ff5d 	bl	8010bc0 <_free_r>
 8010d06:	230c      	movs	r3, #12
 8010d08:	f8ca 3000 	str.w	r3, [sl]
 8010d0c:	89a3      	ldrh	r3, [r4, #12]
 8010d0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010d12:	81a3      	strh	r3, [r4, #12]
 8010d14:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010d18:	e7e9      	b.n	8010cee <__ssputs_r+0x8a>
	...

08010d1c <_svfiprintf_r>:
 8010d1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d20:	4698      	mov	r8, r3
 8010d22:	898b      	ldrh	r3, [r1, #12]
 8010d24:	061b      	lsls	r3, r3, #24
 8010d26:	b09d      	sub	sp, #116	@ 0x74
 8010d28:	4607      	mov	r7, r0
 8010d2a:	460d      	mov	r5, r1
 8010d2c:	4614      	mov	r4, r2
 8010d2e:	d510      	bpl.n	8010d52 <_svfiprintf_r+0x36>
 8010d30:	690b      	ldr	r3, [r1, #16]
 8010d32:	b973      	cbnz	r3, 8010d52 <_svfiprintf_r+0x36>
 8010d34:	2140      	movs	r1, #64	@ 0x40
 8010d36:	f7ff fb11 	bl	801035c <_malloc_r>
 8010d3a:	6028      	str	r0, [r5, #0]
 8010d3c:	6128      	str	r0, [r5, #16]
 8010d3e:	b930      	cbnz	r0, 8010d4e <_svfiprintf_r+0x32>
 8010d40:	230c      	movs	r3, #12
 8010d42:	603b      	str	r3, [r7, #0]
 8010d44:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010d48:	b01d      	add	sp, #116	@ 0x74
 8010d4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d4e:	2340      	movs	r3, #64	@ 0x40
 8010d50:	616b      	str	r3, [r5, #20]
 8010d52:	2300      	movs	r3, #0
 8010d54:	9309      	str	r3, [sp, #36]	@ 0x24
 8010d56:	2320      	movs	r3, #32
 8010d58:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010d5c:	f8cd 800c 	str.w	r8, [sp, #12]
 8010d60:	2330      	movs	r3, #48	@ 0x30
 8010d62:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8010f00 <_svfiprintf_r+0x1e4>
 8010d66:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010d6a:	f04f 0901 	mov.w	r9, #1
 8010d6e:	4623      	mov	r3, r4
 8010d70:	469a      	mov	sl, r3
 8010d72:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010d76:	b10a      	cbz	r2, 8010d7c <_svfiprintf_r+0x60>
 8010d78:	2a25      	cmp	r2, #37	@ 0x25
 8010d7a:	d1f9      	bne.n	8010d70 <_svfiprintf_r+0x54>
 8010d7c:	ebba 0b04 	subs.w	fp, sl, r4
 8010d80:	d00b      	beq.n	8010d9a <_svfiprintf_r+0x7e>
 8010d82:	465b      	mov	r3, fp
 8010d84:	4622      	mov	r2, r4
 8010d86:	4629      	mov	r1, r5
 8010d88:	4638      	mov	r0, r7
 8010d8a:	f7ff ff6b 	bl	8010c64 <__ssputs_r>
 8010d8e:	3001      	adds	r0, #1
 8010d90:	f000 80a7 	beq.w	8010ee2 <_svfiprintf_r+0x1c6>
 8010d94:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010d96:	445a      	add	r2, fp
 8010d98:	9209      	str	r2, [sp, #36]	@ 0x24
 8010d9a:	f89a 3000 	ldrb.w	r3, [sl]
 8010d9e:	2b00      	cmp	r3, #0
 8010da0:	f000 809f 	beq.w	8010ee2 <_svfiprintf_r+0x1c6>
 8010da4:	2300      	movs	r3, #0
 8010da6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010daa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010dae:	f10a 0a01 	add.w	sl, sl, #1
 8010db2:	9304      	str	r3, [sp, #16]
 8010db4:	9307      	str	r3, [sp, #28]
 8010db6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010dba:	931a      	str	r3, [sp, #104]	@ 0x68
 8010dbc:	4654      	mov	r4, sl
 8010dbe:	2205      	movs	r2, #5
 8010dc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010dc4:	484e      	ldr	r0, [pc, #312]	@ (8010f00 <_svfiprintf_r+0x1e4>)
 8010dc6:	f7ef fa3b 	bl	8000240 <memchr>
 8010dca:	9a04      	ldr	r2, [sp, #16]
 8010dcc:	b9d8      	cbnz	r0, 8010e06 <_svfiprintf_r+0xea>
 8010dce:	06d0      	lsls	r0, r2, #27
 8010dd0:	bf44      	itt	mi
 8010dd2:	2320      	movmi	r3, #32
 8010dd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010dd8:	0711      	lsls	r1, r2, #28
 8010dda:	bf44      	itt	mi
 8010ddc:	232b      	movmi	r3, #43	@ 0x2b
 8010dde:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010de2:	f89a 3000 	ldrb.w	r3, [sl]
 8010de6:	2b2a      	cmp	r3, #42	@ 0x2a
 8010de8:	d015      	beq.n	8010e16 <_svfiprintf_r+0xfa>
 8010dea:	9a07      	ldr	r2, [sp, #28]
 8010dec:	4654      	mov	r4, sl
 8010dee:	2000      	movs	r0, #0
 8010df0:	f04f 0c0a 	mov.w	ip, #10
 8010df4:	4621      	mov	r1, r4
 8010df6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010dfa:	3b30      	subs	r3, #48	@ 0x30
 8010dfc:	2b09      	cmp	r3, #9
 8010dfe:	d94b      	bls.n	8010e98 <_svfiprintf_r+0x17c>
 8010e00:	b1b0      	cbz	r0, 8010e30 <_svfiprintf_r+0x114>
 8010e02:	9207      	str	r2, [sp, #28]
 8010e04:	e014      	b.n	8010e30 <_svfiprintf_r+0x114>
 8010e06:	eba0 0308 	sub.w	r3, r0, r8
 8010e0a:	fa09 f303 	lsl.w	r3, r9, r3
 8010e0e:	4313      	orrs	r3, r2
 8010e10:	9304      	str	r3, [sp, #16]
 8010e12:	46a2      	mov	sl, r4
 8010e14:	e7d2      	b.n	8010dbc <_svfiprintf_r+0xa0>
 8010e16:	9b03      	ldr	r3, [sp, #12]
 8010e18:	1d19      	adds	r1, r3, #4
 8010e1a:	681b      	ldr	r3, [r3, #0]
 8010e1c:	9103      	str	r1, [sp, #12]
 8010e1e:	2b00      	cmp	r3, #0
 8010e20:	bfbb      	ittet	lt
 8010e22:	425b      	neglt	r3, r3
 8010e24:	f042 0202 	orrlt.w	r2, r2, #2
 8010e28:	9307      	strge	r3, [sp, #28]
 8010e2a:	9307      	strlt	r3, [sp, #28]
 8010e2c:	bfb8      	it	lt
 8010e2e:	9204      	strlt	r2, [sp, #16]
 8010e30:	7823      	ldrb	r3, [r4, #0]
 8010e32:	2b2e      	cmp	r3, #46	@ 0x2e
 8010e34:	d10a      	bne.n	8010e4c <_svfiprintf_r+0x130>
 8010e36:	7863      	ldrb	r3, [r4, #1]
 8010e38:	2b2a      	cmp	r3, #42	@ 0x2a
 8010e3a:	d132      	bne.n	8010ea2 <_svfiprintf_r+0x186>
 8010e3c:	9b03      	ldr	r3, [sp, #12]
 8010e3e:	1d1a      	adds	r2, r3, #4
 8010e40:	681b      	ldr	r3, [r3, #0]
 8010e42:	9203      	str	r2, [sp, #12]
 8010e44:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010e48:	3402      	adds	r4, #2
 8010e4a:	9305      	str	r3, [sp, #20]
 8010e4c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8010f10 <_svfiprintf_r+0x1f4>
 8010e50:	7821      	ldrb	r1, [r4, #0]
 8010e52:	2203      	movs	r2, #3
 8010e54:	4650      	mov	r0, sl
 8010e56:	f7ef f9f3 	bl	8000240 <memchr>
 8010e5a:	b138      	cbz	r0, 8010e6c <_svfiprintf_r+0x150>
 8010e5c:	9b04      	ldr	r3, [sp, #16]
 8010e5e:	eba0 000a 	sub.w	r0, r0, sl
 8010e62:	2240      	movs	r2, #64	@ 0x40
 8010e64:	4082      	lsls	r2, r0
 8010e66:	4313      	orrs	r3, r2
 8010e68:	3401      	adds	r4, #1
 8010e6a:	9304      	str	r3, [sp, #16]
 8010e6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010e70:	4824      	ldr	r0, [pc, #144]	@ (8010f04 <_svfiprintf_r+0x1e8>)
 8010e72:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010e76:	2206      	movs	r2, #6
 8010e78:	f7ef f9e2 	bl	8000240 <memchr>
 8010e7c:	2800      	cmp	r0, #0
 8010e7e:	d036      	beq.n	8010eee <_svfiprintf_r+0x1d2>
 8010e80:	4b21      	ldr	r3, [pc, #132]	@ (8010f08 <_svfiprintf_r+0x1ec>)
 8010e82:	bb1b      	cbnz	r3, 8010ecc <_svfiprintf_r+0x1b0>
 8010e84:	9b03      	ldr	r3, [sp, #12]
 8010e86:	3307      	adds	r3, #7
 8010e88:	f023 0307 	bic.w	r3, r3, #7
 8010e8c:	3308      	adds	r3, #8
 8010e8e:	9303      	str	r3, [sp, #12]
 8010e90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010e92:	4433      	add	r3, r6
 8010e94:	9309      	str	r3, [sp, #36]	@ 0x24
 8010e96:	e76a      	b.n	8010d6e <_svfiprintf_r+0x52>
 8010e98:	fb0c 3202 	mla	r2, ip, r2, r3
 8010e9c:	460c      	mov	r4, r1
 8010e9e:	2001      	movs	r0, #1
 8010ea0:	e7a8      	b.n	8010df4 <_svfiprintf_r+0xd8>
 8010ea2:	2300      	movs	r3, #0
 8010ea4:	3401      	adds	r4, #1
 8010ea6:	9305      	str	r3, [sp, #20]
 8010ea8:	4619      	mov	r1, r3
 8010eaa:	f04f 0c0a 	mov.w	ip, #10
 8010eae:	4620      	mov	r0, r4
 8010eb0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010eb4:	3a30      	subs	r2, #48	@ 0x30
 8010eb6:	2a09      	cmp	r2, #9
 8010eb8:	d903      	bls.n	8010ec2 <_svfiprintf_r+0x1a6>
 8010eba:	2b00      	cmp	r3, #0
 8010ebc:	d0c6      	beq.n	8010e4c <_svfiprintf_r+0x130>
 8010ebe:	9105      	str	r1, [sp, #20]
 8010ec0:	e7c4      	b.n	8010e4c <_svfiprintf_r+0x130>
 8010ec2:	fb0c 2101 	mla	r1, ip, r1, r2
 8010ec6:	4604      	mov	r4, r0
 8010ec8:	2301      	movs	r3, #1
 8010eca:	e7f0      	b.n	8010eae <_svfiprintf_r+0x192>
 8010ecc:	ab03      	add	r3, sp, #12
 8010ece:	9300      	str	r3, [sp, #0]
 8010ed0:	462a      	mov	r2, r5
 8010ed2:	4b0e      	ldr	r3, [pc, #56]	@ (8010f0c <_svfiprintf_r+0x1f0>)
 8010ed4:	a904      	add	r1, sp, #16
 8010ed6:	4638      	mov	r0, r7
 8010ed8:	f3af 8000 	nop.w
 8010edc:	1c42      	adds	r2, r0, #1
 8010ede:	4606      	mov	r6, r0
 8010ee0:	d1d6      	bne.n	8010e90 <_svfiprintf_r+0x174>
 8010ee2:	89ab      	ldrh	r3, [r5, #12]
 8010ee4:	065b      	lsls	r3, r3, #25
 8010ee6:	f53f af2d 	bmi.w	8010d44 <_svfiprintf_r+0x28>
 8010eea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010eec:	e72c      	b.n	8010d48 <_svfiprintf_r+0x2c>
 8010eee:	ab03      	add	r3, sp, #12
 8010ef0:	9300      	str	r3, [sp, #0]
 8010ef2:	462a      	mov	r2, r5
 8010ef4:	4b05      	ldr	r3, [pc, #20]	@ (8010f0c <_svfiprintf_r+0x1f0>)
 8010ef6:	a904      	add	r1, sp, #16
 8010ef8:	4638      	mov	r0, r7
 8010efa:	f000 f9bb 	bl	8011274 <_printf_i>
 8010efe:	e7ed      	b.n	8010edc <_svfiprintf_r+0x1c0>
 8010f00:	08012317 	.word	0x08012317
 8010f04:	08012321 	.word	0x08012321
 8010f08:	00000000 	.word	0x00000000
 8010f0c:	08010c65 	.word	0x08010c65
 8010f10:	0801231d 	.word	0x0801231d

08010f14 <__sfputc_r>:
 8010f14:	6893      	ldr	r3, [r2, #8]
 8010f16:	3b01      	subs	r3, #1
 8010f18:	2b00      	cmp	r3, #0
 8010f1a:	b410      	push	{r4}
 8010f1c:	6093      	str	r3, [r2, #8]
 8010f1e:	da08      	bge.n	8010f32 <__sfputc_r+0x1e>
 8010f20:	6994      	ldr	r4, [r2, #24]
 8010f22:	42a3      	cmp	r3, r4
 8010f24:	db01      	blt.n	8010f2a <__sfputc_r+0x16>
 8010f26:	290a      	cmp	r1, #10
 8010f28:	d103      	bne.n	8010f32 <__sfputc_r+0x1e>
 8010f2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010f2e:	f000 bb7d 	b.w	801162c <__swbuf_r>
 8010f32:	6813      	ldr	r3, [r2, #0]
 8010f34:	1c58      	adds	r0, r3, #1
 8010f36:	6010      	str	r0, [r2, #0]
 8010f38:	7019      	strb	r1, [r3, #0]
 8010f3a:	4608      	mov	r0, r1
 8010f3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010f40:	4770      	bx	lr

08010f42 <__sfputs_r>:
 8010f42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f44:	4606      	mov	r6, r0
 8010f46:	460f      	mov	r7, r1
 8010f48:	4614      	mov	r4, r2
 8010f4a:	18d5      	adds	r5, r2, r3
 8010f4c:	42ac      	cmp	r4, r5
 8010f4e:	d101      	bne.n	8010f54 <__sfputs_r+0x12>
 8010f50:	2000      	movs	r0, #0
 8010f52:	e007      	b.n	8010f64 <__sfputs_r+0x22>
 8010f54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010f58:	463a      	mov	r2, r7
 8010f5a:	4630      	mov	r0, r6
 8010f5c:	f7ff ffda 	bl	8010f14 <__sfputc_r>
 8010f60:	1c43      	adds	r3, r0, #1
 8010f62:	d1f3      	bne.n	8010f4c <__sfputs_r+0xa>
 8010f64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010f68 <_vfiprintf_r>:
 8010f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f6c:	460d      	mov	r5, r1
 8010f6e:	b09d      	sub	sp, #116	@ 0x74
 8010f70:	4614      	mov	r4, r2
 8010f72:	4698      	mov	r8, r3
 8010f74:	4606      	mov	r6, r0
 8010f76:	b118      	cbz	r0, 8010f80 <_vfiprintf_r+0x18>
 8010f78:	6a03      	ldr	r3, [r0, #32]
 8010f7a:	b90b      	cbnz	r3, 8010f80 <_vfiprintf_r+0x18>
 8010f7c:	f7ff fc20 	bl	80107c0 <__sinit>
 8010f80:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010f82:	07d9      	lsls	r1, r3, #31
 8010f84:	d405      	bmi.n	8010f92 <_vfiprintf_r+0x2a>
 8010f86:	89ab      	ldrh	r3, [r5, #12]
 8010f88:	059a      	lsls	r2, r3, #22
 8010f8a:	d402      	bmi.n	8010f92 <_vfiprintf_r+0x2a>
 8010f8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010f8e:	f7ff fdd4 	bl	8010b3a <__retarget_lock_acquire_recursive>
 8010f92:	89ab      	ldrh	r3, [r5, #12]
 8010f94:	071b      	lsls	r3, r3, #28
 8010f96:	d501      	bpl.n	8010f9c <_vfiprintf_r+0x34>
 8010f98:	692b      	ldr	r3, [r5, #16]
 8010f9a:	b99b      	cbnz	r3, 8010fc4 <_vfiprintf_r+0x5c>
 8010f9c:	4629      	mov	r1, r5
 8010f9e:	4630      	mov	r0, r6
 8010fa0:	f000 fb82 	bl	80116a8 <__swsetup_r>
 8010fa4:	b170      	cbz	r0, 8010fc4 <_vfiprintf_r+0x5c>
 8010fa6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010fa8:	07dc      	lsls	r4, r3, #31
 8010faa:	d504      	bpl.n	8010fb6 <_vfiprintf_r+0x4e>
 8010fac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010fb0:	b01d      	add	sp, #116	@ 0x74
 8010fb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010fb6:	89ab      	ldrh	r3, [r5, #12]
 8010fb8:	0598      	lsls	r0, r3, #22
 8010fba:	d4f7      	bmi.n	8010fac <_vfiprintf_r+0x44>
 8010fbc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010fbe:	f7ff fdbd 	bl	8010b3c <__retarget_lock_release_recursive>
 8010fc2:	e7f3      	b.n	8010fac <_vfiprintf_r+0x44>
 8010fc4:	2300      	movs	r3, #0
 8010fc6:	9309      	str	r3, [sp, #36]	@ 0x24
 8010fc8:	2320      	movs	r3, #32
 8010fca:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010fce:	f8cd 800c 	str.w	r8, [sp, #12]
 8010fd2:	2330      	movs	r3, #48	@ 0x30
 8010fd4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8011184 <_vfiprintf_r+0x21c>
 8010fd8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010fdc:	f04f 0901 	mov.w	r9, #1
 8010fe0:	4623      	mov	r3, r4
 8010fe2:	469a      	mov	sl, r3
 8010fe4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010fe8:	b10a      	cbz	r2, 8010fee <_vfiprintf_r+0x86>
 8010fea:	2a25      	cmp	r2, #37	@ 0x25
 8010fec:	d1f9      	bne.n	8010fe2 <_vfiprintf_r+0x7a>
 8010fee:	ebba 0b04 	subs.w	fp, sl, r4
 8010ff2:	d00b      	beq.n	801100c <_vfiprintf_r+0xa4>
 8010ff4:	465b      	mov	r3, fp
 8010ff6:	4622      	mov	r2, r4
 8010ff8:	4629      	mov	r1, r5
 8010ffa:	4630      	mov	r0, r6
 8010ffc:	f7ff ffa1 	bl	8010f42 <__sfputs_r>
 8011000:	3001      	adds	r0, #1
 8011002:	f000 80a7 	beq.w	8011154 <_vfiprintf_r+0x1ec>
 8011006:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011008:	445a      	add	r2, fp
 801100a:	9209      	str	r2, [sp, #36]	@ 0x24
 801100c:	f89a 3000 	ldrb.w	r3, [sl]
 8011010:	2b00      	cmp	r3, #0
 8011012:	f000 809f 	beq.w	8011154 <_vfiprintf_r+0x1ec>
 8011016:	2300      	movs	r3, #0
 8011018:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801101c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011020:	f10a 0a01 	add.w	sl, sl, #1
 8011024:	9304      	str	r3, [sp, #16]
 8011026:	9307      	str	r3, [sp, #28]
 8011028:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801102c:	931a      	str	r3, [sp, #104]	@ 0x68
 801102e:	4654      	mov	r4, sl
 8011030:	2205      	movs	r2, #5
 8011032:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011036:	4853      	ldr	r0, [pc, #332]	@ (8011184 <_vfiprintf_r+0x21c>)
 8011038:	f7ef f902 	bl	8000240 <memchr>
 801103c:	9a04      	ldr	r2, [sp, #16]
 801103e:	b9d8      	cbnz	r0, 8011078 <_vfiprintf_r+0x110>
 8011040:	06d1      	lsls	r1, r2, #27
 8011042:	bf44      	itt	mi
 8011044:	2320      	movmi	r3, #32
 8011046:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801104a:	0713      	lsls	r3, r2, #28
 801104c:	bf44      	itt	mi
 801104e:	232b      	movmi	r3, #43	@ 0x2b
 8011050:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011054:	f89a 3000 	ldrb.w	r3, [sl]
 8011058:	2b2a      	cmp	r3, #42	@ 0x2a
 801105a:	d015      	beq.n	8011088 <_vfiprintf_r+0x120>
 801105c:	9a07      	ldr	r2, [sp, #28]
 801105e:	4654      	mov	r4, sl
 8011060:	2000      	movs	r0, #0
 8011062:	f04f 0c0a 	mov.w	ip, #10
 8011066:	4621      	mov	r1, r4
 8011068:	f811 3b01 	ldrb.w	r3, [r1], #1
 801106c:	3b30      	subs	r3, #48	@ 0x30
 801106e:	2b09      	cmp	r3, #9
 8011070:	d94b      	bls.n	801110a <_vfiprintf_r+0x1a2>
 8011072:	b1b0      	cbz	r0, 80110a2 <_vfiprintf_r+0x13a>
 8011074:	9207      	str	r2, [sp, #28]
 8011076:	e014      	b.n	80110a2 <_vfiprintf_r+0x13a>
 8011078:	eba0 0308 	sub.w	r3, r0, r8
 801107c:	fa09 f303 	lsl.w	r3, r9, r3
 8011080:	4313      	orrs	r3, r2
 8011082:	9304      	str	r3, [sp, #16]
 8011084:	46a2      	mov	sl, r4
 8011086:	e7d2      	b.n	801102e <_vfiprintf_r+0xc6>
 8011088:	9b03      	ldr	r3, [sp, #12]
 801108a:	1d19      	adds	r1, r3, #4
 801108c:	681b      	ldr	r3, [r3, #0]
 801108e:	9103      	str	r1, [sp, #12]
 8011090:	2b00      	cmp	r3, #0
 8011092:	bfbb      	ittet	lt
 8011094:	425b      	neglt	r3, r3
 8011096:	f042 0202 	orrlt.w	r2, r2, #2
 801109a:	9307      	strge	r3, [sp, #28]
 801109c:	9307      	strlt	r3, [sp, #28]
 801109e:	bfb8      	it	lt
 80110a0:	9204      	strlt	r2, [sp, #16]
 80110a2:	7823      	ldrb	r3, [r4, #0]
 80110a4:	2b2e      	cmp	r3, #46	@ 0x2e
 80110a6:	d10a      	bne.n	80110be <_vfiprintf_r+0x156>
 80110a8:	7863      	ldrb	r3, [r4, #1]
 80110aa:	2b2a      	cmp	r3, #42	@ 0x2a
 80110ac:	d132      	bne.n	8011114 <_vfiprintf_r+0x1ac>
 80110ae:	9b03      	ldr	r3, [sp, #12]
 80110b0:	1d1a      	adds	r2, r3, #4
 80110b2:	681b      	ldr	r3, [r3, #0]
 80110b4:	9203      	str	r2, [sp, #12]
 80110b6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80110ba:	3402      	adds	r4, #2
 80110bc:	9305      	str	r3, [sp, #20]
 80110be:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8011194 <_vfiprintf_r+0x22c>
 80110c2:	7821      	ldrb	r1, [r4, #0]
 80110c4:	2203      	movs	r2, #3
 80110c6:	4650      	mov	r0, sl
 80110c8:	f7ef f8ba 	bl	8000240 <memchr>
 80110cc:	b138      	cbz	r0, 80110de <_vfiprintf_r+0x176>
 80110ce:	9b04      	ldr	r3, [sp, #16]
 80110d0:	eba0 000a 	sub.w	r0, r0, sl
 80110d4:	2240      	movs	r2, #64	@ 0x40
 80110d6:	4082      	lsls	r2, r0
 80110d8:	4313      	orrs	r3, r2
 80110da:	3401      	adds	r4, #1
 80110dc:	9304      	str	r3, [sp, #16]
 80110de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80110e2:	4829      	ldr	r0, [pc, #164]	@ (8011188 <_vfiprintf_r+0x220>)
 80110e4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80110e8:	2206      	movs	r2, #6
 80110ea:	f7ef f8a9 	bl	8000240 <memchr>
 80110ee:	2800      	cmp	r0, #0
 80110f0:	d03f      	beq.n	8011172 <_vfiprintf_r+0x20a>
 80110f2:	4b26      	ldr	r3, [pc, #152]	@ (801118c <_vfiprintf_r+0x224>)
 80110f4:	bb1b      	cbnz	r3, 801113e <_vfiprintf_r+0x1d6>
 80110f6:	9b03      	ldr	r3, [sp, #12]
 80110f8:	3307      	adds	r3, #7
 80110fa:	f023 0307 	bic.w	r3, r3, #7
 80110fe:	3308      	adds	r3, #8
 8011100:	9303      	str	r3, [sp, #12]
 8011102:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011104:	443b      	add	r3, r7
 8011106:	9309      	str	r3, [sp, #36]	@ 0x24
 8011108:	e76a      	b.n	8010fe0 <_vfiprintf_r+0x78>
 801110a:	fb0c 3202 	mla	r2, ip, r2, r3
 801110e:	460c      	mov	r4, r1
 8011110:	2001      	movs	r0, #1
 8011112:	e7a8      	b.n	8011066 <_vfiprintf_r+0xfe>
 8011114:	2300      	movs	r3, #0
 8011116:	3401      	adds	r4, #1
 8011118:	9305      	str	r3, [sp, #20]
 801111a:	4619      	mov	r1, r3
 801111c:	f04f 0c0a 	mov.w	ip, #10
 8011120:	4620      	mov	r0, r4
 8011122:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011126:	3a30      	subs	r2, #48	@ 0x30
 8011128:	2a09      	cmp	r2, #9
 801112a:	d903      	bls.n	8011134 <_vfiprintf_r+0x1cc>
 801112c:	2b00      	cmp	r3, #0
 801112e:	d0c6      	beq.n	80110be <_vfiprintf_r+0x156>
 8011130:	9105      	str	r1, [sp, #20]
 8011132:	e7c4      	b.n	80110be <_vfiprintf_r+0x156>
 8011134:	fb0c 2101 	mla	r1, ip, r1, r2
 8011138:	4604      	mov	r4, r0
 801113a:	2301      	movs	r3, #1
 801113c:	e7f0      	b.n	8011120 <_vfiprintf_r+0x1b8>
 801113e:	ab03      	add	r3, sp, #12
 8011140:	9300      	str	r3, [sp, #0]
 8011142:	462a      	mov	r2, r5
 8011144:	4b12      	ldr	r3, [pc, #72]	@ (8011190 <_vfiprintf_r+0x228>)
 8011146:	a904      	add	r1, sp, #16
 8011148:	4630      	mov	r0, r6
 801114a:	f3af 8000 	nop.w
 801114e:	4607      	mov	r7, r0
 8011150:	1c78      	adds	r0, r7, #1
 8011152:	d1d6      	bne.n	8011102 <_vfiprintf_r+0x19a>
 8011154:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011156:	07d9      	lsls	r1, r3, #31
 8011158:	d405      	bmi.n	8011166 <_vfiprintf_r+0x1fe>
 801115a:	89ab      	ldrh	r3, [r5, #12]
 801115c:	059a      	lsls	r2, r3, #22
 801115e:	d402      	bmi.n	8011166 <_vfiprintf_r+0x1fe>
 8011160:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011162:	f7ff fceb 	bl	8010b3c <__retarget_lock_release_recursive>
 8011166:	89ab      	ldrh	r3, [r5, #12]
 8011168:	065b      	lsls	r3, r3, #25
 801116a:	f53f af1f 	bmi.w	8010fac <_vfiprintf_r+0x44>
 801116e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011170:	e71e      	b.n	8010fb0 <_vfiprintf_r+0x48>
 8011172:	ab03      	add	r3, sp, #12
 8011174:	9300      	str	r3, [sp, #0]
 8011176:	462a      	mov	r2, r5
 8011178:	4b05      	ldr	r3, [pc, #20]	@ (8011190 <_vfiprintf_r+0x228>)
 801117a:	a904      	add	r1, sp, #16
 801117c:	4630      	mov	r0, r6
 801117e:	f000 f879 	bl	8011274 <_printf_i>
 8011182:	e7e4      	b.n	801114e <_vfiprintf_r+0x1e6>
 8011184:	08012317 	.word	0x08012317
 8011188:	08012321 	.word	0x08012321
 801118c:	00000000 	.word	0x00000000
 8011190:	08010f43 	.word	0x08010f43
 8011194:	0801231d 	.word	0x0801231d

08011198 <_printf_common>:
 8011198:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801119c:	4616      	mov	r6, r2
 801119e:	4698      	mov	r8, r3
 80111a0:	688a      	ldr	r2, [r1, #8]
 80111a2:	690b      	ldr	r3, [r1, #16]
 80111a4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80111a8:	4293      	cmp	r3, r2
 80111aa:	bfb8      	it	lt
 80111ac:	4613      	movlt	r3, r2
 80111ae:	6033      	str	r3, [r6, #0]
 80111b0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80111b4:	4607      	mov	r7, r0
 80111b6:	460c      	mov	r4, r1
 80111b8:	b10a      	cbz	r2, 80111be <_printf_common+0x26>
 80111ba:	3301      	adds	r3, #1
 80111bc:	6033      	str	r3, [r6, #0]
 80111be:	6823      	ldr	r3, [r4, #0]
 80111c0:	0699      	lsls	r1, r3, #26
 80111c2:	bf42      	ittt	mi
 80111c4:	6833      	ldrmi	r3, [r6, #0]
 80111c6:	3302      	addmi	r3, #2
 80111c8:	6033      	strmi	r3, [r6, #0]
 80111ca:	6825      	ldr	r5, [r4, #0]
 80111cc:	f015 0506 	ands.w	r5, r5, #6
 80111d0:	d106      	bne.n	80111e0 <_printf_common+0x48>
 80111d2:	f104 0a19 	add.w	sl, r4, #25
 80111d6:	68e3      	ldr	r3, [r4, #12]
 80111d8:	6832      	ldr	r2, [r6, #0]
 80111da:	1a9b      	subs	r3, r3, r2
 80111dc:	42ab      	cmp	r3, r5
 80111de:	dc26      	bgt.n	801122e <_printf_common+0x96>
 80111e0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80111e4:	6822      	ldr	r2, [r4, #0]
 80111e6:	3b00      	subs	r3, #0
 80111e8:	bf18      	it	ne
 80111ea:	2301      	movne	r3, #1
 80111ec:	0692      	lsls	r2, r2, #26
 80111ee:	d42b      	bmi.n	8011248 <_printf_common+0xb0>
 80111f0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80111f4:	4641      	mov	r1, r8
 80111f6:	4638      	mov	r0, r7
 80111f8:	47c8      	blx	r9
 80111fa:	3001      	adds	r0, #1
 80111fc:	d01e      	beq.n	801123c <_printf_common+0xa4>
 80111fe:	6823      	ldr	r3, [r4, #0]
 8011200:	6922      	ldr	r2, [r4, #16]
 8011202:	f003 0306 	and.w	r3, r3, #6
 8011206:	2b04      	cmp	r3, #4
 8011208:	bf02      	ittt	eq
 801120a:	68e5      	ldreq	r5, [r4, #12]
 801120c:	6833      	ldreq	r3, [r6, #0]
 801120e:	1aed      	subeq	r5, r5, r3
 8011210:	68a3      	ldr	r3, [r4, #8]
 8011212:	bf0c      	ite	eq
 8011214:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011218:	2500      	movne	r5, #0
 801121a:	4293      	cmp	r3, r2
 801121c:	bfc4      	itt	gt
 801121e:	1a9b      	subgt	r3, r3, r2
 8011220:	18ed      	addgt	r5, r5, r3
 8011222:	2600      	movs	r6, #0
 8011224:	341a      	adds	r4, #26
 8011226:	42b5      	cmp	r5, r6
 8011228:	d11a      	bne.n	8011260 <_printf_common+0xc8>
 801122a:	2000      	movs	r0, #0
 801122c:	e008      	b.n	8011240 <_printf_common+0xa8>
 801122e:	2301      	movs	r3, #1
 8011230:	4652      	mov	r2, sl
 8011232:	4641      	mov	r1, r8
 8011234:	4638      	mov	r0, r7
 8011236:	47c8      	blx	r9
 8011238:	3001      	adds	r0, #1
 801123a:	d103      	bne.n	8011244 <_printf_common+0xac>
 801123c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011240:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011244:	3501      	adds	r5, #1
 8011246:	e7c6      	b.n	80111d6 <_printf_common+0x3e>
 8011248:	18e1      	adds	r1, r4, r3
 801124a:	1c5a      	adds	r2, r3, #1
 801124c:	2030      	movs	r0, #48	@ 0x30
 801124e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8011252:	4422      	add	r2, r4
 8011254:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8011258:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801125c:	3302      	adds	r3, #2
 801125e:	e7c7      	b.n	80111f0 <_printf_common+0x58>
 8011260:	2301      	movs	r3, #1
 8011262:	4622      	mov	r2, r4
 8011264:	4641      	mov	r1, r8
 8011266:	4638      	mov	r0, r7
 8011268:	47c8      	blx	r9
 801126a:	3001      	adds	r0, #1
 801126c:	d0e6      	beq.n	801123c <_printf_common+0xa4>
 801126e:	3601      	adds	r6, #1
 8011270:	e7d9      	b.n	8011226 <_printf_common+0x8e>
	...

08011274 <_printf_i>:
 8011274:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011278:	7e0f      	ldrb	r7, [r1, #24]
 801127a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801127c:	2f78      	cmp	r7, #120	@ 0x78
 801127e:	4691      	mov	r9, r2
 8011280:	4680      	mov	r8, r0
 8011282:	460c      	mov	r4, r1
 8011284:	469a      	mov	sl, r3
 8011286:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801128a:	d807      	bhi.n	801129c <_printf_i+0x28>
 801128c:	2f62      	cmp	r7, #98	@ 0x62
 801128e:	d80a      	bhi.n	80112a6 <_printf_i+0x32>
 8011290:	2f00      	cmp	r7, #0
 8011292:	f000 80d1 	beq.w	8011438 <_printf_i+0x1c4>
 8011296:	2f58      	cmp	r7, #88	@ 0x58
 8011298:	f000 80b8 	beq.w	801140c <_printf_i+0x198>
 801129c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80112a0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80112a4:	e03a      	b.n	801131c <_printf_i+0xa8>
 80112a6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80112aa:	2b15      	cmp	r3, #21
 80112ac:	d8f6      	bhi.n	801129c <_printf_i+0x28>
 80112ae:	a101      	add	r1, pc, #4	@ (adr r1, 80112b4 <_printf_i+0x40>)
 80112b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80112b4:	0801130d 	.word	0x0801130d
 80112b8:	08011321 	.word	0x08011321
 80112bc:	0801129d 	.word	0x0801129d
 80112c0:	0801129d 	.word	0x0801129d
 80112c4:	0801129d 	.word	0x0801129d
 80112c8:	0801129d 	.word	0x0801129d
 80112cc:	08011321 	.word	0x08011321
 80112d0:	0801129d 	.word	0x0801129d
 80112d4:	0801129d 	.word	0x0801129d
 80112d8:	0801129d 	.word	0x0801129d
 80112dc:	0801129d 	.word	0x0801129d
 80112e0:	0801141f 	.word	0x0801141f
 80112e4:	0801134b 	.word	0x0801134b
 80112e8:	080113d9 	.word	0x080113d9
 80112ec:	0801129d 	.word	0x0801129d
 80112f0:	0801129d 	.word	0x0801129d
 80112f4:	08011441 	.word	0x08011441
 80112f8:	0801129d 	.word	0x0801129d
 80112fc:	0801134b 	.word	0x0801134b
 8011300:	0801129d 	.word	0x0801129d
 8011304:	0801129d 	.word	0x0801129d
 8011308:	080113e1 	.word	0x080113e1
 801130c:	6833      	ldr	r3, [r6, #0]
 801130e:	1d1a      	adds	r2, r3, #4
 8011310:	681b      	ldr	r3, [r3, #0]
 8011312:	6032      	str	r2, [r6, #0]
 8011314:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011318:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801131c:	2301      	movs	r3, #1
 801131e:	e09c      	b.n	801145a <_printf_i+0x1e6>
 8011320:	6833      	ldr	r3, [r6, #0]
 8011322:	6820      	ldr	r0, [r4, #0]
 8011324:	1d19      	adds	r1, r3, #4
 8011326:	6031      	str	r1, [r6, #0]
 8011328:	0606      	lsls	r6, r0, #24
 801132a:	d501      	bpl.n	8011330 <_printf_i+0xbc>
 801132c:	681d      	ldr	r5, [r3, #0]
 801132e:	e003      	b.n	8011338 <_printf_i+0xc4>
 8011330:	0645      	lsls	r5, r0, #25
 8011332:	d5fb      	bpl.n	801132c <_printf_i+0xb8>
 8011334:	f9b3 5000 	ldrsh.w	r5, [r3]
 8011338:	2d00      	cmp	r5, #0
 801133a:	da03      	bge.n	8011344 <_printf_i+0xd0>
 801133c:	232d      	movs	r3, #45	@ 0x2d
 801133e:	426d      	negs	r5, r5
 8011340:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011344:	4858      	ldr	r0, [pc, #352]	@ (80114a8 <_printf_i+0x234>)
 8011346:	230a      	movs	r3, #10
 8011348:	e011      	b.n	801136e <_printf_i+0xfa>
 801134a:	6821      	ldr	r1, [r4, #0]
 801134c:	6833      	ldr	r3, [r6, #0]
 801134e:	0608      	lsls	r0, r1, #24
 8011350:	f853 5b04 	ldr.w	r5, [r3], #4
 8011354:	d402      	bmi.n	801135c <_printf_i+0xe8>
 8011356:	0649      	lsls	r1, r1, #25
 8011358:	bf48      	it	mi
 801135a:	b2ad      	uxthmi	r5, r5
 801135c:	2f6f      	cmp	r7, #111	@ 0x6f
 801135e:	4852      	ldr	r0, [pc, #328]	@ (80114a8 <_printf_i+0x234>)
 8011360:	6033      	str	r3, [r6, #0]
 8011362:	bf14      	ite	ne
 8011364:	230a      	movne	r3, #10
 8011366:	2308      	moveq	r3, #8
 8011368:	2100      	movs	r1, #0
 801136a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801136e:	6866      	ldr	r6, [r4, #4]
 8011370:	60a6      	str	r6, [r4, #8]
 8011372:	2e00      	cmp	r6, #0
 8011374:	db05      	blt.n	8011382 <_printf_i+0x10e>
 8011376:	6821      	ldr	r1, [r4, #0]
 8011378:	432e      	orrs	r6, r5
 801137a:	f021 0104 	bic.w	r1, r1, #4
 801137e:	6021      	str	r1, [r4, #0]
 8011380:	d04b      	beq.n	801141a <_printf_i+0x1a6>
 8011382:	4616      	mov	r6, r2
 8011384:	fbb5 f1f3 	udiv	r1, r5, r3
 8011388:	fb03 5711 	mls	r7, r3, r1, r5
 801138c:	5dc7      	ldrb	r7, [r0, r7]
 801138e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011392:	462f      	mov	r7, r5
 8011394:	42bb      	cmp	r3, r7
 8011396:	460d      	mov	r5, r1
 8011398:	d9f4      	bls.n	8011384 <_printf_i+0x110>
 801139a:	2b08      	cmp	r3, #8
 801139c:	d10b      	bne.n	80113b6 <_printf_i+0x142>
 801139e:	6823      	ldr	r3, [r4, #0]
 80113a0:	07df      	lsls	r7, r3, #31
 80113a2:	d508      	bpl.n	80113b6 <_printf_i+0x142>
 80113a4:	6923      	ldr	r3, [r4, #16]
 80113a6:	6861      	ldr	r1, [r4, #4]
 80113a8:	4299      	cmp	r1, r3
 80113aa:	bfde      	ittt	le
 80113ac:	2330      	movle	r3, #48	@ 0x30
 80113ae:	f806 3c01 	strble.w	r3, [r6, #-1]
 80113b2:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80113b6:	1b92      	subs	r2, r2, r6
 80113b8:	6122      	str	r2, [r4, #16]
 80113ba:	f8cd a000 	str.w	sl, [sp]
 80113be:	464b      	mov	r3, r9
 80113c0:	aa03      	add	r2, sp, #12
 80113c2:	4621      	mov	r1, r4
 80113c4:	4640      	mov	r0, r8
 80113c6:	f7ff fee7 	bl	8011198 <_printf_common>
 80113ca:	3001      	adds	r0, #1
 80113cc:	d14a      	bne.n	8011464 <_printf_i+0x1f0>
 80113ce:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80113d2:	b004      	add	sp, #16
 80113d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80113d8:	6823      	ldr	r3, [r4, #0]
 80113da:	f043 0320 	orr.w	r3, r3, #32
 80113de:	6023      	str	r3, [r4, #0]
 80113e0:	4832      	ldr	r0, [pc, #200]	@ (80114ac <_printf_i+0x238>)
 80113e2:	2778      	movs	r7, #120	@ 0x78
 80113e4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80113e8:	6823      	ldr	r3, [r4, #0]
 80113ea:	6831      	ldr	r1, [r6, #0]
 80113ec:	061f      	lsls	r7, r3, #24
 80113ee:	f851 5b04 	ldr.w	r5, [r1], #4
 80113f2:	d402      	bmi.n	80113fa <_printf_i+0x186>
 80113f4:	065f      	lsls	r7, r3, #25
 80113f6:	bf48      	it	mi
 80113f8:	b2ad      	uxthmi	r5, r5
 80113fa:	6031      	str	r1, [r6, #0]
 80113fc:	07d9      	lsls	r1, r3, #31
 80113fe:	bf44      	itt	mi
 8011400:	f043 0320 	orrmi.w	r3, r3, #32
 8011404:	6023      	strmi	r3, [r4, #0]
 8011406:	b11d      	cbz	r5, 8011410 <_printf_i+0x19c>
 8011408:	2310      	movs	r3, #16
 801140a:	e7ad      	b.n	8011368 <_printf_i+0xf4>
 801140c:	4826      	ldr	r0, [pc, #152]	@ (80114a8 <_printf_i+0x234>)
 801140e:	e7e9      	b.n	80113e4 <_printf_i+0x170>
 8011410:	6823      	ldr	r3, [r4, #0]
 8011412:	f023 0320 	bic.w	r3, r3, #32
 8011416:	6023      	str	r3, [r4, #0]
 8011418:	e7f6      	b.n	8011408 <_printf_i+0x194>
 801141a:	4616      	mov	r6, r2
 801141c:	e7bd      	b.n	801139a <_printf_i+0x126>
 801141e:	6833      	ldr	r3, [r6, #0]
 8011420:	6825      	ldr	r5, [r4, #0]
 8011422:	6961      	ldr	r1, [r4, #20]
 8011424:	1d18      	adds	r0, r3, #4
 8011426:	6030      	str	r0, [r6, #0]
 8011428:	062e      	lsls	r6, r5, #24
 801142a:	681b      	ldr	r3, [r3, #0]
 801142c:	d501      	bpl.n	8011432 <_printf_i+0x1be>
 801142e:	6019      	str	r1, [r3, #0]
 8011430:	e002      	b.n	8011438 <_printf_i+0x1c4>
 8011432:	0668      	lsls	r0, r5, #25
 8011434:	d5fb      	bpl.n	801142e <_printf_i+0x1ba>
 8011436:	8019      	strh	r1, [r3, #0]
 8011438:	2300      	movs	r3, #0
 801143a:	6123      	str	r3, [r4, #16]
 801143c:	4616      	mov	r6, r2
 801143e:	e7bc      	b.n	80113ba <_printf_i+0x146>
 8011440:	6833      	ldr	r3, [r6, #0]
 8011442:	1d1a      	adds	r2, r3, #4
 8011444:	6032      	str	r2, [r6, #0]
 8011446:	681e      	ldr	r6, [r3, #0]
 8011448:	6862      	ldr	r2, [r4, #4]
 801144a:	2100      	movs	r1, #0
 801144c:	4630      	mov	r0, r6
 801144e:	f7ee fef7 	bl	8000240 <memchr>
 8011452:	b108      	cbz	r0, 8011458 <_printf_i+0x1e4>
 8011454:	1b80      	subs	r0, r0, r6
 8011456:	6060      	str	r0, [r4, #4]
 8011458:	6863      	ldr	r3, [r4, #4]
 801145a:	6123      	str	r3, [r4, #16]
 801145c:	2300      	movs	r3, #0
 801145e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011462:	e7aa      	b.n	80113ba <_printf_i+0x146>
 8011464:	6923      	ldr	r3, [r4, #16]
 8011466:	4632      	mov	r2, r6
 8011468:	4649      	mov	r1, r9
 801146a:	4640      	mov	r0, r8
 801146c:	47d0      	blx	sl
 801146e:	3001      	adds	r0, #1
 8011470:	d0ad      	beq.n	80113ce <_printf_i+0x15a>
 8011472:	6823      	ldr	r3, [r4, #0]
 8011474:	079b      	lsls	r3, r3, #30
 8011476:	d413      	bmi.n	80114a0 <_printf_i+0x22c>
 8011478:	68e0      	ldr	r0, [r4, #12]
 801147a:	9b03      	ldr	r3, [sp, #12]
 801147c:	4298      	cmp	r0, r3
 801147e:	bfb8      	it	lt
 8011480:	4618      	movlt	r0, r3
 8011482:	e7a6      	b.n	80113d2 <_printf_i+0x15e>
 8011484:	2301      	movs	r3, #1
 8011486:	4632      	mov	r2, r6
 8011488:	4649      	mov	r1, r9
 801148a:	4640      	mov	r0, r8
 801148c:	47d0      	blx	sl
 801148e:	3001      	adds	r0, #1
 8011490:	d09d      	beq.n	80113ce <_printf_i+0x15a>
 8011492:	3501      	adds	r5, #1
 8011494:	68e3      	ldr	r3, [r4, #12]
 8011496:	9903      	ldr	r1, [sp, #12]
 8011498:	1a5b      	subs	r3, r3, r1
 801149a:	42ab      	cmp	r3, r5
 801149c:	dcf2      	bgt.n	8011484 <_printf_i+0x210>
 801149e:	e7eb      	b.n	8011478 <_printf_i+0x204>
 80114a0:	2500      	movs	r5, #0
 80114a2:	f104 0619 	add.w	r6, r4, #25
 80114a6:	e7f5      	b.n	8011494 <_printf_i+0x220>
 80114a8:	08012328 	.word	0x08012328
 80114ac:	08012339 	.word	0x08012339

080114b0 <__sflush_r>:
 80114b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80114b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80114b8:	0716      	lsls	r6, r2, #28
 80114ba:	4605      	mov	r5, r0
 80114bc:	460c      	mov	r4, r1
 80114be:	d454      	bmi.n	801156a <__sflush_r+0xba>
 80114c0:	684b      	ldr	r3, [r1, #4]
 80114c2:	2b00      	cmp	r3, #0
 80114c4:	dc02      	bgt.n	80114cc <__sflush_r+0x1c>
 80114c6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80114c8:	2b00      	cmp	r3, #0
 80114ca:	dd48      	ble.n	801155e <__sflush_r+0xae>
 80114cc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80114ce:	2e00      	cmp	r6, #0
 80114d0:	d045      	beq.n	801155e <__sflush_r+0xae>
 80114d2:	2300      	movs	r3, #0
 80114d4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80114d8:	682f      	ldr	r7, [r5, #0]
 80114da:	6a21      	ldr	r1, [r4, #32]
 80114dc:	602b      	str	r3, [r5, #0]
 80114de:	d030      	beq.n	8011542 <__sflush_r+0x92>
 80114e0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80114e2:	89a3      	ldrh	r3, [r4, #12]
 80114e4:	0759      	lsls	r1, r3, #29
 80114e6:	d505      	bpl.n	80114f4 <__sflush_r+0x44>
 80114e8:	6863      	ldr	r3, [r4, #4]
 80114ea:	1ad2      	subs	r2, r2, r3
 80114ec:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80114ee:	b10b      	cbz	r3, 80114f4 <__sflush_r+0x44>
 80114f0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80114f2:	1ad2      	subs	r2, r2, r3
 80114f4:	2300      	movs	r3, #0
 80114f6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80114f8:	6a21      	ldr	r1, [r4, #32]
 80114fa:	4628      	mov	r0, r5
 80114fc:	47b0      	blx	r6
 80114fe:	1c43      	adds	r3, r0, #1
 8011500:	89a3      	ldrh	r3, [r4, #12]
 8011502:	d106      	bne.n	8011512 <__sflush_r+0x62>
 8011504:	6829      	ldr	r1, [r5, #0]
 8011506:	291d      	cmp	r1, #29
 8011508:	d82b      	bhi.n	8011562 <__sflush_r+0xb2>
 801150a:	4a2a      	ldr	r2, [pc, #168]	@ (80115b4 <__sflush_r+0x104>)
 801150c:	40ca      	lsrs	r2, r1
 801150e:	07d6      	lsls	r6, r2, #31
 8011510:	d527      	bpl.n	8011562 <__sflush_r+0xb2>
 8011512:	2200      	movs	r2, #0
 8011514:	6062      	str	r2, [r4, #4]
 8011516:	04d9      	lsls	r1, r3, #19
 8011518:	6922      	ldr	r2, [r4, #16]
 801151a:	6022      	str	r2, [r4, #0]
 801151c:	d504      	bpl.n	8011528 <__sflush_r+0x78>
 801151e:	1c42      	adds	r2, r0, #1
 8011520:	d101      	bne.n	8011526 <__sflush_r+0x76>
 8011522:	682b      	ldr	r3, [r5, #0]
 8011524:	b903      	cbnz	r3, 8011528 <__sflush_r+0x78>
 8011526:	6560      	str	r0, [r4, #84]	@ 0x54
 8011528:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801152a:	602f      	str	r7, [r5, #0]
 801152c:	b1b9      	cbz	r1, 801155e <__sflush_r+0xae>
 801152e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011532:	4299      	cmp	r1, r3
 8011534:	d002      	beq.n	801153c <__sflush_r+0x8c>
 8011536:	4628      	mov	r0, r5
 8011538:	f7ff fb42 	bl	8010bc0 <_free_r>
 801153c:	2300      	movs	r3, #0
 801153e:	6363      	str	r3, [r4, #52]	@ 0x34
 8011540:	e00d      	b.n	801155e <__sflush_r+0xae>
 8011542:	2301      	movs	r3, #1
 8011544:	4628      	mov	r0, r5
 8011546:	47b0      	blx	r6
 8011548:	4602      	mov	r2, r0
 801154a:	1c50      	adds	r0, r2, #1
 801154c:	d1c9      	bne.n	80114e2 <__sflush_r+0x32>
 801154e:	682b      	ldr	r3, [r5, #0]
 8011550:	2b00      	cmp	r3, #0
 8011552:	d0c6      	beq.n	80114e2 <__sflush_r+0x32>
 8011554:	2b1d      	cmp	r3, #29
 8011556:	d001      	beq.n	801155c <__sflush_r+0xac>
 8011558:	2b16      	cmp	r3, #22
 801155a:	d11e      	bne.n	801159a <__sflush_r+0xea>
 801155c:	602f      	str	r7, [r5, #0]
 801155e:	2000      	movs	r0, #0
 8011560:	e022      	b.n	80115a8 <__sflush_r+0xf8>
 8011562:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011566:	b21b      	sxth	r3, r3
 8011568:	e01b      	b.n	80115a2 <__sflush_r+0xf2>
 801156a:	690f      	ldr	r7, [r1, #16]
 801156c:	2f00      	cmp	r7, #0
 801156e:	d0f6      	beq.n	801155e <__sflush_r+0xae>
 8011570:	0793      	lsls	r3, r2, #30
 8011572:	680e      	ldr	r6, [r1, #0]
 8011574:	bf08      	it	eq
 8011576:	694b      	ldreq	r3, [r1, #20]
 8011578:	600f      	str	r7, [r1, #0]
 801157a:	bf18      	it	ne
 801157c:	2300      	movne	r3, #0
 801157e:	eba6 0807 	sub.w	r8, r6, r7
 8011582:	608b      	str	r3, [r1, #8]
 8011584:	f1b8 0f00 	cmp.w	r8, #0
 8011588:	dde9      	ble.n	801155e <__sflush_r+0xae>
 801158a:	6a21      	ldr	r1, [r4, #32]
 801158c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801158e:	4643      	mov	r3, r8
 8011590:	463a      	mov	r2, r7
 8011592:	4628      	mov	r0, r5
 8011594:	47b0      	blx	r6
 8011596:	2800      	cmp	r0, #0
 8011598:	dc08      	bgt.n	80115ac <__sflush_r+0xfc>
 801159a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801159e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80115a2:	81a3      	strh	r3, [r4, #12]
 80115a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80115a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80115ac:	4407      	add	r7, r0
 80115ae:	eba8 0800 	sub.w	r8, r8, r0
 80115b2:	e7e7      	b.n	8011584 <__sflush_r+0xd4>
 80115b4:	20400001 	.word	0x20400001

080115b8 <_fflush_r>:
 80115b8:	b538      	push	{r3, r4, r5, lr}
 80115ba:	690b      	ldr	r3, [r1, #16]
 80115bc:	4605      	mov	r5, r0
 80115be:	460c      	mov	r4, r1
 80115c0:	b913      	cbnz	r3, 80115c8 <_fflush_r+0x10>
 80115c2:	2500      	movs	r5, #0
 80115c4:	4628      	mov	r0, r5
 80115c6:	bd38      	pop	{r3, r4, r5, pc}
 80115c8:	b118      	cbz	r0, 80115d2 <_fflush_r+0x1a>
 80115ca:	6a03      	ldr	r3, [r0, #32]
 80115cc:	b90b      	cbnz	r3, 80115d2 <_fflush_r+0x1a>
 80115ce:	f7ff f8f7 	bl	80107c0 <__sinit>
 80115d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	d0f3      	beq.n	80115c2 <_fflush_r+0xa>
 80115da:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80115dc:	07d0      	lsls	r0, r2, #31
 80115de:	d404      	bmi.n	80115ea <_fflush_r+0x32>
 80115e0:	0599      	lsls	r1, r3, #22
 80115e2:	d402      	bmi.n	80115ea <_fflush_r+0x32>
 80115e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80115e6:	f7ff faa8 	bl	8010b3a <__retarget_lock_acquire_recursive>
 80115ea:	4628      	mov	r0, r5
 80115ec:	4621      	mov	r1, r4
 80115ee:	f7ff ff5f 	bl	80114b0 <__sflush_r>
 80115f2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80115f4:	07da      	lsls	r2, r3, #31
 80115f6:	4605      	mov	r5, r0
 80115f8:	d4e4      	bmi.n	80115c4 <_fflush_r+0xc>
 80115fa:	89a3      	ldrh	r3, [r4, #12]
 80115fc:	059b      	lsls	r3, r3, #22
 80115fe:	d4e1      	bmi.n	80115c4 <_fflush_r+0xc>
 8011600:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011602:	f7ff fa9b 	bl	8010b3c <__retarget_lock_release_recursive>
 8011606:	e7dd      	b.n	80115c4 <_fflush_r+0xc>

08011608 <fiprintf>:
 8011608:	b40e      	push	{r1, r2, r3}
 801160a:	b503      	push	{r0, r1, lr}
 801160c:	4601      	mov	r1, r0
 801160e:	ab03      	add	r3, sp, #12
 8011610:	4805      	ldr	r0, [pc, #20]	@ (8011628 <fiprintf+0x20>)
 8011612:	f853 2b04 	ldr.w	r2, [r3], #4
 8011616:	6800      	ldr	r0, [r0, #0]
 8011618:	9301      	str	r3, [sp, #4]
 801161a:	f7ff fca5 	bl	8010f68 <_vfiprintf_r>
 801161e:	b002      	add	sp, #8
 8011620:	f85d eb04 	ldr.w	lr, [sp], #4
 8011624:	b003      	add	sp, #12
 8011626:	4770      	bx	lr
 8011628:	200000c0 	.word	0x200000c0

0801162c <__swbuf_r>:
 801162c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801162e:	460e      	mov	r6, r1
 8011630:	4614      	mov	r4, r2
 8011632:	4605      	mov	r5, r0
 8011634:	b118      	cbz	r0, 801163e <__swbuf_r+0x12>
 8011636:	6a03      	ldr	r3, [r0, #32]
 8011638:	b90b      	cbnz	r3, 801163e <__swbuf_r+0x12>
 801163a:	f7ff f8c1 	bl	80107c0 <__sinit>
 801163e:	69a3      	ldr	r3, [r4, #24]
 8011640:	60a3      	str	r3, [r4, #8]
 8011642:	89a3      	ldrh	r3, [r4, #12]
 8011644:	071a      	lsls	r2, r3, #28
 8011646:	d501      	bpl.n	801164c <__swbuf_r+0x20>
 8011648:	6923      	ldr	r3, [r4, #16]
 801164a:	b943      	cbnz	r3, 801165e <__swbuf_r+0x32>
 801164c:	4621      	mov	r1, r4
 801164e:	4628      	mov	r0, r5
 8011650:	f000 f82a 	bl	80116a8 <__swsetup_r>
 8011654:	b118      	cbz	r0, 801165e <__swbuf_r+0x32>
 8011656:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801165a:	4638      	mov	r0, r7
 801165c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801165e:	6823      	ldr	r3, [r4, #0]
 8011660:	6922      	ldr	r2, [r4, #16]
 8011662:	1a98      	subs	r0, r3, r2
 8011664:	6963      	ldr	r3, [r4, #20]
 8011666:	b2f6      	uxtb	r6, r6
 8011668:	4283      	cmp	r3, r0
 801166a:	4637      	mov	r7, r6
 801166c:	dc05      	bgt.n	801167a <__swbuf_r+0x4e>
 801166e:	4621      	mov	r1, r4
 8011670:	4628      	mov	r0, r5
 8011672:	f7ff ffa1 	bl	80115b8 <_fflush_r>
 8011676:	2800      	cmp	r0, #0
 8011678:	d1ed      	bne.n	8011656 <__swbuf_r+0x2a>
 801167a:	68a3      	ldr	r3, [r4, #8]
 801167c:	3b01      	subs	r3, #1
 801167e:	60a3      	str	r3, [r4, #8]
 8011680:	6823      	ldr	r3, [r4, #0]
 8011682:	1c5a      	adds	r2, r3, #1
 8011684:	6022      	str	r2, [r4, #0]
 8011686:	701e      	strb	r6, [r3, #0]
 8011688:	6962      	ldr	r2, [r4, #20]
 801168a:	1c43      	adds	r3, r0, #1
 801168c:	429a      	cmp	r2, r3
 801168e:	d004      	beq.n	801169a <__swbuf_r+0x6e>
 8011690:	89a3      	ldrh	r3, [r4, #12]
 8011692:	07db      	lsls	r3, r3, #31
 8011694:	d5e1      	bpl.n	801165a <__swbuf_r+0x2e>
 8011696:	2e0a      	cmp	r6, #10
 8011698:	d1df      	bne.n	801165a <__swbuf_r+0x2e>
 801169a:	4621      	mov	r1, r4
 801169c:	4628      	mov	r0, r5
 801169e:	f7ff ff8b 	bl	80115b8 <_fflush_r>
 80116a2:	2800      	cmp	r0, #0
 80116a4:	d0d9      	beq.n	801165a <__swbuf_r+0x2e>
 80116a6:	e7d6      	b.n	8011656 <__swbuf_r+0x2a>

080116a8 <__swsetup_r>:
 80116a8:	b538      	push	{r3, r4, r5, lr}
 80116aa:	4b29      	ldr	r3, [pc, #164]	@ (8011750 <__swsetup_r+0xa8>)
 80116ac:	4605      	mov	r5, r0
 80116ae:	6818      	ldr	r0, [r3, #0]
 80116b0:	460c      	mov	r4, r1
 80116b2:	b118      	cbz	r0, 80116bc <__swsetup_r+0x14>
 80116b4:	6a03      	ldr	r3, [r0, #32]
 80116b6:	b90b      	cbnz	r3, 80116bc <__swsetup_r+0x14>
 80116b8:	f7ff f882 	bl	80107c0 <__sinit>
 80116bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80116c0:	0719      	lsls	r1, r3, #28
 80116c2:	d422      	bmi.n	801170a <__swsetup_r+0x62>
 80116c4:	06da      	lsls	r2, r3, #27
 80116c6:	d407      	bmi.n	80116d8 <__swsetup_r+0x30>
 80116c8:	2209      	movs	r2, #9
 80116ca:	602a      	str	r2, [r5, #0]
 80116cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80116d0:	81a3      	strh	r3, [r4, #12]
 80116d2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80116d6:	e033      	b.n	8011740 <__swsetup_r+0x98>
 80116d8:	0758      	lsls	r0, r3, #29
 80116da:	d512      	bpl.n	8011702 <__swsetup_r+0x5a>
 80116dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80116de:	b141      	cbz	r1, 80116f2 <__swsetup_r+0x4a>
 80116e0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80116e4:	4299      	cmp	r1, r3
 80116e6:	d002      	beq.n	80116ee <__swsetup_r+0x46>
 80116e8:	4628      	mov	r0, r5
 80116ea:	f7ff fa69 	bl	8010bc0 <_free_r>
 80116ee:	2300      	movs	r3, #0
 80116f0:	6363      	str	r3, [r4, #52]	@ 0x34
 80116f2:	89a3      	ldrh	r3, [r4, #12]
 80116f4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80116f8:	81a3      	strh	r3, [r4, #12]
 80116fa:	2300      	movs	r3, #0
 80116fc:	6063      	str	r3, [r4, #4]
 80116fe:	6923      	ldr	r3, [r4, #16]
 8011700:	6023      	str	r3, [r4, #0]
 8011702:	89a3      	ldrh	r3, [r4, #12]
 8011704:	f043 0308 	orr.w	r3, r3, #8
 8011708:	81a3      	strh	r3, [r4, #12]
 801170a:	6923      	ldr	r3, [r4, #16]
 801170c:	b94b      	cbnz	r3, 8011722 <__swsetup_r+0x7a>
 801170e:	89a3      	ldrh	r3, [r4, #12]
 8011710:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011714:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011718:	d003      	beq.n	8011722 <__swsetup_r+0x7a>
 801171a:	4621      	mov	r1, r4
 801171c:	4628      	mov	r0, r5
 801171e:	f000 f860 	bl	80117e2 <__smakebuf_r>
 8011722:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011726:	f013 0201 	ands.w	r2, r3, #1
 801172a:	d00a      	beq.n	8011742 <__swsetup_r+0x9a>
 801172c:	2200      	movs	r2, #0
 801172e:	60a2      	str	r2, [r4, #8]
 8011730:	6962      	ldr	r2, [r4, #20]
 8011732:	4252      	negs	r2, r2
 8011734:	61a2      	str	r2, [r4, #24]
 8011736:	6922      	ldr	r2, [r4, #16]
 8011738:	b942      	cbnz	r2, 801174c <__swsetup_r+0xa4>
 801173a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801173e:	d1c5      	bne.n	80116cc <__swsetup_r+0x24>
 8011740:	bd38      	pop	{r3, r4, r5, pc}
 8011742:	0799      	lsls	r1, r3, #30
 8011744:	bf58      	it	pl
 8011746:	6962      	ldrpl	r2, [r4, #20]
 8011748:	60a2      	str	r2, [r4, #8]
 801174a:	e7f4      	b.n	8011736 <__swsetup_r+0x8e>
 801174c:	2000      	movs	r0, #0
 801174e:	e7f7      	b.n	8011740 <__swsetup_r+0x98>
 8011750:	200000c0 	.word	0x200000c0

08011754 <memmove>:
 8011754:	4288      	cmp	r0, r1
 8011756:	b510      	push	{r4, lr}
 8011758:	eb01 0402 	add.w	r4, r1, r2
 801175c:	d902      	bls.n	8011764 <memmove+0x10>
 801175e:	4284      	cmp	r4, r0
 8011760:	4623      	mov	r3, r4
 8011762:	d807      	bhi.n	8011774 <memmove+0x20>
 8011764:	1e43      	subs	r3, r0, #1
 8011766:	42a1      	cmp	r1, r4
 8011768:	d008      	beq.n	801177c <memmove+0x28>
 801176a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801176e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011772:	e7f8      	b.n	8011766 <memmove+0x12>
 8011774:	4402      	add	r2, r0
 8011776:	4601      	mov	r1, r0
 8011778:	428a      	cmp	r2, r1
 801177a:	d100      	bne.n	801177e <memmove+0x2a>
 801177c:	bd10      	pop	{r4, pc}
 801177e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011782:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011786:	e7f7      	b.n	8011778 <memmove+0x24>

08011788 <abort>:
 8011788:	b508      	push	{r3, lr}
 801178a:	2006      	movs	r0, #6
 801178c:	f000 f88e 	bl	80118ac <raise>
 8011790:	2001      	movs	r0, #1
 8011792:	f7ef fee3 	bl	800155c <_exit>

08011796 <__swhatbuf_r>:
 8011796:	b570      	push	{r4, r5, r6, lr}
 8011798:	460c      	mov	r4, r1
 801179a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801179e:	2900      	cmp	r1, #0
 80117a0:	b096      	sub	sp, #88	@ 0x58
 80117a2:	4615      	mov	r5, r2
 80117a4:	461e      	mov	r6, r3
 80117a6:	da0d      	bge.n	80117c4 <__swhatbuf_r+0x2e>
 80117a8:	89a3      	ldrh	r3, [r4, #12]
 80117aa:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80117ae:	f04f 0100 	mov.w	r1, #0
 80117b2:	bf14      	ite	ne
 80117b4:	2340      	movne	r3, #64	@ 0x40
 80117b6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80117ba:	2000      	movs	r0, #0
 80117bc:	6031      	str	r1, [r6, #0]
 80117be:	602b      	str	r3, [r5, #0]
 80117c0:	b016      	add	sp, #88	@ 0x58
 80117c2:	bd70      	pop	{r4, r5, r6, pc}
 80117c4:	466a      	mov	r2, sp
 80117c6:	f000 f879 	bl	80118bc <_fstat_r>
 80117ca:	2800      	cmp	r0, #0
 80117cc:	dbec      	blt.n	80117a8 <__swhatbuf_r+0x12>
 80117ce:	9901      	ldr	r1, [sp, #4]
 80117d0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80117d4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80117d8:	4259      	negs	r1, r3
 80117da:	4159      	adcs	r1, r3
 80117dc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80117e0:	e7eb      	b.n	80117ba <__swhatbuf_r+0x24>

080117e2 <__smakebuf_r>:
 80117e2:	898b      	ldrh	r3, [r1, #12]
 80117e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80117e6:	079d      	lsls	r5, r3, #30
 80117e8:	4606      	mov	r6, r0
 80117ea:	460c      	mov	r4, r1
 80117ec:	d507      	bpl.n	80117fe <__smakebuf_r+0x1c>
 80117ee:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80117f2:	6023      	str	r3, [r4, #0]
 80117f4:	6123      	str	r3, [r4, #16]
 80117f6:	2301      	movs	r3, #1
 80117f8:	6163      	str	r3, [r4, #20]
 80117fa:	b003      	add	sp, #12
 80117fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80117fe:	ab01      	add	r3, sp, #4
 8011800:	466a      	mov	r2, sp
 8011802:	f7ff ffc8 	bl	8011796 <__swhatbuf_r>
 8011806:	9f00      	ldr	r7, [sp, #0]
 8011808:	4605      	mov	r5, r0
 801180a:	4639      	mov	r1, r7
 801180c:	4630      	mov	r0, r6
 801180e:	f7fe fda5 	bl	801035c <_malloc_r>
 8011812:	b948      	cbnz	r0, 8011828 <__smakebuf_r+0x46>
 8011814:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011818:	059a      	lsls	r2, r3, #22
 801181a:	d4ee      	bmi.n	80117fa <__smakebuf_r+0x18>
 801181c:	f023 0303 	bic.w	r3, r3, #3
 8011820:	f043 0302 	orr.w	r3, r3, #2
 8011824:	81a3      	strh	r3, [r4, #12]
 8011826:	e7e2      	b.n	80117ee <__smakebuf_r+0xc>
 8011828:	89a3      	ldrh	r3, [r4, #12]
 801182a:	6020      	str	r0, [r4, #0]
 801182c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011830:	81a3      	strh	r3, [r4, #12]
 8011832:	9b01      	ldr	r3, [sp, #4]
 8011834:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8011838:	b15b      	cbz	r3, 8011852 <__smakebuf_r+0x70>
 801183a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801183e:	4630      	mov	r0, r6
 8011840:	f000 f84e 	bl	80118e0 <_isatty_r>
 8011844:	b128      	cbz	r0, 8011852 <__smakebuf_r+0x70>
 8011846:	89a3      	ldrh	r3, [r4, #12]
 8011848:	f023 0303 	bic.w	r3, r3, #3
 801184c:	f043 0301 	orr.w	r3, r3, #1
 8011850:	81a3      	strh	r3, [r4, #12]
 8011852:	89a3      	ldrh	r3, [r4, #12]
 8011854:	431d      	orrs	r5, r3
 8011856:	81a5      	strh	r5, [r4, #12]
 8011858:	e7cf      	b.n	80117fa <__smakebuf_r+0x18>

0801185a <_raise_r>:
 801185a:	291f      	cmp	r1, #31
 801185c:	b538      	push	{r3, r4, r5, lr}
 801185e:	4605      	mov	r5, r0
 8011860:	460c      	mov	r4, r1
 8011862:	d904      	bls.n	801186e <_raise_r+0x14>
 8011864:	2316      	movs	r3, #22
 8011866:	6003      	str	r3, [r0, #0]
 8011868:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801186c:	bd38      	pop	{r3, r4, r5, pc}
 801186e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8011870:	b112      	cbz	r2, 8011878 <_raise_r+0x1e>
 8011872:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011876:	b94b      	cbnz	r3, 801188c <_raise_r+0x32>
 8011878:	4628      	mov	r0, r5
 801187a:	f000 f853 	bl	8011924 <_getpid_r>
 801187e:	4622      	mov	r2, r4
 8011880:	4601      	mov	r1, r0
 8011882:	4628      	mov	r0, r5
 8011884:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011888:	f000 b83a 	b.w	8011900 <_kill_r>
 801188c:	2b01      	cmp	r3, #1
 801188e:	d00a      	beq.n	80118a6 <_raise_r+0x4c>
 8011890:	1c59      	adds	r1, r3, #1
 8011892:	d103      	bne.n	801189c <_raise_r+0x42>
 8011894:	2316      	movs	r3, #22
 8011896:	6003      	str	r3, [r0, #0]
 8011898:	2001      	movs	r0, #1
 801189a:	e7e7      	b.n	801186c <_raise_r+0x12>
 801189c:	2100      	movs	r1, #0
 801189e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80118a2:	4620      	mov	r0, r4
 80118a4:	4798      	blx	r3
 80118a6:	2000      	movs	r0, #0
 80118a8:	e7e0      	b.n	801186c <_raise_r+0x12>
	...

080118ac <raise>:
 80118ac:	4b02      	ldr	r3, [pc, #8]	@ (80118b8 <raise+0xc>)
 80118ae:	4601      	mov	r1, r0
 80118b0:	6818      	ldr	r0, [r3, #0]
 80118b2:	f7ff bfd2 	b.w	801185a <_raise_r>
 80118b6:	bf00      	nop
 80118b8:	200000c0 	.word	0x200000c0

080118bc <_fstat_r>:
 80118bc:	b538      	push	{r3, r4, r5, lr}
 80118be:	4d07      	ldr	r5, [pc, #28]	@ (80118dc <_fstat_r+0x20>)
 80118c0:	2300      	movs	r3, #0
 80118c2:	4604      	mov	r4, r0
 80118c4:	4608      	mov	r0, r1
 80118c6:	4611      	mov	r1, r2
 80118c8:	602b      	str	r3, [r5, #0]
 80118ca:	f7ef fe97 	bl	80015fc <_fstat>
 80118ce:	1c43      	adds	r3, r0, #1
 80118d0:	d102      	bne.n	80118d8 <_fstat_r+0x1c>
 80118d2:	682b      	ldr	r3, [r5, #0]
 80118d4:	b103      	cbz	r3, 80118d8 <_fstat_r+0x1c>
 80118d6:	6023      	str	r3, [r4, #0]
 80118d8:	bd38      	pop	{r3, r4, r5, pc}
 80118da:	bf00      	nop
 80118dc:	2000dc54 	.word	0x2000dc54

080118e0 <_isatty_r>:
 80118e0:	b538      	push	{r3, r4, r5, lr}
 80118e2:	4d06      	ldr	r5, [pc, #24]	@ (80118fc <_isatty_r+0x1c>)
 80118e4:	2300      	movs	r3, #0
 80118e6:	4604      	mov	r4, r0
 80118e8:	4608      	mov	r0, r1
 80118ea:	602b      	str	r3, [r5, #0]
 80118ec:	f7ef fe96 	bl	800161c <_isatty>
 80118f0:	1c43      	adds	r3, r0, #1
 80118f2:	d102      	bne.n	80118fa <_isatty_r+0x1a>
 80118f4:	682b      	ldr	r3, [r5, #0]
 80118f6:	b103      	cbz	r3, 80118fa <_isatty_r+0x1a>
 80118f8:	6023      	str	r3, [r4, #0]
 80118fa:	bd38      	pop	{r3, r4, r5, pc}
 80118fc:	2000dc54 	.word	0x2000dc54

08011900 <_kill_r>:
 8011900:	b538      	push	{r3, r4, r5, lr}
 8011902:	4d07      	ldr	r5, [pc, #28]	@ (8011920 <_kill_r+0x20>)
 8011904:	2300      	movs	r3, #0
 8011906:	4604      	mov	r4, r0
 8011908:	4608      	mov	r0, r1
 801190a:	4611      	mov	r1, r2
 801190c:	602b      	str	r3, [r5, #0]
 801190e:	f7ef fe15 	bl	800153c <_kill>
 8011912:	1c43      	adds	r3, r0, #1
 8011914:	d102      	bne.n	801191c <_kill_r+0x1c>
 8011916:	682b      	ldr	r3, [r5, #0]
 8011918:	b103      	cbz	r3, 801191c <_kill_r+0x1c>
 801191a:	6023      	str	r3, [r4, #0]
 801191c:	bd38      	pop	{r3, r4, r5, pc}
 801191e:	bf00      	nop
 8011920:	2000dc54 	.word	0x2000dc54

08011924 <_getpid_r>:
 8011924:	f7ef be02 	b.w	800152c <_getpid>

08011928 <_init>:
 8011928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801192a:	bf00      	nop
 801192c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801192e:	bc08      	pop	{r3}
 8011930:	469e      	mov	lr, r3
 8011932:	4770      	bx	lr

08011934 <_fini>:
 8011934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011936:	bf00      	nop
 8011938:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801193a:	bc08      	pop	{r3}
 801193c:	469e      	mov	lr, r3
 801193e:	4770      	bx	lr
